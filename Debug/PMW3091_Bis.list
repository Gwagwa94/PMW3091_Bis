
PMW3091_Bis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c7c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  0800c958  0800c958  0001c958  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cebc  0800cebc  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800cebc  0800cebc  0001cebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cec4  0800cec4  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cec4  0800cec4  0001cec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cec8  0800cec8  0001cec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800cecc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005f4  200001ec  0800d0b8  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  0800d0b8  000207e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016731  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d49  00000000  00000000  0003694d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c0  00000000  00000000  00039698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001298  00000000  00000000  0003aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023194  00000000  00000000  0003bcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016cd7  00000000  00000000  0005ee84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2477  00000000  00000000  00075b5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00147fd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068fc  00000000  00000000  00148024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c940 	.word	0x0800c940

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800c940 	.word	0x0800c940

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_CAN_RxFifo0MsgPendingCallback>:
    HAL_CAN_Start(hcan); // Démarrer le périphérique CAN
    HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING); // Activer le mode interruption
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b098      	sub	sp, #96	; 0x60
 8000ffc:	af06      	add	r7, sp, #24
 8000ffe:	6078      	str	r0, [r7, #4]
	uint8_t RxData[8];
	CAN_RxHeaderTypeDef RxHeader;
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8001000:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001004:	f107 0220 	add.w	r2, r7, #32
 8001008:	2100      	movs	r1, #0
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f001 fb37 	bl	800267e <HAL_CAN_GetRxMessage>

	can_mess_t msg;
    int status = format_frame(&msg, RxHeader, RxData);
 8001010:	f107 0508 	add.w	r5, r7, #8
 8001014:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001018:	9304      	str	r3, [sp, #16]
 800101a:	466c      	mov	r4, sp
 800101c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001020:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001022:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001026:	f107 0320 	add.w	r3, r7, #32
 800102a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800102c:	4628      	mov	r0, r5
 800102e:	f000 f807 	bl	8001040 <format_frame>
 8001032:	6478      	str	r0, [r7, #68]	; 0x44

    if (status != 0)
 8001034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001036:	2b00      	cmp	r3, #0
        return;
 8001038:	bf00      	nop

    switch (msg.fct_code) {
        default:
            break;
    }
}
 800103a:	3748      	adds	r7, #72	; 0x48
 800103c:	46bd      	mov	sp, r7
 800103e:	bdb0      	pop	{r4, r5, r7, pc}

08001040 <format_frame>:


int format_frame(can_mess_t *rep, CAN_RxHeaderTypeDef frame, const uint8_t data[]){
 8001040:	b084      	sub	sp, #16
 8001042:	b480      	push	{r7}
 8001044:	b085      	sub	sp, #20
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
 800104a:	f107 001c 	add.w	r0, r7, #28
 800104e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    rep->recv_addr = (frame.ExtId & CAN_FILTER_ADDR_EMETTEUR);
 8001052:	6a3b      	ldr	r3, [r7, #32]
 8001054:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	601a      	str	r2, [r3, #0]
    rep->emit_addr = (frame.ExtId & CAN_FILTER_ADDR_RECEPTEUR);
 800105c:	6a3b      	ldr	r3, [r7, #32]
 800105e:	f403 0270 	and.w	r2, r3, #15728640	; 0xf00000
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	605a      	str	r2, [r3, #4]
    rep->fct_code = (frame.ExtId & CAN_FILTER_CODE_FCT);
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	f403 227f 	and.w	r2, r3, #1044480	; 0xff000
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	609a      	str	r2, [r3, #8]
    rep->is_rep = (frame.ExtId & CAN_FILTER_IS_REP) >> CAN_DECALAGE_IS_REP;
 8001070:	6a3b      	ldr	r3, [r7, #32]
 8001072:	08db      	lsrs	r3, r3, #3
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	bf14      	ite	ne
 800107c:	2301      	movne	r3, #1
 800107e:	2300      	moveq	r3, #0
 8001080:	b2da      	uxtb	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	735a      	strb	r2, [r3, #13]
    rep->rep_id = (frame.ExtId & CAN_FILTER_REP_NBR);
 8001086:	6a3b      	ldr	r3, [r7, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	f003 0307 	and.w	r3, r3, #7
 800108e:	b2da      	uxtb	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	739a      	strb	r2, [r3, #14]
    rep->message_id = (frame.ExtId & CAN_FILTER_IDE_MSG) >> CAN_DECALAGE_ID_MSG;
 8001094:	6a3b      	ldr	r3, [r7, #32]
 8001096:	091b      	lsrs	r3, r3, #4
 8001098:	b2da      	uxtb	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	731a      	strb	r2, [r3, #12]

    if(rep->recv_addr < 0 || rep->recv_addr > CAN_MAX_VALUE_ADDR) return CAN_E_OOB_ADDR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d902      	bls.n	80010ac <format_frame+0x6c>
 80010a6:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 80010aa:	e02a      	b.n	8001102 <format_frame+0xc2>
    if(rep->fct_code < 0 || rep->fct_code > CAN_MAX_VALUE_CODE_FCT) return CAN_E_OOB_CODE_FCT;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	2b80      	cmp	r3, #128	; 0x80
 80010b2:	d901      	bls.n	80010b8 <format_frame+0x78>
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <format_frame+0xd0>)
 80010b6:	e024      	b.n	8001102 <format_frame+0xc2>
    if(rep->rep_id < 0 || rep->rep_id > CAN_MAX_VALUE_REP_NBR) return CAN_E_OOB_REP_NBR;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	7b9b      	ldrb	r3, [r3, #14]
 80010bc:	2b08      	cmp	r3, #8
 80010be:	d902      	bls.n	80010c6 <format_frame+0x86>
 80010c0:	f46f 7300 	mvn.w	r3, #512	; 0x200
 80010c4:	e01d      	b.n	8001102 <format_frame+0xc2>
    if (frame.DLC > 8) return CAN_E_DATA_SIZE_TOO_LONG;
 80010c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c8:	2b08      	cmp	r3, #8
 80010ca:	d901      	bls.n	80010d0 <format_frame+0x90>
 80010cc:	4b11      	ldr	r3, [pc, #68]	; (8001114 <format_frame+0xd4>)
 80010ce:	e018      	b.n	8001102 <format_frame+0xc2>

    rep->data_len = frame.DLC;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	73da      	strb	r2, [r3, #15]

    for (int i = 0; i < frame.DLC; i++){
 80010d8:	2300      	movs	r3, #0
 80010da:	60fb      	str	r3, [r7, #12]
 80010dc:	e00c      	b.n	80010f8 <format_frame+0xb8>
        if(data[i] <0 || data[i] > 255)
            return CAN_E_OOB_DATA;

        rep->data[i] = data[i];
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80010e2:	4413      	add	r3, r2
 80010e4:	7819      	ldrb	r1, [r3, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	4413      	add	r3, r2
 80010ec:	3310      	adds	r3, #16
 80010ee:	460a      	mov	r2, r1
 80010f0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < frame.DLC; i++){
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	3301      	adds	r3, #1
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d8ee      	bhi.n	80010de <format_frame+0x9e>
    }

    return 0;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3714      	adds	r7, #20
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	b004      	add	sp, #16
 800110e:	4770      	bx	lr
 8001110:	fffffe00 	.word	0xfffffe00
 8001114:	fffffe02 	.word	0xfffffe02

08001118 <send>:


int send(CAN_HandleTypeDef *hcan, CAN_ADDR addr, CAN_FCT_CODE fct_code, uint8_t data[], uint8_t data_len, bool is_rep, uint8_t rep_len, uint8_t msg_id) {
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
	if (data_len > 8)
 8001126:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800112a:	2b08      	cmp	r3, #8
 800112c:	d901      	bls.n	8001132 <send+0x1a>
		return CAN_E_DATA_SIZE_TOO_LONG;
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <send+0x94>)
 8001130:	e038      	b.n	80011a4 <send+0x8c>

	if (addr > CAN_MAX_VALUE_ADDR) return CAN_E_OOB_ADDR;
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b10      	cmp	r3, #16
 8001136:	d902      	bls.n	800113e <send+0x26>
 8001138:	f46f 73ff 	mvn.w	r3, #510	; 0x1fe
 800113c:	e032      	b.n	80011a4 <send+0x8c>
	if (fct_code > CAN_MAX_VALUE_CODE_FCT) return CAN_E_OOB_CODE_FCT;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	2b80      	cmp	r3, #128	; 0x80
 8001142:	d901      	bls.n	8001148 <send+0x30>
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <send+0x98>)
 8001146:	e02d      	b.n	80011a4 <send+0x8c>
	if(rep_len < 0 || rep_len > CAN_MAX_VALUE_REP_NBR) return CAN_E_OOB_REP_NBR;
 8001148:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800114c:	2b08      	cmp	r3, #8
 800114e:	d902      	bls.n	8001156 <send+0x3e>
 8001150:	f46f 7300 	mvn.w	r3, #512	; 0x200
 8001154:	e026      	b.n	80011a4 <send+0x8c>

	CAN_TxHeaderTypeDef txHeader;
	txHeader.DLC = data_len;
 8001156:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
	txHeader.ExtId = addr | CAN_ADDR_BASE_ROULANTE_E | fct_code | rep_len | msg_id << CAN_DECALAGE_ID_MSG | is_rep << CAN_DECALAGE_IS_REP | rep_len;
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	431a      	orrs	r2, r3
 8001162:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001166:	4313      	orrs	r3, r2
 8001168:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 800116c:	0112      	lsls	r2, r2, #4
 800116e:	4313      	orrs	r3, r2
 8001170:	f897 203c 	ldrb.w	r2, [r7, #60]	; 0x3c
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	431a      	orrs	r2, r3
 8001178:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800117c:	4313      	orrs	r3, r2
 800117e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001182:	61fb      	str	r3, [r7, #28]
	txHeader.IDE = CAN_ID_EXT;
 8001184:	2304      	movs	r3, #4
 8001186:	623b      	str	r3, [r7, #32]
	txHeader.RTR = CAN_RTR_DATA;
 8001188:	2300      	movs	r3, #0
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
	txHeader.TransmitGlobalTime = DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	uint32_t TxMailbox;
	HAL_CAN_AddTxMessage(hcan, &txHeader, data, &TxMailbox);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	f107 0118 	add.w	r1, r7, #24
 800119a:	683a      	ldr	r2, [r7, #0]
 800119c:	68f8      	ldr	r0, [r7, #12]
 800119e:	f001 f99e 	bl	80024de <HAL_CAN_AddTxMessage>

	return 0;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3730      	adds	r7, #48	; 0x30
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	fffffe02 	.word	0xfffffe02
 80011b0:	fffffe00 	.word	0xfffffe00

080011b4 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 80011bc:	2100      	movs	r1, #0
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f004 fdce 	bl	8005d60 <HAL_TIM_PWM_Stop_DMA>
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <NEOPIXELS_SETUP>:

void NEOPIXELS_SETUP(PixelRGB_t pixel[], uint32_t *dmaBuffer, uint32_t *pBuff, int numPixelsOn, int k, int modulo, int color[], int intensity)
{
 80011cc:	b480      	push	{r7}
 80011ce:	b089      	sub	sp, #36	; 0x24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
	for (int i = (NUM_PIXELS - 1); i > 0; i--)
 80011da:	230b      	movs	r3, #11
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	e00f      	b.n	8001200 <NEOPIXELS_SETUP+0x34>
	{
		pixel[i].data = pixel[i-1].data;
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011e6:	3b01      	subs	r3, #1
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	441a      	add	r2, r3
 80011ee:	69fb      	ldr	r3, [r7, #28]
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	68f9      	ldr	r1, [r7, #12]
 80011f4:	440b      	add	r3, r1
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	601a      	str	r2, [r3, #0]
	for (int i = (NUM_PIXELS - 1); i > 0; i--)
 80011fa:	69fb      	ldr	r3, [r7, #28]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	61fb      	str	r3, [r7, #28]
 8001200:	69fb      	ldr	r3, [r7, #28]
 8001202:	2b00      	cmp	r3, #0
 8001204:	dcec      	bgt.n	80011e0 <NEOPIXELS_SETUP+0x14>
	}

	if((k % modulo) != 0)
 8001206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001208:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800120a:	fb93 f2f2 	sdiv	r2, r3, r2
 800120e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001210:	fb01 f202 	mul.w	r2, r1, r2
 8001214:	1a9b      	subs	r3, r3, r2
 8001216:	2b00      	cmp	r3, #0
 8001218:	d009      	beq.n	800122e <NEOPIXELS_SETUP+0x62>
	{
		pixel[0].color.r = 0;
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	2200      	movs	r2, #0
 800121e:	705a      	strb	r2, [r3, #1]
		pixel[0].color.g = 0;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2200      	movs	r2, #0
 8001224:	709a      	strb	r2, [r3, #2]
		pixel[0].color.b = 0;
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
 800122c:	e010      	b.n	8001250 <NEOPIXELS_SETUP+0x84>
	}

	else
	{
		pixel[0].color.r = color[0];
 800122e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	b2da      	uxtb	r2, r3
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	705a      	strb	r2, [r3, #1]
		pixel[0].color.g = color[1];
 8001238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800123a:	3304      	adds	r3, #4
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	709a      	strb	r2, [r3, #2]
		pixel[0].color.b = color[2];
 8001244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001246:	3308      	adds	r3, #8
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	701a      	strb	r2, [r3, #0]
	}

	pixel[0].color.g >>= intensity;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	789b      	ldrb	r3, [r3, #2]
 8001254:	461a      	mov	r2, r3
 8001256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001258:	fa42 f303 	asr.w	r3, r2, r3
 800125c:	b2da      	uxtb	r2, r3
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	709a      	strb	r2, [r3, #2]
	pixel[0].color.r >>= intensity;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	785b      	ldrb	r3, [r3, #1]
 8001266:	461a      	mov	r2, r3
 8001268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800126a:	fa42 f303 	asr.w	r3, r2, r3
 800126e:	b2da      	uxtb	r2, r3
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	705a      	strb	r2, [r3, #1]
	pixel[0].color.b >>= intensity;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800127c:	fa42 f303 	asr.w	r3, r2, r3
 8001280:	b2da      	uxtb	r2, r3
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	701a      	strb	r2, [r3, #0]

	pBuff = dmaBuffer;
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < numPixelsOn; i++)
 800128a:	2300      	movs	r3, #0
 800128c:	61bb      	str	r3, [r7, #24]
 800128e:	e02b      	b.n	80012e8 <NEOPIXELS_SETUP+0x11c>
	{
		for (int j = 23; j >= 0; j--)
 8001290:	2317      	movs	r3, #23
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e022      	b.n	80012dc <NEOPIXELS_SETUP+0x110>
	    {
			if (((pixel[i].data >> j) & 0x01) && ((k % modulo) == 0))
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	009b      	lsls	r3, r3, #2
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	4413      	add	r3, r2
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa22 f303 	lsr.w	r3, r2, r3
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00d      	beq.n	80012ca <NEOPIXELS_SETUP+0xfe>
 80012ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012b2:	fb93 f2f2 	sdiv	r2, r3, r2
 80012b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80012b8:	fb01 f202 	mul.w	r2, r1, r2
 80012bc:	1a9b      	subs	r3, r3, r2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d103      	bne.n	80012ca <NEOPIXELS_SETUP+0xfe>
	        {
				*pBuff = NEOPIXEL_ONE;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	223d      	movs	r2, #61	; 0x3d
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	e002      	b.n	80012d0 <NEOPIXELS_SETUP+0x104>
	        }
	        else
	        {
	        	*pBuff = NEOPIXEL_ZERO;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	221f      	movs	r2, #31
 80012ce:	601a      	str	r2, [r3, #0]
	        }
	        pBuff++;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3304      	adds	r3, #4
 80012d4:	607b      	str	r3, [r7, #4]
		for (int j = 23; j >= 0; j--)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3b01      	subs	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	dad9      	bge.n	8001296 <NEOPIXELS_SETUP+0xca>
	for (int i = 0; i < numPixelsOn; i++)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	dbcf      	blt.n	8001290 <NEOPIXELS_SETUP+0xc4>
	     }
	 }
	 dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
}
 80012fa:	bf00      	nop
 80012fc:	3724      	adds	r7, #36	; 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001308:	b5b0      	push	{r4, r5, r7, lr}
 800130a:	f5ad 6da2 	sub.w	sp, sp, #1296	; 0x510
 800130e:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	PixelRGB_t pixel[NUM_PIXELS] = {0};
 8001310:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 8001314:	2230      	movs	r2, #48	; 0x30
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f006 fe99 	bl	8008050 <memset>
	  uint32_t dmaBuffer[DMA_BUFF_SIZE] = {0};
 800131e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001322:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 8001326:	4618      	mov	r0, r3
 8001328:	f240 4384 	movw	r3, #1156	; 0x484
 800132c:	461a      	mov	r2, r3
 800132e:	2100      	movs	r1, #0
 8001330:	f006 fe8e 	bl	8008050 <memset>
	  uint32_t *pBuff = NULL;
 8001334:	2300      	movs	r3, #0
 8001336:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
	  int k, modulo, numPixelsOff = 0, numPixelsOn;
 800133a:	2300      	movs	r3, #0
 800133c:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f000 ff39 	bl	80021b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f9ea 	bl	800171c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 fbb8 	bl	8001abc <MX_GPIO_Init>
  MX_DMA_Init();
 800134c:	f000 fb98 	bl	8001a80 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001350:	f000 fb66 	bl	8001a20 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001354:	f000 fa7a 	bl	800184c <MX_SPI1_Init>
  MX_TIM1_Init();
 8001358:	f000 fab6 	bl	80018c8 <MX_TIM1_Init>
  MX_CAN1_Init();
 800135c:	f000 fa40 	bl	80017e0 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  Tx_len = sprintf (buffer, "init\r\n"); // Début initialisation + écriture de "init"
 8001360:	4956      	ldr	r1, [pc, #344]	; (80014bc <main+0x1b4>)
 8001362:	4857      	ldr	r0, [pc, #348]	; (80014c0 <main+0x1b8>)
 8001364:	f007 fcfc 	bl	8008d60 <siprintf>
 8001368:	4603      	mov	r3, r0
 800136a:	b29a      	uxth	r2, r3
 800136c:	4b55      	ldr	r3, [pc, #340]	; (80014c4 <main+0x1bc>)
 800136e:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*) buffer, Tx_len, 100); // Permet d'écrire en uart le tx_len : Va écrire dans le terminal ; "init"
 8001370:	4b54      	ldr	r3, [pc, #336]	; (80014c4 <main+0x1bc>)
 8001372:	881a      	ldrh	r2, [r3, #0]
 8001374:	2364      	movs	r3, #100	; 0x64
 8001376:	4952      	ldr	r1, [pc, #328]	; (80014c0 <main+0x1b8>)
 8001378:	4853      	ldr	r0, [pc, #332]	; (80014c8 <main+0x1c0>)
 800137a:	f005 fd69 	bl	8006e50 <HAL_UART_Transmit>

  status = PMW3901_Init(&PMW3901_Descriptor); // Permet d'initialiser le capteur optique
 800137e:	4853      	ldr	r0, [pc, #332]	; (80014cc <main+0x1c4>)
 8001380:	f006 fa80 	bl	8007884 <PMW3901_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b51      	ldr	r3, [pc, #324]	; (80014d0 <main+0x1c8>)
 800138a:	701a      	strb	r2, [r3, #0]

  Tx_len = sprintf (buffer, "init status = %d\r\n",status); // Permet d'afficher status qui s'il est égal à 0 veut dire que tout fonctionne
 800138c:	4b50      	ldr	r3, [pc, #320]	; (80014d0 <main+0x1c8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	461a      	mov	r2, r3
 8001392:	4950      	ldr	r1, [pc, #320]	; (80014d4 <main+0x1cc>)
 8001394:	484a      	ldr	r0, [pc, #296]	; (80014c0 <main+0x1b8>)
 8001396:	f007 fce3 	bl	8008d60 <siprintf>
 800139a:	4603      	mov	r3, r0
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b49      	ldr	r3, [pc, #292]	; (80014c4 <main+0x1bc>)
 80013a0:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100); // Permet d'écrire dans le terminal : "init status = " avec le status qui doit être à 0 indiquant que tout fonctionne
 80013a2:	4b48      	ldr	r3, [pc, #288]	; (80014c4 <main+0x1bc>)
 80013a4:	881a      	ldrh	r2, [r3, #0]
 80013a6:	2364      	movs	r3, #100	; 0x64
 80013a8:	4945      	ldr	r1, [pc, #276]	; (80014c0 <main+0x1b8>)
 80013aa:	4847      	ldr	r0, [pc, #284]	; (80014c8 <main+0x1c0>)
 80013ac:	f005 fd50 	bl	8006e50 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  numPixelsOn = NUM_PIXELS - numPixelsOff;
 80013b0:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 80013b4:	f1c3 030c 	rsb	r3, r3, #12
 80013b8:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8

    modulo = 2;
 80013bc:	2302      	movs	r3, #2
 80013be:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
    for(int m = 0; m < numPixelsOn; m++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 80013c8:	e02c      	b.n	8001424 <main+0x11c>
    {
    	  NEOPIXELS_SETUP(pixel, dmaBuffer, pBuff, numPixelsOn, m, modulo, COLOR_YELLOW, INTENSITY_LOW);
 80013ca:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80013ce:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 80013d2:	4a41      	ldr	r2, [pc, #260]	; (80014d8 <main+0x1d0>)
 80013d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80013da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80013de:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 80013e2:	2306      	movs	r3, #6
 80013e4:	9303      	str	r3, [sp, #12]
 80013e6:	f107 0320 	add.w	r3, r7, #32
 80013ea:	9302      	str	r3, [sp, #8]
 80013ec:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 80013f6:	9300      	str	r3, [sp, #0]
 80013f8:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 80013fc:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	; 0x4f0
 8001400:	f7ff fee4 	bl	80011cc <NEOPIXELS_SETUP>
    	  HAL_Delay(100);
 8001404:	2064      	movs	r0, #100	; 0x64
 8001406:	f000 ff4b 	bl	80022a0 <HAL_Delay>
    	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
 800140a:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800140e:	f240 1321 	movw	r3, #289	; 0x121
 8001412:	2100      	movs	r1, #0
 8001414:	4831      	ldr	r0, [pc, #196]	; (80014dc <main+0x1d4>)
 8001416:	f004 faab 	bl	8005970 <HAL_TIM_PWM_Start_DMA>
    for(int m = 0; m < numPixelsOn; m++)
 800141a:	f8d7 34fc 	ldr.w	r3, [r7, #1276]	; 0x4fc
 800141e:	3301      	adds	r3, #1
 8001420:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8001424:	f8d7 24fc 	ldr.w	r2, [r7, #1276]	; 0x4fc
 8001428:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 800142c:	429a      	cmp	r2, r3
 800142e:	dbcc      	blt.n	80013ca <main+0xc2>
    }
    HAL_Delay(1000);
 8001430:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001434:	f000 ff34 	bl	80022a0 <HAL_Delay>

    k = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
    modulo = 1;
 800143e:	2301      	movs	r3, #1
 8001440:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
    for(int m = 0; m < numPixelsOn; m++){
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 800144a:	e029      	b.n	80014a0 <main+0x198>
		NEOPIXELS_SETUP(pixel, dmaBuffer, pBuff, numPixelsOn, k, modulo, COLOR_WHITE, INTENSITY_LOW);
 800144c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001450:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8001454:	4a22      	ldr	r2, [pc, #136]	; (80014e0 <main+0x1d8>)
 8001456:	ca07      	ldmia	r2, {r0, r1, r2}
 8001458:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800145c:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8001460:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 8001464:	2306      	movs	r3, #6
 8001466:	9303      	str	r3, [sp, #12]
 8001468:	f107 0314 	add.w	r3, r7, #20
 800146c:	9302      	str	r3, [sp, #8]
 800146e:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 800147e:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	; 0x4f0
 8001482:	f7ff fea3 	bl	80011cc <NEOPIXELS_SETUP>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
 8001486:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800148a:	f240 1321 	movw	r3, #289	; 0x121
 800148e:	2100      	movs	r1, #0
 8001490:	4812      	ldr	r0, [pc, #72]	; (80014dc <main+0x1d4>)
 8001492:	f004 fa6d 	bl	8005970 <HAL_TIM_PWM_Start_DMA>
    for(int m = 0; m < numPixelsOn; m++){
 8001496:	f8d7 34f8 	ldr.w	r3, [r7, #1272]	; 0x4f8
 800149a:	3301      	adds	r3, #1
 800149c:	f8c7 34f8 	str.w	r3, [r7, #1272]	; 0x4f8
 80014a0:	f8d7 24f8 	ldr.w	r2, [r7, #1272]	; 0x4f8
 80014a4:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbcf      	blt.n	800144c <main+0x144>
    }
    HAL_Delay(500);
 80014ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80014b0:	f000 fef6 	bl	80022a0 <HAL_Delay>
  while (1)
  {
	  for(int m = 0; m < numPixelsOn; m++){
 80014b4:	2300      	movs	r3, #0
 80014b6:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 80014ba:	e03c      	b.n	8001536 <main+0x22e>
 80014bc:	0800c958 	.word	0x0800c958
 80014c0:	200003ac 	.word	0x200003ac
 80014c4:	200007ac 	.word	0x200007ac
 80014c8:	20000328 	.word	0x20000328
 80014cc:	20000000 	.word	0x20000000
 80014d0:	200007ae 	.word	0x200007ae
 80014d4:	0800c960 	.word	0x0800c960
 80014d8:	0800c9b8 	.word	0x0800c9b8
 80014dc:	20000294 	.word	0x20000294
 80014e0:	0800c9c4 	.word	0x0800c9c4
	  		NEOPIXELS_SETUP(pixel, dmaBuffer, pBuff, numPixelsOn, k, modulo, COLOR_WHITE, INTENSITY_LOW);
 80014e4:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 80014e8:	f2a3 43fc 	subw	r3, r3, #1276	; 0x4fc
 80014ec:	4a7b      	ldr	r2, [pc, #492]	; (80016dc <main+0x3d4>)
 80014ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80014f4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80014f8:	f507 6096 	add.w	r0, r7, #1200	; 0x4b0
 80014fc:	2306      	movs	r3, #6
 80014fe:	9303      	str	r3, [sp, #12]
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	9302      	str	r3, [sp, #8]
 8001504:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 8001514:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	; 0x4f0
 8001518:	f7ff fe58 	bl	80011cc <NEOPIXELS_SETUP>
	  		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
 800151c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001520:	f240 1321 	movw	r3, #289	; 0x121
 8001524:	2100      	movs	r1, #0
 8001526:	486e      	ldr	r0, [pc, #440]	; (80016e0 <main+0x3d8>)
 8001528:	f004 fa22 	bl	8005970 <HAL_TIM_PWM_Start_DMA>
	  for(int m = 0; m < numPixelsOn; m++){
 800152c:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8001530:	3301      	adds	r3, #1
 8001532:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8001536:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	; 0x4f4
 800153a:	f8d7 34e8 	ldr.w	r3, [r7, #1256]	; 0x4e8
 800153e:	429a      	cmp	r2, r3
 8001540:	dbd0      	blt.n	80014e4 <main+0x1dc>
	      }
	      HAL_Delay(500);
 8001542:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001546:	f000 feab 	bl	80022a0 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  status = PMW3901_Read_Variation(&var_x, &var_y); // Permet de lire les valeurs de var_x et var_y
 800154a:	4966      	ldr	r1, [pc, #408]	; (80016e4 <main+0x3dc>)
 800154c:	4866      	ldr	r0, [pc, #408]	; (80016e8 <main+0x3e0>)
 800154e:	f006 fcff 	bl	8007f50 <PMW3901_Read_Variation>
 8001552:	4603      	mov	r3, r0
 8001554:	461a      	mov	r2, r3
 8001556:	4b65      	ldr	r3, [pc, #404]	; (80016ec <main+0x3e4>)
 8001558:	701a      	strb	r2, [r3, #0]

	  dx = COEF_CAPTEUR_Petit_Robot_X * var_x;
 800155a:	4b63      	ldr	r3, [pc, #396]	; (80016e8 <main+0x3e0>)
 800155c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001560:	4618      	mov	r0, r3
 8001562:	f7fe ffdf 	bl	8000524 <__aeabi_i2d>
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	4b61      	ldr	r3, [pc, #388]	; (80016f0 <main+0x3e8>)
 800156c:	f7ff f844 	bl	80005f8 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4610      	mov	r0, r2
 8001576:	4619      	mov	r1, r3
 8001578:	f7ff fb36 	bl	8000be8 <__aeabi_d2f>
 800157c:	4603      	mov	r3, r0
 800157e:	4a5d      	ldr	r2, [pc, #372]	; (80016f4 <main+0x3ec>)
 8001580:	6013      	str	r3, [r2, #0]
	  posX = posX + dx; // Permet de déterminer la position du robot grâce au capteur optique en X
 8001582:	4b5d      	ldr	r3, [pc, #372]	; (80016f8 <main+0x3f0>)
 8001584:	ed93 7a00 	vldr	s14, [r3]
 8001588:	4b5a      	ldr	r3, [pc, #360]	; (80016f4 <main+0x3ec>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001592:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <main+0x3f0>)
 8001594:	edc3 7a00 	vstr	s15, [r3]

	  dy = COEF_CAPTEUR_Petit_Robot_Y * var_y;
 8001598:	4b52      	ldr	r3, [pc, #328]	; (80016e4 <main+0x3dc>)
 800159a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffc0 	bl	8000524 <__aeabi_i2d>
 80015a4:	f04f 0200 	mov.w	r2, #0
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <main+0x3e8>)
 80015aa:	f7ff f825 	bl	80005f8 <__aeabi_dmul>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f7ff fb17 	bl	8000be8 <__aeabi_d2f>
 80015ba:	4603      	mov	r3, r0
 80015bc:	4a4f      	ldr	r2, [pc, #316]	; (80016fc <main+0x3f4>)
 80015be:	6013      	str	r3, [r2, #0]
	  posY = posY + dy; // Permet de déterminer la position du robot grâce au capteur optique en Y
 80015c0:	4b4f      	ldr	r3, [pc, #316]	; (8001700 <main+0x3f8>)
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	4b4d      	ldr	r3, [pc, #308]	; (80016fc <main+0x3f4>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <main+0x3f8>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]

	  Tx_len = sprintf (buffer, "Position x = %f\tPosition y = %f\tStatus = %d\r\n",posX,posY,status);
 80015d6:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <main+0x3f0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ffb4 	bl	8000548 <__aeabi_f2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	4b46      	ldr	r3, [pc, #280]	; (8001700 <main+0x3f8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffad 	bl	8000548 <__aeabi_f2d>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	493e      	ldr	r1, [pc, #248]	; (80016ec <main+0x3e4>)
 80015f4:	7809      	ldrb	r1, [r1, #0]
 80015f6:	9102      	str	r1, [sp, #8]
 80015f8:	e9cd 2300 	strd	r2, r3, [sp]
 80015fc:	4622      	mov	r2, r4
 80015fe:	462b      	mov	r3, r5
 8001600:	4940      	ldr	r1, [pc, #256]	; (8001704 <main+0x3fc>)
 8001602:	4841      	ldr	r0, [pc, #260]	; (8001708 <main+0x400>)
 8001604:	f007 fbac 	bl	8008d60 <siprintf>
 8001608:	4603      	mov	r3, r0
 800160a:	b29a      	uxth	r2, r3
 800160c:	4b3f      	ldr	r3, [pc, #252]	; (800170c <main+0x404>)
 800160e:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100); // Permet d'afficher en uart dans le terminal le posX, posY, status
 8001610:	4b3e      	ldr	r3, [pc, #248]	; (800170c <main+0x404>)
 8001612:	881a      	ldrh	r2, [r3, #0]
 8001614:	2364      	movs	r3, #100	; 0x64
 8001616:	493c      	ldr	r1, [pc, #240]	; (8001708 <main+0x400>)
 8001618:	483d      	ldr	r0, [pc, #244]	; (8001710 <main+0x408>)
 800161a:	f005 fc19 	bl	8006e50 <HAL_UART_Transmit>

	  HAL_Delay(10); // Permet de mettre un délai de 10 ms
 800161e:	200a      	movs	r0, #10
 8001620:	f000 fe3e 	bl	80022a0 <HAL_Delay>

	  uint8_t canXY[4] = {var_x%256, var_x >> 8, var_y%256, var_y >> 8};
 8001624:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <main+0x3e0>)
 8001626:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162a:	425a      	negs	r2, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	b2d2      	uxtb	r2, r2
 8001630:	bf58      	it	pl
 8001632:	4253      	negpl	r3, r2
 8001634:	b21b      	sxth	r3, r3
 8001636:	b2da      	uxtb	r2, r3
 8001638:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 800163c:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <main+0x3e0>)
 8001644:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001648:	121b      	asrs	r3, r3, #8
 800164a:	b21b      	sxth	r3, r3
 800164c:	b2da      	uxtb	r2, r3
 800164e:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001652:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8001656:	705a      	strb	r2, [r3, #1]
 8001658:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <main+0x3dc>)
 800165a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800165e:	425a      	negs	r2, r3
 8001660:	b2db      	uxtb	r3, r3
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	bf58      	it	pl
 8001666:	4253      	negpl	r3, r2
 8001668:	b21b      	sxth	r3, r3
 800166a:	b2da      	uxtb	r2, r3
 800166c:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001670:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 8001674:	709a      	strb	r2, [r3, #2]
 8001676:	4b1b      	ldr	r3, [pc, #108]	; (80016e4 <main+0x3dc>)
 8001678:	f9b3 3000 	ldrsh.w	r3, [r3]
 800167c:	121b      	asrs	r3, r3, #8
 800167e:	b21b      	sxth	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8001686:	f5a3 639e 	sub.w	r3, r3, #1264	; 0x4f0
 800168a:	70da      	strb	r2, [r3, #3]

	  status = send(&hcan1, CAN_ADDR_RASPBERRY, FCT_GET_OPTIQUE, canXY, 4, false, 0, 1);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	2201      	movs	r2, #1
 8001692:	9203      	str	r2, [sp, #12]
 8001694:	2200      	movs	r2, #0
 8001696:	9202      	str	r2, [sp, #8]
 8001698:	2200      	movs	r2, #0
 800169a:	9201      	str	r2, [sp, #4]
 800169c:	2204      	movs	r2, #4
 800169e:	9200      	str	r2, [sp, #0]
 80016a0:	f44f 2221 	mov.w	r2, #659456	; 0xa1000
 80016a4:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80016a8:	481a      	ldr	r0, [pc, #104]	; (8001714 <main+0x40c>)
 80016aa:	f7ff fd35 	bl	8001118 <send>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <main+0x3e4>)
 80016b4:	701a      	strb	r2, [r3, #0]
	  Tx_len = sprintf (buffer, "can status = %d\r\n",status);
 80016b6:	4b0d      	ldr	r3, [pc, #52]	; (80016ec <main+0x3e4>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	4916      	ldr	r1, [pc, #88]	; (8001718 <main+0x410>)
 80016be:	4812      	ldr	r0, [pc, #72]	; (8001708 <main+0x400>)
 80016c0:	f007 fb4e 	bl	8008d60 <siprintf>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b29a      	uxth	r2, r3
 80016c8:	4b10      	ldr	r3, [pc, #64]	; (800170c <main+0x404>)
 80016ca:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100);
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <main+0x404>)
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	2364      	movs	r3, #100	; 0x64
 80016d2:	490d      	ldr	r1, [pc, #52]	; (8001708 <main+0x400>)
 80016d4:	480e      	ldr	r0, [pc, #56]	; (8001710 <main+0x408>)
 80016d6:	f005 fbbb 	bl	8006e50 <HAL_UART_Transmit>
  {
 80016da:	e6eb      	b.n	80014b4 <main+0x1ac>
 80016dc:	0800c9c4 	.word	0x0800c9c4
 80016e0:	20000294 	.word	0x20000294
 80016e4:	200007b2 	.word	0x200007b2
 80016e8:	200007b0 	.word	0x200007b0
 80016ec:	200007ae 	.word	0x200007ae
 80016f0:	3fd00000 	.word	0x3fd00000
 80016f4:	200007bc 	.word	0x200007bc
 80016f8:	200007b4 	.word	0x200007b4
 80016fc:	200007c0 	.word	0x200007c0
 8001700:	200007b8 	.word	0x200007b8
 8001704:	0800c974 	.word	0x0800c974
 8001708:	200003ac 	.word	0x200003ac
 800170c:	200007ac 	.word	0x200007ac
 8001710:	20000328 	.word	0x20000328
 8001714:	20000208 	.word	0x20000208
 8001718:	0800c9a4 	.word	0x0800c9a4

0800171c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b096      	sub	sp, #88	; 0x58
 8001720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001722:	f107 0314 	add.w	r3, r7, #20
 8001726:	2244      	movs	r2, #68	; 0x44
 8001728:	2100      	movs	r1, #0
 800172a:	4618      	mov	r0, r3
 800172c:	f006 fc90 	bl	8008050 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001730:	463b      	mov	r3, r7
 8001732:	2200      	movs	r2, #0
 8001734:	601a      	str	r2, [r3, #0]
 8001736:	605a      	str	r2, [r3, #4]
 8001738:	609a      	str	r2, [r3, #8]
 800173a:	60da      	str	r2, [r3, #12]
 800173c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800173e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001742:	f001 ffc7 	bl	80036d4 <HAL_PWREx_ControlVoltageScaling>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800174c:	f000 fa16 	bl	8001b7c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001750:	f001 ffa2 	bl	8003698 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001754:	4b21      	ldr	r3, [pc, #132]	; (80017dc <SystemClock_Config+0xc0>)
 8001756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800175a:	4a20      	ldr	r2, [pc, #128]	; (80017dc <SystemClock_Config+0xc0>)
 800175c:	f023 0318 	bic.w	r3, r3, #24
 8001760:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001764:	2314      	movs	r3, #20
 8001766:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001768:	2301      	movs	r3, #1
 800176a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800176c:	2301      	movs	r3, #1
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001774:	2360      	movs	r3, #96	; 0x60
 8001776:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001778:	2302      	movs	r3, #2
 800177a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800177c:	2301      	movs	r3, #1
 800177e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001780:	2301      	movs	r3, #1
 8001782:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8001784:	2328      	movs	r3, #40	; 0x28
 8001786:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001788:	2307      	movs	r3, #7
 800178a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800178c:	2302      	movs	r3, #2
 800178e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001790:	2302      	movs	r3, #2
 8001792:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4618      	mov	r0, r3
 800179a:	f001 fff1 	bl	8003780 <HAL_RCC_OscConfig>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80017a4:	f000 f9ea 	bl	8001b7c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a8:	230f      	movs	r3, #15
 80017aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017ac:	2303      	movs	r3, #3
 80017ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017bc:	463b      	mov	r3, r7
 80017be:	2104      	movs	r1, #4
 80017c0:	4618      	mov	r0, r3
 80017c2:	f002 fbf1 	bl	8003fa8 <HAL_RCC_ClockConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017cc:	f000 f9d6 	bl	8001b7c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80017d0:	f003 f804 	bl	80047dc <HAL_RCCEx_EnableMSIPLLMode>
}
 80017d4:	bf00      	nop
 80017d6:	3758      	adds	r7, #88	; 0x58
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40021000 	.word	0x40021000

080017e0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80017e4:	4b17      	ldr	r3, [pc, #92]	; (8001844 <MX_CAN1_Init+0x64>)
 80017e6:	4a18      	ldr	r2, [pc, #96]	; (8001848 <MX_CAN1_Init+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80017ea:	4b16      	ldr	r3, [pc, #88]	; (8001844 <MX_CAN1_Init+0x64>)
 80017ec:	2210      	movs	r2, #16
 80017ee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80017f0:	4b14      	ldr	r3, [pc, #80]	; (8001844 <MX_CAN1_Init+0x64>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80017f6:	4b13      	ldr	r3, [pc, #76]	; (8001844 <MX_CAN1_Init+0x64>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 80017fc:	4b11      	ldr	r3, [pc, #68]	; (8001844 <MX_CAN1_Init+0x64>)
 80017fe:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8001802:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001804:	4b0f      	ldr	r3, [pc, #60]	; (8001844 <MX_CAN1_Init+0x64>)
 8001806:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800180a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800180c:	4b0d      	ldr	r3, [pc, #52]	; (8001844 <MX_CAN1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001812:	4b0c      	ldr	r3, [pc, #48]	; (8001844 <MX_CAN1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001818:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <MX_CAN1_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800181e:	4b09      	ldr	r3, [pc, #36]	; (8001844 <MX_CAN1_Init+0x64>)
 8001820:	2200      	movs	r2, #0
 8001822:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001824:	4b07      	ldr	r3, [pc, #28]	; (8001844 <MX_CAN1_Init+0x64>)
 8001826:	2200      	movs	r2, #0
 8001828:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <MX_CAN1_Init+0x64>)
 800182c:	2200      	movs	r2, #0
 800182e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_CAN1_Init+0x64>)
 8001832:	f000 fd59 	bl	80022e8 <HAL_CAN_Init>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800183c:	f000 f99e 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}
 8001844:	20000208 	.word	0x20000208
 8001848:	40006400 	.word	0x40006400

0800184c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_SPI1_Init+0x74>)
 8001852:	4a1c      	ldr	r2, [pc, #112]	; (80018c4 <MX_SPI1_Init+0x78>)
 8001854:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_SPI1_Init+0x74>)
 8001858:	f44f 7282 	mov.w	r2, #260	; 0x104
 800185c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_SPI1_Init+0x74>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_SPI1_Init+0x74>)
 8001866:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800186a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <MX_SPI1_Init+0x74>)
 800186e:	2200      	movs	r2, #0
 8001870:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001872:	4b13      	ldr	r3, [pc, #76]	; (80018c0 <MX_SPI1_Init+0x74>)
 8001874:	2200      	movs	r2, #0
 8001876:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <MX_SPI1_Init+0x74>)
 800187a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <MX_SPI1_Init+0x74>)
 8001882:	2238      	movs	r2, #56	; 0x38
 8001884:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <MX_SPI1_Init+0x74>)
 8001888:	2200      	movs	r2, #0
 800188a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <MX_SPI1_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <MX_SPI1_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <MX_SPI1_Init+0x74>)
 800189a:	2207      	movs	r2, #7
 800189c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <MX_SPI1_Init+0x74>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <MX_SPI1_Init+0x74>)
 80018a6:	2208      	movs	r2, #8
 80018a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <MX_SPI1_Init+0x74>)
 80018ac:	f003 f898 	bl	80049e0 <HAL_SPI_Init>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d001      	beq.n	80018ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80018b6:	f000 f961 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000230 	.word	0x20000230
 80018c4:	40013000 	.word	0x40013000

080018c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b09a      	sub	sp, #104	; 0x68
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80018d2:	2200      	movs	r2, #0
 80018d4:	601a      	str	r2, [r3, #0]
 80018d6:	605a      	str	r2, [r3, #4]
 80018d8:	609a      	str	r2, [r3, #8]
 80018da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	605a      	str	r2, [r3, #4]
 80018f2:	609a      	str	r2, [r3, #8]
 80018f4:	60da      	str	r2, [r3, #12]
 80018f6:	611a      	str	r2, [r3, #16]
 80018f8:	615a      	str	r2, [r3, #20]
 80018fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	222c      	movs	r2, #44	; 0x2c
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f006 fba4 	bl	8008050 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001908:	4b43      	ldr	r3, [pc, #268]	; (8001a18 <MX_TIM1_Init+0x150>)
 800190a:	4a44      	ldr	r2, [pc, #272]	; (8001a1c <MX_TIM1_Init+0x154>)
 800190c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800190e:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001914:	4b40      	ldr	r3, [pc, #256]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 95;
 800191a:	4b3f      	ldr	r3, [pc, #252]	; (8001a18 <MX_TIM1_Init+0x150>)
 800191c:	225f      	movs	r2, #95	; 0x5f
 800191e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001920:	4b3d      	ldr	r3, [pc, #244]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001922:	2200      	movs	r2, #0
 8001924:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001926:	4b3c      	ldr	r3, [pc, #240]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001928:	2200      	movs	r2, #0
 800192a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192c:	4b3a      	ldr	r3, [pc, #232]	; (8001a18 <MX_TIM1_Init+0x150>)
 800192e:	2200      	movs	r2, #0
 8001930:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001932:	4839      	ldr	r0, [pc, #228]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001934:	f003 ff64 	bl	8005800 <HAL_TIM_Base_Init>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800193e:	f000 f91d 	bl	8001b7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001942:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001946:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001948:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800194c:	4619      	mov	r1, r3
 800194e:	4832      	ldr	r0, [pc, #200]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001950:	f004 fc02 	bl	8006158 <HAL_TIM_ConfigClockSource>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800195a:	f000 f90f 	bl	8001b7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800195e:	482e      	ldr	r0, [pc, #184]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001960:	f003 ffa5 	bl	80058ae <HAL_TIM_PWM_Init>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800196a:	f000 f907 	bl	8001b7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001976:	2300      	movs	r3, #0
 8001978:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800197a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800197e:	4619      	mov	r1, r3
 8001980:	4825      	ldr	r0, [pc, #148]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001982:	f005 f939 	bl	8006bf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800198c:	f000 f8f6 	bl	8001b7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001990:	2360      	movs	r3, #96	; 0x60
 8001992:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001994:	2300      	movs	r3, #0
 8001996:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001998:	2300      	movs	r3, #0
 800199a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800199c:	2300      	movs	r3, #0
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019a4:	2300      	movs	r3, #0
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019a8:	2300      	movs	r3, #0
 80019aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80019b0:	2200      	movs	r2, #0
 80019b2:	4619      	mov	r1, r3
 80019b4:	4818      	ldr	r0, [pc, #96]	; (8001a18 <MX_TIM1_Init+0x150>)
 80019b6:	f004 fabb 	bl	8005f30 <HAL_TIM_PWM_ConfigChannel>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80019c0:	f000 f8dc 	bl	8001b7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019e2:	2300      	movs	r3, #0
 80019e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80019ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019f0:	2300      	movs	r3, #0
 80019f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019f4:	1d3b      	adds	r3, r7, #4
 80019f6:	4619      	mov	r1, r3
 80019f8:	4807      	ldr	r0, [pc, #28]	; (8001a18 <MX_TIM1_Init+0x150>)
 80019fa:	f005 f963 	bl	8006cc4 <HAL_TIMEx_ConfigBreakDeadTime>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001a04:	f000 f8ba 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a08:	4803      	ldr	r0, [pc, #12]	; (8001a18 <MX_TIM1_Init+0x150>)
 8001a0a:	f000 f9d5 	bl	8001db8 <HAL_TIM_MspPostInit>

}
 8001a0e:	bf00      	nop
 8001a10:	3768      	adds	r7, #104	; 0x68
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20000294 	.word	0x20000294
 8001a1c:	40012c00 	.word	0x40012c00

08001a20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a26:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <MX_USART2_UART_Init+0x5c>)
 8001a28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a2a:	4b13      	ldr	r3, [pc, #76]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a38:	4b0f      	ldr	r3, [pc, #60]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a46:	220c      	movs	r2, #12
 8001a48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a50:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a56:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_USART2_UART_Init+0x58>)
 8001a64:	f005 f9a6 	bl	8006db4 <HAL_UART_Init>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001a6e:	f000 f885 	bl	8001b7c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	20000328 	.word	0x20000328
 8001a7c:	40004400 	.word	0x40004400

08001a80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a86:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_DMA_Init+0x38>)
 8001a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a8a:	4a0b      	ldr	r2, [pc, #44]	; (8001ab8 <MX_DMA_Init+0x38>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6493      	str	r3, [r2, #72]	; 0x48
 8001a92:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_DMA_Init+0x38>)
 8001a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	200c      	movs	r0, #12
 8001aa4:	f001 fa07 	bl	8002eb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001aa8:	200c      	movs	r0, #12
 8001aaa:	f001 fa20 	bl	8002eee <HAL_NVIC_EnableIRQ>

}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000

08001abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac2:	f107 030c 	add.w	r3, r7, #12
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	601a      	str	r2, [r3, #0]
 8001aca:	605a      	str	r2, [r3, #4]
 8001acc:	609a      	str	r2, [r3, #8]
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ad2:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad6:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001ad8:	f043 0304 	orr.w	r3, r3, #4
 8001adc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ade:	4b25      	ldr	r3, [pc, #148]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aea:	4b22      	ldr	r3, [pc, #136]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aee:	4a21      	ldr	r2, [pc, #132]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001af6:	4b1f      	ldr	r3, [pc, #124]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b02:	4b1c      	ldr	r3, [pc, #112]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b06:	4a1b      	ldr	r2, [pc, #108]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b0e:	4b19      	ldr	r3, [pc, #100]	; (8001b74 <MX_GPIO_Init+0xb8>)
 8001b10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	603b      	str	r3, [r7, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b22:	f001 fda1 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2108      	movs	r1, #8
 8001b2a:	4813      	ldr	r0, [pc, #76]	; (8001b78 <MX_GPIO_Init+0xbc>)
 8001b2c:	f001 fd9c 	bl	8003668 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001b30:	2310      	movs	r3, #16
 8001b32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b34:	2301      	movs	r3, #1
 8001b36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b4a:	f001 fc23 	bl	8003394 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001b4e:	2308      	movs	r3, #8
 8001b50:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b52:	2301      	movs	r3, #1
 8001b54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001b5e:	f107 030c 	add.w	r3, r7, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	4804      	ldr	r0, [pc, #16]	; (8001b78 <MX_GPIO_Init+0xbc>)
 8001b66:	f001 fc15 	bl	8003394 <HAL_GPIO_Init>

}
 8001b6a:	bf00      	nop
 8001b6c:	3720      	adds	r7, #32
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}
 8001b72:	bf00      	nop
 8001b74:	40021000 	.word	0x40021000
 8001b78:	48000400 	.word	0x48000400

08001b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b80:	b672      	cpsid	i
}
 8001b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <Error_Handler+0x8>
	...

08001b88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <HAL_MspInit+0x44>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b92:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <HAL_MspInit+0x44>)
 8001b94:	f043 0301 	orr.w	r3, r3, #1
 8001b98:	6613      	str	r3, [r2, #96]	; 0x60
 8001b9a:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <HAL_MspInit+0x44>)
 8001b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b9e:	f003 0301 	and.w	r3, r3, #1
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_MspInit+0x44>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_MspInit+0x44>)
 8001bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb2:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <HAL_MspInit+0x44>)
 8001bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bba:	603b      	str	r3, [r7, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
 8001bca:	bf00      	nop
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08a      	sub	sp, #40	; 0x28
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd8:	f107 0314 	add.w	r3, r7, #20
 8001bdc:	2200      	movs	r2, #0
 8001bde:	601a      	str	r2, [r3, #0]
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	609a      	str	r2, [r3, #8]
 8001be4:	60da      	str	r2, [r3, #12]
 8001be6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a28      	ldr	r2, [pc, #160]	; (8001c90 <HAL_CAN_MspInit+0xc0>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d149      	bne.n	8001c86 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001bf2:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_CAN_MspInit+0xc4>)
 8001bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bf6:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_CAN_MspInit+0xc4>)
 8001bf8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bfc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bfe:	4b25      	ldr	r3, [pc, #148]	; (8001c94 <HAL_CAN_MspInit+0xc4>)
 8001c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	4b22      	ldr	r3, [pc, #136]	; (8001c94 <HAL_CAN_MspInit+0xc4>)
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	4a21      	ldr	r2, [pc, #132]	; (8001c94 <HAL_CAN_MspInit+0xc4>)
 8001c10:	f043 0301 	orr.w	r3, r3, #1
 8001c14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_CAN_MspInit+0xc4>)
 8001c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c1a:	f003 0301 	and.w	r3, r3, #1
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001c22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001c26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c28:	2302      	movs	r3, #2
 8001c2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c30:	2303      	movs	r3, #3
 8001c32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001c34:	2309      	movs	r3, #9
 8001c36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c42:	f001 fba7 	bl	8003394 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001c46:	2200      	movs	r2, #0
 8001c48:	2100      	movs	r1, #0
 8001c4a:	2013      	movs	r0, #19
 8001c4c:	f001 f933 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001c50:	2013      	movs	r0, #19
 8001c52:	f001 f94c 	bl	8002eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001c56:	2200      	movs	r2, #0
 8001c58:	2100      	movs	r1, #0
 8001c5a:	2014      	movs	r0, #20
 8001c5c:	f001 f92b 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001c60:	2014      	movs	r0, #20
 8001c62:	f001 f944 	bl	8002eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001c66:	2200      	movs	r2, #0
 8001c68:	2100      	movs	r1, #0
 8001c6a:	2015      	movs	r0, #21
 8001c6c:	f001 f923 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001c70:	2015      	movs	r0, #21
 8001c72:	f001 f93c 	bl	8002eee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	2016      	movs	r0, #22
 8001c7c:	f001 f91b 	bl	8002eb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001c80:	2016      	movs	r0, #22
 8001c82:	f001 f934 	bl	8002eee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001c86:	bf00      	nop
 8001c88:	3728      	adds	r7, #40	; 0x28
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	40006400 	.word	0x40006400
 8001c94:	40021000 	.word	0x40021000

08001c98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08a      	sub	sp, #40	; 0x28
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca0:	f107 0314 	add.w	r3, r7, #20
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]
 8001ca8:	605a      	str	r2, [r3, #4]
 8001caa:	609a      	str	r2, [r3, #8]
 8001cac:	60da      	str	r2, [r3, #12]
 8001cae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a17      	ldr	r2, [pc, #92]	; (8001d14 <HAL_SPI_MspInit+0x7c>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d128      	bne.n	8001d0c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cba:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <HAL_SPI_MspInit+0x80>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_SPI_MspInit+0x80>)
 8001cc0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <HAL_SPI_MspInit+0x80>)
 8001cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001cce:	613b      	str	r3, [r7, #16]
 8001cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <HAL_SPI_MspInit+0x80>)
 8001cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd6:	4a10      	ldr	r2, [pc, #64]	; (8001d18 <HAL_SPI_MspInit+0x80>)
 8001cd8:	f043 0301 	orr.w	r3, r3, #1
 8001cdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <HAL_SPI_MspInit+0x80>)
 8001ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ce2:	f003 0301 	and.w	r3, r3, #1
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001cea:	23e0      	movs	r3, #224	; 0xe0
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf6:	2303      	movs	r3, #3
 8001cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cfa:	2305      	movs	r3, #5
 8001cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cfe:	f107 0314 	add.w	r3, r7, #20
 8001d02:	4619      	mov	r1, r3
 8001d04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d08:	f001 fb44 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d0c:	bf00      	nop
 8001d0e:	3728      	adds	r7, #40	; 0x28
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40013000 	.word	0x40013000
 8001d18:	40021000 	.word	0x40021000

08001d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a1f      	ldr	r2, [pc, #124]	; (8001da8 <HAL_TIM_Base_MspInit+0x8c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d137      	bne.n	8001d9e <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <HAL_TIM_Base_MspInit+0x90>)
 8001d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d32:	4a1e      	ldr	r2, [pc, #120]	; (8001dac <HAL_TIM_Base_MspInit+0x90>)
 8001d34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d38:	6613      	str	r3, [r2, #96]	; 0x60
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <HAL_TIM_Base_MspInit+0x90>)
 8001d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8001d46:	4b1a      	ldr	r3, [pc, #104]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d48:	4a1a      	ldr	r2, [pc, #104]	; (8001db4 <HAL_TIM_Base_MspInit+0x98>)
 8001d4a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8001d4c:	4b18      	ldr	r3, [pc, #96]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d4e:	2207      	movs	r2, #7
 8001d50:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d52:	4b17      	ldr	r3, [pc, #92]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d54:	2210      	movs	r2, #16
 8001d56:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d58:	4b15      	ldr	r3, [pc, #84]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001d5e:	4b14      	ldr	r3, [pc, #80]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d60:	2280      	movs	r2, #128	; 0x80
 8001d62:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d64:	4b12      	ldr	r3, [pc, #72]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d66:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d6a:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d6c:	4b10      	ldr	r3, [pc, #64]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d72:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d7c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8001d80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001d82:	480b      	ldr	r0, [pc, #44]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d84:	f001 f8ce 	bl	8002f24 <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 8001d8e:	f7ff fef5 	bl	8001b7c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a06      	ldr	r2, [pc, #24]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d96:	625a      	str	r2, [r3, #36]	; 0x24
 8001d98:	4a05      	ldr	r2, [pc, #20]	; (8001db0 <HAL_TIM_Base_MspInit+0x94>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d9e:	bf00      	nop
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	40012c00 	.word	0x40012c00
 8001dac:	40021000 	.word	0x40021000
 8001db0:	200002e0 	.word	0x200002e0
 8001db4:	4002001c 	.word	0x4002001c

08001db8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b088      	sub	sp, #32
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 030c 	add.w	r3, r7, #12
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_TIM_MspPostInit+0x68>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d11d      	bne.n	8001e16 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <HAL_TIM_MspPostInit+0x6c>)
 8001ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dde:	4a11      	ldr	r2, [pc, #68]	; (8001e24 <HAL_TIM_MspPostInit+0x6c>)
 8001de0:	f043 0301 	orr.w	r3, r3, #1
 8001de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_TIM_MspPostInit+0x6c>)
 8001de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dea:	f003 0301 	and.w	r3, r3, #1
 8001dee:	60bb      	str	r3, [r7, #8]
 8001df0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001df2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e04:	2301      	movs	r3, #1
 8001e06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 030c 	add.w	r3, r7, #12
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e12:	f001 fabf 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e16:	bf00      	nop
 8001e18:	3720      	adds	r7, #32
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40012c00 	.word	0x40012c00
 8001e24:	40021000 	.word	0x40021000

08001e28 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b09e      	sub	sp, #120	; 0x78
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e30:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
 8001e38:	605a      	str	r2, [r3, #4]
 8001e3a:	609a      	str	r2, [r3, #8]
 8001e3c:	60da      	str	r2, [r3, #12]
 8001e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e40:	f107 0310 	add.w	r3, r7, #16
 8001e44:	2254      	movs	r2, #84	; 0x54
 8001e46:	2100      	movs	r1, #0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f006 f901 	bl	8008050 <memset>
  if(huart->Instance==USART2)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a28      	ldr	r2, [pc, #160]	; (8001ef4 <HAL_UART_MspInit+0xcc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d148      	bne.n	8001eea <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e60:	f107 0310 	add.w	r3, r7, #16
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 fac3 	bl	80043f0 <HAL_RCCEx_PeriphCLKConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e70:	f7ff fe84 	bl	8001b7c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e74:	4b20      	ldr	r3, [pc, #128]	; (8001ef8 <HAL_UART_MspInit+0xd0>)
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	4a1f      	ldr	r2, [pc, #124]	; (8001ef8 <HAL_UART_MspInit+0xd0>)
 8001e7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e80:	4b1d      	ldr	r3, [pc, #116]	; (8001ef8 <HAL_UART_MspInit+0xd0>)
 8001e82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e88:	60fb      	str	r3, [r7, #12]
 8001e8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8c:	4b1a      	ldr	r3, [pc, #104]	; (8001ef8 <HAL_UART_MspInit+0xd0>)
 8001e8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e90:	4a19      	ldr	r2, [pc, #100]	; (8001ef8 <HAL_UART_MspInit+0xd0>)
 8001e92:	f043 0301 	orr.w	r3, r3, #1
 8001e96:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e98:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <HAL_UART_MspInit+0xd0>)
 8001e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	60bb      	str	r3, [r7, #8]
 8001ea2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001ea4:	2304      	movs	r3, #4
 8001ea6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eb0:	2303      	movs	r3, #3
 8001eb2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eb4:	2307      	movs	r3, #7
 8001eb6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001eb8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ec2:	f001 fa67 	bl	8003394 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001edc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ee6:	f001 fa55 	bl	8003394 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001eea:	bf00      	nop
 8001eec:	3778      	adds	r7, #120	; 0x78
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
 8001ef2:	bf00      	nop
 8001ef4:	40004400 	.word	0x40004400
 8001ef8:	40021000 	.word	0x40021000

08001efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f00:	e7fe      	b.n	8001f00 <NMI_Handler+0x4>

08001f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f02:	b480      	push	{r7}
 8001f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <HardFault_Handler+0x4>

08001f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f0c:	e7fe      	b.n	8001f0c <MemManage_Handler+0x4>

08001f0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f12:	e7fe      	b.n	8001f12 <BusFault_Handler+0x4>

08001f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f18:	e7fe      	b.n	8001f18 <UsageFault_Handler+0x4>

08001f1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f1a:	b480      	push	{r7}
 8001f1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f1e:	bf00      	nop
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr

08001f28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr

08001f36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f36:	b480      	push	{r7}
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f3a:	bf00      	nop
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f42:	4770      	bx	lr

08001f44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f48:	f000 f98a 	bl	8002260 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}

08001f50 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001f54:	4802      	ldr	r0, [pc, #8]	; (8001f60 <DMA1_Channel2_IRQHandler+0x10>)
 8001f56:	f001 f93e 	bl	80031d6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200002e0 	.word	0x200002e0

08001f64 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f68:	4802      	ldr	r0, [pc, #8]	; (8001f74 <CAN1_TX_IRQHandler+0x10>)
 8001f6a:	f000 fc9a 	bl	80028a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000208 	.word	0x20000208

08001f78 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f7c:	4802      	ldr	r0, [pc, #8]	; (8001f88 <CAN1_RX0_IRQHandler+0x10>)
 8001f7e:	f000 fc90 	bl	80028a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001f82:	bf00      	nop
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000208 	.word	0x20000208

08001f8c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001f90:	4802      	ldr	r0, [pc, #8]	; (8001f9c <CAN1_RX1_IRQHandler+0x10>)
 8001f92:	f000 fc86 	bl	80028a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000208 	.word	0x20000208

08001fa0 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001fa4:	4802      	ldr	r0, [pc, #8]	; (8001fb0 <CAN1_SCE_IRQHandler+0x10>)
 8001fa6:	f000 fc7c 	bl	80028a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20000208 	.word	0x20000208

08001fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
	return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_kill>:

int _kill(int pid, int sig)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001fce:	f006 f815 	bl	8007ffc <__errno>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2216      	movs	r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
	return -1;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_exit>:

void _exit (int status)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ffe7 	bl	8001fc4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ff6:	e7fe      	b.n	8001ff6 <_exit+0x12>

08001ff8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b086      	sub	sp, #24
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002004:	2300      	movs	r3, #0
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	e00a      	b.n	8002020 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800200a:	f3af 8000 	nop.w
 800200e:	4601      	mov	r1, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	b2ca      	uxtb	r2, r1
 8002018:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	3301      	adds	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	429a      	cmp	r2, r3
 8002026:	dbf0      	blt.n	800200a <_read+0x12>
	}

return len;
 8002028:	687b      	ldr	r3, [r7, #4]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3718      	adds	r7, #24
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}

08002032 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002032:	b580      	push	{r7, lr}
 8002034:	b086      	sub	sp, #24
 8002036:	af00      	add	r7, sp, #0
 8002038:	60f8      	str	r0, [r7, #12]
 800203a:	60b9      	str	r1, [r7, #8]
 800203c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800203e:	2300      	movs	r3, #0
 8002040:	617b      	str	r3, [r7, #20]
 8002042:	e009      	b.n	8002058 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60ba      	str	r2, [r7, #8]
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3301      	adds	r3, #1
 8002056:	617b      	str	r3, [r7, #20]
 8002058:	697a      	ldr	r2, [r7, #20]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	429a      	cmp	r2, r3
 800205e:	dbf1      	blt.n	8002044 <_write+0x12>
	}
	return len;
 8002060:	687b      	ldr	r3, [r7, #4]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <_close>:

int _close(int file)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
	return -1;
 8002072:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002092:	605a      	str	r2, [r3, #4]
	return 0;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <_isatty>:

int _isatty(int file)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
	return 1;
 80020aa:	2301      	movs	r3, #1
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	370c      	adds	r7, #12
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
	return 0;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3714      	adds	r7, #20
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
	...

080020d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <_sbrk+0x5c>)
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <_sbrk+0x60>)
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f0:	4b11      	ldr	r3, [pc, #68]	; (8002138 <_sbrk+0x64>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	; (800213c <_sbrk+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f6:	4b10      	ldr	r3, [pc, #64]	; (8002138 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002104:	f005 ff7a 	bl	8007ffc <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	220c      	movs	r2, #12
 800210c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295
 8002112:	e009      	b.n	8002128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002114:	4b08      	ldr	r3, [pc, #32]	; (8002138 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211a:	4b07      	ldr	r3, [pc, #28]	; (8002138 <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <_sbrk+0x64>)
 8002124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	2000c000 	.word	0x2000c000
 8002134:	00000400 	.word	0x00000400
 8002138:	200007c4 	.word	0x200007c4
 800213c:	200007e0 	.word	0x200007e0

08002140 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <SystemInit+0x20>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	4a05      	ldr	r2, [pc, #20]	; (8002160 <SystemInit+0x20>)
 800214c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800219c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002168:	f7ff ffea 	bl	8002140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800216c:	480c      	ldr	r0, [pc, #48]	; (80021a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800216e:	490d      	ldr	r1, [pc, #52]	; (80021a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002170:	4a0d      	ldr	r2, [pc, #52]	; (80021a8 <LoopForever+0xe>)
  movs r3, #0
 8002172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002174:	e002      	b.n	800217c <LoopCopyDataInit>

08002176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800217a:	3304      	adds	r3, #4

0800217c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800217c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800217e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002180:	d3f9      	bcc.n	8002176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8002184:	4c0a      	ldr	r4, [pc, #40]	; (80021b0 <LoopForever+0x16>)
  movs r3, #0
 8002186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002188:	e001      	b.n	800218e <LoopFillZerobss>

0800218a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800218a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800218c:	3204      	adds	r2, #4

0800218e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800218e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002190:	d3fb      	bcc.n	800218a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002192:	f005 ff39 	bl	8008008 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002196:	f7ff f8b7 	bl	8001308 <main>

0800219a <LoopForever>:

LoopForever:
    b LoopForever
 800219a:	e7fe      	b.n	800219a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800219c:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80021a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021a4:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80021a8:	0800cecc 	.word	0x0800cecc
  ldr r2, =_sbss
 80021ac:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80021b0:	200007e0 	.word	0x200007e0

080021b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80021b4:	e7fe      	b.n	80021b4 <ADC1_IRQHandler>

080021b6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b082      	sub	sp, #8
 80021ba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021c0:	2003      	movs	r0, #3
 80021c2:	f000 fe6d 	bl	8002ea0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80021c6:	2000      	movs	r0, #0
 80021c8:	f000 f80e 	bl	80021e8 <HAL_InitTick>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	71fb      	strb	r3, [r7, #7]
 80021d6:	e001      	b.n	80021dc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80021d8:	f7ff fcd6 	bl	8001b88 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80021dc:	79fb      	ldrb	r3, [r7, #7]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3708      	adds	r7, #8
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
	...

080021e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80021f0:	2300      	movs	r3, #0
 80021f2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80021f4:	4b17      	ldr	r3, [pc, #92]	; (8002254 <HAL_InitTick+0x6c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d023      	beq.n	8002244 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80021fc:	4b16      	ldr	r3, [pc, #88]	; (8002258 <HAL_InitTick+0x70>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b14      	ldr	r3, [pc, #80]	; (8002254 <HAL_InitTick+0x6c>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	fbb3 f3f1 	udiv	r3, r3, r1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fe79 	bl	8002f0a <HAL_SYSTICK_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d10f      	bne.n	800223e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b0f      	cmp	r3, #15
 8002222:	d809      	bhi.n	8002238 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002224:	2200      	movs	r2, #0
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f000 fe43 	bl	8002eb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002230:	4a0a      	ldr	r2, [pc, #40]	; (800225c <HAL_InitTick+0x74>)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6013      	str	r3, [r2, #0]
 8002236:	e007      	b.n	8002248 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
 800223c:	e004      	b.n	8002248 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
 8002242:	e001      	b.n	8002248 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000014 	.word	0x20000014
 8002258:	2000000c 	.word	0x2000000c
 800225c:	20000010 	.word	0x20000010

08002260 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_IncTick+0x20>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	461a      	mov	r2, r3
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_IncTick+0x24>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4413      	add	r3, r2
 8002270:	4a04      	ldr	r2, [pc, #16]	; (8002284 <HAL_IncTick+0x24>)
 8002272:	6013      	str	r3, [r2, #0]
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	20000014 	.word	0x20000014
 8002284:	200007c8 	.word	0x200007c8

08002288 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  return uwTick;
 800228c:	4b03      	ldr	r3, [pc, #12]	; (800229c <HAL_GetTick+0x14>)
 800228e:	681b      	ldr	r3, [r3, #0]
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	200007c8 	.word	0x200007c8

080022a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022a8:	f7ff ffee 	bl	8002288 <HAL_GetTick>
 80022ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b8:	d005      	beq.n	80022c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80022ba:	4b0a      	ldr	r3, [pc, #40]	; (80022e4 <HAL_Delay+0x44>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022c6:	bf00      	nop
 80022c8:	f7ff ffde 	bl	8002288 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d8f7      	bhi.n	80022c8 <HAL_Delay+0x28>
  {
  }
}
 80022d8:	bf00      	nop
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000014 	.word	0x20000014

080022e8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d101      	bne.n	80022fa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e0ed      	b.n	80024d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b00      	cmp	r3, #0
 8002304:	d102      	bne.n	800230c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fc62 	bl	8001bd0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0201 	orr.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800231c:	f7ff ffb4 	bl	8002288 <HAL_GetTick>
 8002320:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002322:	e012      	b.n	800234a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002324:	f7ff ffb0 	bl	8002288 <HAL_GetTick>
 8002328:	4602      	mov	r2, r0
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	2b0a      	cmp	r3, #10
 8002330:	d90b      	bls.n	800234a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2205      	movs	r2, #5
 8002342:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e0c5      	b.n	80024d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0e5      	beq.n	8002324 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0202 	bic.w	r2, r2, #2
 8002366:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002368:	f7ff ff8e 	bl	8002288 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800236e:	e012      	b.n	8002396 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002370:	f7ff ff8a 	bl	8002288 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b0a      	cmp	r3, #10
 800237c:	d90b      	bls.n	8002396 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002382:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2205      	movs	r2, #5
 800238e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e09f      	b.n	80024d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e5      	bne.n	8002370 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	7e1b      	ldrb	r3, [r3, #24]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d108      	bne.n	80023be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e007      	b.n	80023ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	7e5b      	ldrb	r3, [r3, #25]
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d108      	bne.n	80023e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80023e4:	601a      	str	r2, [r3, #0]
 80023e6:	e007      	b.n	80023f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	7e9b      	ldrb	r3, [r3, #26]
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d108      	bne.n	8002412 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f042 0220 	orr.w	r2, r2, #32
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e007      	b.n	8002422 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 0220 	bic.w	r2, r2, #32
 8002420:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7edb      	ldrb	r3, [r3, #27]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d108      	bne.n	800243c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0210 	bic.w	r2, r2, #16
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	e007      	b.n	800244c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0210 	orr.w	r2, r2, #16
 800244a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7f1b      	ldrb	r3, [r3, #28]
 8002450:	2b01      	cmp	r3, #1
 8002452:	d108      	bne.n	8002466 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f042 0208 	orr.w	r2, r2, #8
 8002462:	601a      	str	r2, [r3, #0]
 8002464:	e007      	b.n	8002476 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0208 	bic.w	r2, r2, #8
 8002474:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	7f5b      	ldrb	r3, [r3, #29]
 800247a:	2b01      	cmp	r3, #1
 800247c:	d108      	bne.n	8002490 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0204 	orr.w	r2, r2, #4
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	e007      	b.n	80024a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f022 0204 	bic.w	r2, r2, #4
 800249e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	ea42 0103 	orr.w	r1, r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	1e5a      	subs	r2, r3, #1
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	430a      	orrs	r2, r1
 80024c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2201      	movs	r2, #1
 80024d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}

080024de <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80024de:	b480      	push	{r7}
 80024e0:	b089      	sub	sp, #36	; 0x24
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	60f8      	str	r0, [r7, #12]
 80024e6:	60b9      	str	r1, [r7, #8]
 80024e8:	607a      	str	r2, [r7, #4]
 80024ea:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024f2:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80024fc:	7ffb      	ldrb	r3, [r7, #31]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d003      	beq.n	800250a <HAL_CAN_AddTxMessage+0x2c>
 8002502:	7ffb      	ldrb	r3, [r7, #31]
 8002504:	2b02      	cmp	r3, #2
 8002506:	f040 80ad 	bne.w	8002664 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d10a      	bne.n	800252a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 8095 	beq.w	8002654 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	0e1b      	lsrs	r3, r3, #24
 800252e:	f003 0303 	and.w	r3, r3, #3
 8002532:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002534:	2201      	movs	r2, #1
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	409a      	lsls	r2, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10d      	bne.n	8002562 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	6809      	ldr	r1, [r1, #0]
 8002554:	431a      	orrs	r2, r3
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	3318      	adds	r3, #24
 800255a:	011b      	lsls	r3, r3, #4
 800255c:	440b      	add	r3, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	e00f      	b.n	8002582 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800256c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002572:	68f9      	ldr	r1, [r7, #12]
 8002574:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002576:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	3318      	adds	r3, #24
 800257c:	011b      	lsls	r3, r3, #4
 800257e:	440b      	add	r3, r1
 8002580:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3318      	adds	r3, #24
 800258e:	011b      	lsls	r3, r3, #4
 8002590:	440b      	add	r3, r1
 8002592:	3304      	adds	r3, #4
 8002594:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	7d1b      	ldrb	r3, [r3, #20]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d111      	bne.n	80025c2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3318      	adds	r3, #24
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	4413      	add	r3, r2
 80025aa:	3304      	adds	r3, #4
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	6811      	ldr	r1, [r2, #0]
 80025b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	3318      	adds	r3, #24
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	440b      	add	r3, r1
 80025be:	3304      	adds	r3, #4
 80025c0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	3307      	adds	r3, #7
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	061a      	lsls	r2, r3, #24
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	3306      	adds	r3, #6
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	041b      	lsls	r3, r3, #16
 80025d2:	431a      	orrs	r2, r3
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3305      	adds	r3, #5
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	021b      	lsls	r3, r3, #8
 80025dc:	4313      	orrs	r3, r2
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	3204      	adds	r2, #4
 80025e2:	7812      	ldrb	r2, [r2, #0]
 80025e4:	4610      	mov	r0, r2
 80025e6:	68fa      	ldr	r2, [r7, #12]
 80025e8:	6811      	ldr	r1, [r2, #0]
 80025ea:	ea43 0200 	orr.w	r2, r3, r0
 80025ee:	697b      	ldr	r3, [r7, #20]
 80025f0:	011b      	lsls	r3, r3, #4
 80025f2:	440b      	add	r3, r1
 80025f4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80025f8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3303      	adds	r3, #3
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	061a      	lsls	r2, r3, #24
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3302      	adds	r3, #2
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3301      	adds	r3, #1
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	021b      	lsls	r3, r3, #8
 8002614:	4313      	orrs	r3, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	7812      	ldrb	r2, [r2, #0]
 800261a:	4610      	mov	r0, r2
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6811      	ldr	r1, [r2, #0]
 8002620:	ea43 0200 	orr.w	r2, r3, r0
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	440b      	add	r3, r1
 800262a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800262e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	3318      	adds	r3, #24
 8002638:	011b      	lsls	r3, r3, #4
 800263a:	4413      	add	r3, r2
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	68fa      	ldr	r2, [r7, #12]
 8002640:	6811      	ldr	r1, [r2, #0]
 8002642:	f043 0201 	orr.w	r2, r3, #1
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3318      	adds	r3, #24
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	e00e      	b.n	8002672 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002658:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e006      	b.n	8002672 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
  }
}
 8002672:	4618      	mov	r0, r3
 8002674:	3724      	adds	r7, #36	; 0x24
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr

0800267e <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800267e:	b480      	push	{r7}
 8002680:	b087      	sub	sp, #28
 8002682:	af00      	add	r7, sp, #0
 8002684:	60f8      	str	r0, [r7, #12]
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002692:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d003      	beq.n	80026a2 <HAL_CAN_GetRxMessage+0x24>
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	2b02      	cmp	r3, #2
 800269e:	f040 80f3 	bne.w	8002888 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10e      	bne.n	80026c6 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0303 	and.w	r3, r3, #3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d116      	bne.n	80026e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0e7      	b.n	8002896 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0d8      	b.n	8002896 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	331b      	adds	r3, #27
 80026ec:	011b      	lsls	r3, r3, #4
 80026ee:	4413      	add	r3, r2
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0204 	and.w	r2, r3, #4
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10c      	bne.n	800271c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	331b      	adds	r3, #27
 800270a:	011b      	lsls	r3, r3, #4
 800270c:	4413      	add	r3, r2
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0d5b      	lsrs	r3, r3, #21
 8002712:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	601a      	str	r2, [r3, #0]
 800271a:	e00b      	b.n	8002734 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	331b      	adds	r3, #27
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	4413      	add	r3, r2
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	08db      	lsrs	r3, r3, #3
 800272c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	331b      	adds	r3, #27
 800273c:	011b      	lsls	r3, r3, #4
 800273e:	4413      	add	r3, r2
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0202 	and.w	r2, r3, #2
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	331b      	adds	r3, #27
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	4413      	add	r3, r2
 8002756:	3304      	adds	r3, #4
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 020f 	and.w	r2, r3, #15
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681a      	ldr	r2, [r3, #0]
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	331b      	adds	r3, #27
 800276a:	011b      	lsls	r3, r3, #4
 800276c:	4413      	add	r3, r2
 800276e:	3304      	adds	r3, #4
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	0a1b      	lsrs	r3, r3, #8
 8002774:	b2da      	uxtb	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	331b      	adds	r3, #27
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	4413      	add	r3, r2
 8002786:	3304      	adds	r3, #4
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	0c1b      	lsrs	r3, r3, #16
 800278c:	b29a      	uxth	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	4413      	add	r3, r2
 800279c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4413      	add	r3, r2
 80027b2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	0a1a      	lsrs	r2, r3, #8
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	3301      	adds	r3, #1
 80027be:	b2d2      	uxtb	r2, r2
 80027c0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	4413      	add	r3, r2
 80027cc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	0c1a      	lsrs	r2, r3, #16
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	3302      	adds	r3, #2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	4413      	add	r3, r2
 80027e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e1a      	lsrs	r2, r3, #24
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	3303      	adds	r3, #3
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	3304      	adds	r3, #4
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681a      	ldr	r2, [r3, #0]
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	0a1a      	lsrs	r2, r3, #8
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	3305      	adds	r3, #5
 8002824:	b2d2      	uxtb	r2, r2
 8002826:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	4413      	add	r3, r2
 8002832:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	0c1a      	lsrs	r2, r3, #16
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	3306      	adds	r3, #6
 800283e:	b2d2      	uxtb	r2, r2
 8002840:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	011b      	lsls	r3, r3, #4
 800284a:	4413      	add	r3, r2
 800284c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	0e1a      	lsrs	r2, r3, #24
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	3307      	adds	r3, #7
 8002858:	b2d2      	uxtb	r2, r2
 800285a:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d108      	bne.n	8002874 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f042 0220 	orr.w	r2, r2, #32
 8002870:	60da      	str	r2, [r3, #12]
 8002872:	e007      	b.n	8002884 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002884:	2300      	movs	r3, #0
 8002886:	e006      	b.n	8002896 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
  }
}
 8002896:	4618      	mov	r0, r3
 8002898:	371c      	adds	r7, #28
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b08a      	sub	sp, #40	; 0x28
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	695b      	ldr	r3, [r3, #20]
 80028b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	68db      	ldr	r3, [r3, #12]
 80028cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d07c      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d023      	beq.n	800293a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2201      	movs	r2, #1
 80028f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80028fa:	69bb      	ldr	r3, [r7, #24]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b00      	cmp	r3, #0
 8002902:	d003      	beq.n	800290c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f000 f983 	bl	8002c10 <HAL_CAN_TxMailbox0CompleteCallback>
 800290a:	e016      	b.n	800293a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	f003 0304 	and.w	r3, r3, #4
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
 800291e:	e00c      	b.n	800293a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f003 0308 	and.w	r3, r3, #8
 8002926:	2b00      	cmp	r3, #0
 8002928:	d004      	beq.n	8002934 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800292a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800292c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
 8002932:	e002      	b.n	800293a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f989 	bl	8002c4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800293a:	69bb      	ldr	r3, [r7, #24]
 800293c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002940:	2b00      	cmp	r3, #0
 8002942:	d024      	beq.n	800298e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f44f 7280 	mov.w	r2, #256	; 0x100
 800294c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002954:	2b00      	cmp	r3, #0
 8002956:	d003      	beq.n	8002960 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f963 	bl	8002c24 <HAL_CAN_TxMailbox1CompleteCallback>
 800295e:	e016      	b.n	800298e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002966:	2b00      	cmp	r3, #0
 8002968:	d004      	beq.n	8002974 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002970:	627b      	str	r3, [r7, #36]	; 0x24
 8002972:	e00c      	b.n	800298e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800297a:	2b00      	cmp	r3, #0
 800297c:	d004      	beq.n	8002988 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
 8002986:	e002      	b.n	800298e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f969 	bl	8002c60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d024      	beq.n	80029e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80029a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d003      	beq.n	80029b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f943 	bl	8002c38 <HAL_CAN_TxMailbox2CompleteCallback>
 80029b2:	e016      	b.n	80029e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d004      	beq.n	80029c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
 80029c6:	e00c      	b.n	80029e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80029c8:	69bb      	ldr	r3, [r7, #24]
 80029ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d004      	beq.n	80029dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	627b      	str	r3, [r7, #36]	; 0x24
 80029da:	e002      	b.n	80029e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f949 	bl	8002c74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	f003 0308 	and.w	r3, r3, #8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00c      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d007      	beq.n	8002a06 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80029f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029fc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2210      	movs	r2, #16
 8002a04:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	f003 0304 	and.w	r3, r3, #4
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00b      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0308 	and.w	r3, r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d006      	beq.n	8002a28 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2208      	movs	r2, #8
 8002a20:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f930 	bl	8002c88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d009      	beq.n	8002a46 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d002      	beq.n	8002a46 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7fe fad9 	bl	8000ff8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002a46:	6a3b      	ldr	r3, [r7, #32]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00c      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	f003 0310 	and.w	r3, r3, #16
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2210      	movs	r2, #16
 8002a68:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	f003 0320 	and.w	r3, r3, #32
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00b      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	f003 0308 	and.w	r3, r3, #8
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d006      	beq.n	8002a8c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2208      	movs	r2, #8
 8002a84:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002a86:	6878      	ldr	r0, [r7, #4]
 8002a88:	f000 f912 	bl	8002cb0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002a8c:	6a3b      	ldr	r3, [r7, #32]
 8002a8e:	f003 0310 	and.w	r3, r3, #16
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f003 0303 	and.w	r3, r3, #3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f000 f8f9 	bl	8002c9c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002aaa:	6a3b      	ldr	r3, [r7, #32]
 8002aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f003 0310 	and.w	r3, r3, #16
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d006      	beq.n	8002acc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2210      	movs	r2, #16
 8002ac4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f8fc 	bl	8002cc4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002acc:	6a3b      	ldr	r3, [r7, #32]
 8002ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00b      	beq.n	8002aee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2208      	movs	r2, #8
 8002ae6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f000 f8f5 	bl	8002cd8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002aee:	6a3b      	ldr	r3, [r7, #32]
 8002af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d07b      	beq.n	8002bf0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002af8:	69fb      	ldr	r3, [r7, #28]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d072      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d008      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d003      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d008      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	f043 0302 	orr.w	r3, r3, #2
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	f043 0304 	orr.w	r3, r3, #4
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d043      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d03e      	beq.n	8002be8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b70:	2b60      	cmp	r3, #96	; 0x60
 8002b72:	d02b      	beq.n	8002bcc <HAL_CAN_IRQHandler+0x32a>
 8002b74:	2b60      	cmp	r3, #96	; 0x60
 8002b76:	d82e      	bhi.n	8002bd6 <HAL_CAN_IRQHandler+0x334>
 8002b78:	2b50      	cmp	r3, #80	; 0x50
 8002b7a:	d022      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x320>
 8002b7c:	2b50      	cmp	r3, #80	; 0x50
 8002b7e:	d82a      	bhi.n	8002bd6 <HAL_CAN_IRQHandler+0x334>
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d019      	beq.n	8002bb8 <HAL_CAN_IRQHandler+0x316>
 8002b84:	2b40      	cmp	r3, #64	; 0x40
 8002b86:	d826      	bhi.n	8002bd6 <HAL_CAN_IRQHandler+0x334>
 8002b88:	2b30      	cmp	r3, #48	; 0x30
 8002b8a:	d010      	beq.n	8002bae <HAL_CAN_IRQHandler+0x30c>
 8002b8c:	2b30      	cmp	r3, #48	; 0x30
 8002b8e:	d822      	bhi.n	8002bd6 <HAL_CAN_IRQHandler+0x334>
 8002b90:	2b10      	cmp	r3, #16
 8002b92:	d002      	beq.n	8002b9a <HAL_CAN_IRQHandler+0x2f8>
 8002b94:	2b20      	cmp	r3, #32
 8002b96:	d005      	beq.n	8002ba4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002b98:	e01d      	b.n	8002bd6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	f043 0308 	orr.w	r3, r3, #8
 8002ba0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ba2:	e019      	b.n	8002bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	f043 0310 	orr.w	r3, r3, #16
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bac:	e014      	b.n	8002bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb0:	f043 0320 	orr.w	r3, r3, #32
 8002bb4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bb6:	e00f      	b.n	8002bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bc0:	e00a      	b.n	8002bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bc8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bca:	e005      	b.n	8002bd8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002bd4:	e000      	b.n	8002bd8 <HAL_CAN_IRQHandler+0x336>
            break;
 8002bd6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002be6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2204      	movs	r2, #4
 8002bee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d008      	beq.n	8002c08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f872 	bl	8002cec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002c08:	bf00      	nop
 8002c0a:	3728      	adds	r7, #40	; 0x28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b083      	sub	sp, #12
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002c40:	bf00      	nop
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr

08002c4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002c54:	bf00      	nop
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b083      	sub	sp, #12
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002ce0:	bf00      	nop
 8002ce2:	370c      	adds	r7, #12
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002cf4:	bf00      	nop
 8002cf6:	370c      	adds	r7, #12
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfe:	4770      	bx	lr

08002d00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b085      	sub	sp, #20
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d10:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d16:	68ba      	ldr	r2, [r7, #8]
 8002d18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d32:	4a04      	ldr	r2, [pc, #16]	; (8002d44 <__NVIC_SetPriorityGrouping+0x44>)
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	60d3      	str	r3, [r2, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3714      	adds	r7, #20
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr
 8002d44:	e000ed00 	.word	0xe000ed00

08002d48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d4c:	4b04      	ldr	r3, [pc, #16]	; (8002d60 <__NVIC_GetPriorityGrouping+0x18>)
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	f003 0307 	and.w	r3, r3, #7
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	db0b      	blt.n	8002d8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d76:	79fb      	ldrb	r3, [r7, #7]
 8002d78:	f003 021f 	and.w	r2, r3, #31
 8002d7c:	4907      	ldr	r1, [pc, #28]	; (8002d9c <__NVIC_EnableIRQ+0x38>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2001      	movs	r0, #1
 8002d86:	fa00 f202 	lsl.w	r2, r0, r2
 8002d8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
 8002d9a:	bf00      	nop
 8002d9c:	e000e100 	.word	0xe000e100

08002da0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	4603      	mov	r3, r0
 8002da8:	6039      	str	r1, [r7, #0]
 8002daa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	db0a      	blt.n	8002dca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	490c      	ldr	r1, [pc, #48]	; (8002dec <__NVIC_SetPriority+0x4c>)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	0112      	lsls	r2, r2, #4
 8002dc0:	b2d2      	uxtb	r2, r2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc8:	e00a      	b.n	8002de0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	b2da      	uxtb	r2, r3
 8002dce:	4908      	ldr	r1, [pc, #32]	; (8002df0 <__NVIC_SetPriority+0x50>)
 8002dd0:	79fb      	ldrb	r3, [r7, #7]
 8002dd2:	f003 030f 	and.w	r3, r3, #15
 8002dd6:	3b04      	subs	r3, #4
 8002dd8:	0112      	lsls	r2, r2, #4
 8002dda:	b2d2      	uxtb	r2, r2
 8002ddc:	440b      	add	r3, r1
 8002dde:	761a      	strb	r2, [r3, #24]
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	e000e100 	.word	0xe000e100
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	; 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e08:	69fb      	ldr	r3, [r7, #28]
 8002e0a:	f1c3 0307 	rsb	r3, r3, #7
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	bf28      	it	cs
 8002e12:	2304      	movcs	r3, #4
 8002e14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3304      	adds	r3, #4
 8002e1a:	2b06      	cmp	r3, #6
 8002e1c:	d902      	bls.n	8002e24 <NVIC_EncodePriority+0x30>
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	3b03      	subs	r3, #3
 8002e22:	e000      	b.n	8002e26 <NVIC_EncodePriority+0x32>
 8002e24:	2300      	movs	r3, #0
 8002e26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e28:	f04f 32ff 	mov.w	r2, #4294967295
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	401a      	ands	r2, r3
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	fa01 f303 	lsl.w	r3, r1, r3
 8002e46:	43d9      	mvns	r1, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e4c:	4313      	orrs	r3, r2
         );
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3724      	adds	r7, #36	; 0x24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
	...

08002e5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b082      	sub	sp, #8
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	3b01      	subs	r3, #1
 8002e68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e6c:	d301      	bcc.n	8002e72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e00f      	b.n	8002e92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e72:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <SysTick_Config+0x40>)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3b01      	subs	r3, #1
 8002e78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e7a:	210f      	movs	r1, #15
 8002e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e80:	f7ff ff8e 	bl	8002da0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e84:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <SysTick_Config+0x40>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e8a:	4b04      	ldr	r3, [pc, #16]	; (8002e9c <SysTick_Config+0x40>)
 8002e8c:	2207      	movs	r2, #7
 8002e8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3708      	adds	r7, #8
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	e000e010 	.word	0xe000e010

08002ea0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f7ff ff29 	bl	8002d00 <__NVIC_SetPriorityGrouping>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b086      	sub	sp, #24
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
 8002ec2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec8:	f7ff ff3e 	bl	8002d48 <__NVIC_GetPriorityGrouping>
 8002ecc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	6978      	ldr	r0, [r7, #20]
 8002ed4:	f7ff ff8e 	bl	8002df4 <NVIC_EncodePriority>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ede:	4611      	mov	r1, r2
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff ff5d 	bl	8002da0 <__NVIC_SetPriority>
}
 8002ee6:	bf00      	nop
 8002ee8:	3718      	adds	r7, #24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eee:	b580      	push	{r7, lr}
 8002ef0:	b082      	sub	sp, #8
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7ff ff31 	bl	8002d64 <__NVIC_EnableIRQ>
}
 8002f02:	bf00      	nop
 8002f04:	3708      	adds	r7, #8
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}

08002f0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f0a:	b580      	push	{r7, lr}
 8002f0c:	b082      	sub	sp, #8
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f7ff ffa2 	bl	8002e5c <SysTick_Config>
 8002f18:	4603      	mov	r3, r0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3708      	adds	r7, #8
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
	...

08002f24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d101      	bne.n	8002f36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e098      	b.n	8003068 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	461a      	mov	r2, r3
 8002f3c:	4b4d      	ldr	r3, [pc, #308]	; (8003074 <HAL_DMA_Init+0x150>)
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d80f      	bhi.n	8002f62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b4b      	ldr	r3, [pc, #300]	; (8003078 <HAL_DMA_Init+0x154>)
 8002f4a:	4413      	add	r3, r2
 8002f4c:	4a4b      	ldr	r2, [pc, #300]	; (800307c <HAL_DMA_Init+0x158>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	091b      	lsrs	r3, r3, #4
 8002f54:	009a      	lsls	r2, r3, #2
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a48      	ldr	r2, [pc, #288]	; (8003080 <HAL_DMA_Init+0x15c>)
 8002f5e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f60:	e00e      	b.n	8002f80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	461a      	mov	r2, r3
 8002f68:	4b46      	ldr	r3, [pc, #280]	; (8003084 <HAL_DMA_Init+0x160>)
 8002f6a:	4413      	add	r3, r2
 8002f6c:	4a43      	ldr	r2, [pc, #268]	; (800307c <HAL_DMA_Init+0x158>)
 8002f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	009a      	lsls	r2, r3, #2
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a42      	ldr	r2, [pc, #264]	; (8003088 <HAL_DMA_Init+0x164>)
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002fa4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002fb0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a1b      	ldr	r3, [r3, #32]
 8002fc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fda:	d039      	beq.n	8003050 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	4a27      	ldr	r2, [pc, #156]	; (8003080 <HAL_DMA_Init+0x15c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d11a      	bne.n	800301c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fe6:	4b29      	ldr	r3, [pc, #164]	; (800308c <HAL_DMA_Init+0x168>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	f003 031c 	and.w	r3, r3, #28
 8002ff2:	210f      	movs	r1, #15
 8002ff4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff8:	43db      	mvns	r3, r3
 8002ffa:	4924      	ldr	r1, [pc, #144]	; (800308c <HAL_DMA_Init+0x168>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003000:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_DMA_Init+0x168>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6859      	ldr	r1, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800300c:	f003 031c 	and.w	r3, r3, #28
 8003010:	fa01 f303 	lsl.w	r3, r1, r3
 8003014:	491d      	ldr	r1, [pc, #116]	; (800308c <HAL_DMA_Init+0x168>)
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]
 800301a:	e019      	b.n	8003050 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800301c:	4b1c      	ldr	r3, [pc, #112]	; (8003090 <HAL_DMA_Init+0x16c>)
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003024:	f003 031c 	and.w	r3, r3, #28
 8003028:	210f      	movs	r1, #15
 800302a:	fa01 f303 	lsl.w	r3, r1, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	4917      	ldr	r1, [pc, #92]	; (8003090 <HAL_DMA_Init+0x16c>)
 8003032:	4013      	ands	r3, r2
 8003034:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003036:	4b16      	ldr	r3, [pc, #88]	; (8003090 <HAL_DMA_Init+0x16c>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6859      	ldr	r1, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	f003 031c 	and.w	r3, r3, #28
 8003046:	fa01 f303 	lsl.w	r3, r1, r3
 800304a:	4911      	ldr	r1, [pc, #68]	; (8003090 <HAL_DMA_Init+0x16c>)
 800304c:	4313      	orrs	r3, r2
 800304e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003066:	2300      	movs	r3, #0
}
 8003068:	4618      	mov	r0, r3
 800306a:	3714      	adds	r7, #20
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40020407 	.word	0x40020407
 8003078:	bffdfff8 	.word	0xbffdfff8
 800307c:	cccccccd 	.word	0xcccccccd
 8003080:	40020000 	.word	0x40020000
 8003084:	bffdfbf8 	.word	0xbffdfbf8
 8003088:	40020400 	.word	0x40020400
 800308c:	400200a8 	.word	0x400200a8
 8003090:	400204a8 	.word	0x400204a8

08003094 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b086      	sub	sp, #24
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a2:	2300      	movs	r3, #0
 80030a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d101      	bne.n	80030b4 <HAL_DMA_Start_IT+0x20>
 80030b0:	2302      	movs	r3, #2
 80030b2:	e04b      	b.n	800314c <HAL_DMA_Start_IT+0xb8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b01      	cmp	r3, #1
 80030c6:	d13a      	bne.n	800313e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 0201 	bic.w	r2, r2, #1
 80030e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 f921 	bl	8003334 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d008      	beq.n	800310c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f042 020e 	orr.w	r2, r2, #14
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e00f      	b.n	800312c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f022 0204 	bic.w	r2, r2, #4
 800311a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 020a 	orr.w	r2, r2, #10
 800312a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0201 	orr.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	e005      	b.n	800314a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800314a:	7dfb      	ldrb	r3, [r7, #23]
}
 800314c:	4618      	mov	r0, r3
 800314e:	3718      	adds	r7, #24
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}

08003154 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b02      	cmp	r3, #2
 800316a:	d005      	beq.n	8003178 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2204      	movs	r2, #4
 8003170:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	73fb      	strb	r3, [r7, #15]
 8003176:	e029      	b.n	80031cc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 020e 	bic.w	r2, r2, #14
 8003186:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0201 	bic.w	r2, r2, #1
 8003196:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319c:	f003 021c 	and.w	r2, r3, #28
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a4:	2101      	movs	r1, #1
 80031a6:	fa01 f202 	lsl.w	r2, r1, r2
 80031aa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d003      	beq.n	80031cc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	4798      	blx	r3
    }
  }
  return status;
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031f2:	f003 031c 	and.w	r3, r3, #28
 80031f6:	2204      	movs	r2, #4
 80031f8:	409a      	lsls	r2, r3
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	4013      	ands	r3, r2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d026      	beq.n	8003250 <HAL_DMA_IRQHandler+0x7a>
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d021      	beq.n	8003250 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d107      	bne.n	800322a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0204 	bic.w	r2, r2, #4
 8003228:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f003 021c 	and.w	r2, r3, #28
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	2104      	movs	r1, #4
 8003238:	fa01 f202 	lsl.w	r2, r1, r2
 800323c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003242:	2b00      	cmp	r3, #0
 8003244:	d071      	beq.n	800332a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800324e:	e06c      	b.n	800332a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003254:	f003 031c 	and.w	r3, r3, #28
 8003258:	2202      	movs	r2, #2
 800325a:	409a      	lsls	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	4013      	ands	r3, r2
 8003260:	2b00      	cmp	r3, #0
 8003262:	d02e      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xec>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d029      	beq.n	80032c2 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0320 	and.w	r3, r3, #32
 8003278:	2b00      	cmp	r3, #0
 800327a:	d10b      	bne.n	8003294 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f022 020a 	bic.w	r2, r2, #10
 800328a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003298:	f003 021c 	and.w	r2, r3, #28
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	2102      	movs	r1, #2
 80032a2:	fa01 f202 	lsl.w	r2, r1, r2
 80032a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d038      	beq.n	800332a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80032c0:	e033      	b.n	800332a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c6:	f003 031c 	and.w	r3, r3, #28
 80032ca:	2208      	movs	r2, #8
 80032cc:	409a      	lsls	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4013      	ands	r3, r2
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d02a      	beq.n	800332c <HAL_DMA_IRQHandler+0x156>
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d025      	beq.n	800332c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f022 020e 	bic.w	r2, r2, #14
 80032ee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f4:	f003 021c 	and.w	r2, r3, #28
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	2101      	movs	r1, #1
 80032fe:	fa01 f202 	lsl.w	r2, r1, r2
 8003302:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2201      	movs	r2, #1
 8003308:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800331e:	2b00      	cmp	r3, #0
 8003320:	d004      	beq.n	800332c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800332a:	bf00      	nop
 800332c:	bf00      	nop
}
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003334:	b480      	push	{r7}
 8003336:	b085      	sub	sp, #20
 8003338:	af00      	add	r7, sp, #0
 800333a:	60f8      	str	r0, [r7, #12]
 800333c:	60b9      	str	r1, [r7, #8]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003346:	f003 021c 	and.w	r2, r3, #28
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334e:	2101      	movs	r1, #1
 8003350:	fa01 f202 	lsl.w	r2, r1, r2
 8003354:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b10      	cmp	r3, #16
 8003364:	d108      	bne.n	8003378 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68ba      	ldr	r2, [r7, #8]
 8003374:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003376:	e007      	b.n	8003388 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68ba      	ldr	r2, [r7, #8]
 800337e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	60da      	str	r2, [r3, #12]
}
 8003388:	bf00      	nop
 800338a:	3714      	adds	r7, #20
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800339e:	2300      	movs	r3, #0
 80033a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80033a2:	e148      	b.n	8003636 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	4013      	ands	r3, r2
 80033b2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 813a 	beq.w	8003630 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	f003 0303 	and.w	r3, r3, #3
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d005      	beq.n	80033d4 <HAL_GPIO_Init+0x40>
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d130      	bne.n	8003436 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	005b      	lsls	r3, r3, #1
 80033de:	2203      	movs	r2, #3
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	43db      	mvns	r3, r3
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	4013      	ands	r3, r2
 80033ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68da      	ldr	r2, [r3, #12]
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	005b      	lsls	r3, r3, #1
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	693a      	ldr	r2, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	693a      	ldr	r2, [r7, #16]
 8003402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800340a:	2201      	movs	r2, #1
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	fa02 f303 	lsl.w	r3, r2, r3
 8003412:	43db      	mvns	r3, r3
 8003414:	693a      	ldr	r2, [r7, #16]
 8003416:	4013      	ands	r3, r2
 8003418:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	091b      	lsrs	r3, r3, #4
 8003420:	f003 0201 	and.w	r2, r3, #1
 8003424:	697b      	ldr	r3, [r7, #20]
 8003426:	fa02 f303 	lsl.w	r3, r2, r3
 800342a:	693a      	ldr	r2, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b03      	cmp	r3, #3
 8003440:	d017      	beq.n	8003472 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	2203      	movs	r2, #3
 800344e:	fa02 f303 	lsl.w	r3, r2, r3
 8003452:	43db      	mvns	r3, r3
 8003454:	693a      	ldr	r2, [r7, #16]
 8003456:	4013      	ands	r3, r2
 8003458:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	693a      	ldr	r2, [r7, #16]
 8003468:	4313      	orrs	r3, r2
 800346a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d123      	bne.n	80034c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	08da      	lsrs	r2, r3, #3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	3208      	adds	r2, #8
 8003486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800348a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	f003 0307 	and.w	r3, r3, #7
 8003492:	009b      	lsls	r3, r3, #2
 8003494:	220f      	movs	r2, #15
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43db      	mvns	r3, r3
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4013      	ands	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	691a      	ldr	r2, [r3, #16]
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	fa02 f303 	lsl.w	r3, r2, r3
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	4313      	orrs	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80034b8:	697b      	ldr	r3, [r7, #20]
 80034ba:	08da      	lsrs	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	3208      	adds	r2, #8
 80034c0:	6939      	ldr	r1, [r7, #16]
 80034c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	005b      	lsls	r3, r3, #1
 80034d0:	2203      	movs	r2, #3
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43db      	mvns	r3, r3
 80034d8:	693a      	ldr	r2, [r7, #16]
 80034da:	4013      	ands	r3, r2
 80034dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f003 0203 	and.w	r2, r3, #3
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	005b      	lsls	r3, r3, #1
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	693a      	ldr	r2, [r7, #16]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	693a      	ldr	r2, [r7, #16]
 80034f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 8094 	beq.w	8003630 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003508:	4b52      	ldr	r3, [pc, #328]	; (8003654 <HAL_GPIO_Init+0x2c0>)
 800350a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350c:	4a51      	ldr	r2, [pc, #324]	; (8003654 <HAL_GPIO_Init+0x2c0>)
 800350e:	f043 0301 	orr.w	r3, r3, #1
 8003512:	6613      	str	r3, [r2, #96]	; 0x60
 8003514:	4b4f      	ldr	r3, [pc, #316]	; (8003654 <HAL_GPIO_Init+0x2c0>)
 8003516:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003518:	f003 0301 	and.w	r3, r3, #1
 800351c:	60bb      	str	r3, [r7, #8]
 800351e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003520:	4a4d      	ldr	r2, [pc, #308]	; (8003658 <HAL_GPIO_Init+0x2c4>)
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	089b      	lsrs	r3, r3, #2
 8003526:	3302      	adds	r3, #2
 8003528:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	f003 0303 	and.w	r3, r3, #3
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	220f      	movs	r2, #15
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	4013      	ands	r3, r2
 8003542:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800354a:	d00d      	beq.n	8003568 <HAL_GPIO_Init+0x1d4>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a43      	ldr	r2, [pc, #268]	; (800365c <HAL_GPIO_Init+0x2c8>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <HAL_GPIO_Init+0x1d0>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a42      	ldr	r2, [pc, #264]	; (8003660 <HAL_GPIO_Init+0x2cc>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d101      	bne.n	8003560 <HAL_GPIO_Init+0x1cc>
 800355c:	2302      	movs	r3, #2
 800355e:	e004      	b.n	800356a <HAL_GPIO_Init+0x1d6>
 8003560:	2307      	movs	r3, #7
 8003562:	e002      	b.n	800356a <HAL_GPIO_Init+0x1d6>
 8003564:	2301      	movs	r3, #1
 8003566:	e000      	b.n	800356a <HAL_GPIO_Init+0x1d6>
 8003568:	2300      	movs	r3, #0
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	f002 0203 	and.w	r2, r2, #3
 8003570:	0092      	lsls	r2, r2, #2
 8003572:	4093      	lsls	r3, r2
 8003574:	693a      	ldr	r2, [r7, #16]
 8003576:	4313      	orrs	r3, r2
 8003578:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800357a:	4937      	ldr	r1, [pc, #220]	; (8003658 <HAL_GPIO_Init+0x2c4>)
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	089b      	lsrs	r3, r3, #2
 8003580:	3302      	adds	r3, #2
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003588:	4b36      	ldr	r3, [pc, #216]	; (8003664 <HAL_GPIO_Init+0x2d0>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	43db      	mvns	r3, r3
 8003592:	693a      	ldr	r2, [r7, #16]
 8003594:	4013      	ands	r3, r2
 8003596:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d003      	beq.n	80035ac <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	4313      	orrs	r3, r2
 80035aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80035ac:	4a2d      	ldr	r2, [pc, #180]	; (8003664 <HAL_GPIO_Init+0x2d0>)
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80035b2:	4b2c      	ldr	r3, [pc, #176]	; (8003664 <HAL_GPIO_Init+0x2d0>)
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	43db      	mvns	r3, r3
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	4013      	ands	r3, r2
 80035c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80035ce:	693a      	ldr	r2, [r7, #16]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	4313      	orrs	r3, r2
 80035d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035d6:	4a23      	ldr	r2, [pc, #140]	; (8003664 <HAL_GPIO_Init+0x2d0>)
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <HAL_GPIO_Init+0x2d0>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	4013      	ands	r3, r2
 80035ea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003600:	4a18      	ldr	r2, [pc, #96]	; (8003664 <HAL_GPIO_Init+0x2d0>)
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003606:	4b17      	ldr	r3, [pc, #92]	; (8003664 <HAL_GPIO_Init+0x2d0>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	43db      	mvns	r3, r3
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	4013      	ands	r3, r2
 8003614:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003622:	693a      	ldr	r2, [r7, #16]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	4313      	orrs	r3, r2
 8003628:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800362a:	4a0e      	ldr	r2, [pc, #56]	; (8003664 <HAL_GPIO_Init+0x2d0>)
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	3301      	adds	r3, #1
 8003634:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	fa22 f303 	lsr.w	r3, r2, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	f47f aeaf 	bne.w	80033a4 <HAL_GPIO_Init+0x10>
  }
}
 8003646:	bf00      	nop
 8003648:	bf00      	nop
 800364a:	371c      	adds	r7, #28
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	40021000 	.word	0x40021000
 8003658:	40010000 	.word	0x40010000
 800365c:	48000400 	.word	0x48000400
 8003660:	48000800 	.word	0x48000800
 8003664:	40010400 	.word	0x40010400

08003668 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003668:	b480      	push	{r7}
 800366a:	b083      	sub	sp, #12
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	460b      	mov	r3, r1
 8003672:	807b      	strh	r3, [r7, #2]
 8003674:	4613      	mov	r3, r2
 8003676:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003678:	787b      	ldrb	r3, [r7, #1]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800367e:	887a      	ldrh	r2, [r7, #2]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003684:	e002      	b.n	800368c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003686:	887a      	ldrh	r2, [r7, #2]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800369c:	4b05      	ldr	r3, [pc, #20]	; (80036b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a04      	ldr	r2, [pc, #16]	; (80036b4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80036a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a6:	6013      	str	r3, [r2, #0]
}
 80036a8:	bf00      	nop
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	40007000 	.word	0x40007000

080036b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80036bc:	4b04      	ldr	r3, [pc, #16]	; (80036d0 <HAL_PWREx_GetVoltageRange+0x18>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40007000 	.word	0x40007000

080036d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b085      	sub	sp, #20
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e2:	d130      	bne.n	8003746 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80036e4:	4b23      	ldr	r3, [pc, #140]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80036ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036f0:	d038      	beq.n	8003764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80036f2:	4b20      	ldr	r3, [pc, #128]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80036fa:	4a1e      	ldr	r2, [pc, #120]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003700:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003702:	4b1d      	ldr	r3, [pc, #116]	; (8003778 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2232      	movs	r2, #50	; 0x32
 8003708:	fb02 f303 	mul.w	r3, r2, r3
 800370c:	4a1b      	ldr	r2, [pc, #108]	; (800377c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800370e:	fba2 2303 	umull	r2, r3, r2, r3
 8003712:	0c9b      	lsrs	r3, r3, #18
 8003714:	3301      	adds	r3, #1
 8003716:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003718:	e002      	b.n	8003720 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	3b01      	subs	r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003720:	4b14      	ldr	r3, [pc, #80]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372c:	d102      	bne.n	8003734 <HAL_PWREx_ControlVoltageScaling+0x60>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1f2      	bne.n	800371a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003734:	4b0f      	ldr	r3, [pc, #60]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800373c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003740:	d110      	bne.n	8003764 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e00f      	b.n	8003766 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003746:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800374e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003752:	d007      	beq.n	8003764 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003754:	4b07      	ldr	r3, [pc, #28]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800375c:	4a05      	ldr	r2, [pc, #20]	; (8003774 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800375e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003762:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3714      	adds	r7, #20
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
 8003774:	40007000 	.word	0x40007000
 8003778:	2000000c 	.word	0x2000000c
 800377c:	431bde83 	.word	0x431bde83

08003780 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d102      	bne.n	8003794 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	f000 bc02 	b.w	8003f98 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003794:	4b96      	ldr	r3, [pc, #600]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f003 030c 	and.w	r3, r3, #12
 800379c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800379e:	4b94      	ldr	r3, [pc, #592]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80e4 	beq.w	800397e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d007      	beq.n	80037cc <HAL_RCC_OscConfig+0x4c>
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	f040 808b 	bne.w	80038da <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	f040 8087 	bne.w	80038da <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037cc:	4b88      	ldr	r3, [pc, #544]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d005      	beq.n	80037e4 <HAL_RCC_OscConfig+0x64>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d101      	bne.n	80037e4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e3d9      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	4b81      	ldr	r3, [pc, #516]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_RCC_OscConfig+0x7e>
 80037f4:	4b7e      	ldr	r3, [pc, #504]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80037fc:	e005      	b.n	800380a <HAL_RCC_OscConfig+0x8a>
 80037fe:	4b7c      	ldr	r3, [pc, #496]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003800:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003804:	091b      	lsrs	r3, r3, #4
 8003806:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800380a:	4293      	cmp	r3, r2
 800380c:	d223      	bcs.n	8003856 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a1b      	ldr	r3, [r3, #32]
 8003812:	4618      	mov	r0, r3
 8003814:	f000 fd8c 	bl	8004330 <RCC_SetFlashLatencyFromMSIRange>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e3ba      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003822:	4b73      	ldr	r3, [pc, #460]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a72      	ldr	r2, [pc, #456]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003828:	f043 0308 	orr.w	r3, r3, #8
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	4b70      	ldr	r3, [pc, #448]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	496d      	ldr	r1, [pc, #436]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003840:	4b6b      	ldr	r3, [pc, #428]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	69db      	ldr	r3, [r3, #28]
 800384c:	021b      	lsls	r3, r3, #8
 800384e:	4968      	ldr	r1, [pc, #416]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003850:	4313      	orrs	r3, r2
 8003852:	604b      	str	r3, [r1, #4]
 8003854:	e025      	b.n	80038a2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003856:	4b66      	ldr	r3, [pc, #408]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a65      	ldr	r2, [pc, #404]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 800385c:	f043 0308 	orr.w	r3, r3, #8
 8003860:	6013      	str	r3, [r2, #0]
 8003862:	4b63      	ldr	r3, [pc, #396]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6a1b      	ldr	r3, [r3, #32]
 800386e:	4960      	ldr	r1, [pc, #384]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003870:	4313      	orrs	r3, r2
 8003872:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003874:	4b5e      	ldr	r3, [pc, #376]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	021b      	lsls	r3, r3, #8
 8003882:	495b      	ldr	r1, [pc, #364]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003884:	4313      	orrs	r3, r2
 8003886:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d109      	bne.n	80038a2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a1b      	ldr	r3, [r3, #32]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fd4c 	bl	8004330 <RCC_SetFlashLatencyFromMSIRange>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d001      	beq.n	80038a2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e37a      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a2:	f000 fc81 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b51      	ldr	r3, [pc, #324]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	4950      	ldr	r1, [pc, #320]	; (80039f4 <HAL_RCC_OscConfig+0x274>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	f003 031f 	and.w	r3, r3, #31
 80038ba:	fa22 f303 	lsr.w	r3, r2, r3
 80038be:	4a4e      	ldr	r2, [pc, #312]	; (80039f8 <HAL_RCC_OscConfig+0x278>)
 80038c0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038c2:	4b4e      	ldr	r3, [pc, #312]	; (80039fc <HAL_RCC_OscConfig+0x27c>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f7fe fc8e 	bl	80021e8 <HAL_InitTick>
 80038cc:	4603      	mov	r3, r0
 80038ce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d052      	beq.n	800397c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	e35e      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d032      	beq.n	8003948 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80038e2:	4b43      	ldr	r3, [pc, #268]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a42      	ldr	r2, [pc, #264]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ee:	f7fe fccb 	bl	8002288 <HAL_GetTick>
 80038f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80038f4:	e008      	b.n	8003908 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f6:	f7fe fcc7 	bl	8002288 <HAL_GetTick>
 80038fa:	4602      	mov	r2, r0
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	1ad3      	subs	r3, r2, r3
 8003900:	2b02      	cmp	r3, #2
 8003902:	d901      	bls.n	8003908 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003904:	2303      	movs	r3, #3
 8003906:	e347      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003908:	4b39      	ldr	r3, [pc, #228]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d0f0      	beq.n	80038f6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a35      	ldr	r2, [pc, #212]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 800391a:	f043 0308 	orr.w	r3, r3, #8
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4b33      	ldr	r3, [pc, #204]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	4930      	ldr	r1, [pc, #192]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 800392e:	4313      	orrs	r3, r2
 8003930:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003932:	4b2f      	ldr	r3, [pc, #188]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	492b      	ldr	r1, [pc, #172]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003942:	4313      	orrs	r3, r2
 8003944:	604b      	str	r3, [r1, #4]
 8003946:	e01a      	b.n	800397e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003948:	4b29      	ldr	r3, [pc, #164]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 800394e:	f023 0301 	bic.w	r3, r3, #1
 8003952:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003954:	f7fe fc98 	bl	8002288 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800395c:	f7fe fc94 	bl	8002288 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e314      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800396e:	4b20      	ldr	r3, [pc, #128]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1f0      	bne.n	800395c <HAL_RCC_OscConfig+0x1dc>
 800397a:	e000      	b.n	800397e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800397c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	d073      	beq.n	8003a72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	2b08      	cmp	r3, #8
 800398e:	d005      	beq.n	800399c <HAL_RCC_OscConfig+0x21c>
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	2b0c      	cmp	r3, #12
 8003994:	d10e      	bne.n	80039b4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	2b03      	cmp	r3, #3
 800399a:	d10b      	bne.n	80039b4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800399c:	4b14      	ldr	r3, [pc, #80]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d063      	beq.n	8003a70 <HAL_RCC_OscConfig+0x2f0>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d15f      	bne.n	8003a70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e2f1      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039bc:	d106      	bne.n	80039cc <HAL_RCC_OscConfig+0x24c>
 80039be:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a0b      	ldr	r2, [pc, #44]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80039c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c8:	6013      	str	r3, [r2, #0]
 80039ca:	e025      	b.n	8003a18 <HAL_RCC_OscConfig+0x298>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039d4:	d114      	bne.n	8003a00 <HAL_RCC_OscConfig+0x280>
 80039d6:	4b06      	ldr	r3, [pc, #24]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a05      	ldr	r2, [pc, #20]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80039dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039e0:	6013      	str	r3, [r2, #0]
 80039e2:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a02      	ldr	r2, [pc, #8]	; (80039f0 <HAL_RCC_OscConfig+0x270>)
 80039e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ec:	6013      	str	r3, [r2, #0]
 80039ee:	e013      	b.n	8003a18 <HAL_RCC_OscConfig+0x298>
 80039f0:	40021000 	.word	0x40021000
 80039f4:	0800c9d0 	.word	0x0800c9d0
 80039f8:	2000000c 	.word	0x2000000c
 80039fc:	20000010 	.word	0x20000010
 8003a00:	4ba0      	ldr	r3, [pc, #640]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a9f      	ldr	r2, [pc, #636]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	4b9d      	ldr	r3, [pc, #628]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a9c      	ldr	r2, [pc, #624]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d013      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a20:	f7fe fc32 	bl	8002288 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a26:	e008      	b.n	8003a3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a28:	f7fe fc2e 	bl	8002288 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e2ae      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a3a:	4b92      	ldr	r3, [pc, #584]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCC_OscConfig+0x2a8>
 8003a46:	e014      	b.n	8003a72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe fc1e 	bl	8002288 <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a50:	f7fe fc1a 	bl	8002288 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	; 0x64
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e29a      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a62:	4b88      	ldr	r3, [pc, #544]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x2d0>
 8003a6e:	e000      	b.n	8003a72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d060      	beq.n	8003b40 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d005      	beq.n	8003a90 <HAL_RCC_OscConfig+0x310>
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	2b0c      	cmp	r3, #12
 8003a88:	d119      	bne.n	8003abe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d116      	bne.n	8003abe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a90:	4b7c      	ldr	r3, [pc, #496]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d005      	beq.n	8003aa8 <HAL_RCC_OscConfig+0x328>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e277      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003aa8:	4b76      	ldr	r3, [pc, #472]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	4973      	ldr	r1, [pc, #460]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003abc:	e040      	b.n	8003b40 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d023      	beq.n	8003b0e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ac6:	4b6f      	ldr	r3, [pc, #444]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a6e      	ldr	r2, [pc, #440]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003acc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ad0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad2:	f7fe fbd9 	bl	8002288 <HAL_GetTick>
 8003ad6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ada:	f7fe fbd5 	bl	8002288 <HAL_GetTick>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b02      	cmp	r3, #2
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e255      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003aec:	4b65      	ldr	r3, [pc, #404]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0f0      	beq.n	8003ada <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af8:	4b62      	ldr	r3, [pc, #392]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	061b      	lsls	r3, r3, #24
 8003b06:	495f      	ldr	r1, [pc, #380]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	604b      	str	r3, [r1, #4]
 8003b0c:	e018      	b.n	8003b40 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b0e:	4b5d      	ldr	r3, [pc, #372]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a5c      	ldr	r2, [pc, #368]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fbb5 	bl	8002288 <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b22:	f7fe fbb1 	bl	8002288 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e231      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f0      	bne.n	8003b22 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d03c      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d01c      	beq.n	8003b8e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b54:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b5a:	4a4a      	ldr	r2, [pc, #296]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b64:	f7fe fb90 	bl	8002288 <HAL_GetTick>
 8003b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b6a:	e008      	b.n	8003b7e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b6c:	f7fe fb8c 	bl	8002288 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e20c      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b7e:	4b41      	ldr	r3, [pc, #260]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b80:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0ef      	beq.n	8003b6c <HAL_RCC_OscConfig+0x3ec>
 8003b8c:	e01b      	b.n	8003bc6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b8e:	4b3d      	ldr	r3, [pc, #244]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b90:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b94:	4a3b      	ldr	r2, [pc, #236]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003b96:	f023 0301 	bic.w	r3, r3, #1
 8003b9a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b9e:	f7fe fb73 	bl	8002288 <HAL_GetTick>
 8003ba2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ba4:	e008      	b.n	8003bb8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ba6:	f7fe fb6f 	bl	8002288 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	1ad3      	subs	r3, r2, r3
 8003bb0:	2b02      	cmp	r3, #2
 8003bb2:	d901      	bls.n	8003bb8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e1ef      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bb8:	4b32      	ldr	r3, [pc, #200]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003bba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bbe:	f003 0302 	and.w	r3, r3, #2
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d1ef      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 80a6 	beq.w	8003d20 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bd8:	4b2a      	ldr	r3, [pc, #168]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10d      	bne.n	8003c00 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be4:	4b27      	ldr	r3, [pc, #156]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be8:	4a26      	ldr	r2, [pc, #152]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003bea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bee:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf0:	4b24      	ldr	r3, [pc, #144]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf8:	60bb      	str	r3, [r7, #8]
 8003bfa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c00:	4b21      	ldr	r3, [pc, #132]	; (8003c88 <HAL_RCC_OscConfig+0x508>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d118      	bne.n	8003c3e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c0c:	4b1e      	ldr	r3, [pc, #120]	; (8003c88 <HAL_RCC_OscConfig+0x508>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a1d      	ldr	r2, [pc, #116]	; (8003c88 <HAL_RCC_OscConfig+0x508>)
 8003c12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c16:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c18:	f7fe fb36 	bl	8002288 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c20:	f7fe fb32 	bl	8002288 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1b2      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c32:	4b15      	ldr	r3, [pc, #84]	; (8003c88 <HAL_RCC_OscConfig+0x508>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d0f0      	beq.n	8003c20 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d108      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4d8>
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	4a0d      	ldr	r2, [pc, #52]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003c4e:	f043 0301 	orr.w	r3, r3, #1
 8003c52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c56:	e029      	b.n	8003cac <HAL_RCC_OscConfig+0x52c>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	2b05      	cmp	r3, #5
 8003c5e:	d115      	bne.n	8003c8c <HAL_RCC_OscConfig+0x50c>
 8003c60:	4b08      	ldr	r3, [pc, #32]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003c62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c66:	4a07      	ldr	r2, [pc, #28]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003c68:	f043 0304 	orr.w	r3, r3, #4
 8003c6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c70:	4b04      	ldr	r3, [pc, #16]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c76:	4a03      	ldr	r2, [pc, #12]	; (8003c84 <HAL_RCC_OscConfig+0x504>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c80:	e014      	b.n	8003cac <HAL_RCC_OscConfig+0x52c>
 8003c82:	bf00      	nop
 8003c84:	40021000 	.word	0x40021000
 8003c88:	40007000 	.word	0x40007000
 8003c8c:	4b9a      	ldr	r3, [pc, #616]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c92:	4a99      	ldr	r2, [pc, #612]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003c94:	f023 0301 	bic.w	r3, r3, #1
 8003c98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c9c:	4b96      	ldr	r3, [pc, #600]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003c9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca2:	4a95      	ldr	r2, [pc, #596]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003ca4:	f023 0304 	bic.w	r3, r3, #4
 8003ca8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	689b      	ldr	r3, [r3, #8]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d016      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cb4:	f7fe fae8 	bl	8002288 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cba:	e00a      	b.n	8003cd2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cbc:	f7fe fae4 	bl	8002288 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e162      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd2:	4b89      	ldr	r3, [pc, #548]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd8:	f003 0302 	and.w	r3, r3, #2
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d0ed      	beq.n	8003cbc <HAL_RCC_OscConfig+0x53c>
 8003ce0:	e015      	b.n	8003d0e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ce2:	f7fe fad1 	bl	8002288 <HAL_GetTick>
 8003ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003ce8:	e00a      	b.n	8003d00 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cea:	f7fe facd 	bl	8002288 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	1ad3      	subs	r3, r2, r3
 8003cf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d901      	bls.n	8003d00 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	e14b      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d00:	4b7d      	ldr	r3, [pc, #500]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d1ed      	bne.n	8003cea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d0e:	7ffb      	ldrb	r3, [r7, #31]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d105      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d14:	4b78      	ldr	r3, [pc, #480]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d18:	4a77      	ldr	r2, [pc, #476]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0320 	and.w	r3, r3, #32
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d03c      	beq.n	8003da6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01c      	beq.n	8003d6e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d34:	4b70      	ldr	r3, [pc, #448]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d3a:	4a6f      	ldr	r2, [pc, #444]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d3c:	f043 0301 	orr.w	r3, r3, #1
 8003d40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d44:	f7fe faa0 	bl	8002288 <HAL_GetTick>
 8003d48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d4c:	f7fe fa9c 	bl	8002288 <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e11c      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003d5e:	4b66      	ldr	r3, [pc, #408]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0ef      	beq.n	8003d4c <HAL_RCC_OscConfig+0x5cc>
 8003d6c:	e01b      	b.n	8003da6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d6e:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d74:	4a60      	ldr	r2, [pc, #384]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d7e:	f7fe fa83 	bl	8002288 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d86:	f7fe fa7f 	bl	8002288 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e0ff      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003d98:	4b57      	ldr	r3, [pc, #348]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003d9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1ef      	bne.n	8003d86 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f000 80f3 	beq.w	8003f96 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003db4:	2b02      	cmp	r3, #2
 8003db6:	f040 80c9 	bne.w	8003f4c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003dba:	4b4f      	ldr	r3, [pc, #316]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	f003 0203 	and.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d12c      	bne.n	8003e28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d123      	bne.n	8003e28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d11b      	bne.n	8003e28 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d113      	bne.n	8003e28 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e0a:	085b      	lsrs	r3, r3, #1
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d109      	bne.n	8003e28 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	3b01      	subs	r3, #1
 8003e22:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d06b      	beq.n	8003f00 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	2b0c      	cmp	r3, #12
 8003e2c:	d062      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003e2e:	4b32      	ldr	r3, [pc, #200]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e0ac      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003e3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a2d      	ldr	r2, [pc, #180]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e48:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e4a:	f7fe fa1d 	bl	8002288 <HAL_GetTick>
 8003e4e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e52:	f7fe fa19 	bl	8002288 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e099      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e64:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e70:	4b21      	ldr	r3, [pc, #132]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003e72:	68da      	ldr	r2, [r3, #12]
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <HAL_RCC_OscConfig+0x77c>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	687a      	ldr	r2, [r7, #4]
 8003e7a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e7c:	687a      	ldr	r2, [r7, #4]
 8003e7e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e80:	3a01      	subs	r2, #1
 8003e82:	0112      	lsls	r2, r2, #4
 8003e84:	4311      	orrs	r1, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e8a:	0212      	lsls	r2, r2, #8
 8003e8c:	4311      	orrs	r1, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e92:	0852      	lsrs	r2, r2, #1
 8003e94:	3a01      	subs	r2, #1
 8003e96:	0552      	lsls	r2, r2, #21
 8003e98:	4311      	orrs	r1, r2
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e9e:	0852      	lsrs	r2, r2, #1
 8003ea0:	3a01      	subs	r2, #1
 8003ea2:	0652      	lsls	r2, r2, #25
 8003ea4:	4311      	orrs	r1, r2
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eaa:	06d2      	lsls	r2, r2, #27
 8003eac:	430a      	orrs	r2, r1
 8003eae:	4912      	ldr	r1, [pc, #72]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a0c      	ldr	r2, [pc, #48]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003ecc:	f7fe f9dc 	bl	8002288 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fe f9d8 	bl	8002288 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e058      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee6:	4b04      	ldr	r3, [pc, #16]	; (8003ef8 <HAL_RCC_OscConfig+0x778>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ef2:	e050      	b.n	8003f96 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e04f      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
 8003ef8:	40021000 	.word	0x40021000
 8003efc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f00:	4b27      	ldr	r3, [pc, #156]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d144      	bne.n	8003f96 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003f0c:	4b24      	ldr	r3, [pc, #144]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a23      	ldr	r2, [pc, #140]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f12:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f16:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003f18:	4b21      	ldr	r3, [pc, #132]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	4a20      	ldr	r2, [pc, #128]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f22:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003f24:	f7fe f9b0 	bl	8002288 <HAL_GetTick>
 8003f28:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f2a:	e008      	b.n	8003f3e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f2c:	f7fe f9ac 	bl	8002288 <HAL_GetTick>
 8003f30:	4602      	mov	r2, r0
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e02c      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f3e:	4b18      	ldr	r3, [pc, #96]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d0f0      	beq.n	8003f2c <HAL_RCC_OscConfig+0x7ac>
 8003f4a:	e024      	b.n	8003f96 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	2b0c      	cmp	r3, #12
 8003f50:	d01f      	beq.n	8003f92 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f52:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a12      	ldr	r2, [pc, #72]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fe f993 	bl	8002288 <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f66:	f7fe f98f 	bl	8002288 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e00f      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f78:	4b09      	ldr	r3, [pc, #36]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1f0      	bne.n	8003f66 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003f84:	4b06      	ldr	r3, [pc, #24]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	4905      	ldr	r1, [pc, #20]	; (8003fa0 <HAL_RCC_OscConfig+0x820>)
 8003f8a:	4b06      	ldr	r3, [pc, #24]	; (8003fa4 <HAL_RCC_OscConfig+0x824>)
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	60cb      	str	r3, [r1, #12]
 8003f90:	e001      	b.n	8003f96 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	feeefffc 	.word	0xfeeefffc

08003fa8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d101      	bne.n	8003fbc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	e0e7      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fbc:	4b75      	ldr	r3, [pc, #468]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	683a      	ldr	r2, [r7, #0]
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d910      	bls.n	8003fec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fca:	4b72      	ldr	r3, [pc, #456]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f023 0207 	bic.w	r2, r3, #7
 8003fd2:	4970      	ldr	r1, [pc, #448]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fda:	4b6e      	ldr	r3, [pc, #440]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 0307 	and.w	r3, r3, #7
 8003fe2:	683a      	ldr	r2, [r7, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d001      	beq.n	8003fec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e0cf      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d010      	beq.n	800401a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	4b66      	ldr	r3, [pc, #408]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004004:	429a      	cmp	r2, r3
 8004006:	d908      	bls.n	800401a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004008:	4b63      	ldr	r3, [pc, #396]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	4960      	ldr	r1, [pc, #384]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d04c      	beq.n	80040c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b03      	cmp	r3, #3
 800402c:	d107      	bne.n	800403e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800402e:	4b5a      	ldr	r3, [pc, #360]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d121      	bne.n	800407e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e0a6      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b02      	cmp	r3, #2
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004046:	4b54      	ldr	r3, [pc, #336]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d115      	bne.n	800407e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e09a      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800405e:	4b4e      	ldr	r3, [pc, #312]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e08e      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800406e:	4b4a      	ldr	r3, [pc, #296]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e086      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800407e:	4b46      	ldr	r3, [pc, #280]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	f023 0203 	bic.w	r2, r3, #3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	4943      	ldr	r1, [pc, #268]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	4313      	orrs	r3, r2
 800408e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004090:	f7fe f8fa 	bl	8002288 <HAL_GetTick>
 8004094:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	e00a      	b.n	80040ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004098:	f7fe f8f6 	bl	8002288 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e06e      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ae:	4b3a      	ldr	r3, [pc, #232]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 020c 	and.w	r2, r3, #12
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	009b      	lsls	r3, r3, #2
 80040bc:	429a      	cmp	r2, r3
 80040be:	d1eb      	bne.n	8004098 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d010      	beq.n	80040ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040d8:	429a      	cmp	r2, r3
 80040da:	d208      	bcs.n	80040ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040dc:	4b2e      	ldr	r3, [pc, #184]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	492b      	ldr	r1, [pc, #172]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040ee:	4b29      	ldr	r3, [pc, #164]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0307 	and.w	r3, r3, #7
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d210      	bcs.n	800411e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040fc:	4b25      	ldr	r3, [pc, #148]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f023 0207 	bic.w	r2, r3, #7
 8004104:	4923      	ldr	r1, [pc, #140]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	4313      	orrs	r3, r2
 800410a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800410c:	4b21      	ldr	r3, [pc, #132]	; (8004194 <HAL_RCC_ClockConfig+0x1ec>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f003 0307 	and.w	r3, r3, #7
 8004114:	683a      	ldr	r2, [r7, #0]
 8004116:	429a      	cmp	r2, r3
 8004118:	d001      	beq.n	800411e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e036      	b.n	800418c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0304 	and.w	r3, r3, #4
 8004126:	2b00      	cmp	r3, #0
 8004128:	d008      	beq.n	800413c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800412a:	4b1b      	ldr	r3, [pc, #108]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	4918      	ldr	r1, [pc, #96]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004138:	4313      	orrs	r3, r2
 800413a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f003 0308 	and.w	r3, r3, #8
 8004144:	2b00      	cmp	r3, #0
 8004146:	d009      	beq.n	800415c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004148:	4b13      	ldr	r3, [pc, #76]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4910      	ldr	r1, [pc, #64]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004158:	4313      	orrs	r3, r2
 800415a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800415c:	f000 f824 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8004160:	4602      	mov	r2, r0
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <HAL_RCC_ClockConfig+0x1f0>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	f003 030f 	and.w	r3, r3, #15
 800416c:	490b      	ldr	r1, [pc, #44]	; (800419c <HAL_RCC_ClockConfig+0x1f4>)
 800416e:	5ccb      	ldrb	r3, [r1, r3]
 8004170:	f003 031f 	and.w	r3, r3, #31
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	4a09      	ldr	r2, [pc, #36]	; (80041a0 <HAL_RCC_ClockConfig+0x1f8>)
 800417a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800417c:	4b09      	ldr	r3, [pc, #36]	; (80041a4 <HAL_RCC_ClockConfig+0x1fc>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe f831 	bl	80021e8 <HAL_InitTick>
 8004186:	4603      	mov	r3, r0
 8004188:	72fb      	strb	r3, [r7, #11]

  return status;
 800418a:	7afb      	ldrb	r3, [r7, #11]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	40022000 	.word	0x40022000
 8004198:	40021000 	.word	0x40021000
 800419c:	0800c9d0 	.word	0x0800c9d0
 80041a0:	2000000c 	.word	0x2000000c
 80041a4:	20000010 	.word	0x20000010

080041a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b089      	sub	sp, #36	; 0x24
 80041ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80041ae:	2300      	movs	r3, #0
 80041b0:	61fb      	str	r3, [r7, #28]
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80041b6:	4b3e      	ldr	r3, [pc, #248]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 030c 	and.w	r3, r3, #12
 80041be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041c0:	4b3b      	ldr	r3, [pc, #236]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	f003 0303 	and.w	r3, r3, #3
 80041c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d005      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0x34>
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	2b0c      	cmp	r3, #12
 80041d4:	d121      	bne.n	800421a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d11e      	bne.n	800421a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80041dc:	4b34      	ldr	r3, [pc, #208]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80041e8:	4b31      	ldr	r3, [pc, #196]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041ee:	0a1b      	lsrs	r3, r3, #8
 80041f0:	f003 030f 	and.w	r3, r3, #15
 80041f4:	61fb      	str	r3, [r7, #28]
 80041f6:	e005      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041f8:	4b2d      	ldr	r3, [pc, #180]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	091b      	lsrs	r3, r3, #4
 80041fe:	f003 030f 	and.w	r3, r3, #15
 8004202:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004204:	4a2b      	ldr	r2, [pc, #172]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800420c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004218:	e00a      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d102      	bne.n	8004226 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004220:	4b25      	ldr	r3, [pc, #148]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004222:	61bb      	str	r3, [r7, #24]
 8004224:	e004      	b.n	8004230 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	2b08      	cmp	r3, #8
 800422a:	d101      	bne.n	8004230 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800422c:	4b23      	ldr	r3, [pc, #140]	; (80042bc <HAL_RCC_GetSysClockFreq+0x114>)
 800422e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	2b0c      	cmp	r3, #12
 8004234:	d134      	bne.n	80042a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004236:	4b1e      	ldr	r3, [pc, #120]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	f003 0303 	and.w	r3, r3, #3
 800423e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	2b02      	cmp	r3, #2
 8004244:	d003      	beq.n	800424e <HAL_RCC_GetSysClockFreq+0xa6>
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	2b03      	cmp	r3, #3
 800424a:	d003      	beq.n	8004254 <HAL_RCC_GetSysClockFreq+0xac>
 800424c:	e005      	b.n	800425a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800424e:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004250:	617b      	str	r3, [r7, #20]
      break;
 8004252:	e005      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004254:	4b19      	ldr	r3, [pc, #100]	; (80042bc <HAL_RCC_GetSysClockFreq+0x114>)
 8004256:	617b      	str	r3, [r7, #20]
      break;
 8004258:	e002      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	617b      	str	r3, [r7, #20]
      break;
 800425e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004260:	4b13      	ldr	r3, [pc, #76]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	091b      	lsrs	r3, r3, #4
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	3301      	adds	r3, #1
 800426c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800426e:	4b10      	ldr	r3, [pc, #64]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	0a1b      	lsrs	r3, r3, #8
 8004274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	fb03 f202 	mul.w	r2, r3, r2
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	fbb2 f3f3 	udiv	r3, r2, r3
 8004284:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	0e5b      	lsrs	r3, r3, #25
 800428c:	f003 0303 	and.w	r3, r3, #3
 8004290:	3301      	adds	r3, #1
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	fbb2 f3f3 	udiv	r3, r2, r3
 800429e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80042a0:	69bb      	ldr	r3, [r7, #24]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3724      	adds	r7, #36	; 0x24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	40021000 	.word	0x40021000
 80042b4:	0800c9e8 	.word	0x0800c9e8
 80042b8:	00f42400 	.word	0x00f42400
 80042bc:	007a1200 	.word	0x007a1200

080042c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	2000000c 	.word	0x2000000c

080042d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80042dc:	f7ff fff0 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b06      	ldr	r3, [pc, #24]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	0a1b      	lsrs	r3, r3, #8
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4904      	ldr	r1, [pc, #16]	; (8004300 <HAL_RCC_GetPCLK1Freq+0x28>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	f003 031f 	and.w	r3, r3, #31
 80042f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	40021000 	.word	0x40021000
 8004300:	0800c9e0 	.word	0x0800c9e0

08004304 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004308:	f7ff ffda 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 800430c:	4602      	mov	r2, r0
 800430e:	4b06      	ldr	r3, [pc, #24]	; (8004328 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	0adb      	lsrs	r3, r3, #11
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	4904      	ldr	r1, [pc, #16]	; (800432c <HAL_RCC_GetPCLK2Freq+0x28>)
 800431a:	5ccb      	ldrb	r3, [r1, r3]
 800431c:	f003 031f 	and.w	r3, r3, #31
 8004320:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004324:	4618      	mov	r0, r3
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40021000 	.word	0x40021000
 800432c:	0800c9e0 	.word	0x0800c9e0

08004330 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004338:	2300      	movs	r3, #0
 800433a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800433c:	4b2a      	ldr	r3, [pc, #168]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d003      	beq.n	8004350 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004348:	f7ff f9b6 	bl	80036b8 <HAL_PWREx_GetVoltageRange>
 800434c:	6178      	str	r0, [r7, #20]
 800434e:	e014      	b.n	800437a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004350:	4b25      	ldr	r3, [pc, #148]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004352:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004354:	4a24      	ldr	r2, [pc, #144]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004356:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800435a:	6593      	str	r3, [r2, #88]	; 0x58
 800435c:	4b22      	ldr	r3, [pc, #136]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800435e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004368:	f7ff f9a6 	bl	80036b8 <HAL_PWREx_GetVoltageRange>
 800436c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800436e:	4b1e      	ldr	r3, [pc, #120]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004372:	4a1d      	ldr	r2, [pc, #116]	; (80043e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004374:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004378:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004380:	d10b      	bne.n	800439a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b80      	cmp	r3, #128	; 0x80
 8004386:	d919      	bls.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2ba0      	cmp	r3, #160	; 0xa0
 800438c:	d902      	bls.n	8004394 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800438e:	2302      	movs	r3, #2
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	e013      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004394:	2301      	movs	r3, #1
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	e010      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b80      	cmp	r3, #128	; 0x80
 800439e:	d902      	bls.n	80043a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80043a0:	2303      	movs	r3, #3
 80043a2:	613b      	str	r3, [r7, #16]
 80043a4:	e00a      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2b80      	cmp	r3, #128	; 0x80
 80043aa:	d102      	bne.n	80043b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80043ac:	2302      	movs	r3, #2
 80043ae:	613b      	str	r3, [r7, #16]
 80043b0:	e004      	b.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b70      	cmp	r3, #112	; 0x70
 80043b6:	d101      	bne.n	80043bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80043b8:	2301      	movs	r3, #1
 80043ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80043bc:	4b0b      	ldr	r3, [pc, #44]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f023 0207 	bic.w	r2, r3, #7
 80043c4:	4909      	ldr	r1, [pc, #36]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80043cc:	4b07      	ldr	r3, [pc, #28]	; (80043ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d001      	beq.n	80043de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40022000 	.word	0x40022000

080043f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043f8:	2300      	movs	r3, #0
 80043fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043fc:	2300      	movs	r3, #0
 80043fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004408:	2b00      	cmp	r3, #0
 800440a:	d031      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004410:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004414:	d01a      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004416:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800441a:	d814      	bhi.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004420:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004424:	d10f      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004426:	4b5d      	ldr	r3, [pc, #372]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	4a5c      	ldr	r2, [pc, #368]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800442c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004430:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004432:	e00c      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	3304      	adds	r3, #4
 8004438:	2100      	movs	r1, #0
 800443a:	4618      	mov	r0, r3
 800443c:	f000 f9de 	bl	80047fc <RCCEx_PLLSAI1_Config>
 8004440:	4603      	mov	r3, r0
 8004442:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004444:	e003      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	74fb      	strb	r3, [r7, #19]
      break;
 800444a:	e000      	b.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800444c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800444e:	7cfb      	ldrb	r3, [r7, #19]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10b      	bne.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004454:	4b51      	ldr	r3, [pc, #324]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004456:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800445a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004462:	494e      	ldr	r1, [pc, #312]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800446a:	e001      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 809e 	beq.w	80045ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800447e:	2300      	movs	r3, #0
 8004480:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004482:	4b46      	ldr	r3, [pc, #280]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800448a:	2b00      	cmp	r3, #0
 800448c:	d101      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800448e:	2301      	movs	r3, #1
 8004490:	e000      	b.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004492:	2300      	movs	r3, #0
 8004494:	2b00      	cmp	r3, #0
 8004496:	d00d      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004498:	4b40      	ldr	r3, [pc, #256]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800449a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800449c:	4a3f      	ldr	r2, [pc, #252]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800449e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a2:	6593      	str	r3, [r2, #88]	; 0x58
 80044a4:	4b3d      	ldr	r3, [pc, #244]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ac:	60bb      	str	r3, [r7, #8]
 80044ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b0:	2301      	movs	r3, #1
 80044b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80044b4:	4b3a      	ldr	r3, [pc, #232]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a39      	ldr	r2, [pc, #228]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80044c0:	f7fd fee2 	bl	8002288 <HAL_GetTick>
 80044c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044c6:	e009      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044c8:	f7fd fede 	bl	8002288 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	1ad3      	subs	r3, r2, r3
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d902      	bls.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	74fb      	strb	r3, [r7, #19]
        break;
 80044da:	e005      	b.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044dc:	4b30      	ldr	r3, [pc, #192]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d0ef      	beq.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80044e8:	7cfb      	ldrb	r3, [r7, #19]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d15a      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044ee:	4b2b      	ldr	r3, [pc, #172]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80044f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d01e      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004504:	697a      	ldr	r2, [r7, #20]
 8004506:	429a      	cmp	r2, r3
 8004508:	d019      	beq.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800450a:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800450c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004514:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004516:	4b21      	ldr	r3, [pc, #132]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451c:	4a1f      	ldr	r2, [pc, #124]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800451e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004522:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004526:	4b1d      	ldr	r3, [pc, #116]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800452c:	4a1b      	ldr	r2, [pc, #108]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800452e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004532:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004536:	4a19      	ldr	r2, [pc, #100]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	2b00      	cmp	r3, #0
 8004546:	d016      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fd fe9e 	bl	8002288 <HAL_GetTick>
 800454c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800454e:	e00b      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004550:	f7fd fe9a 	bl	8002288 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	f241 3288 	movw	r2, #5000	; 0x1388
 800455e:	4293      	cmp	r3, r2
 8004560:	d902      	bls.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	74fb      	strb	r3, [r7, #19]
            break;
 8004566:	e006      	b.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004568:	4b0c      	ldr	r3, [pc, #48]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f003 0302 	and.w	r3, r3, #2
 8004572:	2b00      	cmp	r3, #0
 8004574:	d0ec      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004576:	7cfb      	ldrb	r3, [r7, #19]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d10b      	bne.n	8004594 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800457e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458a:	4904      	ldr	r1, [pc, #16]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800458c:	4313      	orrs	r3, r2
 800458e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004592:	e009      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004594:	7cfb      	ldrb	r3, [r7, #19]
 8004596:	74bb      	strb	r3, [r7, #18]
 8004598:	e006      	b.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000
 80045a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a4:	7cfb      	ldrb	r3, [r7, #19]
 80045a6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045a8:	7c7b      	ldrb	r3, [r7, #17]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d105      	bne.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045ae:	4b8a      	ldr	r3, [pc, #552]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045b2:	4a89      	ldr	r2, [pc, #548]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045b8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d00a      	beq.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045c6:	4b84      	ldr	r3, [pc, #528]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045cc:	f023 0203 	bic.w	r2, r3, #3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4980      	ldr	r1, [pc, #512]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045d6:	4313      	orrs	r3, r2
 80045d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00a      	beq.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045e8:	4b7b      	ldr	r3, [pc, #492]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ee:	f023 020c 	bic.w	r2, r3, #12
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	4978      	ldr	r1, [pc, #480]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0320 	and.w	r3, r3, #32
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800460a:	4b73      	ldr	r3, [pc, #460]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800460c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004610:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004618:	496f      	ldr	r1, [pc, #444]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800461a:	4313      	orrs	r3, r2
 800461c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800462c:	4b6a      	ldr	r3, [pc, #424]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800462e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004632:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800463a:	4967      	ldr	r1, [pc, #412]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800464e:	4b62      	ldr	r3, [pc, #392]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004654:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	495e      	ldr	r1, [pc, #376]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800465e:	4313      	orrs	r3, r2
 8004660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00a      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004670:	4b59      	ldr	r3, [pc, #356]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467e:	4956      	ldr	r1, [pc, #344]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004680:	4313      	orrs	r3, r2
 8004682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00a      	beq.n	80046a8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004692:	4b51      	ldr	r3, [pc, #324]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	494d      	ldr	r1, [pc, #308]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d028      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046b4:	4b48      	ldr	r3, [pc, #288]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c2:	4945      	ldr	r1, [pc, #276]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80046d2:	d106      	bne.n	80046e2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80046d4:	4b40      	ldr	r3, [pc, #256]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	4a3f      	ldr	r2, [pc, #252]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80046da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80046de:	60d3      	str	r3, [r2, #12]
 80046e0:	e011      	b.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80046ea:	d10c      	bne.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	3304      	adds	r3, #4
 80046f0:	2101      	movs	r1, #1
 80046f2:	4618      	mov	r0, r3
 80046f4:	f000 f882 	bl	80047fc <RCCEx_PLLSAI1_Config>
 80046f8:	4603      	mov	r3, r0
 80046fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80046fc:	7cfb      	ldrb	r3, [r7, #19]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d001      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004702:	7cfb      	ldrb	r3, [r7, #19]
 8004704:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800470e:	2b00      	cmp	r3, #0
 8004710:	d028      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004712:	4b31      	ldr	r3, [pc, #196]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004720:	492d      	ldr	r1, [pc, #180]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004722:	4313      	orrs	r3, r2
 8004724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004730:	d106      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004732:	4b29      	ldr	r3, [pc, #164]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	4a28      	ldr	r2, [pc, #160]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800473c:	60d3      	str	r3, [r2, #12]
 800473e:	e011      	b.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004748:	d10c      	bne.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	3304      	adds	r3, #4
 800474e:	2101      	movs	r1, #1
 8004750:	4618      	mov	r0, r3
 8004752:	f000 f853 	bl	80047fc <RCCEx_PLLSAI1_Config>
 8004756:	4603      	mov	r3, r0
 8004758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800475a:	7cfb      	ldrb	r3, [r7, #19]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d001      	beq.n	8004764 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476c:	2b00      	cmp	r3, #0
 800476e:	d01c      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004770:	4b19      	ldr	r3, [pc, #100]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800477e:	4916      	ldr	r1, [pc, #88]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800478a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800478e:	d10c      	bne.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	3304      	adds	r3, #4
 8004794:	2102      	movs	r1, #2
 8004796:	4618      	mov	r0, r3
 8004798:	f000 f830 	bl	80047fc <RCCEx_PLLSAI1_Config>
 800479c:	4603      	mov	r3, r0
 800479e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047a0:	7cfb      	ldrb	r3, [r7, #19]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80047a6:	7cfb      	ldrb	r3, [r7, #19]
 80047a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00a      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047b6:	4b08      	ldr	r3, [pc, #32]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047c4:	4904      	ldr	r1, [pc, #16]	; (80047d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80047c6:	4313      	orrs	r3, r2
 80047c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80047cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	40021000 	.word	0x40021000

080047dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a04      	ldr	r2, [pc, #16]	; (80047f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80047e6:	f043 0304 	orr.w	r3, r3, #4
 80047ea:	6013      	str	r3, [r2, #0]
}
 80047ec:	bf00      	nop
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000

080047fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004806:	2300      	movs	r3, #0
 8004808:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800480a:	4b74      	ldr	r3, [pc, #464]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0303 	and.w	r3, r3, #3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d018      	beq.n	8004848 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004816:	4b71      	ldr	r3, [pc, #452]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	f003 0203 	and.w	r2, r3, #3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d10d      	bne.n	8004842 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
       ||
 800482a:	2b00      	cmp	r3, #0
 800482c:	d009      	beq.n	8004842 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800482e:	4b6b      	ldr	r3, [pc, #428]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	091b      	lsrs	r3, r3, #4
 8004834:	f003 0307 	and.w	r3, r3, #7
 8004838:	1c5a      	adds	r2, r3, #1
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
       ||
 800483e:	429a      	cmp	r2, r3
 8004840:	d047      	beq.n	80048d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	73fb      	strb	r3, [r7, #15]
 8004846:	e044      	b.n	80048d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	2b03      	cmp	r3, #3
 800484e:	d018      	beq.n	8004882 <RCCEx_PLLSAI1_Config+0x86>
 8004850:	2b03      	cmp	r3, #3
 8004852:	d825      	bhi.n	80048a0 <RCCEx_PLLSAI1_Config+0xa4>
 8004854:	2b01      	cmp	r3, #1
 8004856:	d002      	beq.n	800485e <RCCEx_PLLSAI1_Config+0x62>
 8004858:	2b02      	cmp	r3, #2
 800485a:	d009      	beq.n	8004870 <RCCEx_PLLSAI1_Config+0x74>
 800485c:	e020      	b.n	80048a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800485e:	4b5f      	ldr	r3, [pc, #380]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b00      	cmp	r3, #0
 8004868:	d11d      	bne.n	80048a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486e:	e01a      	b.n	80048a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004870:	4b5a      	ldr	r3, [pc, #360]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d116      	bne.n	80048aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004880:	e013      	b.n	80048aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004882:	4b56      	ldr	r3, [pc, #344]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10f      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800488e:	4b53      	ldr	r3, [pc, #332]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d109      	bne.n	80048ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800489e:	e006      	b.n	80048ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	73fb      	strb	r3, [r7, #15]
      break;
 80048a4:	e004      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048a6:	bf00      	nop
 80048a8:	e002      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048aa:	bf00      	nop
 80048ac:	e000      	b.n	80048b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80048ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80048b0:	7bfb      	ldrb	r3, [r7, #15]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d10d      	bne.n	80048d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80048b6:	4b49      	ldr	r3, [pc, #292]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6819      	ldr	r1, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	3b01      	subs	r3, #1
 80048c8:	011b      	lsls	r3, r3, #4
 80048ca:	430b      	orrs	r3, r1
 80048cc:	4943      	ldr	r1, [pc, #268]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048ce:	4313      	orrs	r3, r2
 80048d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80048d2:	7bfb      	ldrb	r3, [r7, #15]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d17c      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80048d8:	4b40      	ldr	r3, [pc, #256]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a3f      	ldr	r2, [pc, #252]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80048de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80048e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048e4:	f7fd fcd0 	bl	8002288 <HAL_GetTick>
 80048e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80048ea:	e009      	b.n	8004900 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80048ec:	f7fd fccc 	bl	8002288 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b02      	cmp	r3, #2
 80048f8:	d902      	bls.n	8004900 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	73fb      	strb	r3, [r7, #15]
        break;
 80048fe:	e005      	b.n	800490c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004900:	4b36      	ldr	r3, [pc, #216]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004908:	2b00      	cmp	r3, #0
 800490a:	d1ef      	bne.n	80048ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800490c:	7bfb      	ldrb	r3, [r7, #15]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d15f      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d110      	bne.n	800493a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004918:	4b30      	ldr	r3, [pc, #192]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004920:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6892      	ldr	r2, [r2, #8]
 8004928:	0211      	lsls	r1, r2, #8
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	68d2      	ldr	r2, [r2, #12]
 800492e:	06d2      	lsls	r2, r2, #27
 8004930:	430a      	orrs	r2, r1
 8004932:	492a      	ldr	r1, [pc, #168]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004934:	4313      	orrs	r3, r2
 8004936:	610b      	str	r3, [r1, #16]
 8004938:	e027      	b.n	800498a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d112      	bne.n	8004966 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004940:	4b26      	ldr	r3, [pc, #152]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004948:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	6892      	ldr	r2, [r2, #8]
 8004950:	0211      	lsls	r1, r2, #8
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	6912      	ldr	r2, [r2, #16]
 8004956:	0852      	lsrs	r2, r2, #1
 8004958:	3a01      	subs	r2, #1
 800495a:	0552      	lsls	r2, r2, #21
 800495c:	430a      	orrs	r2, r1
 800495e:	491f      	ldr	r1, [pc, #124]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004960:	4313      	orrs	r3, r2
 8004962:	610b      	str	r3, [r1, #16]
 8004964:	e011      	b.n	800498a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004966:	4b1d      	ldr	r3, [pc, #116]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800496e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	6892      	ldr	r2, [r2, #8]
 8004976:	0211      	lsls	r1, r2, #8
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6952      	ldr	r2, [r2, #20]
 800497c:	0852      	lsrs	r2, r2, #1
 800497e:	3a01      	subs	r2, #1
 8004980:	0652      	lsls	r2, r2, #25
 8004982:	430a      	orrs	r2, r1
 8004984:	4915      	ldr	r1, [pc, #84]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004986:	4313      	orrs	r3, r2
 8004988:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800498a:	4b14      	ldr	r3, [pc, #80]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a13      	ldr	r2, [pc, #76]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004990:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004994:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004996:	f7fd fc77 	bl	8002288 <HAL_GetTick>
 800499a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800499c:	e009      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800499e:	f7fd fc73 	bl	8002288 <HAL_GetTick>
 80049a2:	4602      	mov	r2, r0
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d902      	bls.n	80049b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	73fb      	strb	r3, [r7, #15]
          break;
 80049b0:	e005      	b.n	80049be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80049b2:	4b0a      	ldr	r3, [pc, #40]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d0ef      	beq.n	800499e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80049be:	7bfb      	ldrb	r3, [r7, #15]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d106      	bne.n	80049d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80049c4:	4b05      	ldr	r3, [pc, #20]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	4903      	ldr	r1, [pc, #12]	; (80049dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000

080049e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ee:	2301      	movs	r3, #1
 80049f0:	e095      	b.n	8004b1e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d108      	bne.n	8004a0c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a02:	d009      	beq.n	8004a18 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2200      	movs	r2, #0
 8004a08:	61da      	str	r2, [r3, #28]
 8004a0a:	e005      	b.n	8004a18 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fd f930 	bl	8001c98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a4e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68db      	ldr	r3, [r3, #12]
 8004a54:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a58:	d902      	bls.n	8004a60 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
 8004a5e:	e002      	b.n	8004a66 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004a60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004a64:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004a6e:	d007      	beq.n	8004a80 <HAL_SPI_Init+0xa0>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004a78:	d002      	beq.n	8004a80 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	69db      	ldr	r3, [r3, #28]
 8004ab4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a1b      	ldr	r3, [r3, #32]
 8004abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ac2:	ea42 0103 	orr.w	r1, r2, r3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	0c1b      	lsrs	r3, r3, #16
 8004adc:	f003 0204 	and.w	r2, r3, #4
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	f003 0310 	and.w	r3, r3, #16
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	68db      	ldr	r3, [r3, #12]
 8004af8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004afc:	ea42 0103 	orr.w	r1, r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b088      	sub	sp, #32
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	603b      	str	r3, [r7, #0]
 8004b32:	4613      	mov	r3, r2
 8004b34:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d101      	bne.n	8004b48 <HAL_SPI_Transmit+0x22>
 8004b44:	2302      	movs	r3, #2
 8004b46:	e158      	b.n	8004dfa <HAL_SPI_Transmit+0x2d4>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b50:	f7fd fb9a 	bl	8002288 <HAL_GetTick>
 8004b54:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b56:	88fb      	ldrh	r3, [r7, #6]
 8004b58:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004b60:	b2db      	uxtb	r3, r3
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d002      	beq.n	8004b6c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b66:	2302      	movs	r3, #2
 8004b68:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b6a:	e13d      	b.n	8004de8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d002      	beq.n	8004b78 <HAL_SPI_Transmit+0x52>
 8004b72:	88fb      	ldrh	r3, [r7, #6]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d102      	bne.n	8004b7e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b7c:	e134      	b.n	8004de8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2203      	movs	r2, #3
 8004b82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	88fa      	ldrh	r2, [r7, #6]
 8004b96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	88fa      	ldrh	r2, [r7, #6]
 8004b9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc8:	d10f      	bne.n	8004bea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bd8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004be8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf4:	2b40      	cmp	r3, #64	; 0x40
 8004bf6:	d007      	beq.n	8004c08 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c06:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c10:	d94b      	bls.n	8004caa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_SPI_Transmit+0xfa>
 8004c1a:	8afb      	ldrh	r3, [r7, #22]
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d13e      	bne.n	8004c9e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c24:	881a      	ldrh	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c30:	1c9a      	adds	r2, r3, #2
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c44:	e02b      	b.n	8004c9e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	689b      	ldr	r3, [r3, #8]
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d112      	bne.n	8004c7a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c58:	881a      	ldrh	r2, [r3, #0]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c64:	1c9a      	adds	r2, r3, #2
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c78:	e011      	b.n	8004c9e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c7a:	f7fd fb05 	bl	8002288 <HAL_GetTick>
 8004c7e:	4602      	mov	r2, r0
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d803      	bhi.n	8004c92 <HAL_SPI_Transmit+0x16c>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c90:	d102      	bne.n	8004c98 <HAL_SPI_Transmit+0x172>
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d102      	bne.n	8004c9e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c9c:	e0a4      	b.n	8004de8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ca2:	b29b      	uxth	r3, r3
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1ce      	bne.n	8004c46 <HAL_SPI_Transmit+0x120>
 8004ca8:	e07c      	b.n	8004da4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d002      	beq.n	8004cb8 <HAL_SPI_Transmit+0x192>
 8004cb2:	8afb      	ldrh	r3, [r7, #22]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d170      	bne.n	8004d9a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d912      	bls.n	8004ce8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cc6:	881a      	ldrh	r2, [r3, #0]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	1c9a      	adds	r2, r3, #2
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004cdc:	b29b      	uxth	r3, r3
 8004cde:	3b02      	subs	r3, #2
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ce6:	e058      	b.n	8004d9a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	330c      	adds	r3, #12
 8004cf2:	7812      	ldrb	r2, [r2, #0]
 8004cf4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfa:	1c5a      	adds	r2, r3, #1
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d04:	b29b      	uxth	r3, r3
 8004d06:	3b01      	subs	r3, #1
 8004d08:	b29a      	uxth	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004d0e:	e044      	b.n	8004d9a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 0302 	and.w	r3, r3, #2
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d12b      	bne.n	8004d76 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d22:	b29b      	uxth	r3, r3
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d912      	bls.n	8004d4e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d2c:	881a      	ldrh	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d38:	1c9a      	adds	r2, r3, #2
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	3b02      	subs	r3, #2
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d4c:	e025      	b.n	8004d9a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	330c      	adds	r3, #12
 8004d58:	7812      	ldrb	r2, [r2, #0]
 8004d5a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	1c5a      	adds	r2, r3, #1
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	3b01      	subs	r3, #1
 8004d6e:	b29a      	uxth	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d74:	e011      	b.n	8004d9a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d76:	f7fd fa87 	bl	8002288 <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d803      	bhi.n	8004d8e <HAL_SPI_Transmit+0x268>
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8c:	d102      	bne.n	8004d94 <HAL_SPI_Transmit+0x26e>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d102      	bne.n	8004d9a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d98:	e026      	b.n	8004de8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1b5      	bne.n	8004d10 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004da4:	69ba      	ldr	r2, [r7, #24]
 8004da6:	6839      	ldr	r1, [r7, #0]
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fce3 	bl	8005774 <SPI_EndRxTxTransaction>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10a      	bne.n	8004dd8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	613b      	str	r3, [r7, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	689b      	ldr	r3, [r3, #8]
 8004dd4:	613b      	str	r3, [r7, #16]
 8004dd6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d002      	beq.n	8004de6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	e000      	b.n	8004de8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004de6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b088      	sub	sp, #32
 8004e06:	af02      	add	r7, sp, #8
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	60b9      	str	r1, [r7, #8]
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e1e:	d112      	bne.n	8004e46 <HAL_SPI_Receive+0x44>
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10e      	bne.n	8004e46 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	2204      	movs	r2, #4
 8004e2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004e30:	88fa      	ldrh	r2, [r7, #6]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	68ba      	ldr	r2, [r7, #8]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f910 	bl	8005062 <HAL_SPI_TransmitReceive>
 8004e42:	4603      	mov	r3, r0
 8004e44:	e109      	b.n	800505a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d101      	bne.n	8004e54 <HAL_SPI_Receive+0x52>
 8004e50:	2302      	movs	r3, #2
 8004e52:	e102      	b.n	800505a <HAL_SPI_Receive+0x258>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004e5c:	f7fd fa14 	bl	8002288 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d002      	beq.n	8004e74 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e72:	e0e9      	b.n	8005048 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d002      	beq.n	8004e80 <HAL_SPI_Receive+0x7e>
 8004e7a:	88fb      	ldrh	r3, [r7, #6]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004e84:	e0e0      	b.n	8005048 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2204      	movs	r2, #4
 8004e8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2200      	movs	r2, #0
 8004e92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	68ba      	ldr	r2, [r7, #8]
 8004e98:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	88fa      	ldrh	r2, [r7, #6]
 8004e9e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	88fa      	ldrh	r2, [r7, #6]
 8004ea6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2200      	movs	r2, #0
 8004eae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004ed0:	d908      	bls.n	8004ee4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	685a      	ldr	r2, [r3, #4]
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ee0:	605a      	str	r2, [r3, #4]
 8004ee2:	e007      	b.n	8004ef4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	685a      	ldr	r2, [r3, #4]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ef2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004efc:	d10f      	bne.n	8004f1e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004f1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f28:	2b40      	cmp	r3, #64	; 0x40
 8004f2a:	d007      	beq.n	8004f3c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f44:	d867      	bhi.n	8005016 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004f46:	e030      	b.n	8004faa <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d117      	bne.n	8004f86 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f103 020c 	add.w	r2, r3, #12
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	7812      	ldrb	r2, [r2, #0]
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	1c5a      	adds	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29a      	uxth	r2, r3
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004f84:	e011      	b.n	8004faa <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f86:	f7fd f97f 	bl	8002288 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	693b      	ldr	r3, [r7, #16]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d803      	bhi.n	8004f9e <HAL_SPI_Receive+0x19c>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d102      	bne.n	8004fa4 <HAL_SPI_Receive+0x1a2>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d102      	bne.n	8004faa <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004fa4:	2303      	movs	r3, #3
 8004fa6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004fa8:	e04e      	b.n	8005048 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1c8      	bne.n	8004f48 <HAL_SPI_Receive+0x146>
 8004fb6:	e034      	b.n	8005022 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d115      	bne.n	8004ff2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68da      	ldr	r2, [r3, #12]
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd0:	b292      	uxth	r2, r2
 8004fd2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd8:	1c9a      	adds	r2, r3, #2
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	b29a      	uxth	r2, r3
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004ff0:	e011      	b.n	8005016 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ff2:	f7fd f949 	bl	8002288 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d803      	bhi.n	800500a <HAL_SPI_Receive+0x208>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005008:	d102      	bne.n	8005010 <HAL_SPI_Receive+0x20e>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d102      	bne.n	8005016 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8005010:	2303      	movs	r3, #3
 8005012:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005014:	e018      	b.n	8005048 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800501c:	b29b      	uxth	r3, r3
 800501e:	2b00      	cmp	r3, #0
 8005020:	d1ca      	bne.n	8004fb8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	6839      	ldr	r1, [r7, #0]
 8005026:	68f8      	ldr	r0, [r7, #12]
 8005028:	f000 fb4c 	bl	80056c4 <SPI_EndRxTransaction>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d002      	beq.n	8005038 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2220      	movs	r2, #32
 8005036:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	75fb      	strb	r3, [r7, #23]
 8005044:	e000      	b.n	8005048 <HAL_SPI_Receive+0x246>
  }

error :
 8005046:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005058:	7dfb      	ldrb	r3, [r7, #23]
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}

08005062 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005062:	b580      	push	{r7, lr}
 8005064:	b08a      	sub	sp, #40	; 0x28
 8005066:	af00      	add	r7, sp, #0
 8005068:	60f8      	str	r0, [r7, #12]
 800506a:	60b9      	str	r1, [r7, #8]
 800506c:	607a      	str	r2, [r7, #4]
 800506e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005070:	2301      	movs	r3, #1
 8005072:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005080:	2b01      	cmp	r3, #1
 8005082:	d101      	bne.n	8005088 <HAL_SPI_TransmitReceive+0x26>
 8005084:	2302      	movs	r3, #2
 8005086:	e1fb      	b.n	8005480 <HAL_SPI_TransmitReceive+0x41e>
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005090:	f7fd f8fa 	bl	8002288 <HAL_GetTick>
 8005094:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800509c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80050a4:	887b      	ldrh	r3, [r7, #2]
 80050a6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80050a8:	887b      	ldrh	r3, [r7, #2]
 80050aa:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80050ac:	7efb      	ldrb	r3, [r7, #27]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d00e      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x6e>
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050b8:	d106      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d102      	bne.n	80050c8 <HAL_SPI_TransmitReceive+0x66>
 80050c2:	7efb      	ldrb	r3, [r7, #27]
 80050c4:	2b04      	cmp	r3, #4
 80050c6:	d003      	beq.n	80050d0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
 80050ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050ce:	e1cd      	b.n	800546c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d005      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x80>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <HAL_SPI_TransmitReceive+0x80>
 80050dc:	887b      	ldrh	r3, [r7, #2]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d103      	bne.n	80050ea <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80050e8:	e1c0      	b.n	800546c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b04      	cmp	r3, #4
 80050f4:	d003      	beq.n	80050fe <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2205      	movs	r2, #5
 80050fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2200      	movs	r2, #0
 8005102:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	687a      	ldr	r2, [r7, #4]
 8005108:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	887a      	ldrh	r2, [r7, #2]
 800510e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	887a      	ldrh	r2, [r7, #2]
 8005116:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	68ba      	ldr	r2, [r7, #8]
 800511e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	887a      	ldrh	r2, [r7, #2]
 8005124:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	887a      	ldrh	r2, [r7, #2]
 800512a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005140:	d802      	bhi.n	8005148 <HAL_SPI_TransmitReceive+0xe6>
 8005142:	8a3b      	ldrh	r3, [r7, #16]
 8005144:	2b01      	cmp	r3, #1
 8005146:	d908      	bls.n	800515a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005156:	605a      	str	r2, [r3, #4]
 8005158:	e007      	b.n	800516a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	685a      	ldr	r2, [r3, #4]
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005168:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b40      	cmp	r3, #64	; 0x40
 8005176:	d007      	beq.n	8005188 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005186:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005190:	d97c      	bls.n	800528c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_SPI_TransmitReceive+0x13e>
 800519a:	8a7b      	ldrh	r3, [r7, #18]
 800519c:	2b01      	cmp	r3, #1
 800519e:	d169      	bne.n	8005274 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051a4:	881a      	ldrh	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b0:	1c9a      	adds	r2, r3, #2
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	3b01      	subs	r3, #1
 80051be:	b29a      	uxth	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80051c4:	e056      	b.n	8005274 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b02      	cmp	r3, #2
 80051d2:	d11b      	bne.n	800520c <HAL_SPI_TransmitReceive+0x1aa>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051d8:	b29b      	uxth	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d016      	beq.n	800520c <HAL_SPI_TransmitReceive+0x1aa>
 80051de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d113      	bne.n	800520c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051e8:	881a      	ldrh	r2, [r3, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f4:	1c9a      	adds	r2, r3, #2
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051fe:	b29b      	uxth	r3, r3
 8005200:	3b01      	subs	r3, #1
 8005202:	b29a      	uxth	r2, r3
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005208:	2300      	movs	r3, #0
 800520a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	2b01      	cmp	r3, #1
 8005218:	d11c      	bne.n	8005254 <HAL_SPI_TransmitReceive+0x1f2>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005220:	b29b      	uxth	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	d016      	beq.n	8005254 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68da      	ldr	r2, [r3, #12]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	b292      	uxth	r2, r2
 8005232:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005238:	1c9a      	adds	r2, r3, #2
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005244:	b29b      	uxth	r3, r3
 8005246:	3b01      	subs	r3, #1
 8005248:	b29a      	uxth	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005250:	2301      	movs	r3, #1
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005254:	f7fd f818 	bl	8002288 <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005260:	429a      	cmp	r2, r3
 8005262:	d807      	bhi.n	8005274 <HAL_SPI_TransmitReceive+0x212>
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800526a:	d003      	beq.n	8005274 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005272:	e0fb      	b.n	800546c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005278:	b29b      	uxth	r3, r3
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1a3      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0x164>
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005284:	b29b      	uxth	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d19d      	bne.n	80051c6 <HAL_SPI_TransmitReceive+0x164>
 800528a:	e0df      	b.n	800544c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d003      	beq.n	800529c <HAL_SPI_TransmitReceive+0x23a>
 8005294:	8a7b      	ldrh	r3, [r7, #18]
 8005296:	2b01      	cmp	r3, #1
 8005298:	f040 80cb 	bne.w	8005432 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a0:	b29b      	uxth	r3, r3
 80052a2:	2b01      	cmp	r3, #1
 80052a4:	d912      	bls.n	80052cc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	881a      	ldrh	r2, [r3, #0]
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052b6:	1c9a      	adds	r2, r3, #2
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	3b02      	subs	r3, #2
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80052ca:	e0b2      	b.n	8005432 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	330c      	adds	r3, #12
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	3b01      	subs	r3, #1
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052f2:	e09e      	b.n	8005432 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	f003 0302 	and.w	r3, r3, #2
 80052fe:	2b02      	cmp	r3, #2
 8005300:	d134      	bne.n	800536c <HAL_SPI_TransmitReceive+0x30a>
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005306:	b29b      	uxth	r3, r3
 8005308:	2b00      	cmp	r3, #0
 800530a:	d02f      	beq.n	800536c <HAL_SPI_TransmitReceive+0x30a>
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	2b01      	cmp	r3, #1
 8005310:	d12c      	bne.n	800536c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005316:	b29b      	uxth	r3, r3
 8005318:	2b01      	cmp	r3, #1
 800531a:	d912      	bls.n	8005342 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005320:	881a      	ldrh	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532c:	1c9a      	adds	r2, r3, #2
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005336:	b29b      	uxth	r3, r3
 8005338:	3b02      	subs	r3, #2
 800533a:	b29a      	uxth	r2, r3
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005340:	e012      	b.n	8005368 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	7812      	ldrb	r2, [r2, #0]
 800534e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005354:	1c5a      	adds	r2, r3, #1
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535e:	b29b      	uxth	r3, r3
 8005360:	3b01      	subs	r3, #1
 8005362:	b29a      	uxth	r2, r3
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005368:	2300      	movs	r3, #0
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b01      	cmp	r3, #1
 8005378:	d148      	bne.n	800540c <HAL_SPI_TransmitReceive+0x3aa>
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005380:	b29b      	uxth	r3, r3
 8005382:	2b00      	cmp	r3, #0
 8005384:	d042      	beq.n	800540c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800538c:	b29b      	uxth	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d923      	bls.n	80053da <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	68da      	ldr	r2, [r3, #12]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800539c:	b292      	uxth	r2, r2
 800539e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a4:	1c9a      	adds	r2, r3, #2
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	3b02      	subs	r3, #2
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053c2:	b29b      	uxth	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d81f      	bhi.n	8005408 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	685a      	ldr	r2, [r3, #4]
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80053d6:	605a      	str	r2, [r3, #4]
 80053d8:	e016      	b.n	8005408 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f103 020c 	add.w	r2, r3, #12
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005408:	2301      	movs	r3, #1
 800540a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800540c:	f7fc ff3c 	bl	8002288 <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005418:	429a      	cmp	r2, r3
 800541a:	d803      	bhi.n	8005424 <HAL_SPI_TransmitReceive+0x3c2>
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005422:	d102      	bne.n	800542a <HAL_SPI_TransmitReceive+0x3c8>
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	2b00      	cmp	r3, #0
 8005428:	d103      	bne.n	8005432 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005430:	e01c      	b.n	800546c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005436:	b29b      	uxth	r3, r3
 8005438:	2b00      	cmp	r3, #0
 800543a:	f47f af5b 	bne.w	80052f4 <HAL_SPI_TransmitReceive+0x292>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005444:	b29b      	uxth	r3, r3
 8005446:	2b00      	cmp	r3, #0
 8005448:	f47f af54 	bne.w	80052f4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800544c:	69fa      	ldr	r2, [r7, #28]
 800544e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005450:	68f8      	ldr	r0, [r7, #12]
 8005452:	f000 f98f 	bl	8005774 <SPI_EndRxTxTransaction>
 8005456:	4603      	mov	r3, r0
 8005458:	2b00      	cmp	r3, #0
 800545a:	d006      	beq.n	800546a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2220      	movs	r2, #32
 8005466:	661a      	str	r2, [r3, #96]	; 0x60
 8005468:	e000      	b.n	800546c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800546a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800547c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005480:	4618      	mov	r0, r3
 8005482:	3728      	adds	r7, #40	; 0x28
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	60f8      	str	r0, [r7, #12]
 8005490:	60b9      	str	r1, [r7, #8]
 8005492:	603b      	str	r3, [r7, #0]
 8005494:	4613      	mov	r3, r2
 8005496:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005498:	f7fc fef6 	bl	8002288 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054a0:	1a9b      	subs	r3, r3, r2
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	4413      	add	r3, r2
 80054a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80054a8:	f7fc feee 	bl	8002288 <HAL_GetTick>
 80054ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80054ae:	4b39      	ldr	r3, [pc, #228]	; (8005594 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	015b      	lsls	r3, r3, #5
 80054b4:	0d1b      	lsrs	r3, r3, #20
 80054b6:	69fa      	ldr	r2, [r7, #28]
 80054b8:	fb02 f303 	mul.w	r3, r2, r3
 80054bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80054be:	e054      	b.n	800556a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054c6:	d050      	beq.n	800556a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80054c8:	f7fc fede 	bl	8002288 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	69fa      	ldr	r2, [r7, #28]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d902      	bls.n	80054de <SPI_WaitFlagStateUntilTimeout+0x56>
 80054d8:	69fb      	ldr	r3, [r7, #28]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d13d      	bne.n	800555a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80054ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f6:	d111      	bne.n	800551c <SPI_WaitFlagStateUntilTimeout+0x94>
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005500:	d004      	beq.n	800550c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800550a:	d107      	bne.n	800551c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681a      	ldr	r2, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800551a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005524:	d10f      	bne.n	8005546 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	681a      	ldr	r2, [r3, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005534:	601a      	str	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005544:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e017      	b.n	800558a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	3b01      	subs	r3, #1
 8005568:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	689a      	ldr	r2, [r3, #8]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	4013      	ands	r3, r2
 8005574:	68ba      	ldr	r2, [r7, #8]
 8005576:	429a      	cmp	r2, r3
 8005578:	bf0c      	ite	eq
 800557a:	2301      	moveq	r3, #1
 800557c:	2300      	movne	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	461a      	mov	r2, r3
 8005582:	79fb      	ldrb	r3, [r7, #7]
 8005584:	429a      	cmp	r2, r3
 8005586:	d19b      	bne.n	80054c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3720      	adds	r7, #32
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}
 8005592:	bf00      	nop
 8005594:	2000000c 	.word	0x2000000c

08005598 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b08a      	sub	sp, #40	; 0x28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]
 80055a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80055a6:	2300      	movs	r3, #0
 80055a8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80055aa:	f7fc fe6d 	bl	8002288 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b2:	1a9b      	subs	r3, r3, r2
 80055b4:	683a      	ldr	r2, [r7, #0]
 80055b6:	4413      	add	r3, r2
 80055b8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80055ba:	f7fc fe65 	bl	8002288 <HAL_GetTick>
 80055be:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	330c      	adds	r3, #12
 80055c6:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80055c8:	4b3d      	ldr	r3, [pc, #244]	; (80056c0 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	4613      	mov	r3, r2
 80055ce:	009b      	lsls	r3, r3, #2
 80055d0:	4413      	add	r3, r2
 80055d2:	00da      	lsls	r2, r3, #3
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	0d1b      	lsrs	r3, r3, #20
 80055d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055da:	fb02 f303 	mul.w	r3, r2, r3
 80055de:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80055e0:	e060      	b.n	80056a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80055e8:	d107      	bne.n	80055fa <SPI_WaitFifoStateUntilTimeout+0x62>
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d104      	bne.n	80055fa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80055f8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005600:	d050      	beq.n	80056a4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005602:	f7fc fe41 	bl	8002288 <HAL_GetTick>
 8005606:	4602      	mov	r2, r0
 8005608:	6a3b      	ldr	r3, [r7, #32]
 800560a:	1ad3      	subs	r3, r2, r3
 800560c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800560e:	429a      	cmp	r2, r3
 8005610:	d902      	bls.n	8005618 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005614:	2b00      	cmp	r3, #0
 8005616:	d13d      	bne.n	8005694 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005626:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005630:	d111      	bne.n	8005656 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800563a:	d004      	beq.n	8005646 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005644:	d107      	bne.n	8005656 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005654:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800565e:	d10f      	bne.n	8005680 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800567e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e010      	b.n	80056b6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d101      	bne.n	800569e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	689a      	ldr	r2, [r3, #8]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d196      	bne.n	80055e2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80056b4:	2300      	movs	r3, #0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	3728      	adds	r7, #40	; 0x28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	2000000c 	.word	0x2000000c

080056c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af02      	add	r7, sp, #8
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056d8:	d111      	bne.n	80056fe <SPI_EndRxTransaction+0x3a>
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056e2:	d004      	beq.n	80056ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056ec:	d107      	bne.n	80056fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681a      	ldr	r2, [r3, #0]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056fc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	9300      	str	r3, [sp, #0]
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2200      	movs	r2, #0
 8005706:	2180      	movs	r1, #128	; 0x80
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f7ff febd 	bl	8005488 <SPI_WaitFlagStateUntilTimeout>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d007      	beq.n	8005724 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005718:	f043 0220 	orr.w	r2, r3, #32
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e023      	b.n	800576c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	685b      	ldr	r3, [r3, #4]
 8005728:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800572c:	d11d      	bne.n	800576a <SPI_EndRxTransaction+0xa6>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	689b      	ldr	r3, [r3, #8]
 8005732:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005736:	d004      	beq.n	8005742 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005740:	d113      	bne.n	800576a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	9300      	str	r3, [sp, #0]
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	2200      	movs	r2, #0
 800574a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800574e:	68f8      	ldr	r0, [r7, #12]
 8005750:	f7ff ff22 	bl	8005598 <SPI_WaitFifoStateUntilTimeout>
 8005754:	4603      	mov	r3, r0
 8005756:	2b00      	cmp	r3, #0
 8005758:	d007      	beq.n	800576a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575e:	f043 0220 	orr.w	r2, r3, #32
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e000      	b.n	800576c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800576a:	2300      	movs	r3, #0
}
 800576c:	4618      	mov	r0, r3
 800576e:	3710      	adds	r7, #16
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}

08005774 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b086      	sub	sp, #24
 8005778:	af02      	add	r7, sp, #8
 800577a:	60f8      	str	r0, [r7, #12]
 800577c:	60b9      	str	r1, [r7, #8]
 800577e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2200      	movs	r2, #0
 8005788:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f7ff ff03 	bl	8005598 <SPI_WaitFifoStateUntilTimeout>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800579c:	f043 0220 	orr.w	r2, r3, #32
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e027      	b.n	80057f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	68bb      	ldr	r3, [r7, #8]
 80057ae:	2200      	movs	r2, #0
 80057b0:	2180      	movs	r1, #128	; 0x80
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff fe68 	bl	8005488 <SPI_WaitFlagStateUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d007      	beq.n	80057ce <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057c2:	f043 0220 	orr.w	r2, r3, #32
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e014      	b.n	80057f8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	9300      	str	r3, [sp, #0]
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f7ff fedc 	bl	8005598 <SPI_WaitFifoStateUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ea:	f043 0220 	orr.w	r2, r3, #32
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e000      	b.n	80057f8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e049      	b.n	80058a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b00      	cmp	r3, #0
 800581c:	d106      	bne.n	800582c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7fc fa78 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	3304      	adds	r3, #4
 800583c:	4619      	mov	r1, r3
 800583e:	4610      	mov	r0, r2
 8005840:	f000 fe38 	bl	80064b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2201      	movs	r2, #1
 8005858:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2201      	movs	r2, #1
 8005888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2201      	movs	r2, #1
 8005898:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b082      	sub	sp, #8
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d101      	bne.n	80058c0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058bc:	2301      	movs	r3, #1
 80058be:	e049      	b.n	8005954 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d106      	bne.n	80058da <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 f841 	bl	800595c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2202      	movs	r2, #2
 80058de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	3304      	adds	r3, #4
 80058ea:	4619      	mov	r1, r3
 80058ec:	4610      	mov	r0, r2
 80058ee:	f000 fde1 	bl	80064b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2201      	movs	r2, #1
 80058f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2201      	movs	r2, #1
 8005926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2201      	movs	r2, #1
 800592e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005952:	2300      	movs	r3, #0
}
 8005954:	4618      	mov	r0, r3
 8005956:	3708      	adds	r7, #8
 8005958:	46bd      	mov	sp, r7
 800595a:	bd80      	pop	{r7, pc}

0800595c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800595c:	b480      	push	{r7}
 800595e:	b083      	sub	sp, #12
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
 800597c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800597e:	2300      	movs	r3, #0
 8005980:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_TIM_PWM_Start_DMA+0x2c>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b02      	cmp	r3, #2
 8005992:	bf0c      	ite	eq
 8005994:	2301      	moveq	r3, #1
 8005996:	2300      	movne	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e03c      	b.n	8005a16 <HAL_TIM_PWM_Start_DMA+0xa6>
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d109      	bne.n	80059b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b02      	cmp	r3, #2
 80059ac:	bf0c      	ite	eq
 80059ae:	2301      	moveq	r3, #1
 80059b0:	2300      	movne	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	e02f      	b.n	8005a16 <HAL_TIM_PWM_Start_DMA+0xa6>
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d109      	bne.n	80059d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	bf0c      	ite	eq
 80059c8:	2301      	moveq	r3, #1
 80059ca:	2300      	movne	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e022      	b.n	8005a16 <HAL_TIM_PWM_Start_DMA+0xa6>
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	2b0c      	cmp	r3, #12
 80059d4:	d109      	bne.n	80059ea <HAL_TIM_PWM_Start_DMA+0x7a>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b02      	cmp	r3, #2
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	e015      	b.n	8005a16 <HAL_TIM_PWM_Start_DMA+0xa6>
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	2b10      	cmp	r3, #16
 80059ee:	d109      	bne.n	8005a04 <HAL_TIM_PWM_Start_DMA+0x94>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	bf0c      	ite	eq
 80059fc:	2301      	moveq	r3, #1
 80059fe:	2300      	movne	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	e008      	b.n	8005a16 <HAL_TIM_PWM_Start_DMA+0xa6>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005a0a:	b2db      	uxtb	r3, r3
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	bf0c      	ite	eq
 8005a10:	2301      	moveq	r3, #1
 8005a12:	2300      	movne	r3, #0
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8005a1a:	2302      	movs	r3, #2
 8005a1c:	e18d      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d109      	bne.n	8005a38 <HAL_TIM_PWM_Start_DMA+0xc8>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	2b01      	cmp	r3, #1
 8005a2e:	bf0c      	ite	eq
 8005a30:	2301      	moveq	r3, #1
 8005a32:	2300      	movne	r3, #0
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	e03c      	b.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	2b04      	cmp	r3, #4
 8005a3c:	d109      	bne.n	8005a52 <HAL_TIM_PWM_Start_DMA+0xe2>
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b01      	cmp	r3, #1
 8005a48:	bf0c      	ite	eq
 8005a4a:	2301      	moveq	r3, #1
 8005a4c:	2300      	movne	r3, #0
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	e02f      	b.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	2b08      	cmp	r3, #8
 8005a56:	d109      	bne.n	8005a6c <HAL_TIM_PWM_Start_DMA+0xfc>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	bf0c      	ite	eq
 8005a64:	2301      	moveq	r3, #1
 8005a66:	2300      	movne	r3, #0
 8005a68:	b2db      	uxtb	r3, r3
 8005a6a:	e022      	b.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	2b0c      	cmp	r3, #12
 8005a70:	d109      	bne.n	8005a86 <HAL_TIM_PWM_Start_DMA+0x116>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	bf0c      	ite	eq
 8005a7e:	2301      	moveq	r3, #1
 8005a80:	2300      	movne	r3, #0
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	e015      	b.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	2b10      	cmp	r3, #16
 8005a8a:	d109      	bne.n	8005aa0 <HAL_TIM_PWM_Start_DMA+0x130>
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	bf0c      	ite	eq
 8005a98:	2301      	moveq	r3, #1
 8005a9a:	2300      	movne	r3, #0
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	e008      	b.n	8005ab2 <HAL_TIM_PWM_Start_DMA+0x142>
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	bf0c      	ite	eq
 8005aac:	2301      	moveq	r3, #1
 8005aae:	2300      	movne	r3, #0
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d034      	beq.n	8005b20 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <HAL_TIM_PWM_Start_DMA+0x152>
 8005abc:	887b      	ldrh	r3, [r7, #2]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	e139      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d104      	bne.n	8005ad6 <HAL_TIM_PWM_Start_DMA+0x166>
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ad4:	e026      	b.n	8005b24 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	d104      	bne.n	8005ae6 <HAL_TIM_PWM_Start_DMA+0x176>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ae4:	e01e      	b.n	8005b24 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005ae6:	68bb      	ldr	r3, [r7, #8]
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d104      	bne.n	8005af6 <HAL_TIM_PWM_Start_DMA+0x186>
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2202      	movs	r2, #2
 8005af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005af4:	e016      	b.n	8005b24 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	2b0c      	cmp	r3, #12
 8005afa:	d104      	bne.n	8005b06 <HAL_TIM_PWM_Start_DMA+0x196>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b04:	e00e      	b.n	8005b24 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005b06:	68bb      	ldr	r3, [r7, #8]
 8005b08:	2b10      	cmp	r3, #16
 8005b0a:	d104      	bne.n	8005b16 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2202      	movs	r2, #2
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b14:	e006      	b.n	8005b24 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2202      	movs	r2, #2
 8005b1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b1e:	e001      	b.n	8005b24 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e10a      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	2b0c      	cmp	r3, #12
 8005b28:	f200 80ae 	bhi.w	8005c88 <HAL_TIM_PWM_Start_DMA+0x318>
 8005b2c:	a201      	add	r2, pc, #4	; (adr r2, 8005b34 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8005b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b32:	bf00      	nop
 8005b34:	08005b69 	.word	0x08005b69
 8005b38:	08005c89 	.word	0x08005c89
 8005b3c:	08005c89 	.word	0x08005c89
 8005b40:	08005c89 	.word	0x08005c89
 8005b44:	08005bb1 	.word	0x08005bb1
 8005b48:	08005c89 	.word	0x08005c89
 8005b4c:	08005c89 	.word	0x08005c89
 8005b50:	08005c89 	.word	0x08005c89
 8005b54:	08005bf9 	.word	0x08005bf9
 8005b58:	08005c89 	.word	0x08005c89
 8005b5c:	08005c89 	.word	0x08005c89
 8005b60:	08005c89 	.word	0x08005c89
 8005b64:	08005c41 	.word	0x08005c41
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6c:	4a75      	ldr	r2, [pc, #468]	; (8005d44 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b74:	4a74      	ldr	r2, [pc, #464]	; (8005d48 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	4a73      	ldr	r2, [pc, #460]	; (8005d4c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005b7e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3334      	adds	r3, #52	; 0x34
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	887b      	ldrh	r3, [r7, #2]
 8005b90:	f7fd fa80 	bl	8003094 <HAL_DMA_Start_IT>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e0cd      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bac:	60da      	str	r2, [r3, #12]
      break;
 8005bae:	e06e      	b.n	8005c8e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	4a63      	ldr	r2, [pc, #396]	; (8005d44 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005bb6:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbc:	4a62      	ldr	r2, [pc, #392]	; (8005d48 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005bbe:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc4:	4a61      	ldr	r2, [pc, #388]	; (8005d4c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005bc6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3338      	adds	r3, #56	; 0x38
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	887b      	ldrh	r3, [r7, #2]
 8005bd8:	f7fd fa5c 	bl	8003094 <HAL_DMA_Start_IT>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d001      	beq.n	8005be6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005be2:	2301      	movs	r3, #1
 8005be4:	e0a9      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	68da      	ldr	r2, [r3, #12]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bf4:	60da      	str	r2, [r3, #12]
      break;
 8005bf6:	e04a      	b.n	8005c8e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfc:	4a51      	ldr	r2, [pc, #324]	; (8005d44 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005bfe:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	4a50      	ldr	r2, [pc, #320]	; (8005d48 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005c06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	4a4f      	ldr	r2, [pc, #316]	; (8005d4c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005c0e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	333c      	adds	r3, #60	; 0x3c
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	887b      	ldrh	r3, [r7, #2]
 8005c20:	f7fd fa38 	bl	8003094 <HAL_DMA_Start_IT>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d001      	beq.n	8005c2e <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	e085      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c3c:	60da      	str	r2, [r3, #12]
      break;
 8005c3e:	e026      	b.n	8005c8e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c44:	4a3f      	ldr	r2, [pc, #252]	; (8005d44 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8005c46:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	4a3e      	ldr	r2, [pc, #248]	; (8005d48 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8005c4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c54:	4a3d      	ldr	r2, [pc, #244]	; (8005d4c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8005c56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005c5c:	6879      	ldr	r1, [r7, #4]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3340      	adds	r3, #64	; 0x40
 8005c64:	461a      	mov	r2, r3
 8005c66:	887b      	ldrh	r3, [r7, #2]
 8005c68:	f7fd fa14 	bl	8003094 <HAL_DMA_Start_IT>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e061      	b.n	8005d3a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c84:	60da      	str	r2, [r3, #12]
      break;
 8005c86:	e002      	b.n	8005c8e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c8e:	7dfb      	ldrb	r3, [r7, #23]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d151      	bne.n	8005d38 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	68b9      	ldr	r1, [r7, #8]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f000 ff85 	bl	8006bac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d009      	beq.n	8005cc0 <HAL_TIM_PWM_Start_DMA+0x350>
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a28      	ldr	r2, [pc, #160]	; (8005d54 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d004      	beq.n	8005cc0 <HAL_TIM_PWM_Start_DMA+0x350>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a27      	ldr	r2, [pc, #156]	; (8005d58 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d101      	bne.n	8005cc4 <HAL_TIM_PWM_Start_DMA+0x354>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_TIM_PWM_Start_DMA+0x356>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a1c      	ldr	r2, [pc, #112]	; (8005d50 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d009      	beq.n	8005cf8 <HAL_TIM_PWM_Start_DMA+0x388>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cec:	d004      	beq.n	8005cf8 <HAL_TIM_PWM_Start_DMA+0x388>
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a18      	ldr	r2, [pc, #96]	; (8005d54 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d115      	bne.n	8005d24 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	4b17      	ldr	r3, [pc, #92]	; (8005d5c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8005d00:	4013      	ands	r3, r2
 8005d02:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	2b06      	cmp	r3, #6
 8005d08:	d015      	beq.n	8005d36 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d10:	d011      	beq.n	8005d36 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f042 0201 	orr.w	r2, r2, #1
 8005d20:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d22:	e008      	b.n	8005d36 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	e000      	b.n	8005d38 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d36:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3718      	adds	r7, #24
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}
 8005d42:	bf00      	nop
 8005d44:	080063a5 	.word	0x080063a5
 8005d48:	0800644d 	.word	0x0800644d
 8005d4c:	08006313 	.word	0x08006313
 8005d50:	40012c00 	.word	0x40012c00
 8005d54:	40014000 	.word	0x40014000
 8005d58:	40014400 	.word	0x40014400
 8005d5c:	00010007 	.word	0x00010007

08005d60 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b084      	sub	sp, #16
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b0c      	cmp	r3, #12
 8005d72:	d855      	bhi.n	8005e20 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8005d74:	a201      	add	r2, pc, #4	; (adr r2, 8005d7c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8005d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d7a:	bf00      	nop
 8005d7c:	08005db1 	.word	0x08005db1
 8005d80:	08005e21 	.word	0x08005e21
 8005d84:	08005e21 	.word	0x08005e21
 8005d88:	08005e21 	.word	0x08005e21
 8005d8c:	08005dcd 	.word	0x08005dcd
 8005d90:	08005e21 	.word	0x08005e21
 8005d94:	08005e21 	.word	0x08005e21
 8005d98:	08005e21 	.word	0x08005e21
 8005d9c:	08005de9 	.word	0x08005de9
 8005da0:	08005e21 	.word	0x08005e21
 8005da4:	08005e21 	.word	0x08005e21
 8005da8:	08005e21 	.word	0x08005e21
 8005dac:	08005e05 	.word	0x08005e05
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005dbe:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f7fd f9c5 	bl	8003154 <HAL_DMA_Abort_IT>
      break;
 8005dca:	e02c      	b.n	8005e26 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68da      	ldr	r2, [r3, #12]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dda:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de0:	4618      	mov	r0, r3
 8005de2:	f7fd f9b7 	bl	8003154 <HAL_DMA_Abort_IT>
      break;
 8005de6:	e01e      	b.n	8005e26 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005df6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fd f9a9 	bl	8003154 <HAL_DMA_Abort_IT>
      break;
 8005e02:	e010      	b.n	8005e26 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	68da      	ldr	r2, [r3, #12]
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e12:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7fd f99b 	bl	8003154 <HAL_DMA_Abort_IT>
      break;
 8005e1e:	e002      	b.n	8005e26 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	73fb      	strb	r3, [r7, #15]
      break;
 8005e24:	bf00      	nop
  }

  if (status == HAL_OK)
 8005e26:	7bfb      	ldrb	r3, [r7, #15]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d176      	bne.n	8005f1a <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2200      	movs	r2, #0
 8005e32:	6839      	ldr	r1, [r7, #0]
 8005e34:	4618      	mov	r0, r3
 8005e36:	f000 feb9 	bl	8006bac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	4a39      	ldr	r2, [pc, #228]	; (8005f24 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d009      	beq.n	8005e58 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4a37      	ldr	r2, [pc, #220]	; (8005f28 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d004      	beq.n	8005e58 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	4a36      	ldr	r2, [pc, #216]	; (8005f2c <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d101      	bne.n	8005e5c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e000      	b.n	8005e5e <HAL_TIM_PWM_Stop_DMA+0xfe>
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d017      	beq.n	8005e92 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	6a1a      	ldr	r2, [r3, #32]
 8005e68:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10f      	bne.n	8005e92 <HAL_TIM_PWM_Stop_DMA+0x132>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	6a1a      	ldr	r2, [r3, #32]
 8005e78:	f240 4344 	movw	r3, #1092	; 0x444
 8005e7c:	4013      	ands	r3, r2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d107      	bne.n	8005e92 <HAL_TIM_PWM_Stop_DMA+0x132>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	f241 1311 	movw	r3, #4369	; 0x1111
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d10f      	bne.n	8005ec2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6a1a      	ldr	r2, [r3, #32]
 8005ea8:	f240 4344 	movw	r3, #1092	; 0x444
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d107      	bne.n	8005ec2 <HAL_TIM_PWM_Stop_DMA+0x162>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0201 	bic.w	r2, r2, #1
 8005ec0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d104      	bne.n	8005ed2 <HAL_TIM_PWM_Stop_DMA+0x172>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2201      	movs	r2, #1
 8005ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ed0:	e023      	b.n	8005f1a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d104      	bne.n	8005ee2 <HAL_TIM_PWM_Stop_DMA+0x182>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2201      	movs	r2, #1
 8005edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ee0:	e01b      	b.n	8005f1a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	2b08      	cmp	r3, #8
 8005ee6:	d104      	bne.n	8005ef2 <HAL_TIM_PWM_Stop_DMA+0x192>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ef0:	e013      	b.n	8005f1a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b0c      	cmp	r3, #12
 8005ef6:	d104      	bne.n	8005f02 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f00:	e00b      	b.n	8005f1a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b10      	cmp	r3, #16
 8005f06:	d104      	bne.n	8005f12 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f10:	e003      	b.n	8005f1a <HAL_TIM_PWM_Stop_DMA+0x1ba>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 8005f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	3710      	adds	r7, #16
 8005f20:	46bd      	mov	sp, r7
 8005f22:	bd80      	pop	{r7, pc}
 8005f24:	40012c00 	.word	0x40012c00
 8005f28:	40014000 	.word	0x40014000
 8005f2c:	40014400 	.word	0x40014400

08005f30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d101      	bne.n	8005f4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f4a:	2302      	movs	r3, #2
 8005f4c:	e0ff      	b.n	800614e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2201      	movs	r2, #1
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b14      	cmp	r3, #20
 8005f5a:	f200 80f0 	bhi.w	800613e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005fb9 	.word	0x08005fb9
 8005f68:	0800613f 	.word	0x0800613f
 8005f6c:	0800613f 	.word	0x0800613f
 8005f70:	0800613f 	.word	0x0800613f
 8005f74:	08005ff9 	.word	0x08005ff9
 8005f78:	0800613f 	.word	0x0800613f
 8005f7c:	0800613f 	.word	0x0800613f
 8005f80:	0800613f 	.word	0x0800613f
 8005f84:	0800603b 	.word	0x0800603b
 8005f88:	0800613f 	.word	0x0800613f
 8005f8c:	0800613f 	.word	0x0800613f
 8005f90:	0800613f 	.word	0x0800613f
 8005f94:	0800607b 	.word	0x0800607b
 8005f98:	0800613f 	.word	0x0800613f
 8005f9c:	0800613f 	.word	0x0800613f
 8005fa0:	0800613f 	.word	0x0800613f
 8005fa4:	080060bd 	.word	0x080060bd
 8005fa8:	0800613f 	.word	0x0800613f
 8005fac:	0800613f 	.word	0x0800613f
 8005fb0:	0800613f 	.word	0x0800613f
 8005fb4:	080060fd 	.word	0x080060fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68b9      	ldr	r1, [r7, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fadc 	bl	800657c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	699a      	ldr	r2, [r3, #24]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0208 	orr.w	r2, r2, #8
 8005fd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699a      	ldr	r2, [r3, #24]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f022 0204 	bic.w	r2, r2, #4
 8005fe2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6999      	ldr	r1, [r3, #24]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	619a      	str	r2, [r3, #24]
      break;
 8005ff6:	e0a5      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	68b9      	ldr	r1, [r7, #8]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fb38 	bl	8006674 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	699a      	ldr	r2, [r3, #24]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	699a      	ldr	r2, [r3, #24]
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	6999      	ldr	r1, [r3, #24]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	021a      	lsls	r2, r3, #8
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	430a      	orrs	r2, r1
 8006036:	619a      	str	r2, [r3, #24]
      break;
 8006038:	e084      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	4618      	mov	r0, r3
 8006042:	f000 fb91 	bl	8006768 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	69da      	ldr	r2, [r3, #28]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f042 0208 	orr.w	r2, r2, #8
 8006054:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0204 	bic.w	r2, r2, #4
 8006064:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	69d9      	ldr	r1, [r3, #28]
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	691a      	ldr	r2, [r3, #16]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	430a      	orrs	r2, r1
 8006076:	61da      	str	r2, [r3, #28]
      break;
 8006078:	e064      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68b9      	ldr	r1, [r7, #8]
 8006080:	4618      	mov	r0, r3
 8006082:	f000 fbe9 	bl	8006858 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	69da      	ldr	r2, [r3, #28]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	69da      	ldr	r2, [r3, #28]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	69d9      	ldr	r1, [r3, #28]
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	021a      	lsls	r2, r3, #8
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	430a      	orrs	r2, r1
 80060b8:	61da      	str	r2, [r3, #28]
      break;
 80060ba:	e043      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fc26 	bl	8006914 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f042 0208 	orr.w	r2, r2, #8
 80060d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0204 	bic.w	r2, r2, #4
 80060e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	691a      	ldr	r2, [r3, #16]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80060fa:	e023      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fc5e 	bl	80069c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006116:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006126:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	021a      	lsls	r2, r3, #8
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	430a      	orrs	r2, r1
 800613a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800613c:	e002      	b.n	8006144 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	75fb      	strb	r3, [r7, #23]
      break;
 8006142:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800614c:	7dfb      	ldrb	r3, [r7, #23]
}
 800614e:	4618      	mov	r0, r3
 8006150:	3718      	adds	r7, #24
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop

08006158 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
 8006160:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800616c:	2b01      	cmp	r3, #1
 800616e:	d101      	bne.n	8006174 <HAL_TIM_ConfigClockSource+0x1c>
 8006170:	2302      	movs	r3, #2
 8006172:	e0b6      	b.n	80062e2 <HAL_TIM_ConfigClockSource+0x18a>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2202      	movs	r2, #2
 8006180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006192:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800619e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	68ba      	ldr	r2, [r7, #8]
 80061a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b0:	d03e      	beq.n	8006230 <HAL_TIM_ConfigClockSource+0xd8>
 80061b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061b6:	f200 8087 	bhi.w	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061be:	f000 8086 	beq.w	80062ce <HAL_TIM_ConfigClockSource+0x176>
 80061c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061c6:	d87f      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061c8:	2b70      	cmp	r3, #112	; 0x70
 80061ca:	d01a      	beq.n	8006202 <HAL_TIM_ConfigClockSource+0xaa>
 80061cc:	2b70      	cmp	r3, #112	; 0x70
 80061ce:	d87b      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061d0:	2b60      	cmp	r3, #96	; 0x60
 80061d2:	d050      	beq.n	8006276 <HAL_TIM_ConfigClockSource+0x11e>
 80061d4:	2b60      	cmp	r3, #96	; 0x60
 80061d6:	d877      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061d8:	2b50      	cmp	r3, #80	; 0x50
 80061da:	d03c      	beq.n	8006256 <HAL_TIM_ConfigClockSource+0xfe>
 80061dc:	2b50      	cmp	r3, #80	; 0x50
 80061de:	d873      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061e0:	2b40      	cmp	r3, #64	; 0x40
 80061e2:	d058      	beq.n	8006296 <HAL_TIM_ConfigClockSource+0x13e>
 80061e4:	2b40      	cmp	r3, #64	; 0x40
 80061e6:	d86f      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061e8:	2b30      	cmp	r3, #48	; 0x30
 80061ea:	d064      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x15e>
 80061ec:	2b30      	cmp	r3, #48	; 0x30
 80061ee:	d86b      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061f0:	2b20      	cmp	r3, #32
 80061f2:	d060      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x15e>
 80061f4:	2b20      	cmp	r3, #32
 80061f6:	d867      	bhi.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d05c      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x15e>
 80061fc:	2b10      	cmp	r3, #16
 80061fe:	d05a      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x15e>
 8006200:	e062      	b.n	80062c8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6818      	ldr	r0, [r3, #0]
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	6899      	ldr	r1, [r3, #8]
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685a      	ldr	r2, [r3, #4]
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f000 fcab 	bl	8006b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006224:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68ba      	ldr	r2, [r7, #8]
 800622c:	609a      	str	r2, [r3, #8]
      break;
 800622e:	e04f      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6818      	ldr	r0, [r3, #0]
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	6899      	ldr	r1, [r3, #8]
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685a      	ldr	r2, [r3, #4]
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f000 fc94 	bl	8006b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006252:	609a      	str	r2, [r3, #8]
      break;
 8006254:	e03c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6818      	ldr	r0, [r3, #0]
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	6859      	ldr	r1, [r3, #4]
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	68db      	ldr	r3, [r3, #12]
 8006262:	461a      	mov	r2, r3
 8006264:	f000 fc08 	bl	8006a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2150      	movs	r1, #80	; 0x50
 800626e:	4618      	mov	r0, r3
 8006270:	f000 fc61 	bl	8006b36 <TIM_ITRx_SetConfig>
      break;
 8006274:	e02c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6818      	ldr	r0, [r3, #0]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	6859      	ldr	r1, [r3, #4]
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	68db      	ldr	r3, [r3, #12]
 8006282:	461a      	mov	r2, r3
 8006284:	f000 fc27 	bl	8006ad6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	2160      	movs	r1, #96	; 0x60
 800628e:	4618      	mov	r0, r3
 8006290:	f000 fc51 	bl	8006b36 <TIM_ITRx_SetConfig>
      break;
 8006294:	e01c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6818      	ldr	r0, [r3, #0]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	6859      	ldr	r1, [r3, #4]
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
 80062a2:	461a      	mov	r2, r3
 80062a4:	f000 fbe8 	bl	8006a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2140      	movs	r1, #64	; 0x40
 80062ae:	4618      	mov	r0, r3
 80062b0:	f000 fc41 	bl	8006b36 <TIM_ITRx_SetConfig>
      break;
 80062b4:	e00c      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681a      	ldr	r2, [r3, #0]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4619      	mov	r1, r3
 80062c0:	4610      	mov	r0, r2
 80062c2:	f000 fc38 	bl	8006b36 <TIM_ITRx_SetConfig>
      break;
 80062c6:	e003      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	73fb      	strb	r3, [r7, #15]
      break;
 80062cc:	e000      	b.n	80062d0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80062ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2200      	movs	r2, #0
 80062dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b083      	sub	sp, #12
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80062fe:	b480      	push	{r7}
 8006300:	b083      	sub	sp, #12
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006306:	bf00      	nop
 8006308:	370c      	adds	r7, #12
 800630a:	46bd      	mov	sp, r7
 800630c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006310:	4770      	bx	lr

08006312 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8006312:	b580      	push	{r7, lr}
 8006314:	b084      	sub	sp, #16
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006324:	687a      	ldr	r2, [r7, #4]
 8006326:	429a      	cmp	r2, r3
 8006328:	d107      	bne.n	800633a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2201      	movs	r2, #1
 800632e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006338:	e02a      	b.n	8006390 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d107      	bne.n	8006354 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2202      	movs	r2, #2
 8006348:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2201      	movs	r2, #1
 800634e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006352:	e01d      	b.n	8006390 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	429a      	cmp	r2, r3
 800635c:	d107      	bne.n	800636e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2204      	movs	r2, #4
 8006362:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636c:	e010      	b.n	8006390 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	429a      	cmp	r2, r3
 8006376:	d107      	bne.n	8006388 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	2208      	movs	r2, #8
 800637c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006386:	e003      	b.n	8006390 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006390:	68f8      	ldr	r0, [r7, #12]
 8006392:	f7ff ffb4 	bl	80062fe <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2200      	movs	r2, #0
 800639a:	771a      	strb	r2, [r3, #28]
}
 800639c:	bf00      	nop
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063b6:	687a      	ldr	r2, [r7, #4]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d10b      	bne.n	80063d4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	2201      	movs	r2, #1
 80063c0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d136      	bne.n	8006438 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063d2:	e031      	b.n	8006438 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d10b      	bne.n	80063f6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2202      	movs	r2, #2
 80063e2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	69db      	ldr	r3, [r3, #28]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d125      	bne.n	8006438 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063f4:	e020      	b.n	8006438 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d10b      	bne.n	8006418 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2204      	movs	r2, #4
 8006404:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	69db      	ldr	r3, [r3, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d114      	bne.n	8006438 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006416:	e00f      	b.n	8006438 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	429a      	cmp	r2, r3
 8006420:	d10a      	bne.n	8006438 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2208      	movs	r2, #8
 8006426:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d103      	bne.n	8006438 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2201      	movs	r2, #1
 8006434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f7fa febb 	bl	80011b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2200      	movs	r2, #0
 8006442:	771a      	strb	r2, [r3, #28]
}
 8006444:	bf00      	nop
 8006446:	3710      	adds	r7, #16
 8006448:	46bd      	mov	sp, r7
 800644a:	bd80      	pop	{r7, pc}

0800644c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b084      	sub	sp, #16
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006458:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	429a      	cmp	r2, r3
 8006462:	d103      	bne.n	800646c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	2201      	movs	r2, #1
 8006468:	771a      	strb	r2, [r3, #28]
 800646a:	e019      	b.n	80064a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	429a      	cmp	r2, r3
 8006474:	d103      	bne.n	800647e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2202      	movs	r2, #2
 800647a:	771a      	strb	r2, [r3, #28]
 800647c:	e010      	b.n	80064a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	429a      	cmp	r2, r3
 8006486:	d103      	bne.n	8006490 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2204      	movs	r2, #4
 800648c:	771a      	strb	r2, [r3, #28]
 800648e:	e007      	b.n	80064a0 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	429a      	cmp	r2, r3
 8006498:	d102      	bne.n	80064a0 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2208      	movs	r2, #8
 800649e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f7ff ff22 	bl	80062ea <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	771a      	strb	r2, [r3, #28]
}
 80064ac:	bf00      	nop
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b085      	sub	sp, #20
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	4a2a      	ldr	r2, [pc, #168]	; (8006570 <TIM_Base_SetConfig+0xbc>)
 80064c8:	4293      	cmp	r3, r2
 80064ca:	d003      	beq.n	80064d4 <TIM_Base_SetConfig+0x20>
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064d2:	d108      	bne.n	80064e6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a21      	ldr	r2, [pc, #132]	; (8006570 <TIM_Base_SetConfig+0xbc>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d00b      	beq.n	8006506 <TIM_Base_SetConfig+0x52>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064f4:	d007      	beq.n	8006506 <TIM_Base_SetConfig+0x52>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a1e      	ldr	r2, [pc, #120]	; (8006574 <TIM_Base_SetConfig+0xc0>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d003      	beq.n	8006506 <TIM_Base_SetConfig+0x52>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a1d      	ldr	r2, [pc, #116]	; (8006578 <TIM_Base_SetConfig+0xc4>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d108      	bne.n	8006518 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800650c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	4313      	orrs	r3, r2
 8006516:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68fa      	ldr	r2, [r7, #12]
 800652a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <TIM_Base_SetConfig+0xbc>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d007      	beq.n	8006554 <TIM_Base_SetConfig+0xa0>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a0b      	ldr	r2, [pc, #44]	; (8006574 <TIM_Base_SetConfig+0xc0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_Base_SetConfig+0xa0>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a0a      	ldr	r2, [pc, #40]	; (8006578 <TIM_Base_SetConfig+0xc4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d103      	bne.n	800655c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	691a      	ldr	r2, [r3, #16]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	615a      	str	r2, [r3, #20]
}
 8006562:	bf00      	nop
 8006564:	3714      	adds	r7, #20
 8006566:	46bd      	mov	sp, r7
 8006568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656c:	4770      	bx	lr
 800656e:	bf00      	nop
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40014000 	.word	0x40014000
 8006578:	40014400 	.word	0x40014400

0800657c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	f023 0201 	bic.w	r2, r3, #1
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a1b      	ldr	r3, [r3, #32]
 8006596:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f023 0302 	bic.w	r3, r3, #2
 80065c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	697a      	ldr	r2, [r7, #20]
 80065d0:	4313      	orrs	r3, r2
 80065d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a24      	ldr	r2, [pc, #144]	; (8006668 <TIM_OC1_SetConfig+0xec>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d007      	beq.n	80065ec <TIM_OC1_SetConfig+0x70>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a23      	ldr	r2, [pc, #140]	; (800666c <TIM_OC1_SetConfig+0xf0>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d003      	beq.n	80065ec <TIM_OC1_SetConfig+0x70>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a22      	ldr	r2, [pc, #136]	; (8006670 <TIM_OC1_SetConfig+0xf4>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d10c      	bne.n	8006606 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f023 0308 	bic.w	r3, r3, #8
 80065f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	697a      	ldr	r2, [r7, #20]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 0304 	bic.w	r3, r3, #4
 8006604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a17      	ldr	r2, [pc, #92]	; (8006668 <TIM_OC1_SetConfig+0xec>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d007      	beq.n	800661e <TIM_OC1_SetConfig+0xa2>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a16      	ldr	r2, [pc, #88]	; (800666c <TIM_OC1_SetConfig+0xf0>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d003      	beq.n	800661e <TIM_OC1_SetConfig+0xa2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a15      	ldr	r2, [pc, #84]	; (8006670 <TIM_OC1_SetConfig+0xf4>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d111      	bne.n	8006642 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006626:	693b      	ldr	r3, [r7, #16]
 8006628:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	4313      	orrs	r3, r2
 8006636:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	699b      	ldr	r3, [r3, #24]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	4313      	orrs	r3, r2
 8006640:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	685a      	ldr	r2, [r3, #4]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	697a      	ldr	r2, [r7, #20]
 800665a:	621a      	str	r2, [r3, #32]
}
 800665c:	bf00      	nop
 800665e:	371c      	adds	r7, #28
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr
 8006668:	40012c00 	.word	0x40012c00
 800666c:	40014000 	.word	0x40014000
 8006670:	40014400 	.word	0x40014400

08006674 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006674:	b480      	push	{r7}
 8006676:	b087      	sub	sp, #28
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a1b      	ldr	r3, [r3, #32]
 8006682:	f023 0210 	bic.w	r2, r3, #16
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	699b      	ldr	r3, [r3, #24]
 800669a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	021b      	lsls	r3, r3, #8
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0320 	bic.w	r3, r3, #32
 80066c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	011b      	lsls	r3, r3, #4
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	4313      	orrs	r3, r2
 80066ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a22      	ldr	r2, [pc, #136]	; (800675c <TIM_OC2_SetConfig+0xe8>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d10d      	bne.n	80066f4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a19      	ldr	r2, [pc, #100]	; (800675c <TIM_OC2_SetConfig+0xe8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d007      	beq.n	800670c <TIM_OC2_SetConfig+0x98>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a18      	ldr	r2, [pc, #96]	; (8006760 <TIM_OC2_SetConfig+0xec>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d003      	beq.n	800670c <TIM_OC2_SetConfig+0x98>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a17      	ldr	r2, [pc, #92]	; (8006764 <TIM_OC2_SetConfig+0xf0>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d113      	bne.n	8006734 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006712:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800671a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	695b      	ldr	r3, [r3, #20]
 8006720:	009b      	lsls	r3, r3, #2
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	4313      	orrs	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	4313      	orrs	r3, r2
 8006732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	68fa      	ldr	r2, [r7, #12]
 800673e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	697a      	ldr	r2, [r7, #20]
 800674c:	621a      	str	r2, [r3, #32]
}
 800674e:	bf00      	nop
 8006750:	371c      	adds	r7, #28
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40014000 	.word	0x40014000
 8006764:	40014400 	.word	0x40014400

08006768 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f023 0303 	bic.w	r3, r3, #3
 80067a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	021b      	lsls	r3, r3, #8
 80067bc:	697a      	ldr	r2, [r7, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a21      	ldr	r2, [pc, #132]	; (800684c <TIM_OC3_SetConfig+0xe4>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d10d      	bne.n	80067e6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	021b      	lsls	r3, r3, #8
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	4313      	orrs	r3, r2
 80067dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	4a18      	ldr	r2, [pc, #96]	; (800684c <TIM_OC3_SetConfig+0xe4>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d007      	beq.n	80067fe <TIM_OC3_SetConfig+0x96>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	4a17      	ldr	r2, [pc, #92]	; (8006850 <TIM_OC3_SetConfig+0xe8>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d003      	beq.n	80067fe <TIM_OC3_SetConfig+0x96>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	4a16      	ldr	r2, [pc, #88]	; (8006854 <TIM_OC3_SetConfig+0xec>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d113      	bne.n	8006826 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006804:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	695b      	ldr	r3, [r3, #20]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	011b      	lsls	r3, r3, #4
 8006820:	693a      	ldr	r2, [r7, #16]
 8006822:	4313      	orrs	r3, r2
 8006824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	693a      	ldr	r2, [r7, #16]
 800682a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	685a      	ldr	r2, [r3, #4]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	697a      	ldr	r2, [r7, #20]
 800683e:	621a      	str	r2, [r3, #32]
}
 8006840:	bf00      	nop
 8006842:	371c      	adds	r7, #28
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr
 800684c:	40012c00 	.word	0x40012c00
 8006850:	40014000 	.word	0x40014000
 8006854:	40014400 	.word	0x40014400

08006858 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a1b      	ldr	r3, [r3, #32]
 8006872:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	69db      	ldr	r3, [r3, #28]
 800687e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006886:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800688a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006892:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	021b      	lsls	r3, r3, #8
 800689a:	68fa      	ldr	r2, [r7, #12]
 800689c:	4313      	orrs	r3, r2
 800689e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	689b      	ldr	r3, [r3, #8]
 80068ac:	031b      	lsls	r3, r3, #12
 80068ae:	693a      	ldr	r2, [r7, #16]
 80068b0:	4313      	orrs	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a14      	ldr	r2, [pc, #80]	; (8006908 <TIM_OC4_SetConfig+0xb0>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d007      	beq.n	80068cc <TIM_OC4_SetConfig+0x74>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a13      	ldr	r2, [pc, #76]	; (800690c <TIM_OC4_SetConfig+0xb4>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d003      	beq.n	80068cc <TIM_OC4_SetConfig+0x74>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	4a12      	ldr	r2, [pc, #72]	; (8006910 <TIM_OC4_SetConfig+0xb8>)
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d109      	bne.n	80068e0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	695b      	ldr	r3, [r3, #20]
 80068d8:	019b      	lsls	r3, r3, #6
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	4313      	orrs	r3, r2
 80068de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	697a      	ldr	r2, [r7, #20]
 80068e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	685a      	ldr	r2, [r3, #4]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	621a      	str	r2, [r3, #32]
}
 80068fa:	bf00      	nop
 80068fc:	371c      	adds	r7, #28
 80068fe:	46bd      	mov	sp, r7
 8006900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006904:	4770      	bx	lr
 8006906:	bf00      	nop
 8006908:	40012c00 	.word	0x40012c00
 800690c:	40014000 	.word	0x40014000
 8006910:	40014400 	.word	0x40014400

08006914 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006914:	b480      	push	{r7}
 8006916:	b087      	sub	sp, #28
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a1b      	ldr	r3, [r3, #32]
 800692e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800693a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006946:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4313      	orrs	r3, r2
 8006950:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006958:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	041b      	lsls	r3, r3, #16
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	4313      	orrs	r3, r2
 8006964:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a13      	ldr	r2, [pc, #76]	; (80069b8 <TIM_OC5_SetConfig+0xa4>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <TIM_OC5_SetConfig+0x6a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a12      	ldr	r2, [pc, #72]	; (80069bc <TIM_OC5_SetConfig+0xa8>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <TIM_OC5_SetConfig+0x6a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a11      	ldr	r2, [pc, #68]	; (80069c0 <TIM_OC5_SetConfig+0xac>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d109      	bne.n	8006992 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006984:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	4313      	orrs	r3, r2
 8006990:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	685a      	ldr	r2, [r3, #4]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	621a      	str	r2, [r3, #32]
}
 80069ac:	bf00      	nop
 80069ae:	371c      	adds	r7, #28
 80069b0:	46bd      	mov	sp, r7
 80069b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b6:	4770      	bx	lr
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400

080069c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6a1b      	ldr	r3, [r3, #32]
 80069d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f8:	683b      	ldr	r3, [r7, #0]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	051b      	lsls	r3, r3, #20
 8006a12:	693a      	ldr	r2, [r7, #16]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a14      	ldr	r2, [pc, #80]	; (8006a6c <TIM_OC6_SetConfig+0xa8>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d007      	beq.n	8006a30 <TIM_OC6_SetConfig+0x6c>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a13      	ldr	r2, [pc, #76]	; (8006a70 <TIM_OC6_SetConfig+0xac>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d003      	beq.n	8006a30 <TIM_OC6_SetConfig+0x6c>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	4a12      	ldr	r2, [pc, #72]	; (8006a74 <TIM_OC6_SetConfig+0xb0>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d109      	bne.n	8006a44 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	029b      	lsls	r3, r3, #10
 8006a3e:	697a      	ldr	r2, [r7, #20]
 8006a40:	4313      	orrs	r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	697a      	ldr	r2, [r7, #20]
 8006a48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	685a      	ldr	r2, [r3, #4]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	693a      	ldr	r2, [r7, #16]
 8006a5c:	621a      	str	r2, [r3, #32]
}
 8006a5e:	bf00      	nop
 8006a60:	371c      	adds	r7, #28
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr
 8006a6a:	bf00      	nop
 8006a6c:	40012c00 	.word	0x40012c00
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40014400 	.word	0x40014400

08006a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b087      	sub	sp, #28
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6a1b      	ldr	r3, [r3, #32]
 8006a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	6a1b      	ldr	r3, [r3, #32]
 8006a8e:	f023 0201 	bic.w	r2, r3, #1
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006aa2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	011b      	lsls	r3, r3, #4
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f023 030a 	bic.w	r3, r3, #10
 8006ab4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ab6:	697a      	ldr	r2, [r7, #20]
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	621a      	str	r2, [r3, #32]
}
 8006aca:	bf00      	nop
 8006acc:	371c      	adds	r7, #28
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b087      	sub	sp, #28
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	60f8      	str	r0, [r7, #12]
 8006ade:	60b9      	str	r1, [r7, #8]
 8006ae0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0210 	bic.w	r2, r3, #16
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6a1b      	ldr	r3, [r3, #32]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	031b      	lsls	r3, r3, #12
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	4313      	orrs	r3, r2
 8006b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	011b      	lsls	r3, r3, #4
 8006b18:	693a      	ldr	r2, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	693a      	ldr	r2, [r7, #16]
 8006b28:	621a      	str	r2, [r3, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	371c      	adds	r7, #28
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b085      	sub	sp, #20
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
 8006b3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b4c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b4e:	683a      	ldr	r2, [r7, #0]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	f043 0307 	orr.w	r3, r3, #7
 8006b58:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	609a      	str	r2, [r3, #8]
}
 8006b60:	bf00      	nop
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]
 8006b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	021a      	lsls	r2, r3, #8
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	431a      	orrs	r2, r3
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	609a      	str	r2, [r3, #8]
}
 8006ba0:	bf00      	nop
 8006ba2:	371c      	adds	r7, #28
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr

08006bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f003 031f 	and.w	r3, r3, #31
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6a1a      	ldr	r2, [r3, #32]
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	43db      	mvns	r3, r3
 8006bce:	401a      	ands	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	6a1a      	ldr	r2, [r3, #32]
 8006bd8:	68bb      	ldr	r3, [r7, #8]
 8006bda:	f003 031f 	and.w	r3, r3, #31
 8006bde:	6879      	ldr	r1, [r7, #4]
 8006be0:	fa01 f303 	lsl.w	r3, r1, r3
 8006be4:	431a      	orrs	r2, r3
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	621a      	str	r2, [r3, #32]
}
 8006bea:	bf00      	nop
 8006bec:	371c      	adds	r7, #28
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
	...

08006bf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	b085      	sub	sp, #20
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
 8006c00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c08:	2b01      	cmp	r3, #1
 8006c0a:	d101      	bne.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c0c:	2302      	movs	r3, #2
 8006c0e:	e04f      	b.n	8006cb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2202      	movs	r2, #2
 8006c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a21      	ldr	r2, [pc, #132]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d108      	bne.n	8006c4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	68fa      	ldr	r2, [r7, #12]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	4a14      	ldr	r2, [pc, #80]	; (8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d009      	beq.n	8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c78:	d004      	beq.n	8006c84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4a10      	ldr	r2, [pc, #64]	; (8006cc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d10c      	bne.n	8006c9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cae:	2300      	movs	r3, #0
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3714      	adds	r7, #20
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr
 8006cbc:	40012c00 	.word	0x40012c00
 8006cc0:	40014000 	.word	0x40014000

08006cc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd8:	2b01      	cmp	r3, #1
 8006cda:	d101      	bne.n	8006ce0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e060      	b.n	8006da2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	695b      	ldr	r3, [r3, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	041b      	lsls	r3, r3, #16
 8006d56:	4313      	orrs	r3, r2
 8006d58:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	4a14      	ldr	r2, [pc, #80]	; (8006db0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d115      	bne.n	8006d90 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d6e:	051b      	lsls	r3, r3, #20
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	6a1b      	ldr	r3, [r3, #32]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	68fa      	ldr	r2, [r7, #12]
 8006d96:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3714      	adds	r7, #20
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop
 8006db0:	40012c00 	.word	0x40012c00

08006db4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d101      	bne.n	8006dc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e040      	b.n	8006e48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d106      	bne.n	8006ddc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f7fb f826 	bl	8001e28 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2224      	movs	r2, #36	; 0x24
 8006de0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 0201 	bic.w	r2, r2, #1
 8006df0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 f8c0 	bl	8006f78 <UART_SetConfig>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d101      	bne.n	8006e02 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006dfe:	2301      	movs	r3, #1
 8006e00:	e022      	b.n	8006e48 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d002      	beq.n	8006e10 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 fae0 	bl	80073d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	685a      	ldr	r2, [r3, #4]
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006e1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689a      	ldr	r2, [r3, #8]
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006e2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	681a      	ldr	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f042 0201 	orr.w	r2, r2, #1
 8006e3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fb67 	bl	8007514 <UART_CheckIdleState>
 8006e46:	4603      	mov	r3, r0
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3708      	adds	r7, #8
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b08a      	sub	sp, #40	; 0x28
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	603b      	str	r3, [r7, #0]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	f040 8082 	bne.w	8006f6e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d002      	beq.n	8006e76 <HAL_UART_Transmit+0x26>
 8006e70:	88fb      	ldrh	r3, [r7, #6]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d101      	bne.n	8006e7a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e07a      	b.n	8006f70 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d101      	bne.n	8006e88 <HAL_UART_Transmit+0x38>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e073      	b.n	8006f70 <HAL_UART_Transmit+0x120>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2221      	movs	r2, #33	; 0x21
 8006e9c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e9e:	f7fb f9f3 	bl	8002288 <HAL_GetTick>
 8006ea2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	88fa      	ldrh	r2, [r7, #6]
 8006ea8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	88fa      	ldrh	r2, [r7, #6]
 8006eb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ebc:	d108      	bne.n	8006ed0 <HAL_UART_Transmit+0x80>
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	691b      	ldr	r3, [r3, #16]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d104      	bne.n	8006ed0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	e003      	b.n	8006ed8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006ee0:	e02d      	b.n	8006f3e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2180      	movs	r1, #128	; 0x80
 8006eec:	68f8      	ldr	r0, [r7, #12]
 8006eee:	f000 fb5a 	bl	80075a6 <UART_WaitOnFlagUntilTimeout>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e039      	b.n	8006f70 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8006efc:	69fb      	ldr	r3, [r7, #28]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10b      	bne.n	8006f1a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	881a      	ldrh	r2, [r3, #0]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	3302      	adds	r3, #2
 8006f16:	61bb      	str	r3, [r7, #24]
 8006f18:	e008      	b.n	8006f2c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f1a:	69fb      	ldr	r3, [r7, #28]
 8006f1c:	781a      	ldrb	r2, [r3, #0]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	b292      	uxth	r2, r2
 8006f24:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f32:	b29b      	uxth	r3, r3
 8006f34:	3b01      	subs	r3, #1
 8006f36:	b29a      	uxth	r2, r3
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d1cb      	bne.n	8006ee2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	2200      	movs	r2, #0
 8006f52:	2140      	movs	r1, #64	; 0x40
 8006f54:	68f8      	ldr	r0, [r7, #12]
 8006f56:	f000 fb26 	bl	80075a6 <UART_WaitOnFlagUntilTimeout>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d001      	beq.n	8006f64 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e005      	b.n	8006f70 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2220      	movs	r2, #32
 8006f68:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e000      	b.n	8006f70 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8006f6e:	2302      	movs	r3, #2
  }
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	3720      	adds	r7, #32
 8006f74:	46bd      	mov	sp, r7
 8006f76:	bd80      	pop	{r7, pc}

08006f78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006f7c:	b08a      	sub	sp, #40	; 0x28
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f82:	2300      	movs	r3, #0
 8006f84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	431a      	orrs	r2, r3
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	695b      	ldr	r3, [r3, #20]
 8006f96:	431a      	orrs	r2, r3
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	681a      	ldr	r2, [r3, #0]
 8006fa6:	4bb4      	ldr	r3, [pc, #720]	; (8007278 <UART_SetConfig+0x300>)
 8006fa8:	4013      	ands	r3, r2
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	6812      	ldr	r2, [r2, #0]
 8006fae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006fb0:	430b      	orrs	r3, r1
 8006fb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	68da      	ldr	r2, [r3, #12]
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	430a      	orrs	r2, r1
 8006fc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	699b      	ldr	r3, [r3, #24]
 8006fce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4aa9      	ldr	r2, [pc, #676]	; (800727c <UART_SetConfig+0x304>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d004      	beq.n	8006fe4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6a1b      	ldr	r3, [r3, #32]
 8006fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	4aa0      	ldr	r2, [pc, #640]	; (8007280 <UART_SetConfig+0x308>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d126      	bne.n	8007050 <UART_SetConfig+0xd8>
 8007002:	4ba0      	ldr	r3, [pc, #640]	; (8007284 <UART_SetConfig+0x30c>)
 8007004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007008:	f003 0303 	and.w	r3, r3, #3
 800700c:	2b03      	cmp	r3, #3
 800700e:	d81b      	bhi.n	8007048 <UART_SetConfig+0xd0>
 8007010:	a201      	add	r2, pc, #4	; (adr r2, 8007018 <UART_SetConfig+0xa0>)
 8007012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007016:	bf00      	nop
 8007018:	08007029 	.word	0x08007029
 800701c:	08007039 	.word	0x08007039
 8007020:	08007031 	.word	0x08007031
 8007024:	08007041 	.word	0x08007041
 8007028:	2301      	movs	r3, #1
 800702a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800702e:	e080      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007030:	2302      	movs	r3, #2
 8007032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007036:	e07c      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007038:	2304      	movs	r3, #4
 800703a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800703e:	e078      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007040:	2308      	movs	r3, #8
 8007042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007046:	e074      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007048:	2310      	movs	r3, #16
 800704a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800704e:	e070      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a8c      	ldr	r2, [pc, #560]	; (8007288 <UART_SetConfig+0x310>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d138      	bne.n	80070cc <UART_SetConfig+0x154>
 800705a:	4b8a      	ldr	r3, [pc, #552]	; (8007284 <UART_SetConfig+0x30c>)
 800705c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007060:	f003 030c 	and.w	r3, r3, #12
 8007064:	2b0c      	cmp	r3, #12
 8007066:	d82d      	bhi.n	80070c4 <UART_SetConfig+0x14c>
 8007068:	a201      	add	r2, pc, #4	; (adr r2, 8007070 <UART_SetConfig+0xf8>)
 800706a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706e:	bf00      	nop
 8007070:	080070a5 	.word	0x080070a5
 8007074:	080070c5 	.word	0x080070c5
 8007078:	080070c5 	.word	0x080070c5
 800707c:	080070c5 	.word	0x080070c5
 8007080:	080070b5 	.word	0x080070b5
 8007084:	080070c5 	.word	0x080070c5
 8007088:	080070c5 	.word	0x080070c5
 800708c:	080070c5 	.word	0x080070c5
 8007090:	080070ad 	.word	0x080070ad
 8007094:	080070c5 	.word	0x080070c5
 8007098:	080070c5 	.word	0x080070c5
 800709c:	080070c5 	.word	0x080070c5
 80070a0:	080070bd 	.word	0x080070bd
 80070a4:	2300      	movs	r3, #0
 80070a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070aa:	e042      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070ac:	2302      	movs	r3, #2
 80070ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070b2:	e03e      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070b4:	2304      	movs	r3, #4
 80070b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ba:	e03a      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070bc:	2308      	movs	r3, #8
 80070be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070c2:	e036      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070c4:	2310      	movs	r3, #16
 80070c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80070ca:	e032      	b.n	8007132 <UART_SetConfig+0x1ba>
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a6a      	ldr	r2, [pc, #424]	; (800727c <UART_SetConfig+0x304>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d12a      	bne.n	800712c <UART_SetConfig+0x1b4>
 80070d6:	4b6b      	ldr	r3, [pc, #428]	; (8007284 <UART_SetConfig+0x30c>)
 80070d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070e4:	d01a      	beq.n	800711c <UART_SetConfig+0x1a4>
 80070e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ea:	d81b      	bhi.n	8007124 <UART_SetConfig+0x1ac>
 80070ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f0:	d00c      	beq.n	800710c <UART_SetConfig+0x194>
 80070f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070f6:	d815      	bhi.n	8007124 <UART_SetConfig+0x1ac>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d003      	beq.n	8007104 <UART_SetConfig+0x18c>
 80070fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007100:	d008      	beq.n	8007114 <UART_SetConfig+0x19c>
 8007102:	e00f      	b.n	8007124 <UART_SetConfig+0x1ac>
 8007104:	2300      	movs	r3, #0
 8007106:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800710a:	e012      	b.n	8007132 <UART_SetConfig+0x1ba>
 800710c:	2302      	movs	r3, #2
 800710e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007112:	e00e      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007114:	2304      	movs	r3, #4
 8007116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800711a:	e00a      	b.n	8007132 <UART_SetConfig+0x1ba>
 800711c:	2308      	movs	r3, #8
 800711e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007122:	e006      	b.n	8007132 <UART_SetConfig+0x1ba>
 8007124:	2310      	movs	r3, #16
 8007126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800712a:	e002      	b.n	8007132 <UART_SetConfig+0x1ba>
 800712c:	2310      	movs	r3, #16
 800712e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a51      	ldr	r2, [pc, #324]	; (800727c <UART_SetConfig+0x304>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d17a      	bne.n	8007232 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800713c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007140:	2b08      	cmp	r3, #8
 8007142:	d824      	bhi.n	800718e <UART_SetConfig+0x216>
 8007144:	a201      	add	r2, pc, #4	; (adr r2, 800714c <UART_SetConfig+0x1d4>)
 8007146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800714a:	bf00      	nop
 800714c:	08007171 	.word	0x08007171
 8007150:	0800718f 	.word	0x0800718f
 8007154:	08007179 	.word	0x08007179
 8007158:	0800718f 	.word	0x0800718f
 800715c:	0800717f 	.word	0x0800717f
 8007160:	0800718f 	.word	0x0800718f
 8007164:	0800718f 	.word	0x0800718f
 8007168:	0800718f 	.word	0x0800718f
 800716c:	08007187 	.word	0x08007187
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007170:	f7fd f8b2 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8007174:	61f8      	str	r0, [r7, #28]
        break;
 8007176:	e010      	b.n	800719a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007178:	4b44      	ldr	r3, [pc, #272]	; (800728c <UART_SetConfig+0x314>)
 800717a:	61fb      	str	r3, [r7, #28]
        break;
 800717c:	e00d      	b.n	800719a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800717e:	f7fd f813 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 8007182:	61f8      	str	r0, [r7, #28]
        break;
 8007184:	e009      	b.n	800719a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007186:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800718a:	61fb      	str	r3, [r7, #28]
        break;
 800718c:	e005      	b.n	800719a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007198:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	2b00      	cmp	r3, #0
 800719e:	f000 8107 	beq.w	80073b0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	685a      	ldr	r2, [r3, #4]
 80071a6:	4613      	mov	r3, r2
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	4413      	add	r3, r2
 80071ac:	69fa      	ldr	r2, [r7, #28]
 80071ae:	429a      	cmp	r2, r3
 80071b0:	d305      	bcc.n	80071be <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	685b      	ldr	r3, [r3, #4]
 80071b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d903      	bls.n	80071c6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80071be:	2301      	movs	r3, #1
 80071c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80071c4:	e0f4      	b.n	80073b0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80071c6:	69fb      	ldr	r3, [r7, #28]
 80071c8:	2200      	movs	r2, #0
 80071ca:	461c      	mov	r4, r3
 80071cc:	4615      	mov	r5, r2
 80071ce:	f04f 0200 	mov.w	r2, #0
 80071d2:	f04f 0300 	mov.w	r3, #0
 80071d6:	022b      	lsls	r3, r5, #8
 80071d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80071dc:	0222      	lsls	r2, r4, #8
 80071de:	68f9      	ldr	r1, [r7, #12]
 80071e0:	6849      	ldr	r1, [r1, #4]
 80071e2:	0849      	lsrs	r1, r1, #1
 80071e4:	2000      	movs	r0, #0
 80071e6:	4688      	mov	r8, r1
 80071e8:	4681      	mov	r9, r0
 80071ea:	eb12 0a08 	adds.w	sl, r2, r8
 80071ee:	eb43 0b09 	adc.w	fp, r3, r9
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	2200      	movs	r2, #0
 80071f8:	603b      	str	r3, [r7, #0]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007200:	4650      	mov	r0, sl
 8007202:	4659      	mov	r1, fp
 8007204:	f7f9 fd40 	bl	8000c88 <__aeabi_uldivmod>
 8007208:	4602      	mov	r2, r0
 800720a:	460b      	mov	r3, r1
 800720c:	4613      	mov	r3, r2
 800720e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007216:	d308      	bcc.n	800722a <UART_SetConfig+0x2b2>
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800721e:	d204      	bcs.n	800722a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	69ba      	ldr	r2, [r7, #24]
 8007226:	60da      	str	r2, [r3, #12]
 8007228:	e0c2      	b.n	80073b0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800722a:	2301      	movs	r3, #1
 800722c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007230:	e0be      	b.n	80073b0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	69db      	ldr	r3, [r3, #28]
 8007236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800723a:	d16a      	bne.n	8007312 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800723c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007240:	2b08      	cmp	r3, #8
 8007242:	d834      	bhi.n	80072ae <UART_SetConfig+0x336>
 8007244:	a201      	add	r2, pc, #4	; (adr r2, 800724c <UART_SetConfig+0x2d4>)
 8007246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800724a:	bf00      	nop
 800724c:	08007271 	.word	0x08007271
 8007250:	08007291 	.word	0x08007291
 8007254:	08007299 	.word	0x08007299
 8007258:	080072af 	.word	0x080072af
 800725c:	0800729f 	.word	0x0800729f
 8007260:	080072af 	.word	0x080072af
 8007264:	080072af 	.word	0x080072af
 8007268:	080072af 	.word	0x080072af
 800726c:	080072a7 	.word	0x080072a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007270:	f7fd f832 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8007274:	61f8      	str	r0, [r7, #28]
        break;
 8007276:	e020      	b.n	80072ba <UART_SetConfig+0x342>
 8007278:	efff69f3 	.word	0xefff69f3
 800727c:	40008000 	.word	0x40008000
 8007280:	40013800 	.word	0x40013800
 8007284:	40021000 	.word	0x40021000
 8007288:	40004400 	.word	0x40004400
 800728c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007290:	f7fd f838 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 8007294:	61f8      	str	r0, [r7, #28]
        break;
 8007296:	e010      	b.n	80072ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007298:	4b4c      	ldr	r3, [pc, #304]	; (80073cc <UART_SetConfig+0x454>)
 800729a:	61fb      	str	r3, [r7, #28]
        break;
 800729c:	e00d      	b.n	80072ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800729e:	f7fc ff83 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 80072a2:	61f8      	str	r0, [r7, #28]
        break;
 80072a4:	e009      	b.n	80072ba <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80072aa:	61fb      	str	r3, [r7, #28]
        break;
 80072ac:	e005      	b.n	80072ba <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80072ae:	2300      	movs	r3, #0
 80072b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80072b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d077      	beq.n	80073b0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	005a      	lsls	r2, r3, #1
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	685b      	ldr	r3, [r3, #4]
 80072c8:	085b      	lsrs	r3, r3, #1
 80072ca:	441a      	add	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	2b0f      	cmp	r3, #15
 80072da:	d916      	bls.n	800730a <UART_SetConfig+0x392>
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e2:	d212      	bcs.n	800730a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	f023 030f 	bic.w	r3, r3, #15
 80072ec:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	085b      	lsrs	r3, r3, #1
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	f003 0307 	and.w	r3, r3, #7
 80072f8:	b29a      	uxth	r2, r3
 80072fa:	8afb      	ldrh	r3, [r7, #22]
 80072fc:	4313      	orrs	r3, r2
 80072fe:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	8afa      	ldrh	r2, [r7, #22]
 8007306:	60da      	str	r2, [r3, #12]
 8007308:	e052      	b.n	80073b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007310:	e04e      	b.n	80073b0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007316:	2b08      	cmp	r3, #8
 8007318:	d827      	bhi.n	800736a <UART_SetConfig+0x3f2>
 800731a:	a201      	add	r2, pc, #4	; (adr r2, 8007320 <UART_SetConfig+0x3a8>)
 800731c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007320:	08007345 	.word	0x08007345
 8007324:	0800734d 	.word	0x0800734d
 8007328:	08007355 	.word	0x08007355
 800732c:	0800736b 	.word	0x0800736b
 8007330:	0800735b 	.word	0x0800735b
 8007334:	0800736b 	.word	0x0800736b
 8007338:	0800736b 	.word	0x0800736b
 800733c:	0800736b 	.word	0x0800736b
 8007340:	08007363 	.word	0x08007363
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007344:	f7fc ffc8 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8007348:	61f8      	str	r0, [r7, #28]
        break;
 800734a:	e014      	b.n	8007376 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800734c:	f7fc ffda 	bl	8004304 <HAL_RCC_GetPCLK2Freq>
 8007350:	61f8      	str	r0, [r7, #28]
        break;
 8007352:	e010      	b.n	8007376 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007354:	4b1d      	ldr	r3, [pc, #116]	; (80073cc <UART_SetConfig+0x454>)
 8007356:	61fb      	str	r3, [r7, #28]
        break;
 8007358:	e00d      	b.n	8007376 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800735a:	f7fc ff25 	bl	80041a8 <HAL_RCC_GetSysClockFreq>
 800735e:	61f8      	str	r0, [r7, #28]
        break;
 8007360:	e009      	b.n	8007376 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007366:	61fb      	str	r3, [r7, #28]
        break;
 8007368:	e005      	b.n	8007376 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800736e:	2301      	movs	r3, #1
 8007370:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007374:	bf00      	nop
    }

    if (pclk != 0U)
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d019      	beq.n	80073b0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	685b      	ldr	r3, [r3, #4]
 8007380:	085a      	lsrs	r2, r3, #1
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	441a      	add	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	685b      	ldr	r3, [r3, #4]
 800738a:	fbb2 f3f3 	udiv	r3, r2, r3
 800738e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	2b0f      	cmp	r3, #15
 8007394:	d909      	bls.n	80073aa <UART_SetConfig+0x432>
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800739c:	d205      	bcs.n	80073aa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	b29a      	uxth	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	60da      	str	r2, [r3, #12]
 80073a8:	e002      	b.n	80073b0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80073aa:	2301      	movs	r3, #1
 80073ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80073bc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3728      	adds	r7, #40	; 0x28
 80073c4:	46bd      	mov	sp, r7
 80073c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073ca:	bf00      	nop
 80073cc:	00f42400 	.word	0x00f42400

080073d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073dc:	f003 0301 	and.w	r3, r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00a      	beq.n	80073fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	f003 0302 	and.w	r3, r3, #2
 8007402:	2b00      	cmp	r3, #0
 8007404:	d00a      	beq.n	800741c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	430a      	orrs	r2, r1
 800741a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	f003 0304 	and.w	r3, r3, #4
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00a      	beq.n	800743e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	430a      	orrs	r2, r1
 800743c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007442:	f003 0308 	and.w	r3, r3, #8
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	f003 0310 	and.w	r3, r3, #16
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00a      	beq.n	8007482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	430a      	orrs	r2, r1
 8007480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007486:	f003 0320 	and.w	r3, r3, #32
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00a      	beq.n	80074a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	689b      	ldr	r3, [r3, #8]
 8007494:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	430a      	orrs	r2, r1
 80074a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01a      	beq.n	80074e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685b      	ldr	r3, [r3, #4]
 80074b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074ce:	d10a      	bne.n	80074e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00a      	beq.n	8007508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	430a      	orrs	r2, r1
 8007506:	605a      	str	r2, [r3, #4]
  }
}
 8007508:	bf00      	nop
 800750a:	370c      	adds	r7, #12
 800750c:	46bd      	mov	sp, r7
 800750e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007512:	4770      	bx	lr

08007514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b086      	sub	sp, #24
 8007518:	af02      	add	r7, sp, #8
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2200      	movs	r2, #0
 8007520:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007524:	f7fa feb0 	bl	8002288 <HAL_GetTick>
 8007528:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f003 0308 	and.w	r3, r3, #8
 8007534:	2b08      	cmp	r3, #8
 8007536:	d10e      	bne.n	8007556 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007538:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800753c:	9300      	str	r3, [sp, #0]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f82d 	bl	80075a6 <UART_WaitOnFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007552:	2303      	movs	r3, #3
 8007554:	e023      	b.n	800759e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f003 0304 	and.w	r3, r3, #4
 8007560:	2b04      	cmp	r3, #4
 8007562:	d10e      	bne.n	8007582 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007564:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007568:	9300      	str	r3, [sp, #0]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f817 	bl	80075a6 <UART_WaitOnFlagUntilTimeout>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800757e:	2303      	movs	r3, #3
 8007580:	e00d      	b.n	800759e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2220      	movs	r2, #32
 8007586:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2220      	movs	r2, #32
 800758c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3710      	adds	r7, #16
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}

080075a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075a6:	b580      	push	{r7, lr}
 80075a8:	b09c      	sub	sp, #112	; 0x70
 80075aa:	af00      	add	r7, sp, #0
 80075ac:	60f8      	str	r0, [r7, #12]
 80075ae:	60b9      	str	r1, [r7, #8]
 80075b0:	603b      	str	r3, [r7, #0]
 80075b2:	4613      	mov	r3, r2
 80075b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075b6:	e0a5      	b.n	8007704 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075be:	f000 80a1 	beq.w	8007704 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075c2:	f7fa fe61 	bl	8002288 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d302      	bcc.n	80075d8 <UART_WaitOnFlagUntilTimeout+0x32>
 80075d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d13e      	bne.n	8007656 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80075e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80075ec:	667b      	str	r3, [r7, #100]	; 0x64
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075f8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80075fc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007604:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e6      	bne.n	80075d8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	3308      	adds	r3, #8
 8007610:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007614:	e853 3f00 	ldrex	r3, [r3]
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	f023 0301 	bic.w	r3, r3, #1
 8007620:	663b      	str	r3, [r7, #96]	; 0x60
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	3308      	adds	r3, #8
 8007628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800762a:	64ba      	str	r2, [r7, #72]	; 0x48
 800762c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007630:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007632:	e841 2300 	strex	r3, r2, [r1]
 8007636:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007638:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800763a:	2b00      	cmp	r3, #0
 800763c:	d1e5      	bne.n	800760a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2220      	movs	r2, #32
 8007642:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2220      	movs	r2, #32
 8007648:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2200      	movs	r2, #0
 800764e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007652:	2303      	movs	r3, #3
 8007654:	e067      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f003 0304 	and.w	r3, r3, #4
 8007660:	2b00      	cmp	r3, #0
 8007662:	d04f      	beq.n	8007704 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800766e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007672:	d147      	bne.n	8007704 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800767c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800768c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007692:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
 800769e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80076a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e6      	bne.n	800767e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	3308      	adds	r3, #8
 80076b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	e853 3f00 	ldrex	r3, [r3]
 80076be:	613b      	str	r3, [r7, #16]
   return(result);
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80076d0:	623a      	str	r2, [r7, #32]
 80076d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d4:	69f9      	ldr	r1, [r7, #28]
 80076d6:	6a3a      	ldr	r2, [r7, #32]
 80076d8:	e841 2300 	strex	r3, r2, [r1]
 80076dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d1e5      	bne.n	80076b0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2220      	movs	r2, #32
 80076ee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2200      	movs	r2, #0
 80076fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007700:	2303      	movs	r3, #3
 8007702:	e010      	b.n	8007726 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	69da      	ldr	r2, [r3, #28]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	4013      	ands	r3, r2
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	429a      	cmp	r2, r3
 8007712:	bf0c      	ite	eq
 8007714:	2301      	moveq	r3, #1
 8007716:	2300      	movne	r3, #0
 8007718:	b2db      	uxtb	r3, r3
 800771a:	461a      	mov	r2, r3
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	429a      	cmp	r2, r3
 8007720:	f43f af4a 	beq.w	80075b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3770      	adds	r7, #112	; 0x70
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <PMW3901_RegWrite>:

PMW3901_Descriptor_t *Descriptor; // Initialise notre port SPI


PMW3901_Status_t PMW3901_RegWrite(uint8_t reg, uint8_t val) // Méthode permettant d'écrire dans des registres en SPI
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	460a      	mov	r2, r1
 800773a:	71fb      	strb	r3, [r7, #7]
 800773c:	4613      	mov	r3, r2
 800773e:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef SPI_status;

	reg |= 0x80;
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007746:	71fb      	strb	r3, [r7, #7]
	uint8_t send[2]={reg,val};
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	733b      	strb	r3, [r7, #12]
 800774c:	79bb      	ldrb	r3, [r7, #6]
 800774e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8007750:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <PMW3901_RegWrite+0x74>)
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	6858      	ldr	r0, [r3, #4]
 8007756:	4b13      	ldr	r3, [pc, #76]	; (80077a4 <PMW3901_RegWrite+0x74>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	891b      	ldrh	r3, [r3, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	4619      	mov	r1, r3
 8007760:	f7fb ff82 	bl	8003668 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, send, 2, 1000);
 8007764:	4b0f      	ldr	r3, [pc, #60]	; (80077a4 <PMW3901_RegWrite+0x74>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	6818      	ldr	r0, [r3, #0]
 800776a:	f107 010c 	add.w	r1, r7, #12
 800776e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007772:	2202      	movs	r2, #2
 8007774:	f7fd f9d7 	bl	8004b26 <HAL_SPI_Transmit>
 8007778:	4603      	mov	r3, r0
 800777a:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 800777c:	7bfb      	ldrb	r3, [r7, #15]
 800777e:	2b00      	cmp	r3, #0
 8007780:	d001      	beq.n	8007786 <PMW3901_RegWrite+0x56>
 8007782:	2302      	movs	r3, #2
 8007784:	e00a      	b.n	800779c <PMW3901_RegWrite+0x6c>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <PMW3901_RegWrite+0x74>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6858      	ldr	r0, [r3, #4]
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <PMW3901_RegWrite+0x74>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	891b      	ldrh	r3, [r3, #8]
 8007792:	2201      	movs	r2, #1
 8007794:	4619      	mov	r1, r3
 8007796:	f7fb ff67 	bl	8003668 <HAL_GPIO_WritePin>

	return PMW3901_SUCCESS;
 800779a:	2300      	movs	r3, #0
}
 800779c:	4618      	mov	r0, r3
 800779e:	3710      	adds	r7, #16
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	200007cc 	.word	0x200007cc

080077a8 <PMW3901_RegRead>:

PMW3901_Status_t PMW3901_RegRead(uint8_t reg, uint8_t *dest) // Méthode permettant de lire des registres en SPI
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	6039      	str	r1, [r7, #0]
 80077b2:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef SPI_status;

	uint8_t value;

	reg &= ~0x80;
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80077be:	4b1e      	ldr	r3, [pc, #120]	; (8007838 <PMW3901_RegRead+0x90>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	6858      	ldr	r0, [r3, #4]
 80077c4:	4b1c      	ldr	r3, [pc, #112]	; (8007838 <PMW3901_RegRead+0x90>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	891b      	ldrh	r3, [r3, #8]
 80077ca:	2200      	movs	r2, #0
 80077cc:	4619      	mov	r1, r3
 80077ce:	f7fb ff4b 	bl	8003668 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, &reg, 1, 1000);
 80077d2:	4b19      	ldr	r3, [pc, #100]	; (8007838 <PMW3901_RegRead+0x90>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	6818      	ldr	r0, [r3, #0]
 80077d8:	1df9      	adds	r1, r7, #7
 80077da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80077de:	2201      	movs	r2, #1
 80077e0:	f7fd f9a1 	bl	8004b26 <HAL_SPI_Transmit>
 80077e4:	4603      	mov	r3, r0
 80077e6:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 80077e8:	7bfb      	ldrb	r3, [r7, #15]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d001      	beq.n	80077f2 <PMW3901_RegRead+0x4a>
 80077ee:	2302      	movs	r3, #2
 80077f0:	e01e      	b.n	8007830 <PMW3901_RegRead+0x88>

	SPI_status = HAL_SPI_Receive(HSPI, &value, 1, 1000);
 80077f2:	4b11      	ldr	r3, [pc, #68]	; (8007838 <PMW3901_RegRead+0x90>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	6818      	ldr	r0, [r3, #0]
 80077f8:	f107 010e 	add.w	r1, r7, #14
 80077fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007800:	2201      	movs	r2, #1
 8007802:	f7fd fafe 	bl	8004e02 <HAL_SPI_Receive>
 8007806:	4603      	mov	r3, r0
 8007808:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <PMW3901_RegRead+0x6c>
 8007810:	2302      	movs	r3, #2
 8007812:	e00d      	b.n	8007830 <PMW3901_RegRead+0x88>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8007814:	4b08      	ldr	r3, [pc, #32]	; (8007838 <PMW3901_RegRead+0x90>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6858      	ldr	r0, [r3, #4]
 800781a:	4b07      	ldr	r3, [pc, #28]	; (8007838 <PMW3901_RegRead+0x90>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	891b      	ldrh	r3, [r3, #8]
 8007820:	2201      	movs	r2, #1
 8007822:	4619      	mov	r1, r3
 8007824:	f7fb ff20 	bl	8003668 <HAL_GPIO_WritePin>

	*dest = value;
 8007828:	7bba      	ldrb	r2, [r7, #14]
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	701a      	strb	r2, [r3, #0]

	return PMW3901_SUCCESS;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	200007cc 	.word	0x200007cc

0800783c <PMW3901_SetLed>:

PMW3901_Status_t PMW3901_SetLed() // Fonction permettant d'allumer les leds du capteurs
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
	PMW3901_Status_t status;

	status = PMW3901_RegWrite(0x7f, 0x14);
 8007842:	2114      	movs	r1, #20
 8007844:	207f      	movs	r0, #127	; 0x7f
 8007846:	f7ff ff73 	bl	8007730 <PMW3901_RegWrite>
 800784a:	4603      	mov	r3, r0
 800784c:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 800784e:	79fb      	ldrb	r3, [r7, #7]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <PMW3901_SetLed+0x1c>
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	e011      	b.n	800787c <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x6f, 0x1c);
 8007858:	211c      	movs	r1, #28
 800785a:	206f      	movs	r0, #111	; 0x6f
 800785c:	f7ff ff68 	bl	8007730 <PMW3901_RegWrite>
 8007860:	4603      	mov	r3, r0
 8007862:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 8007864:	79fb      	ldrb	r3, [r7, #7]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d001      	beq.n	800786e <PMW3901_SetLed+0x32>
 800786a:	79fb      	ldrb	r3, [r7, #7]
 800786c:	e006      	b.n	800787c <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x7f, 0x00);
 800786e:	2100      	movs	r1, #0
 8007870:	207f      	movs	r0, #127	; 0x7f
 8007872:	f7ff ff5d 	bl	8007730 <PMW3901_RegWrite>
 8007876:	4603      	mov	r3, r0
 8007878:	71fb      	strb	r3, [r7, #7]
	return status;
 800787a:	79fb      	ldrb	r3, [r7, #7]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <PMW3901_Init>:

PMW3901_Status_t PMW3901_Init(PMW3901_Descriptor_t *_Descriptor) // Permet d'initialiser le capteur
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
	PMW3901_Status_t status;

	uint8_t Product_ID;
	uint8_t Inverse_Product_ID;

	Descriptor = _Descriptor;
 800788c:	4aad      	ldr	r2, [pc, #692]	; (8007b44 <PMW3901_Init+0x2c0>)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6013      	str	r3, [r2, #0]

	status = PMW3901_RegRead(0x00, &Product_ID);
 8007892:	f107 030e 	add.w	r3, r7, #14
 8007896:	4619      	mov	r1, r3
 8007898:	2000      	movs	r0, #0
 800789a:	f7ff ff85 	bl	80077a8 <PMW3901_RegRead>
 800789e:	4603      	mov	r3, r0
 80078a0:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d001      	beq.n	80078ac <PMW3901_Init+0x28>
 80078a8:	7bfb      	ldrb	r3, [r7, #15]
 80078aa:	e34c      	b.n	8007f46 <PMW3901_Init+0x6c2>

	if(Product_ID != PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 80078ac:	7bbb      	ldrb	r3, [r7, #14]
 80078ae:	2b49      	cmp	r3, #73	; 0x49
 80078b0:	d001      	beq.n	80078b6 <PMW3901_Init+0x32>
 80078b2:	2301      	movs	r3, #1
 80078b4:	e347      	b.n	8007f46 <PMW3901_Init+0x6c2>

	status = PMW3901_RegRead(0x5F, &Inverse_Product_ID);
 80078b6:	f107 030d 	add.w	r3, r7, #13
 80078ba:	4619      	mov	r1, r3
 80078bc:	205f      	movs	r0, #95	; 0x5f
 80078be:	f7ff ff73 	bl	80077a8 <PMW3901_RegRead>
 80078c2:	4603      	mov	r3, r0
 80078c4:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d001      	beq.n	80078d0 <PMW3901_Init+0x4c>
 80078cc:	7bfb      	ldrb	r3, [r7, #15]
 80078ce:	e33a      	b.n	8007f46 <PMW3901_Init+0x6c2>

	if(Inverse_Product_ID != INVERSE_PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 80078d0:	7b7b      	ldrb	r3, [r7, #13]
 80078d2:	2bb6      	cmp	r3, #182	; 0xb6
 80078d4:	d001      	beq.n	80078da <PMW3901_Init+0x56>
 80078d6:	2301      	movs	r3, #1
 80078d8:	e335      	b.n	8007f46 <PMW3901_Init+0x6c2>

	// Tout ça permet initialiser certains registres du capteur apparaissant dans la datasheet (on se sait pas à quoi ça correspond)
	status = PMW3901_RegWrite(0x3A, 0x00); if(status) return status; // Les if et return permettent de renvoyer un status afin de savoir si tout se passe bien, si status = 0 => tout est bon, si status = 1 => quelque chose fonctionne mal
 80078da:	2100      	movs	r1, #0
 80078dc:	203a      	movs	r0, #58	; 0x3a
 80078de:	f7ff ff27 	bl	8007730 <PMW3901_RegWrite>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73fb      	strb	r3, [r7, #15]
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d001      	beq.n	80078f0 <PMW3901_Init+0x6c>
 80078ec:	7bfb      	ldrb	r3, [r7, #15]
 80078ee:	e32a      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 80078f0:	2100      	movs	r1, #0
 80078f2:	207f      	movs	r0, #127	; 0x7f
 80078f4:	f7ff ff1c 	bl	8007730 <PMW3901_RegWrite>
 80078f8:	4603      	mov	r3, r0
 80078fa:	73fb      	strb	r3, [r7, #15]
 80078fc:	7bfb      	ldrb	r3, [r7, #15]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <PMW3901_Init+0x82>
 8007902:	7bfb      	ldrb	r3, [r7, #15]
 8007904:	e31f      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0xAD); if(status) return status;
 8007906:	21ad      	movs	r1, #173	; 0xad
 8007908:	2061      	movs	r0, #97	; 0x61
 800790a:	f7ff ff11 	bl	8007730 <PMW3901_RegWrite>
 800790e:	4603      	mov	r3, r0
 8007910:	73fb      	strb	r3, [r7, #15]
 8007912:	7bfb      	ldrb	r3, [r7, #15]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d001      	beq.n	800791c <PMW3901_Init+0x98>
 8007918:	7bfb      	ldrb	r3, [r7, #15]
 800791a:	e314      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x03); if(status) return status;
 800791c:	2103      	movs	r1, #3
 800791e:	207f      	movs	r0, #127	; 0x7f
 8007920:	f7ff ff06 	bl	8007730 <PMW3901_RegWrite>
 8007924:	4603      	mov	r3, r0
 8007926:	73fb      	strb	r3, [r7, #15]
 8007928:	7bfb      	ldrb	r3, [r7, #15]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d001      	beq.n	8007932 <PMW3901_Init+0xae>
 800792e:	7bfb      	ldrb	r3, [r7, #15]
 8007930:	e309      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x00); if(status) return status;
 8007932:	2100      	movs	r1, #0
 8007934:	2040      	movs	r0, #64	; 0x40
 8007936:	f7ff fefb 	bl	8007730 <PMW3901_RegWrite>
 800793a:	4603      	mov	r3, r0
 800793c:	73fb      	strb	r3, [r7, #15]
 800793e:	7bfb      	ldrb	r3, [r7, #15]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <PMW3901_Init+0xc4>
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	e2fe      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x05); if(status) return status;
 8007948:	2105      	movs	r1, #5
 800794a:	207f      	movs	r0, #127	; 0x7f
 800794c:	f7ff fef0 	bl	8007730 <PMW3901_RegWrite>
 8007950:	4603      	mov	r3, r0
 8007952:	73fb      	strb	r3, [r7, #15]
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d001      	beq.n	800795e <PMW3901_Init+0xda>
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	e2f3      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0xB3); if(status) return status;
 800795e:	21b3      	movs	r1, #179	; 0xb3
 8007960:	2041      	movs	r0, #65	; 0x41
 8007962:	f7ff fee5 	bl	8007730 <PMW3901_RegWrite>
 8007966:	4603      	mov	r3, r0
 8007968:	73fb      	strb	r3, [r7, #15]
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d001      	beq.n	8007974 <PMW3901_Init+0xf0>
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	e2e8      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0xF1); if(status) return status;
 8007974:	21f1      	movs	r1, #241	; 0xf1
 8007976:	2043      	movs	r0, #67	; 0x43
 8007978:	f7ff feda 	bl	8007730 <PMW3901_RegWrite>
 800797c:	4603      	mov	r3, r0
 800797e:	73fb      	strb	r3, [r7, #15]
 8007980:	7bfb      	ldrb	r3, [r7, #15]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <PMW3901_Init+0x106>
 8007986:	7bfb      	ldrb	r3, [r7, #15]
 8007988:	e2dd      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x14); if(status) return status;
 800798a:	2114      	movs	r1, #20
 800798c:	2045      	movs	r0, #69	; 0x45
 800798e:	f7ff fecf 	bl	8007730 <PMW3901_RegWrite>
 8007992:	4603      	mov	r3, r0
 8007994:	73fb      	strb	r3, [r7, #15]
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <PMW3901_Init+0x11c>
 800799c:	7bfb      	ldrb	r3, [r7, #15]
 800799e:	e2d2      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x32); if(status) return status;
 80079a0:	2132      	movs	r1, #50	; 0x32
 80079a2:	205b      	movs	r0, #91	; 0x5b
 80079a4:	f7ff fec4 	bl	8007730 <PMW3901_RegWrite>
 80079a8:	4603      	mov	r3, r0
 80079aa:	73fb      	strb	r3, [r7, #15]
 80079ac:	7bfb      	ldrb	r3, [r7, #15]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d001      	beq.n	80079b6 <PMW3901_Init+0x132>
 80079b2:	7bfb      	ldrb	r3, [r7, #15]
 80079b4:	e2c7      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x34); if(status) return status;
 80079b6:	2134      	movs	r1, #52	; 0x34
 80079b8:	205f      	movs	r0, #95	; 0x5f
 80079ba:	f7ff feb9 	bl	8007730 <PMW3901_RegWrite>
 80079be:	4603      	mov	r3, r0
 80079c0:	73fb      	strb	r3, [r7, #15]
 80079c2:	7bfb      	ldrb	r3, [r7, #15]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <PMW3901_Init+0x148>
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	e2bc      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7B, 0x08); if(status) return status;
 80079cc:	2108      	movs	r1, #8
 80079ce:	207b      	movs	r0, #123	; 0x7b
 80079d0:	f7ff feae 	bl	8007730 <PMW3901_RegWrite>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73fb      	strb	r3, [r7, #15]
 80079d8:	7bfb      	ldrb	r3, [r7, #15]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d001      	beq.n	80079e2 <PMW3901_Init+0x15e>
 80079de:	7bfb      	ldrb	r3, [r7, #15]
 80079e0:	e2b1      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 80079e2:	2106      	movs	r1, #6
 80079e4:	207f      	movs	r0, #127	; 0x7f
 80079e6:	f7ff fea3 	bl	8007730 <PMW3901_RegWrite>
 80079ea:	4603      	mov	r3, r0
 80079ec:	73fb      	strb	r3, [r7, #15]
 80079ee:	7bfb      	ldrb	r3, [r7, #15]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <PMW3901_Init+0x174>
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	e2a6      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x1B); if(status) return status;
 80079f8:	211b      	movs	r1, #27
 80079fa:	2044      	movs	r0, #68	; 0x44
 80079fc:	f7ff fe98 	bl	8007730 <PMW3901_RegWrite>
 8007a00:	4603      	mov	r3, r0
 8007a02:	73fb      	strb	r3, [r7, #15]
 8007a04:	7bfb      	ldrb	r3, [r7, #15]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d001      	beq.n	8007a0e <PMW3901_Init+0x18a>
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	e29b      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0xBF); if(status) return status;
 8007a0e:	21bf      	movs	r1, #191	; 0xbf
 8007a10:	2040      	movs	r0, #64	; 0x40
 8007a12:	f7ff fe8d 	bl	8007730 <PMW3901_RegWrite>
 8007a16:	4603      	mov	r3, r0
 8007a18:	73fb      	strb	r3, [r7, #15]
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <PMW3901_Init+0x1a0>
 8007a20:	7bfb      	ldrb	r3, [r7, #15]
 8007a22:	e290      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0x3F); if(status) return status;
 8007a24:	213f      	movs	r1, #63	; 0x3f
 8007a26:	204e      	movs	r0, #78	; 0x4e
 8007a28:	f7ff fe82 	bl	8007730 <PMW3901_RegWrite>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	73fb      	strb	r3, [r7, #15]
 8007a30:	7bfb      	ldrb	r3, [r7, #15]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d001      	beq.n	8007a3a <PMW3901_Init+0x1b6>
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	e285      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x08); if(status) return status;
 8007a3a:	2108      	movs	r1, #8
 8007a3c:	207f      	movs	r0, #127	; 0x7f
 8007a3e:	f7ff fe77 	bl	8007730 <PMW3901_RegWrite>
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <PMW3901_Init+0x1cc>
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	e27a      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x20); if(status) return status;
 8007a50:	2120      	movs	r1, #32
 8007a52:	2065      	movs	r0, #101	; 0x65
 8007a54:	f7ff fe6c 	bl	8007730 <PMW3901_RegWrite>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	73fb      	strb	r3, [r7, #15]
 8007a5c:	7bfb      	ldrb	r3, [r7, #15]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d001      	beq.n	8007a66 <PMW3901_Init+0x1e2>
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	e26f      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6A, 0x18); if(status) return status;
 8007a66:	2118      	movs	r1, #24
 8007a68:	206a      	movs	r0, #106	; 0x6a
 8007a6a:	f7ff fe61 	bl	8007730 <PMW3901_RegWrite>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	73fb      	strb	r3, [r7, #15]
 8007a72:	7bfb      	ldrb	r3, [r7, #15]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <PMW3901_Init+0x1f8>
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	e264      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x09); if(status) return status;
 8007a7c:	2109      	movs	r1, #9
 8007a7e:	207f      	movs	r0, #127	; 0x7f
 8007a80:	f7ff fe56 	bl	8007730 <PMW3901_RegWrite>
 8007a84:	4603      	mov	r3, r0
 8007a86:	73fb      	strb	r3, [r7, #15]
 8007a88:	7bfb      	ldrb	r3, [r7, #15]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d001      	beq.n	8007a92 <PMW3901_Init+0x20e>
 8007a8e:	7bfb      	ldrb	r3, [r7, #15]
 8007a90:	e259      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4F, 0xAF); if(status) return status;
 8007a92:	21af      	movs	r1, #175	; 0xaf
 8007a94:	204f      	movs	r0, #79	; 0x4f
 8007a96:	f7ff fe4b 	bl	8007730 <PMW3901_RegWrite>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	73fb      	strb	r3, [r7, #15]
 8007a9e:	7bfb      	ldrb	r3, [r7, #15]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d001      	beq.n	8007aa8 <PMW3901_Init+0x224>
 8007aa4:	7bfb      	ldrb	r3, [r7, #15]
 8007aa6:	e24e      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x40); if(status) return status;
 8007aa8:	2140      	movs	r1, #64	; 0x40
 8007aaa:	205f      	movs	r0, #95	; 0x5f
 8007aac:	f7ff fe40 	bl	8007730 <PMW3901_RegWrite>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <PMW3901_Init+0x23a>
 8007aba:	7bfb      	ldrb	r3, [r7, #15]
 8007abc:	e243      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x80); if(status) return status;
 8007abe:	2180      	movs	r1, #128	; 0x80
 8007ac0:	2048      	movs	r0, #72	; 0x48
 8007ac2:	f7ff fe35 	bl	8007730 <PMW3901_RegWrite>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	73fb      	strb	r3, [r7, #15]
 8007aca:	7bfb      	ldrb	r3, [r7, #15]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d001      	beq.n	8007ad4 <PMW3901_Init+0x250>
 8007ad0:	7bfb      	ldrb	r3, [r7, #15]
 8007ad2:	e238      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x49, 0x80); if(status) return status;
 8007ad4:	2180      	movs	r1, #128	; 0x80
 8007ad6:	2049      	movs	r0, #73	; 0x49
 8007ad8:	f7ff fe2a 	bl	8007730 <PMW3901_RegWrite>
 8007adc:	4603      	mov	r3, r0
 8007ade:	73fb      	strb	r3, [r7, #15]
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d001      	beq.n	8007aea <PMW3901_Init+0x266>
 8007ae6:	7bfb      	ldrb	r3, [r7, #15]
 8007ae8:	e22d      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x57, 0x77); if(status) return status;
 8007aea:	2177      	movs	r1, #119	; 0x77
 8007aec:	2057      	movs	r0, #87	; 0x57
 8007aee:	f7ff fe1f 	bl	8007730 <PMW3901_RegWrite>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <PMW3901_Init+0x27c>
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	e222      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x60, 0x78); if(status) return status;
 8007b00:	2178      	movs	r1, #120	; 0x78
 8007b02:	2060      	movs	r0, #96	; 0x60
 8007b04:	f7ff fe14 	bl	8007730 <PMW3901_RegWrite>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	73fb      	strb	r3, [r7, #15]
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d001      	beq.n	8007b16 <PMW3901_Init+0x292>
 8007b12:	7bfb      	ldrb	r3, [r7, #15]
 8007b14:	e217      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0x78); if(status) return status;
 8007b16:	2178      	movs	r1, #120	; 0x78
 8007b18:	2061      	movs	r0, #97	; 0x61
 8007b1a:	f7ff fe09 	bl	8007730 <PMW3901_RegWrite>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	73fb      	strb	r3, [r7, #15]
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d001      	beq.n	8007b2c <PMW3901_Init+0x2a8>
 8007b28:	7bfb      	ldrb	r3, [r7, #15]
 8007b2a:	e20c      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0x08); if(status) return status;
 8007b2c:	2108      	movs	r1, #8
 8007b2e:	2062      	movs	r0, #98	; 0x62
 8007b30:	f7ff fdfe 	bl	8007730 <PMW3901_RegWrite>
 8007b34:	4603      	mov	r3, r0
 8007b36:	73fb      	strb	r3, [r7, #15]
 8007b38:	7bfb      	ldrb	r3, [r7, #15]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <PMW3901_Init+0x2c4>
 8007b3e:	7bfb      	ldrb	r3, [r7, #15]
 8007b40:	e201      	b.n	8007f46 <PMW3901_Init+0x6c2>
 8007b42:	bf00      	nop
 8007b44:	200007cc 	.word	0x200007cc
	status = PMW3901_RegWrite(0x63, 0x50); if(status) return status;
 8007b48:	2150      	movs	r1, #80	; 0x50
 8007b4a:	2063      	movs	r0, #99	; 0x63
 8007b4c:	f7ff fdf0 	bl	8007730 <PMW3901_RegWrite>
 8007b50:	4603      	mov	r3, r0
 8007b52:	73fb      	strb	r3, [r7, #15]
 8007b54:	7bfb      	ldrb	r3, [r7, #15]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d001      	beq.n	8007b5e <PMW3901_Init+0x2da>
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	e1f3      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0A); if(status) return status;
 8007b5e:	210a      	movs	r1, #10
 8007b60:	207f      	movs	r0, #127	; 0x7f
 8007b62:	f7ff fde5 	bl	8007730 <PMW3901_RegWrite>
 8007b66:	4603      	mov	r3, r0
 8007b68:	73fb      	strb	r3, [r7, #15]
 8007b6a:	7bfb      	ldrb	r3, [r7, #15]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <PMW3901_Init+0x2f0>
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	e1e8      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x60); if(status) return status;
 8007b74:	2160      	movs	r1, #96	; 0x60
 8007b76:	2045      	movs	r0, #69	; 0x45
 8007b78:	f7ff fdda 	bl	8007730 <PMW3901_RegWrite>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d001      	beq.n	8007b8a <PMW3901_Init+0x306>
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	e1dd      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	207f      	movs	r0, #127	; 0x7f
 8007b8e:	f7ff fdcf 	bl	8007730 <PMW3901_RegWrite>
 8007b92:	4603      	mov	r3, r0
 8007b94:	73fb      	strb	r3, [r7, #15]
 8007b96:	7bfb      	ldrb	r3, [r7, #15]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <PMW3901_Init+0x31c>
 8007b9c:	7bfb      	ldrb	r3, [r7, #15]
 8007b9e:	e1d2      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4D, 0x11); if(status) return status;
 8007ba0:	2111      	movs	r1, #17
 8007ba2:	204d      	movs	r0, #77	; 0x4d
 8007ba4:	f7ff fdc4 	bl	8007730 <PMW3901_RegWrite>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	73fb      	strb	r3, [r7, #15]
 8007bac:	7bfb      	ldrb	r3, [r7, #15]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <PMW3901_Init+0x332>
 8007bb2:	7bfb      	ldrb	r3, [r7, #15]
 8007bb4:	e1c7      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x55, 0x80); if(status) return status;
 8007bb6:	2180      	movs	r1, #128	; 0x80
 8007bb8:	2055      	movs	r0, #85	; 0x55
 8007bba:	f7ff fdb9 	bl	8007730 <PMW3901_RegWrite>
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	73fb      	strb	r3, [r7, #15]
 8007bc2:	7bfb      	ldrb	r3, [r7, #15]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d001      	beq.n	8007bcc <PMW3901_Init+0x348>
 8007bc8:	7bfb      	ldrb	r3, [r7, #15]
 8007bca:	e1bc      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x74, 0x1F); if(status) return status;
 8007bcc:	211f      	movs	r1, #31
 8007bce:	2074      	movs	r0, #116	; 0x74
 8007bd0:	f7ff fdae 	bl	8007730 <PMW3901_RegWrite>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d001      	beq.n	8007be2 <PMW3901_Init+0x35e>
 8007bde:	7bfb      	ldrb	r3, [r7, #15]
 8007be0:	e1b1      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x75, 0x1F); if(status) return status;
 8007be2:	211f      	movs	r1, #31
 8007be4:	2075      	movs	r0, #117	; 0x75
 8007be6:	f7ff fda3 	bl	8007730 <PMW3901_RegWrite>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d001      	beq.n	8007bf8 <PMW3901_Init+0x374>
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	e1a6      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4A, 0x78); if(status) return status;
 8007bf8:	2178      	movs	r1, #120	; 0x78
 8007bfa:	204a      	movs	r0, #74	; 0x4a
 8007bfc:	f7ff fd98 	bl	8007730 <PMW3901_RegWrite>
 8007c00:	4603      	mov	r3, r0
 8007c02:	73fb      	strb	r3, [r7, #15]
 8007c04:	7bfb      	ldrb	r3, [r7, #15]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d001      	beq.n	8007c0e <PMW3901_Init+0x38a>
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	e19b      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x78); if(status) return status;
 8007c0e:	2178      	movs	r1, #120	; 0x78
 8007c10:	204b      	movs	r0, #75	; 0x4b
 8007c12:	f7ff fd8d 	bl	8007730 <PMW3901_RegWrite>
 8007c16:	4603      	mov	r3, r0
 8007c18:	73fb      	strb	r3, [r7, #15]
 8007c1a:	7bfb      	ldrb	r3, [r7, #15]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d001      	beq.n	8007c24 <PMW3901_Init+0x3a0>
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
 8007c22:	e190      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x08); if(status) return status;
 8007c24:	2108      	movs	r1, #8
 8007c26:	2044      	movs	r0, #68	; 0x44
 8007c28:	f7ff fd82 	bl	8007730 <PMW3901_RegWrite>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	73fb      	strb	r3, [r7, #15]
 8007c30:	7bfb      	ldrb	r3, [r7, #15]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d001      	beq.n	8007c3a <PMW3901_Init+0x3b6>
 8007c36:	7bfb      	ldrb	r3, [r7, #15]
 8007c38:	e185      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x50); if(status) return status;
 8007c3a:	2150      	movs	r1, #80	; 0x50
 8007c3c:	2045      	movs	r0, #69	; 0x45
 8007c3e:	f7ff fd77 	bl	8007730 <PMW3901_RegWrite>
 8007c42:	4603      	mov	r3, r0
 8007c44:	73fb      	strb	r3, [r7, #15]
 8007c46:	7bfb      	ldrb	r3, [r7, #15]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <PMW3901_Init+0x3cc>
 8007c4c:	7bfb      	ldrb	r3, [r7, #15]
 8007c4e:	e17a      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x64, 0xFF); if(status) return status;
 8007c50:	21ff      	movs	r1, #255	; 0xff
 8007c52:	2064      	movs	r0, #100	; 0x64
 8007c54:	f7ff fd6c 	bl	8007730 <PMW3901_RegWrite>
 8007c58:	4603      	mov	r3, r0
 8007c5a:	73fb      	strb	r3, [r7, #15]
 8007c5c:	7bfb      	ldrb	r3, [r7, #15]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d001      	beq.n	8007c66 <PMW3901_Init+0x3e2>
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
 8007c64:	e16f      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x1F); if(status) return status;
 8007c66:	211f      	movs	r1, #31
 8007c68:	2065      	movs	r0, #101	; 0x65
 8007c6a:	f7ff fd61 	bl	8007730 <PMW3901_RegWrite>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	73fb      	strb	r3, [r7, #15]
 8007c72:	7bfb      	ldrb	r3, [r7, #15]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <PMW3901_Init+0x3f8>
 8007c78:	7bfb      	ldrb	r3, [r7, #15]
 8007c7a:	e164      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x14); if(status) return status;
 8007c7c:	2114      	movs	r1, #20
 8007c7e:	207f      	movs	r0, #127	; 0x7f
 8007c80:	f7ff fd56 	bl	8007730 <PMW3901_RegWrite>
 8007c84:	4603      	mov	r3, r0
 8007c86:	73fb      	strb	r3, [r7, #15]
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <PMW3901_Init+0x40e>
 8007c8e:	7bfb      	ldrb	r3, [r7, #15]
 8007c90:	e159      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x60); if(status) return status;
 8007c92:	2160      	movs	r1, #96	; 0x60
 8007c94:	2065      	movs	r0, #101	; 0x65
 8007c96:	f7ff fd4b 	bl	8007730 <PMW3901_RegWrite>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	73fb      	strb	r3, [r7, #15]
 8007c9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <PMW3901_Init+0x424>
 8007ca4:	7bfb      	ldrb	r3, [r7, #15]
 8007ca6:	e14e      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x66, 0x08); if(status) return status;
 8007ca8:	2108      	movs	r1, #8
 8007caa:	2066      	movs	r0, #102	; 0x66
 8007cac:	f7ff fd40 	bl	8007730 <PMW3901_RegWrite>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	73fb      	strb	r3, [r7, #15]
 8007cb4:	7bfb      	ldrb	r3, [r7, #15]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d001      	beq.n	8007cbe <PMW3901_Init+0x43a>
 8007cba:	7bfb      	ldrb	r3, [r7, #15]
 8007cbc:	e143      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x78); if(status) return status;
 8007cbe:	2178      	movs	r1, #120	; 0x78
 8007cc0:	2063      	movs	r0, #99	; 0x63
 8007cc2:	f7ff fd35 	bl	8007730 <PMW3901_RegWrite>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d001      	beq.n	8007cd4 <PMW3901_Init+0x450>
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
 8007cd2:	e138      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x15); if(status) return status;
 8007cd4:	2115      	movs	r1, #21
 8007cd6:	207f      	movs	r0, #127	; 0x7f
 8007cd8:	f7ff fd2a 	bl	8007730 <PMW3901_RegWrite>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <PMW3901_Init+0x466>
 8007ce6:	7bfb      	ldrb	r3, [r7, #15]
 8007ce8:	e12d      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x58); if(status) return status;
 8007cea:	2158      	movs	r1, #88	; 0x58
 8007cec:	2048      	movs	r0, #72	; 0x48
 8007cee:	f7ff fd1f 	bl	8007730 <PMW3901_RegWrite>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	73fb      	strb	r3, [r7, #15]
 8007cf6:	7bfb      	ldrb	r3, [r7, #15]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d001      	beq.n	8007d00 <PMW3901_Init+0x47c>
 8007cfc:	7bfb      	ldrb	r3, [r7, #15]
 8007cfe:	e122      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8007d00:	2107      	movs	r1, #7
 8007d02:	207f      	movs	r0, #127	; 0x7f
 8007d04:	f7ff fd14 	bl	8007730 <PMW3901_RegWrite>
 8007d08:	4603      	mov	r3, r0
 8007d0a:	73fb      	strb	r3, [r7, #15]
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <PMW3901_Init+0x492>
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	e117      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0x0D); if(status) return status;
 8007d16:	210d      	movs	r1, #13
 8007d18:	2041      	movs	r0, #65	; 0x41
 8007d1a:	f7ff fd09 	bl	8007730 <PMW3901_RegWrite>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	73fb      	strb	r3, [r7, #15]
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d001      	beq.n	8007d2c <PMW3901_Init+0x4a8>
 8007d28:	7bfb      	ldrb	r3, [r7, #15]
 8007d2a:	e10c      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0x14); if(status) return status;
 8007d2c:	2114      	movs	r1, #20
 8007d2e:	2043      	movs	r0, #67	; 0x43
 8007d30:	f7ff fcfe 	bl	8007730 <PMW3901_RegWrite>
 8007d34:	4603      	mov	r3, r0
 8007d36:	73fb      	strb	r3, [r7, #15]
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d001      	beq.n	8007d42 <PMW3901_Init+0x4be>
 8007d3e:	7bfb      	ldrb	r3, [r7, #15]
 8007d40:	e101      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x0E); if(status) return status;
 8007d42:	210e      	movs	r1, #14
 8007d44:	204b      	movs	r0, #75	; 0x4b
 8007d46:	f7ff fcf3 	bl	8007730 <PMW3901_RegWrite>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	73fb      	strb	r3, [r7, #15]
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d001      	beq.n	8007d58 <PMW3901_Init+0x4d4>
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	e0f6      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x0F); if(status) return status;
 8007d58:	210f      	movs	r1, #15
 8007d5a:	2045      	movs	r0, #69	; 0x45
 8007d5c:	f7ff fce8 	bl	8007730 <PMW3901_RegWrite>
 8007d60:	4603      	mov	r3, r0
 8007d62:	73fb      	strb	r3, [r7, #15]
 8007d64:	7bfb      	ldrb	r3, [r7, #15]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <PMW3901_Init+0x4ea>
 8007d6a:	7bfb      	ldrb	r3, [r7, #15]
 8007d6c:	e0eb      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x42); if(status) return status;
 8007d6e:	2142      	movs	r1, #66	; 0x42
 8007d70:	2044      	movs	r0, #68	; 0x44
 8007d72:	f7ff fcdd 	bl	8007730 <PMW3901_RegWrite>
 8007d76:	4603      	mov	r3, r0
 8007d78:	73fb      	strb	r3, [r7, #15]
 8007d7a:	7bfb      	ldrb	r3, [r7, #15]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d001      	beq.n	8007d84 <PMW3901_Init+0x500>
 8007d80:	7bfb      	ldrb	r3, [r7, #15]
 8007d82:	e0e0      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4C, 0x80); if(status) return status;
 8007d84:	2180      	movs	r1, #128	; 0x80
 8007d86:	204c      	movs	r0, #76	; 0x4c
 8007d88:	f7ff fcd2 	bl	8007730 <PMW3901_RegWrite>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73fb      	strb	r3, [r7, #15]
 8007d90:	7bfb      	ldrb	r3, [r7, #15]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d001      	beq.n	8007d9a <PMW3901_Init+0x516>
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	e0d5      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x10); if(status) return status;
 8007d9a:	2110      	movs	r1, #16
 8007d9c:	207f      	movs	r0, #127	; 0x7f
 8007d9e:	f7ff fcc7 	bl	8007730 <PMW3901_RegWrite>
 8007da2:	4603      	mov	r3, r0
 8007da4:	73fb      	strb	r3, [r7, #15]
 8007da6:	7bfb      	ldrb	r3, [r7, #15]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d001      	beq.n	8007db0 <PMW3901_Init+0x52c>
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	e0ca      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x02); if(status) return status;
 8007db0:	2102      	movs	r1, #2
 8007db2:	205b      	movs	r0, #91	; 0x5b
 8007db4:	f7ff fcbc 	bl	8007730 <PMW3901_RegWrite>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <PMW3901_Init+0x542>
 8007dc2:	7bfb      	ldrb	r3, [r7, #15]
 8007dc4:	e0bf      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8007dc6:	2107      	movs	r1, #7
 8007dc8:	207f      	movs	r0, #127	; 0x7f
 8007dca:	f7ff fcb1 	bl	8007730 <PMW3901_RegWrite>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	73fb      	strb	r3, [r7, #15]
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d001      	beq.n	8007ddc <PMW3901_Init+0x558>
 8007dd8:	7bfb      	ldrb	r3, [r7, #15]
 8007dda:	e0b4      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x41); if(status) return status;
 8007ddc:	2141      	movs	r1, #65	; 0x41
 8007dde:	2040      	movs	r0, #64	; 0x40
 8007de0:	f7ff fca6 	bl	8007730 <PMW3901_RegWrite>
 8007de4:	4603      	mov	r3, r0
 8007de6:	73fb      	strb	r3, [r7, #15]
 8007de8:	7bfb      	ldrb	r3, [r7, #15]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <PMW3901_Init+0x56e>
 8007dee:	7bfb      	ldrb	r3, [r7, #15]
 8007df0:	e0a9      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x70, 0x00); if(status) return status;
 8007df2:	2100      	movs	r1, #0
 8007df4:	2070      	movs	r0, #112	; 0x70
 8007df6:	f7ff fc9b 	bl	8007730 <PMW3901_RegWrite>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73fb      	strb	r3, [r7, #15]
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d001      	beq.n	8007e08 <PMW3901_Init+0x584>
 8007e04:	7bfb      	ldrb	r3, [r7, #15]
 8007e06:	e09e      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x32, 0x44); if(status) return status;
 8007e08:	2144      	movs	r1, #68	; 0x44
 8007e0a:	2032      	movs	r0, #50	; 0x32
 8007e0c:	f7ff fc90 	bl	8007730 <PMW3901_RegWrite>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d001      	beq.n	8007e1e <PMW3901_Init+0x59a>
 8007e1a:	7bfb      	ldrb	r3, [r7, #15]
 8007e1c:	e093      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8007e1e:	2107      	movs	r1, #7
 8007e20:	207f      	movs	r0, #127	; 0x7f
 8007e22:	f7ff fc85 	bl	8007730 <PMW3901_RegWrite>
 8007e26:	4603      	mov	r3, r0
 8007e28:	73fb      	strb	r3, [r7, #15]
 8007e2a:	7bfb      	ldrb	r3, [r7, #15]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d001      	beq.n	8007e34 <PMW3901_Init+0x5b0>
 8007e30:	7bfb      	ldrb	r3, [r7, #15]
 8007e32:	e088      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x40); if(status) return status;
 8007e34:	2140      	movs	r1, #64	; 0x40
 8007e36:	2040      	movs	r0, #64	; 0x40
 8007e38:	f7ff fc7a 	bl	8007730 <PMW3901_RegWrite>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	73fb      	strb	r3, [r7, #15]
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d001      	beq.n	8007e4a <PMW3901_Init+0x5c6>
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	e07d      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 8007e4a:	2106      	movs	r1, #6
 8007e4c:	207f      	movs	r0, #127	; 0x7f
 8007e4e:	f7ff fc6f 	bl	8007730 <PMW3901_RegWrite>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73fb      	strb	r3, [r7, #15]
 8007e56:	7bfb      	ldrb	r3, [r7, #15]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <PMW3901_Init+0x5dc>
 8007e5c:	7bfb      	ldrb	r3, [r7, #15]
 8007e5e:	e072      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0xf0); if(status) return status;
 8007e60:	21f0      	movs	r1, #240	; 0xf0
 8007e62:	2062      	movs	r0, #98	; 0x62
 8007e64:	f7ff fc64 	bl	8007730 <PMW3901_RegWrite>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	7bfb      	ldrb	r3, [r7, #15]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d001      	beq.n	8007e76 <PMW3901_Init+0x5f2>
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
 8007e74:	e067      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x00); if(status) return status;
 8007e76:	2100      	movs	r1, #0
 8007e78:	2063      	movs	r0, #99	; 0x63
 8007e7a:	f7ff fc59 	bl	8007730 <PMW3901_RegWrite>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	73fb      	strb	r3, [r7, #15]
 8007e82:	7bfb      	ldrb	r3, [r7, #15]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d001      	beq.n	8007e8c <PMW3901_Init+0x608>
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	e05c      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0D); if(status) return status;
 8007e8c:	210d      	movs	r1, #13
 8007e8e:	207f      	movs	r0, #127	; 0x7f
 8007e90:	f7ff fc4e 	bl	8007730 <PMW3901_RegWrite>
 8007e94:	4603      	mov	r3, r0
 8007e96:	73fb      	strb	r3, [r7, #15]
 8007e98:	7bfb      	ldrb	r3, [r7, #15]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d001      	beq.n	8007ea2 <PMW3901_Init+0x61e>
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	e051      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0xC0); if(status) return status;
 8007ea2:	21c0      	movs	r1, #192	; 0xc0
 8007ea4:	2048      	movs	r0, #72	; 0x48
 8007ea6:	f7ff fc43 	bl	8007730 <PMW3901_RegWrite>
 8007eaa:	4603      	mov	r3, r0
 8007eac:	73fb      	strb	r3, [r7, #15]
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <PMW3901_Init+0x634>
 8007eb4:	7bfb      	ldrb	r3, [r7, #15]
 8007eb6:	e046      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6F, 0xd5); if(status) return status;
 8007eb8:	21d5      	movs	r1, #213	; 0xd5
 8007eba:	206f      	movs	r0, #111	; 0x6f
 8007ebc:	f7ff fc38 	bl	8007730 <PMW3901_RegWrite>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]
 8007ec4:	7bfb      	ldrb	r3, [r7, #15]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <PMW3901_Init+0x64a>
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	e03b      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8007ece:	2100      	movs	r1, #0
 8007ed0:	207f      	movs	r0, #127	; 0x7f
 8007ed2:	f7ff fc2d 	bl	8007730 <PMW3901_RegWrite>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	73fb      	strb	r3, [r7, #15]
 8007eda:	7bfb      	ldrb	r3, [r7, #15]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <PMW3901_Init+0x660>
 8007ee0:	7bfb      	ldrb	r3, [r7, #15]
 8007ee2:	e030      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0xa0); if(status) return status;
 8007ee4:	21a0      	movs	r1, #160	; 0xa0
 8007ee6:	205b      	movs	r0, #91	; 0x5b
 8007ee8:	f7ff fc22 	bl	8007730 <PMW3901_RegWrite>
 8007eec:	4603      	mov	r3, r0
 8007eee:	73fb      	strb	r3, [r7, #15]
 8007ef0:	7bfb      	ldrb	r3, [r7, #15]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d001      	beq.n	8007efa <PMW3901_Init+0x676>
 8007ef6:	7bfb      	ldrb	r3, [r7, #15]
 8007ef8:	e025      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0xA8); if(status) return status;
 8007efa:	21a8      	movs	r1, #168	; 0xa8
 8007efc:	204e      	movs	r0, #78	; 0x4e
 8007efe:	f7ff fc17 	bl	8007730 <PMW3901_RegWrite>
 8007f02:	4603      	mov	r3, r0
 8007f04:	73fb      	strb	r3, [r7, #15]
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <PMW3901_Init+0x68c>
 8007f0c:	7bfb      	ldrb	r3, [r7, #15]
 8007f0e:	e01a      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5A, 0x50); if(status) return status;
 8007f10:	2150      	movs	r1, #80	; 0x50
 8007f12:	205a      	movs	r0, #90	; 0x5a
 8007f14:	f7ff fc0c 	bl	8007730 <PMW3901_RegWrite>
 8007f18:	4603      	mov	r3, r0
 8007f1a:	73fb      	strb	r3, [r7, #15]
 8007f1c:	7bfb      	ldrb	r3, [r7, #15]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <PMW3901_Init+0x6a2>
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	e00f      	b.n	8007f46 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x80); if(status) return status;
 8007f26:	2180      	movs	r1, #128	; 0x80
 8007f28:	2040      	movs	r0, #64	; 0x40
 8007f2a:	f7ff fc01 	bl	8007730 <PMW3901_RegWrite>
 8007f2e:	4603      	mov	r3, r0
 8007f30:	73fb      	strb	r3, [r7, #15]
 8007f32:	7bfb      	ldrb	r3, [r7, #15]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d001      	beq.n	8007f3c <PMW3901_Init+0x6b8>
 8007f38:	7bfb      	ldrb	r3, [r7, #15]
 8007f3a:	e004      	b.n	8007f46 <PMW3901_Init+0x6c2>

	status = PMW3901_SetLed();
 8007f3c:	f7ff fc7e 	bl	800783c <PMW3901_SetLed>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]

	return status;
 8007f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f46:	4618      	mov	r0, r3
 8007f48:	3710      	adds	r7, #16
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	bd80      	pop	{r7, pc}
 8007f4e:	bf00      	nop

08007f50 <PMW3901_Read_Variation>:

PMW3901_Status_t PMW3901_Read_Variation(int16_t *var_x, int16_t *var_y) // Fonction permettant de lire la valeur de la variation
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]

	PMW3901_Status_t status;
	PMW3901_Unify_2x8_to_16_t data;
	uint8_t Motion;

	status = PMW3901_RegRead(0x02, &Motion);
 8007f5a:	f107 030b 	add.w	r3, r7, #11
 8007f5e:	4619      	mov	r1, r3
 8007f60:	2002      	movs	r0, #2
 8007f62:	f7ff fc21 	bl	80077a8 <PMW3901_RegRead>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <PMW3901_Read_Variation+0x24>
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	e03e      	b.n	8007ff2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_H, &data.raw[1]);
 8007f74:	f107 030c 	add.w	r3, r7, #12
 8007f78:	3301      	adds	r3, #1
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	2004      	movs	r0, #4
 8007f7e:	f7ff fc13 	bl	80077a8 <PMW3901_RegRead>
 8007f82:	4603      	mov	r3, r0
 8007f84:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8007f86:	7bfb      	ldrb	r3, [r7, #15]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d001      	beq.n	8007f90 <PMW3901_Read_Variation+0x40>
 8007f8c:	7bfb      	ldrb	r3, [r7, #15]
 8007f8e:	e030      	b.n	8007ff2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_L, &data.raw[0]);
 8007f90:	f107 030c 	add.w	r3, r7, #12
 8007f94:	4619      	mov	r1, r3
 8007f96:	2003      	movs	r0, #3
 8007f98:	f7ff fc06 	bl	80077a8 <PMW3901_RegRead>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8007fa0:	7bfb      	ldrb	r3, [r7, #15]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <PMW3901_Read_Variation+0x5a>
 8007fa6:	7bfb      	ldrb	r3, [r7, #15]
 8007fa8:	e023      	b.n	8007ff2 <PMW3901_Read_Variation+0xa2>

	*var_x = data.unified;
 8007faa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	801a      	strh	r2, [r3, #0]

	status = PMW3901_RegRead(DELTA_Y_H, &data.raw[1]);
 8007fb2:	f107 030c 	add.w	r3, r7, #12
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	4619      	mov	r1, r3
 8007fba:	2006      	movs	r0, #6
 8007fbc:	f7ff fbf4 	bl	80077a8 <PMW3901_RegRead>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8007fc4:	7bfb      	ldrb	r3, [r7, #15]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <PMW3901_Read_Variation+0x7e>
 8007fca:	7bfb      	ldrb	r3, [r7, #15]
 8007fcc:	e011      	b.n	8007ff2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_Y_L, &data.raw[0]);
 8007fce:	f107 030c 	add.w	r3, r7, #12
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	2005      	movs	r0, #5
 8007fd6:	f7ff fbe7 	bl	80077a8 <PMW3901_RegRead>
 8007fda:	4603      	mov	r3, r0
 8007fdc:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d001      	beq.n	8007fe8 <PMW3901_Read_Variation+0x98>
 8007fe4:	7bfb      	ldrb	r3, [r7, #15]
 8007fe6:	e004      	b.n	8007ff2 <PMW3901_Read_Variation+0xa2>

	*var_y = data.unified;
 8007fe8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	801a      	strh	r2, [r3, #0]

	return status;
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	3710      	adds	r7, #16
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bd80      	pop	{r7, pc}
	...

08007ffc <__errno>:
 8007ffc:	4b01      	ldr	r3, [pc, #4]	; (8008004 <__errno+0x8>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20000018 	.word	0x20000018

08008008 <__libc_init_array>:
 8008008:	b570      	push	{r4, r5, r6, lr}
 800800a:	4d0d      	ldr	r5, [pc, #52]	; (8008040 <__libc_init_array+0x38>)
 800800c:	4c0d      	ldr	r4, [pc, #52]	; (8008044 <__libc_init_array+0x3c>)
 800800e:	1b64      	subs	r4, r4, r5
 8008010:	10a4      	asrs	r4, r4, #2
 8008012:	2600      	movs	r6, #0
 8008014:	42a6      	cmp	r6, r4
 8008016:	d109      	bne.n	800802c <__libc_init_array+0x24>
 8008018:	4d0b      	ldr	r5, [pc, #44]	; (8008048 <__libc_init_array+0x40>)
 800801a:	4c0c      	ldr	r4, [pc, #48]	; (800804c <__libc_init_array+0x44>)
 800801c:	f004 fc90 	bl	800c940 <_init>
 8008020:	1b64      	subs	r4, r4, r5
 8008022:	10a4      	asrs	r4, r4, #2
 8008024:	2600      	movs	r6, #0
 8008026:	42a6      	cmp	r6, r4
 8008028:	d105      	bne.n	8008036 <__libc_init_array+0x2e>
 800802a:	bd70      	pop	{r4, r5, r6, pc}
 800802c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008030:	4798      	blx	r3
 8008032:	3601      	adds	r6, #1
 8008034:	e7ee      	b.n	8008014 <__libc_init_array+0xc>
 8008036:	f855 3b04 	ldr.w	r3, [r5], #4
 800803a:	4798      	blx	r3
 800803c:	3601      	adds	r6, #1
 800803e:	e7f2      	b.n	8008026 <__libc_init_array+0x1e>
 8008040:	0800cec4 	.word	0x0800cec4
 8008044:	0800cec4 	.word	0x0800cec4
 8008048:	0800cec4 	.word	0x0800cec4
 800804c:	0800cec8 	.word	0x0800cec8

08008050 <memset>:
 8008050:	4402      	add	r2, r0
 8008052:	4603      	mov	r3, r0
 8008054:	4293      	cmp	r3, r2
 8008056:	d100      	bne.n	800805a <memset+0xa>
 8008058:	4770      	bx	lr
 800805a:	f803 1b01 	strb.w	r1, [r3], #1
 800805e:	e7f9      	b.n	8008054 <memset+0x4>

08008060 <__cvt>:
 8008060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008064:	ec55 4b10 	vmov	r4, r5, d0
 8008068:	2d00      	cmp	r5, #0
 800806a:	460e      	mov	r6, r1
 800806c:	4619      	mov	r1, r3
 800806e:	462b      	mov	r3, r5
 8008070:	bfbb      	ittet	lt
 8008072:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008076:	461d      	movlt	r5, r3
 8008078:	2300      	movge	r3, #0
 800807a:	232d      	movlt	r3, #45	; 0x2d
 800807c:	700b      	strb	r3, [r1, #0]
 800807e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008080:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008084:	4691      	mov	r9, r2
 8008086:	f023 0820 	bic.w	r8, r3, #32
 800808a:	bfbc      	itt	lt
 800808c:	4622      	movlt	r2, r4
 800808e:	4614      	movlt	r4, r2
 8008090:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008094:	d005      	beq.n	80080a2 <__cvt+0x42>
 8008096:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800809a:	d100      	bne.n	800809e <__cvt+0x3e>
 800809c:	3601      	adds	r6, #1
 800809e:	2102      	movs	r1, #2
 80080a0:	e000      	b.n	80080a4 <__cvt+0x44>
 80080a2:	2103      	movs	r1, #3
 80080a4:	ab03      	add	r3, sp, #12
 80080a6:	9301      	str	r3, [sp, #4]
 80080a8:	ab02      	add	r3, sp, #8
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	ec45 4b10 	vmov	d0, r4, r5
 80080b0:	4653      	mov	r3, sl
 80080b2:	4632      	mov	r2, r6
 80080b4:	f001 fdac 	bl	8009c10 <_dtoa_r>
 80080b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80080bc:	4607      	mov	r7, r0
 80080be:	d102      	bne.n	80080c6 <__cvt+0x66>
 80080c0:	f019 0f01 	tst.w	r9, #1
 80080c4:	d022      	beq.n	800810c <__cvt+0xac>
 80080c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80080ca:	eb07 0906 	add.w	r9, r7, r6
 80080ce:	d110      	bne.n	80080f2 <__cvt+0x92>
 80080d0:	783b      	ldrb	r3, [r7, #0]
 80080d2:	2b30      	cmp	r3, #48	; 0x30
 80080d4:	d10a      	bne.n	80080ec <__cvt+0x8c>
 80080d6:	2200      	movs	r2, #0
 80080d8:	2300      	movs	r3, #0
 80080da:	4620      	mov	r0, r4
 80080dc:	4629      	mov	r1, r5
 80080de:	f7f8 fcf3 	bl	8000ac8 <__aeabi_dcmpeq>
 80080e2:	b918      	cbnz	r0, 80080ec <__cvt+0x8c>
 80080e4:	f1c6 0601 	rsb	r6, r6, #1
 80080e8:	f8ca 6000 	str.w	r6, [sl]
 80080ec:	f8da 3000 	ldr.w	r3, [sl]
 80080f0:	4499      	add	r9, r3
 80080f2:	2200      	movs	r2, #0
 80080f4:	2300      	movs	r3, #0
 80080f6:	4620      	mov	r0, r4
 80080f8:	4629      	mov	r1, r5
 80080fa:	f7f8 fce5 	bl	8000ac8 <__aeabi_dcmpeq>
 80080fe:	b108      	cbz	r0, 8008104 <__cvt+0xa4>
 8008100:	f8cd 900c 	str.w	r9, [sp, #12]
 8008104:	2230      	movs	r2, #48	; 0x30
 8008106:	9b03      	ldr	r3, [sp, #12]
 8008108:	454b      	cmp	r3, r9
 800810a:	d307      	bcc.n	800811c <__cvt+0xbc>
 800810c:	9b03      	ldr	r3, [sp, #12]
 800810e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008110:	1bdb      	subs	r3, r3, r7
 8008112:	4638      	mov	r0, r7
 8008114:	6013      	str	r3, [r2, #0]
 8008116:	b004      	add	sp, #16
 8008118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800811c:	1c59      	adds	r1, r3, #1
 800811e:	9103      	str	r1, [sp, #12]
 8008120:	701a      	strb	r2, [r3, #0]
 8008122:	e7f0      	b.n	8008106 <__cvt+0xa6>

08008124 <__exponent>:
 8008124:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008126:	4603      	mov	r3, r0
 8008128:	2900      	cmp	r1, #0
 800812a:	bfb8      	it	lt
 800812c:	4249      	neglt	r1, r1
 800812e:	f803 2b02 	strb.w	r2, [r3], #2
 8008132:	bfb4      	ite	lt
 8008134:	222d      	movlt	r2, #45	; 0x2d
 8008136:	222b      	movge	r2, #43	; 0x2b
 8008138:	2909      	cmp	r1, #9
 800813a:	7042      	strb	r2, [r0, #1]
 800813c:	dd2a      	ble.n	8008194 <__exponent+0x70>
 800813e:	f10d 0407 	add.w	r4, sp, #7
 8008142:	46a4      	mov	ip, r4
 8008144:	270a      	movs	r7, #10
 8008146:	46a6      	mov	lr, r4
 8008148:	460a      	mov	r2, r1
 800814a:	fb91 f6f7 	sdiv	r6, r1, r7
 800814e:	fb07 1516 	mls	r5, r7, r6, r1
 8008152:	3530      	adds	r5, #48	; 0x30
 8008154:	2a63      	cmp	r2, #99	; 0x63
 8008156:	f104 34ff 	add.w	r4, r4, #4294967295
 800815a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800815e:	4631      	mov	r1, r6
 8008160:	dcf1      	bgt.n	8008146 <__exponent+0x22>
 8008162:	3130      	adds	r1, #48	; 0x30
 8008164:	f1ae 0502 	sub.w	r5, lr, #2
 8008168:	f804 1c01 	strb.w	r1, [r4, #-1]
 800816c:	1c44      	adds	r4, r0, #1
 800816e:	4629      	mov	r1, r5
 8008170:	4561      	cmp	r1, ip
 8008172:	d30a      	bcc.n	800818a <__exponent+0x66>
 8008174:	f10d 0209 	add.w	r2, sp, #9
 8008178:	eba2 020e 	sub.w	r2, r2, lr
 800817c:	4565      	cmp	r5, ip
 800817e:	bf88      	it	hi
 8008180:	2200      	movhi	r2, #0
 8008182:	4413      	add	r3, r2
 8008184:	1a18      	subs	r0, r3, r0
 8008186:	b003      	add	sp, #12
 8008188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800818a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800818e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008192:	e7ed      	b.n	8008170 <__exponent+0x4c>
 8008194:	2330      	movs	r3, #48	; 0x30
 8008196:	3130      	adds	r1, #48	; 0x30
 8008198:	7083      	strb	r3, [r0, #2]
 800819a:	70c1      	strb	r1, [r0, #3]
 800819c:	1d03      	adds	r3, r0, #4
 800819e:	e7f1      	b.n	8008184 <__exponent+0x60>

080081a0 <_printf_float>:
 80081a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a4:	ed2d 8b02 	vpush	{d8}
 80081a8:	b08d      	sub	sp, #52	; 0x34
 80081aa:	460c      	mov	r4, r1
 80081ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80081b0:	4616      	mov	r6, r2
 80081b2:	461f      	mov	r7, r3
 80081b4:	4605      	mov	r5, r0
 80081b6:	f002 fe89 	bl	800aecc <_localeconv_r>
 80081ba:	f8d0 a000 	ldr.w	sl, [r0]
 80081be:	4650      	mov	r0, sl
 80081c0:	f7f8 f806 	bl	80001d0 <strlen>
 80081c4:	2300      	movs	r3, #0
 80081c6:	930a      	str	r3, [sp, #40]	; 0x28
 80081c8:	6823      	ldr	r3, [r4, #0]
 80081ca:	9305      	str	r3, [sp, #20]
 80081cc:	f8d8 3000 	ldr.w	r3, [r8]
 80081d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80081d4:	3307      	adds	r3, #7
 80081d6:	f023 0307 	bic.w	r3, r3, #7
 80081da:	f103 0208 	add.w	r2, r3, #8
 80081de:	f8c8 2000 	str.w	r2, [r8]
 80081e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80081ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80081ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081f2:	9307      	str	r3, [sp, #28]
 80081f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80081f8:	ee08 0a10 	vmov	s16, r0
 80081fc:	4b9f      	ldr	r3, [pc, #636]	; (800847c <_printf_float+0x2dc>)
 80081fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008202:	f04f 32ff 	mov.w	r2, #4294967295
 8008206:	f7f8 fc91 	bl	8000b2c <__aeabi_dcmpun>
 800820a:	bb88      	cbnz	r0, 8008270 <_printf_float+0xd0>
 800820c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008210:	4b9a      	ldr	r3, [pc, #616]	; (800847c <_printf_float+0x2dc>)
 8008212:	f04f 32ff 	mov.w	r2, #4294967295
 8008216:	f7f8 fc6b 	bl	8000af0 <__aeabi_dcmple>
 800821a:	bb48      	cbnz	r0, 8008270 <_printf_float+0xd0>
 800821c:	2200      	movs	r2, #0
 800821e:	2300      	movs	r3, #0
 8008220:	4640      	mov	r0, r8
 8008222:	4649      	mov	r1, r9
 8008224:	f7f8 fc5a 	bl	8000adc <__aeabi_dcmplt>
 8008228:	b110      	cbz	r0, 8008230 <_printf_float+0x90>
 800822a:	232d      	movs	r3, #45	; 0x2d
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	4b93      	ldr	r3, [pc, #588]	; (8008480 <_printf_float+0x2e0>)
 8008232:	4894      	ldr	r0, [pc, #592]	; (8008484 <_printf_float+0x2e4>)
 8008234:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008238:	bf94      	ite	ls
 800823a:	4698      	movls	r8, r3
 800823c:	4680      	movhi	r8, r0
 800823e:	2303      	movs	r3, #3
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	9b05      	ldr	r3, [sp, #20]
 8008244:	f023 0204 	bic.w	r2, r3, #4
 8008248:	6022      	str	r2, [r4, #0]
 800824a:	f04f 0900 	mov.w	r9, #0
 800824e:	9700      	str	r7, [sp, #0]
 8008250:	4633      	mov	r3, r6
 8008252:	aa0b      	add	r2, sp, #44	; 0x2c
 8008254:	4621      	mov	r1, r4
 8008256:	4628      	mov	r0, r5
 8008258:	f000 f9d8 	bl	800860c <_printf_common>
 800825c:	3001      	adds	r0, #1
 800825e:	f040 8090 	bne.w	8008382 <_printf_float+0x1e2>
 8008262:	f04f 30ff 	mov.w	r0, #4294967295
 8008266:	b00d      	add	sp, #52	; 0x34
 8008268:	ecbd 8b02 	vpop	{d8}
 800826c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008270:	4642      	mov	r2, r8
 8008272:	464b      	mov	r3, r9
 8008274:	4640      	mov	r0, r8
 8008276:	4649      	mov	r1, r9
 8008278:	f7f8 fc58 	bl	8000b2c <__aeabi_dcmpun>
 800827c:	b140      	cbz	r0, 8008290 <_printf_float+0xf0>
 800827e:	464b      	mov	r3, r9
 8008280:	2b00      	cmp	r3, #0
 8008282:	bfbc      	itt	lt
 8008284:	232d      	movlt	r3, #45	; 0x2d
 8008286:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800828a:	487f      	ldr	r0, [pc, #508]	; (8008488 <_printf_float+0x2e8>)
 800828c:	4b7f      	ldr	r3, [pc, #508]	; (800848c <_printf_float+0x2ec>)
 800828e:	e7d1      	b.n	8008234 <_printf_float+0x94>
 8008290:	6863      	ldr	r3, [r4, #4]
 8008292:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008296:	9206      	str	r2, [sp, #24]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	d13f      	bne.n	800831c <_printf_float+0x17c>
 800829c:	2306      	movs	r3, #6
 800829e:	6063      	str	r3, [r4, #4]
 80082a0:	9b05      	ldr	r3, [sp, #20]
 80082a2:	6861      	ldr	r1, [r4, #4]
 80082a4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80082a8:	2300      	movs	r3, #0
 80082aa:	9303      	str	r3, [sp, #12]
 80082ac:	ab0a      	add	r3, sp, #40	; 0x28
 80082ae:	e9cd b301 	strd	fp, r3, [sp, #4]
 80082b2:	ab09      	add	r3, sp, #36	; 0x24
 80082b4:	ec49 8b10 	vmov	d0, r8, r9
 80082b8:	9300      	str	r3, [sp, #0]
 80082ba:	6022      	str	r2, [r4, #0]
 80082bc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80082c0:	4628      	mov	r0, r5
 80082c2:	f7ff fecd 	bl	8008060 <__cvt>
 80082c6:	9b06      	ldr	r3, [sp, #24]
 80082c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80082ca:	2b47      	cmp	r3, #71	; 0x47
 80082cc:	4680      	mov	r8, r0
 80082ce:	d108      	bne.n	80082e2 <_printf_float+0x142>
 80082d0:	1cc8      	adds	r0, r1, #3
 80082d2:	db02      	blt.n	80082da <_printf_float+0x13a>
 80082d4:	6863      	ldr	r3, [r4, #4]
 80082d6:	4299      	cmp	r1, r3
 80082d8:	dd41      	ble.n	800835e <_printf_float+0x1be>
 80082da:	f1ab 0b02 	sub.w	fp, fp, #2
 80082de:	fa5f fb8b 	uxtb.w	fp, fp
 80082e2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082e6:	d820      	bhi.n	800832a <_printf_float+0x18a>
 80082e8:	3901      	subs	r1, #1
 80082ea:	465a      	mov	r2, fp
 80082ec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80082f0:	9109      	str	r1, [sp, #36]	; 0x24
 80082f2:	f7ff ff17 	bl	8008124 <__exponent>
 80082f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80082f8:	1813      	adds	r3, r2, r0
 80082fa:	2a01      	cmp	r2, #1
 80082fc:	4681      	mov	r9, r0
 80082fe:	6123      	str	r3, [r4, #16]
 8008300:	dc02      	bgt.n	8008308 <_printf_float+0x168>
 8008302:	6822      	ldr	r2, [r4, #0]
 8008304:	07d2      	lsls	r2, r2, #31
 8008306:	d501      	bpl.n	800830c <_printf_float+0x16c>
 8008308:	3301      	adds	r3, #1
 800830a:	6123      	str	r3, [r4, #16]
 800830c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008310:	2b00      	cmp	r3, #0
 8008312:	d09c      	beq.n	800824e <_printf_float+0xae>
 8008314:	232d      	movs	r3, #45	; 0x2d
 8008316:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800831a:	e798      	b.n	800824e <_printf_float+0xae>
 800831c:	9a06      	ldr	r2, [sp, #24]
 800831e:	2a47      	cmp	r2, #71	; 0x47
 8008320:	d1be      	bne.n	80082a0 <_printf_float+0x100>
 8008322:	2b00      	cmp	r3, #0
 8008324:	d1bc      	bne.n	80082a0 <_printf_float+0x100>
 8008326:	2301      	movs	r3, #1
 8008328:	e7b9      	b.n	800829e <_printf_float+0xfe>
 800832a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800832e:	d118      	bne.n	8008362 <_printf_float+0x1c2>
 8008330:	2900      	cmp	r1, #0
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	dd0b      	ble.n	800834e <_printf_float+0x1ae>
 8008336:	6121      	str	r1, [r4, #16]
 8008338:	b913      	cbnz	r3, 8008340 <_printf_float+0x1a0>
 800833a:	6822      	ldr	r2, [r4, #0]
 800833c:	07d0      	lsls	r0, r2, #31
 800833e:	d502      	bpl.n	8008346 <_printf_float+0x1a6>
 8008340:	3301      	adds	r3, #1
 8008342:	440b      	add	r3, r1
 8008344:	6123      	str	r3, [r4, #16]
 8008346:	65a1      	str	r1, [r4, #88]	; 0x58
 8008348:	f04f 0900 	mov.w	r9, #0
 800834c:	e7de      	b.n	800830c <_printf_float+0x16c>
 800834e:	b913      	cbnz	r3, 8008356 <_printf_float+0x1b6>
 8008350:	6822      	ldr	r2, [r4, #0]
 8008352:	07d2      	lsls	r2, r2, #31
 8008354:	d501      	bpl.n	800835a <_printf_float+0x1ba>
 8008356:	3302      	adds	r3, #2
 8008358:	e7f4      	b.n	8008344 <_printf_float+0x1a4>
 800835a:	2301      	movs	r3, #1
 800835c:	e7f2      	b.n	8008344 <_printf_float+0x1a4>
 800835e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008362:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008364:	4299      	cmp	r1, r3
 8008366:	db05      	blt.n	8008374 <_printf_float+0x1d4>
 8008368:	6823      	ldr	r3, [r4, #0]
 800836a:	6121      	str	r1, [r4, #16]
 800836c:	07d8      	lsls	r0, r3, #31
 800836e:	d5ea      	bpl.n	8008346 <_printf_float+0x1a6>
 8008370:	1c4b      	adds	r3, r1, #1
 8008372:	e7e7      	b.n	8008344 <_printf_float+0x1a4>
 8008374:	2900      	cmp	r1, #0
 8008376:	bfd4      	ite	le
 8008378:	f1c1 0202 	rsble	r2, r1, #2
 800837c:	2201      	movgt	r2, #1
 800837e:	4413      	add	r3, r2
 8008380:	e7e0      	b.n	8008344 <_printf_float+0x1a4>
 8008382:	6823      	ldr	r3, [r4, #0]
 8008384:	055a      	lsls	r2, r3, #21
 8008386:	d407      	bmi.n	8008398 <_printf_float+0x1f8>
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	4642      	mov	r2, r8
 800838c:	4631      	mov	r1, r6
 800838e:	4628      	mov	r0, r5
 8008390:	47b8      	blx	r7
 8008392:	3001      	adds	r0, #1
 8008394:	d12c      	bne.n	80083f0 <_printf_float+0x250>
 8008396:	e764      	b.n	8008262 <_printf_float+0xc2>
 8008398:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800839c:	f240 80e0 	bls.w	8008560 <_printf_float+0x3c0>
 80083a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80083a4:	2200      	movs	r2, #0
 80083a6:	2300      	movs	r3, #0
 80083a8:	f7f8 fb8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	d034      	beq.n	800841a <_printf_float+0x27a>
 80083b0:	4a37      	ldr	r2, [pc, #220]	; (8008490 <_printf_float+0x2f0>)
 80083b2:	2301      	movs	r3, #1
 80083b4:	4631      	mov	r1, r6
 80083b6:	4628      	mov	r0, r5
 80083b8:	47b8      	blx	r7
 80083ba:	3001      	adds	r0, #1
 80083bc:	f43f af51 	beq.w	8008262 <_printf_float+0xc2>
 80083c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083c4:	429a      	cmp	r2, r3
 80083c6:	db02      	blt.n	80083ce <_printf_float+0x22e>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	07d8      	lsls	r0, r3, #31
 80083cc:	d510      	bpl.n	80083f0 <_printf_float+0x250>
 80083ce:	ee18 3a10 	vmov	r3, s16
 80083d2:	4652      	mov	r2, sl
 80083d4:	4631      	mov	r1, r6
 80083d6:	4628      	mov	r0, r5
 80083d8:	47b8      	blx	r7
 80083da:	3001      	adds	r0, #1
 80083dc:	f43f af41 	beq.w	8008262 <_printf_float+0xc2>
 80083e0:	f04f 0800 	mov.w	r8, #0
 80083e4:	f104 091a 	add.w	r9, r4, #26
 80083e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083ea:	3b01      	subs	r3, #1
 80083ec:	4543      	cmp	r3, r8
 80083ee:	dc09      	bgt.n	8008404 <_printf_float+0x264>
 80083f0:	6823      	ldr	r3, [r4, #0]
 80083f2:	079b      	lsls	r3, r3, #30
 80083f4:	f100 8105 	bmi.w	8008602 <_printf_float+0x462>
 80083f8:	68e0      	ldr	r0, [r4, #12]
 80083fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083fc:	4298      	cmp	r0, r3
 80083fe:	bfb8      	it	lt
 8008400:	4618      	movlt	r0, r3
 8008402:	e730      	b.n	8008266 <_printf_float+0xc6>
 8008404:	2301      	movs	r3, #1
 8008406:	464a      	mov	r2, r9
 8008408:	4631      	mov	r1, r6
 800840a:	4628      	mov	r0, r5
 800840c:	47b8      	blx	r7
 800840e:	3001      	adds	r0, #1
 8008410:	f43f af27 	beq.w	8008262 <_printf_float+0xc2>
 8008414:	f108 0801 	add.w	r8, r8, #1
 8008418:	e7e6      	b.n	80083e8 <_printf_float+0x248>
 800841a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800841c:	2b00      	cmp	r3, #0
 800841e:	dc39      	bgt.n	8008494 <_printf_float+0x2f4>
 8008420:	4a1b      	ldr	r2, [pc, #108]	; (8008490 <_printf_float+0x2f0>)
 8008422:	2301      	movs	r3, #1
 8008424:	4631      	mov	r1, r6
 8008426:	4628      	mov	r0, r5
 8008428:	47b8      	blx	r7
 800842a:	3001      	adds	r0, #1
 800842c:	f43f af19 	beq.w	8008262 <_printf_float+0xc2>
 8008430:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008434:	4313      	orrs	r3, r2
 8008436:	d102      	bne.n	800843e <_printf_float+0x29e>
 8008438:	6823      	ldr	r3, [r4, #0]
 800843a:	07d9      	lsls	r1, r3, #31
 800843c:	d5d8      	bpl.n	80083f0 <_printf_float+0x250>
 800843e:	ee18 3a10 	vmov	r3, s16
 8008442:	4652      	mov	r2, sl
 8008444:	4631      	mov	r1, r6
 8008446:	4628      	mov	r0, r5
 8008448:	47b8      	blx	r7
 800844a:	3001      	adds	r0, #1
 800844c:	f43f af09 	beq.w	8008262 <_printf_float+0xc2>
 8008450:	f04f 0900 	mov.w	r9, #0
 8008454:	f104 0a1a 	add.w	sl, r4, #26
 8008458:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800845a:	425b      	negs	r3, r3
 800845c:	454b      	cmp	r3, r9
 800845e:	dc01      	bgt.n	8008464 <_printf_float+0x2c4>
 8008460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008462:	e792      	b.n	800838a <_printf_float+0x1ea>
 8008464:	2301      	movs	r3, #1
 8008466:	4652      	mov	r2, sl
 8008468:	4631      	mov	r1, r6
 800846a:	4628      	mov	r0, r5
 800846c:	47b8      	blx	r7
 800846e:	3001      	adds	r0, #1
 8008470:	f43f aef7 	beq.w	8008262 <_printf_float+0xc2>
 8008474:	f109 0901 	add.w	r9, r9, #1
 8008478:	e7ee      	b.n	8008458 <_printf_float+0x2b8>
 800847a:	bf00      	nop
 800847c:	7fefffff 	.word	0x7fefffff
 8008480:	0800ca1c 	.word	0x0800ca1c
 8008484:	0800ca20 	.word	0x0800ca20
 8008488:	0800ca28 	.word	0x0800ca28
 800848c:	0800ca24 	.word	0x0800ca24
 8008490:	0800ca2c 	.word	0x0800ca2c
 8008494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008498:	429a      	cmp	r2, r3
 800849a:	bfa8      	it	ge
 800849c:	461a      	movge	r2, r3
 800849e:	2a00      	cmp	r2, #0
 80084a0:	4691      	mov	r9, r2
 80084a2:	dc37      	bgt.n	8008514 <_printf_float+0x374>
 80084a4:	f04f 0b00 	mov.w	fp, #0
 80084a8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ac:	f104 021a 	add.w	r2, r4, #26
 80084b0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80084b2:	9305      	str	r3, [sp, #20]
 80084b4:	eba3 0309 	sub.w	r3, r3, r9
 80084b8:	455b      	cmp	r3, fp
 80084ba:	dc33      	bgt.n	8008524 <_printf_float+0x384>
 80084bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084c0:	429a      	cmp	r2, r3
 80084c2:	db3b      	blt.n	800853c <_printf_float+0x39c>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	07da      	lsls	r2, r3, #31
 80084c8:	d438      	bmi.n	800853c <_printf_float+0x39c>
 80084ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084cc:	9a05      	ldr	r2, [sp, #20]
 80084ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084d0:	1a9a      	subs	r2, r3, r2
 80084d2:	eba3 0901 	sub.w	r9, r3, r1
 80084d6:	4591      	cmp	r9, r2
 80084d8:	bfa8      	it	ge
 80084da:	4691      	movge	r9, r2
 80084dc:	f1b9 0f00 	cmp.w	r9, #0
 80084e0:	dc35      	bgt.n	800854e <_printf_float+0x3ae>
 80084e2:	f04f 0800 	mov.w	r8, #0
 80084e6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80084ea:	f104 0a1a 	add.w	sl, r4, #26
 80084ee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	eba3 0309 	sub.w	r3, r3, r9
 80084f8:	4543      	cmp	r3, r8
 80084fa:	f77f af79 	ble.w	80083f0 <_printf_float+0x250>
 80084fe:	2301      	movs	r3, #1
 8008500:	4652      	mov	r2, sl
 8008502:	4631      	mov	r1, r6
 8008504:	4628      	mov	r0, r5
 8008506:	47b8      	blx	r7
 8008508:	3001      	adds	r0, #1
 800850a:	f43f aeaa 	beq.w	8008262 <_printf_float+0xc2>
 800850e:	f108 0801 	add.w	r8, r8, #1
 8008512:	e7ec      	b.n	80084ee <_printf_float+0x34e>
 8008514:	4613      	mov	r3, r2
 8008516:	4631      	mov	r1, r6
 8008518:	4642      	mov	r2, r8
 800851a:	4628      	mov	r0, r5
 800851c:	47b8      	blx	r7
 800851e:	3001      	adds	r0, #1
 8008520:	d1c0      	bne.n	80084a4 <_printf_float+0x304>
 8008522:	e69e      	b.n	8008262 <_printf_float+0xc2>
 8008524:	2301      	movs	r3, #1
 8008526:	4631      	mov	r1, r6
 8008528:	4628      	mov	r0, r5
 800852a:	9205      	str	r2, [sp, #20]
 800852c:	47b8      	blx	r7
 800852e:	3001      	adds	r0, #1
 8008530:	f43f ae97 	beq.w	8008262 <_printf_float+0xc2>
 8008534:	9a05      	ldr	r2, [sp, #20]
 8008536:	f10b 0b01 	add.w	fp, fp, #1
 800853a:	e7b9      	b.n	80084b0 <_printf_float+0x310>
 800853c:	ee18 3a10 	vmov	r3, s16
 8008540:	4652      	mov	r2, sl
 8008542:	4631      	mov	r1, r6
 8008544:	4628      	mov	r0, r5
 8008546:	47b8      	blx	r7
 8008548:	3001      	adds	r0, #1
 800854a:	d1be      	bne.n	80084ca <_printf_float+0x32a>
 800854c:	e689      	b.n	8008262 <_printf_float+0xc2>
 800854e:	9a05      	ldr	r2, [sp, #20]
 8008550:	464b      	mov	r3, r9
 8008552:	4442      	add	r2, r8
 8008554:	4631      	mov	r1, r6
 8008556:	4628      	mov	r0, r5
 8008558:	47b8      	blx	r7
 800855a:	3001      	adds	r0, #1
 800855c:	d1c1      	bne.n	80084e2 <_printf_float+0x342>
 800855e:	e680      	b.n	8008262 <_printf_float+0xc2>
 8008560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008562:	2a01      	cmp	r2, #1
 8008564:	dc01      	bgt.n	800856a <_printf_float+0x3ca>
 8008566:	07db      	lsls	r3, r3, #31
 8008568:	d538      	bpl.n	80085dc <_printf_float+0x43c>
 800856a:	2301      	movs	r3, #1
 800856c:	4642      	mov	r2, r8
 800856e:	4631      	mov	r1, r6
 8008570:	4628      	mov	r0, r5
 8008572:	47b8      	blx	r7
 8008574:	3001      	adds	r0, #1
 8008576:	f43f ae74 	beq.w	8008262 <_printf_float+0xc2>
 800857a:	ee18 3a10 	vmov	r3, s16
 800857e:	4652      	mov	r2, sl
 8008580:	4631      	mov	r1, r6
 8008582:	4628      	mov	r0, r5
 8008584:	47b8      	blx	r7
 8008586:	3001      	adds	r0, #1
 8008588:	f43f ae6b 	beq.w	8008262 <_printf_float+0xc2>
 800858c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008590:	2200      	movs	r2, #0
 8008592:	2300      	movs	r3, #0
 8008594:	f7f8 fa98 	bl	8000ac8 <__aeabi_dcmpeq>
 8008598:	b9d8      	cbnz	r0, 80085d2 <_printf_float+0x432>
 800859a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800859c:	f108 0201 	add.w	r2, r8, #1
 80085a0:	3b01      	subs	r3, #1
 80085a2:	4631      	mov	r1, r6
 80085a4:	4628      	mov	r0, r5
 80085a6:	47b8      	blx	r7
 80085a8:	3001      	adds	r0, #1
 80085aa:	d10e      	bne.n	80085ca <_printf_float+0x42a>
 80085ac:	e659      	b.n	8008262 <_printf_float+0xc2>
 80085ae:	2301      	movs	r3, #1
 80085b0:	4652      	mov	r2, sl
 80085b2:	4631      	mov	r1, r6
 80085b4:	4628      	mov	r0, r5
 80085b6:	47b8      	blx	r7
 80085b8:	3001      	adds	r0, #1
 80085ba:	f43f ae52 	beq.w	8008262 <_printf_float+0xc2>
 80085be:	f108 0801 	add.w	r8, r8, #1
 80085c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c4:	3b01      	subs	r3, #1
 80085c6:	4543      	cmp	r3, r8
 80085c8:	dcf1      	bgt.n	80085ae <_printf_float+0x40e>
 80085ca:	464b      	mov	r3, r9
 80085cc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80085d0:	e6dc      	b.n	800838c <_printf_float+0x1ec>
 80085d2:	f04f 0800 	mov.w	r8, #0
 80085d6:	f104 0a1a 	add.w	sl, r4, #26
 80085da:	e7f2      	b.n	80085c2 <_printf_float+0x422>
 80085dc:	2301      	movs	r3, #1
 80085de:	4642      	mov	r2, r8
 80085e0:	e7df      	b.n	80085a2 <_printf_float+0x402>
 80085e2:	2301      	movs	r3, #1
 80085e4:	464a      	mov	r2, r9
 80085e6:	4631      	mov	r1, r6
 80085e8:	4628      	mov	r0, r5
 80085ea:	47b8      	blx	r7
 80085ec:	3001      	adds	r0, #1
 80085ee:	f43f ae38 	beq.w	8008262 <_printf_float+0xc2>
 80085f2:	f108 0801 	add.w	r8, r8, #1
 80085f6:	68e3      	ldr	r3, [r4, #12]
 80085f8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80085fa:	1a5b      	subs	r3, r3, r1
 80085fc:	4543      	cmp	r3, r8
 80085fe:	dcf0      	bgt.n	80085e2 <_printf_float+0x442>
 8008600:	e6fa      	b.n	80083f8 <_printf_float+0x258>
 8008602:	f04f 0800 	mov.w	r8, #0
 8008606:	f104 0919 	add.w	r9, r4, #25
 800860a:	e7f4      	b.n	80085f6 <_printf_float+0x456>

0800860c <_printf_common>:
 800860c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008610:	4616      	mov	r6, r2
 8008612:	4699      	mov	r9, r3
 8008614:	688a      	ldr	r2, [r1, #8]
 8008616:	690b      	ldr	r3, [r1, #16]
 8008618:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800861c:	4293      	cmp	r3, r2
 800861e:	bfb8      	it	lt
 8008620:	4613      	movlt	r3, r2
 8008622:	6033      	str	r3, [r6, #0]
 8008624:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008628:	4607      	mov	r7, r0
 800862a:	460c      	mov	r4, r1
 800862c:	b10a      	cbz	r2, 8008632 <_printf_common+0x26>
 800862e:	3301      	adds	r3, #1
 8008630:	6033      	str	r3, [r6, #0]
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	0699      	lsls	r1, r3, #26
 8008636:	bf42      	ittt	mi
 8008638:	6833      	ldrmi	r3, [r6, #0]
 800863a:	3302      	addmi	r3, #2
 800863c:	6033      	strmi	r3, [r6, #0]
 800863e:	6825      	ldr	r5, [r4, #0]
 8008640:	f015 0506 	ands.w	r5, r5, #6
 8008644:	d106      	bne.n	8008654 <_printf_common+0x48>
 8008646:	f104 0a19 	add.w	sl, r4, #25
 800864a:	68e3      	ldr	r3, [r4, #12]
 800864c:	6832      	ldr	r2, [r6, #0]
 800864e:	1a9b      	subs	r3, r3, r2
 8008650:	42ab      	cmp	r3, r5
 8008652:	dc26      	bgt.n	80086a2 <_printf_common+0x96>
 8008654:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008658:	1e13      	subs	r3, r2, #0
 800865a:	6822      	ldr	r2, [r4, #0]
 800865c:	bf18      	it	ne
 800865e:	2301      	movne	r3, #1
 8008660:	0692      	lsls	r2, r2, #26
 8008662:	d42b      	bmi.n	80086bc <_printf_common+0xb0>
 8008664:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008668:	4649      	mov	r1, r9
 800866a:	4638      	mov	r0, r7
 800866c:	47c0      	blx	r8
 800866e:	3001      	adds	r0, #1
 8008670:	d01e      	beq.n	80086b0 <_printf_common+0xa4>
 8008672:	6823      	ldr	r3, [r4, #0]
 8008674:	68e5      	ldr	r5, [r4, #12]
 8008676:	6832      	ldr	r2, [r6, #0]
 8008678:	f003 0306 	and.w	r3, r3, #6
 800867c:	2b04      	cmp	r3, #4
 800867e:	bf08      	it	eq
 8008680:	1aad      	subeq	r5, r5, r2
 8008682:	68a3      	ldr	r3, [r4, #8]
 8008684:	6922      	ldr	r2, [r4, #16]
 8008686:	bf0c      	ite	eq
 8008688:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800868c:	2500      	movne	r5, #0
 800868e:	4293      	cmp	r3, r2
 8008690:	bfc4      	itt	gt
 8008692:	1a9b      	subgt	r3, r3, r2
 8008694:	18ed      	addgt	r5, r5, r3
 8008696:	2600      	movs	r6, #0
 8008698:	341a      	adds	r4, #26
 800869a:	42b5      	cmp	r5, r6
 800869c:	d11a      	bne.n	80086d4 <_printf_common+0xc8>
 800869e:	2000      	movs	r0, #0
 80086a0:	e008      	b.n	80086b4 <_printf_common+0xa8>
 80086a2:	2301      	movs	r3, #1
 80086a4:	4652      	mov	r2, sl
 80086a6:	4649      	mov	r1, r9
 80086a8:	4638      	mov	r0, r7
 80086aa:	47c0      	blx	r8
 80086ac:	3001      	adds	r0, #1
 80086ae:	d103      	bne.n	80086b8 <_printf_common+0xac>
 80086b0:	f04f 30ff 	mov.w	r0, #4294967295
 80086b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086b8:	3501      	adds	r5, #1
 80086ba:	e7c6      	b.n	800864a <_printf_common+0x3e>
 80086bc:	18e1      	adds	r1, r4, r3
 80086be:	1c5a      	adds	r2, r3, #1
 80086c0:	2030      	movs	r0, #48	; 0x30
 80086c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80086c6:	4422      	add	r2, r4
 80086c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086d0:	3302      	adds	r3, #2
 80086d2:	e7c7      	b.n	8008664 <_printf_common+0x58>
 80086d4:	2301      	movs	r3, #1
 80086d6:	4622      	mov	r2, r4
 80086d8:	4649      	mov	r1, r9
 80086da:	4638      	mov	r0, r7
 80086dc:	47c0      	blx	r8
 80086de:	3001      	adds	r0, #1
 80086e0:	d0e6      	beq.n	80086b0 <_printf_common+0xa4>
 80086e2:	3601      	adds	r6, #1
 80086e4:	e7d9      	b.n	800869a <_printf_common+0x8e>
	...

080086e8 <_printf_i>:
 80086e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086ec:	7e0f      	ldrb	r7, [r1, #24]
 80086ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086f0:	2f78      	cmp	r7, #120	; 0x78
 80086f2:	4691      	mov	r9, r2
 80086f4:	4680      	mov	r8, r0
 80086f6:	460c      	mov	r4, r1
 80086f8:	469a      	mov	sl, r3
 80086fa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086fe:	d807      	bhi.n	8008710 <_printf_i+0x28>
 8008700:	2f62      	cmp	r7, #98	; 0x62
 8008702:	d80a      	bhi.n	800871a <_printf_i+0x32>
 8008704:	2f00      	cmp	r7, #0
 8008706:	f000 80d8 	beq.w	80088ba <_printf_i+0x1d2>
 800870a:	2f58      	cmp	r7, #88	; 0x58
 800870c:	f000 80a3 	beq.w	8008856 <_printf_i+0x16e>
 8008710:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008714:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008718:	e03a      	b.n	8008790 <_printf_i+0xa8>
 800871a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800871e:	2b15      	cmp	r3, #21
 8008720:	d8f6      	bhi.n	8008710 <_printf_i+0x28>
 8008722:	a101      	add	r1, pc, #4	; (adr r1, 8008728 <_printf_i+0x40>)
 8008724:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008728:	08008781 	.word	0x08008781
 800872c:	08008795 	.word	0x08008795
 8008730:	08008711 	.word	0x08008711
 8008734:	08008711 	.word	0x08008711
 8008738:	08008711 	.word	0x08008711
 800873c:	08008711 	.word	0x08008711
 8008740:	08008795 	.word	0x08008795
 8008744:	08008711 	.word	0x08008711
 8008748:	08008711 	.word	0x08008711
 800874c:	08008711 	.word	0x08008711
 8008750:	08008711 	.word	0x08008711
 8008754:	080088a1 	.word	0x080088a1
 8008758:	080087c5 	.word	0x080087c5
 800875c:	08008883 	.word	0x08008883
 8008760:	08008711 	.word	0x08008711
 8008764:	08008711 	.word	0x08008711
 8008768:	080088c3 	.word	0x080088c3
 800876c:	08008711 	.word	0x08008711
 8008770:	080087c5 	.word	0x080087c5
 8008774:	08008711 	.word	0x08008711
 8008778:	08008711 	.word	0x08008711
 800877c:	0800888b 	.word	0x0800888b
 8008780:	682b      	ldr	r3, [r5, #0]
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	602a      	str	r2, [r5, #0]
 8008788:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800878c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008790:	2301      	movs	r3, #1
 8008792:	e0a3      	b.n	80088dc <_printf_i+0x1f4>
 8008794:	6820      	ldr	r0, [r4, #0]
 8008796:	6829      	ldr	r1, [r5, #0]
 8008798:	0606      	lsls	r6, r0, #24
 800879a:	f101 0304 	add.w	r3, r1, #4
 800879e:	d50a      	bpl.n	80087b6 <_printf_i+0xce>
 80087a0:	680e      	ldr	r6, [r1, #0]
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	2e00      	cmp	r6, #0
 80087a6:	da03      	bge.n	80087b0 <_printf_i+0xc8>
 80087a8:	232d      	movs	r3, #45	; 0x2d
 80087aa:	4276      	negs	r6, r6
 80087ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087b0:	485e      	ldr	r0, [pc, #376]	; (800892c <_printf_i+0x244>)
 80087b2:	230a      	movs	r3, #10
 80087b4:	e019      	b.n	80087ea <_printf_i+0x102>
 80087b6:	680e      	ldr	r6, [r1, #0]
 80087b8:	602b      	str	r3, [r5, #0]
 80087ba:	f010 0f40 	tst.w	r0, #64	; 0x40
 80087be:	bf18      	it	ne
 80087c0:	b236      	sxthne	r6, r6
 80087c2:	e7ef      	b.n	80087a4 <_printf_i+0xbc>
 80087c4:	682b      	ldr	r3, [r5, #0]
 80087c6:	6820      	ldr	r0, [r4, #0]
 80087c8:	1d19      	adds	r1, r3, #4
 80087ca:	6029      	str	r1, [r5, #0]
 80087cc:	0601      	lsls	r1, r0, #24
 80087ce:	d501      	bpl.n	80087d4 <_printf_i+0xec>
 80087d0:	681e      	ldr	r6, [r3, #0]
 80087d2:	e002      	b.n	80087da <_printf_i+0xf2>
 80087d4:	0646      	lsls	r6, r0, #25
 80087d6:	d5fb      	bpl.n	80087d0 <_printf_i+0xe8>
 80087d8:	881e      	ldrh	r6, [r3, #0]
 80087da:	4854      	ldr	r0, [pc, #336]	; (800892c <_printf_i+0x244>)
 80087dc:	2f6f      	cmp	r7, #111	; 0x6f
 80087de:	bf0c      	ite	eq
 80087e0:	2308      	moveq	r3, #8
 80087e2:	230a      	movne	r3, #10
 80087e4:	2100      	movs	r1, #0
 80087e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087ea:	6865      	ldr	r5, [r4, #4]
 80087ec:	60a5      	str	r5, [r4, #8]
 80087ee:	2d00      	cmp	r5, #0
 80087f0:	bfa2      	ittt	ge
 80087f2:	6821      	ldrge	r1, [r4, #0]
 80087f4:	f021 0104 	bicge.w	r1, r1, #4
 80087f8:	6021      	strge	r1, [r4, #0]
 80087fa:	b90e      	cbnz	r6, 8008800 <_printf_i+0x118>
 80087fc:	2d00      	cmp	r5, #0
 80087fe:	d04d      	beq.n	800889c <_printf_i+0x1b4>
 8008800:	4615      	mov	r5, r2
 8008802:	fbb6 f1f3 	udiv	r1, r6, r3
 8008806:	fb03 6711 	mls	r7, r3, r1, r6
 800880a:	5dc7      	ldrb	r7, [r0, r7]
 800880c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008810:	4637      	mov	r7, r6
 8008812:	42bb      	cmp	r3, r7
 8008814:	460e      	mov	r6, r1
 8008816:	d9f4      	bls.n	8008802 <_printf_i+0x11a>
 8008818:	2b08      	cmp	r3, #8
 800881a:	d10b      	bne.n	8008834 <_printf_i+0x14c>
 800881c:	6823      	ldr	r3, [r4, #0]
 800881e:	07de      	lsls	r6, r3, #31
 8008820:	d508      	bpl.n	8008834 <_printf_i+0x14c>
 8008822:	6923      	ldr	r3, [r4, #16]
 8008824:	6861      	ldr	r1, [r4, #4]
 8008826:	4299      	cmp	r1, r3
 8008828:	bfde      	ittt	le
 800882a:	2330      	movle	r3, #48	; 0x30
 800882c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008830:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008834:	1b52      	subs	r2, r2, r5
 8008836:	6122      	str	r2, [r4, #16]
 8008838:	f8cd a000 	str.w	sl, [sp]
 800883c:	464b      	mov	r3, r9
 800883e:	aa03      	add	r2, sp, #12
 8008840:	4621      	mov	r1, r4
 8008842:	4640      	mov	r0, r8
 8008844:	f7ff fee2 	bl	800860c <_printf_common>
 8008848:	3001      	adds	r0, #1
 800884a:	d14c      	bne.n	80088e6 <_printf_i+0x1fe>
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	b004      	add	sp, #16
 8008852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008856:	4835      	ldr	r0, [pc, #212]	; (800892c <_printf_i+0x244>)
 8008858:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800885c:	6829      	ldr	r1, [r5, #0]
 800885e:	6823      	ldr	r3, [r4, #0]
 8008860:	f851 6b04 	ldr.w	r6, [r1], #4
 8008864:	6029      	str	r1, [r5, #0]
 8008866:	061d      	lsls	r5, r3, #24
 8008868:	d514      	bpl.n	8008894 <_printf_i+0x1ac>
 800886a:	07df      	lsls	r7, r3, #31
 800886c:	bf44      	itt	mi
 800886e:	f043 0320 	orrmi.w	r3, r3, #32
 8008872:	6023      	strmi	r3, [r4, #0]
 8008874:	b91e      	cbnz	r6, 800887e <_printf_i+0x196>
 8008876:	6823      	ldr	r3, [r4, #0]
 8008878:	f023 0320 	bic.w	r3, r3, #32
 800887c:	6023      	str	r3, [r4, #0]
 800887e:	2310      	movs	r3, #16
 8008880:	e7b0      	b.n	80087e4 <_printf_i+0xfc>
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	f043 0320 	orr.w	r3, r3, #32
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	2378      	movs	r3, #120	; 0x78
 800888c:	4828      	ldr	r0, [pc, #160]	; (8008930 <_printf_i+0x248>)
 800888e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008892:	e7e3      	b.n	800885c <_printf_i+0x174>
 8008894:	0659      	lsls	r1, r3, #25
 8008896:	bf48      	it	mi
 8008898:	b2b6      	uxthmi	r6, r6
 800889a:	e7e6      	b.n	800886a <_printf_i+0x182>
 800889c:	4615      	mov	r5, r2
 800889e:	e7bb      	b.n	8008818 <_printf_i+0x130>
 80088a0:	682b      	ldr	r3, [r5, #0]
 80088a2:	6826      	ldr	r6, [r4, #0]
 80088a4:	6961      	ldr	r1, [r4, #20]
 80088a6:	1d18      	adds	r0, r3, #4
 80088a8:	6028      	str	r0, [r5, #0]
 80088aa:	0635      	lsls	r5, r6, #24
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	d501      	bpl.n	80088b4 <_printf_i+0x1cc>
 80088b0:	6019      	str	r1, [r3, #0]
 80088b2:	e002      	b.n	80088ba <_printf_i+0x1d2>
 80088b4:	0670      	lsls	r0, r6, #25
 80088b6:	d5fb      	bpl.n	80088b0 <_printf_i+0x1c8>
 80088b8:	8019      	strh	r1, [r3, #0]
 80088ba:	2300      	movs	r3, #0
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	4615      	mov	r5, r2
 80088c0:	e7ba      	b.n	8008838 <_printf_i+0x150>
 80088c2:	682b      	ldr	r3, [r5, #0]
 80088c4:	1d1a      	adds	r2, r3, #4
 80088c6:	602a      	str	r2, [r5, #0]
 80088c8:	681d      	ldr	r5, [r3, #0]
 80088ca:	6862      	ldr	r2, [r4, #4]
 80088cc:	2100      	movs	r1, #0
 80088ce:	4628      	mov	r0, r5
 80088d0:	f7f7 fc86 	bl	80001e0 <memchr>
 80088d4:	b108      	cbz	r0, 80088da <_printf_i+0x1f2>
 80088d6:	1b40      	subs	r0, r0, r5
 80088d8:	6060      	str	r0, [r4, #4]
 80088da:	6863      	ldr	r3, [r4, #4]
 80088dc:	6123      	str	r3, [r4, #16]
 80088de:	2300      	movs	r3, #0
 80088e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088e4:	e7a8      	b.n	8008838 <_printf_i+0x150>
 80088e6:	6923      	ldr	r3, [r4, #16]
 80088e8:	462a      	mov	r2, r5
 80088ea:	4649      	mov	r1, r9
 80088ec:	4640      	mov	r0, r8
 80088ee:	47d0      	blx	sl
 80088f0:	3001      	adds	r0, #1
 80088f2:	d0ab      	beq.n	800884c <_printf_i+0x164>
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	079b      	lsls	r3, r3, #30
 80088f8:	d413      	bmi.n	8008922 <_printf_i+0x23a>
 80088fa:	68e0      	ldr	r0, [r4, #12]
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	4298      	cmp	r0, r3
 8008900:	bfb8      	it	lt
 8008902:	4618      	movlt	r0, r3
 8008904:	e7a4      	b.n	8008850 <_printf_i+0x168>
 8008906:	2301      	movs	r3, #1
 8008908:	4632      	mov	r2, r6
 800890a:	4649      	mov	r1, r9
 800890c:	4640      	mov	r0, r8
 800890e:	47d0      	blx	sl
 8008910:	3001      	adds	r0, #1
 8008912:	d09b      	beq.n	800884c <_printf_i+0x164>
 8008914:	3501      	adds	r5, #1
 8008916:	68e3      	ldr	r3, [r4, #12]
 8008918:	9903      	ldr	r1, [sp, #12]
 800891a:	1a5b      	subs	r3, r3, r1
 800891c:	42ab      	cmp	r3, r5
 800891e:	dcf2      	bgt.n	8008906 <_printf_i+0x21e>
 8008920:	e7eb      	b.n	80088fa <_printf_i+0x212>
 8008922:	2500      	movs	r5, #0
 8008924:	f104 0619 	add.w	r6, r4, #25
 8008928:	e7f5      	b.n	8008916 <_printf_i+0x22e>
 800892a:	bf00      	nop
 800892c:	0800ca2e 	.word	0x0800ca2e
 8008930:	0800ca3f 	.word	0x0800ca3f

08008934 <_scanf_float>:
 8008934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008938:	b087      	sub	sp, #28
 800893a:	4617      	mov	r7, r2
 800893c:	9303      	str	r3, [sp, #12]
 800893e:	688b      	ldr	r3, [r1, #8]
 8008940:	1e5a      	subs	r2, r3, #1
 8008942:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008946:	bf83      	ittte	hi
 8008948:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800894c:	195b      	addhi	r3, r3, r5
 800894e:	9302      	strhi	r3, [sp, #8]
 8008950:	2300      	movls	r3, #0
 8008952:	bf86      	itte	hi
 8008954:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008958:	608b      	strhi	r3, [r1, #8]
 800895a:	9302      	strls	r3, [sp, #8]
 800895c:	680b      	ldr	r3, [r1, #0]
 800895e:	468b      	mov	fp, r1
 8008960:	2500      	movs	r5, #0
 8008962:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008966:	f84b 3b1c 	str.w	r3, [fp], #28
 800896a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800896e:	4680      	mov	r8, r0
 8008970:	460c      	mov	r4, r1
 8008972:	465e      	mov	r6, fp
 8008974:	46aa      	mov	sl, r5
 8008976:	46a9      	mov	r9, r5
 8008978:	9501      	str	r5, [sp, #4]
 800897a:	68a2      	ldr	r2, [r4, #8]
 800897c:	b152      	cbz	r2, 8008994 <_scanf_float+0x60>
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	781b      	ldrb	r3, [r3, #0]
 8008982:	2b4e      	cmp	r3, #78	; 0x4e
 8008984:	d864      	bhi.n	8008a50 <_scanf_float+0x11c>
 8008986:	2b40      	cmp	r3, #64	; 0x40
 8008988:	d83c      	bhi.n	8008a04 <_scanf_float+0xd0>
 800898a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800898e:	b2c8      	uxtb	r0, r1
 8008990:	280e      	cmp	r0, #14
 8008992:	d93a      	bls.n	8008a0a <_scanf_float+0xd6>
 8008994:	f1b9 0f00 	cmp.w	r9, #0
 8008998:	d003      	beq.n	80089a2 <_scanf_float+0x6e>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089a0:	6023      	str	r3, [r4, #0]
 80089a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80089a6:	f1ba 0f01 	cmp.w	sl, #1
 80089aa:	f200 8113 	bhi.w	8008bd4 <_scanf_float+0x2a0>
 80089ae:	455e      	cmp	r6, fp
 80089b0:	f200 8105 	bhi.w	8008bbe <_scanf_float+0x28a>
 80089b4:	2501      	movs	r5, #1
 80089b6:	4628      	mov	r0, r5
 80089b8:	b007      	add	sp, #28
 80089ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089be:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80089c2:	2a0d      	cmp	r2, #13
 80089c4:	d8e6      	bhi.n	8008994 <_scanf_float+0x60>
 80089c6:	a101      	add	r1, pc, #4	; (adr r1, 80089cc <_scanf_float+0x98>)
 80089c8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80089cc:	08008b0b 	.word	0x08008b0b
 80089d0:	08008995 	.word	0x08008995
 80089d4:	08008995 	.word	0x08008995
 80089d8:	08008995 	.word	0x08008995
 80089dc:	08008b6b 	.word	0x08008b6b
 80089e0:	08008b43 	.word	0x08008b43
 80089e4:	08008995 	.word	0x08008995
 80089e8:	08008995 	.word	0x08008995
 80089ec:	08008b19 	.word	0x08008b19
 80089f0:	08008995 	.word	0x08008995
 80089f4:	08008995 	.word	0x08008995
 80089f8:	08008995 	.word	0x08008995
 80089fc:	08008995 	.word	0x08008995
 8008a00:	08008ad1 	.word	0x08008ad1
 8008a04:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008a08:	e7db      	b.n	80089c2 <_scanf_float+0x8e>
 8008a0a:	290e      	cmp	r1, #14
 8008a0c:	d8c2      	bhi.n	8008994 <_scanf_float+0x60>
 8008a0e:	a001      	add	r0, pc, #4	; (adr r0, 8008a14 <_scanf_float+0xe0>)
 8008a10:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008a14:	08008ac3 	.word	0x08008ac3
 8008a18:	08008995 	.word	0x08008995
 8008a1c:	08008ac3 	.word	0x08008ac3
 8008a20:	08008b57 	.word	0x08008b57
 8008a24:	08008995 	.word	0x08008995
 8008a28:	08008a71 	.word	0x08008a71
 8008a2c:	08008aad 	.word	0x08008aad
 8008a30:	08008aad 	.word	0x08008aad
 8008a34:	08008aad 	.word	0x08008aad
 8008a38:	08008aad 	.word	0x08008aad
 8008a3c:	08008aad 	.word	0x08008aad
 8008a40:	08008aad 	.word	0x08008aad
 8008a44:	08008aad 	.word	0x08008aad
 8008a48:	08008aad 	.word	0x08008aad
 8008a4c:	08008aad 	.word	0x08008aad
 8008a50:	2b6e      	cmp	r3, #110	; 0x6e
 8008a52:	d809      	bhi.n	8008a68 <_scanf_float+0x134>
 8008a54:	2b60      	cmp	r3, #96	; 0x60
 8008a56:	d8b2      	bhi.n	80089be <_scanf_float+0x8a>
 8008a58:	2b54      	cmp	r3, #84	; 0x54
 8008a5a:	d077      	beq.n	8008b4c <_scanf_float+0x218>
 8008a5c:	2b59      	cmp	r3, #89	; 0x59
 8008a5e:	d199      	bne.n	8008994 <_scanf_float+0x60>
 8008a60:	2d07      	cmp	r5, #7
 8008a62:	d197      	bne.n	8008994 <_scanf_float+0x60>
 8008a64:	2508      	movs	r5, #8
 8008a66:	e029      	b.n	8008abc <_scanf_float+0x188>
 8008a68:	2b74      	cmp	r3, #116	; 0x74
 8008a6a:	d06f      	beq.n	8008b4c <_scanf_float+0x218>
 8008a6c:	2b79      	cmp	r3, #121	; 0x79
 8008a6e:	e7f6      	b.n	8008a5e <_scanf_float+0x12a>
 8008a70:	6821      	ldr	r1, [r4, #0]
 8008a72:	05c8      	lsls	r0, r1, #23
 8008a74:	d51a      	bpl.n	8008aac <_scanf_float+0x178>
 8008a76:	9b02      	ldr	r3, [sp, #8]
 8008a78:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008a7c:	6021      	str	r1, [r4, #0]
 8008a7e:	f109 0901 	add.w	r9, r9, #1
 8008a82:	b11b      	cbz	r3, 8008a8c <_scanf_float+0x158>
 8008a84:	3b01      	subs	r3, #1
 8008a86:	3201      	adds	r2, #1
 8008a88:	9302      	str	r3, [sp, #8]
 8008a8a:	60a2      	str	r2, [r4, #8]
 8008a8c:	68a3      	ldr	r3, [r4, #8]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	60a3      	str	r3, [r4, #8]
 8008a92:	6923      	ldr	r3, [r4, #16]
 8008a94:	3301      	adds	r3, #1
 8008a96:	6123      	str	r3, [r4, #16]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	3b01      	subs	r3, #1
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	607b      	str	r3, [r7, #4]
 8008aa0:	f340 8084 	ble.w	8008bac <_scanf_float+0x278>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	603b      	str	r3, [r7, #0]
 8008aaa:	e766      	b.n	800897a <_scanf_float+0x46>
 8008aac:	eb1a 0f05 	cmn.w	sl, r5
 8008ab0:	f47f af70 	bne.w	8008994 <_scanf_float+0x60>
 8008ab4:	6822      	ldr	r2, [r4, #0]
 8008ab6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008aba:	6022      	str	r2, [r4, #0]
 8008abc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ac0:	e7e4      	b.n	8008a8c <_scanf_float+0x158>
 8008ac2:	6822      	ldr	r2, [r4, #0]
 8008ac4:	0610      	lsls	r0, r2, #24
 8008ac6:	f57f af65 	bpl.w	8008994 <_scanf_float+0x60>
 8008aca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ace:	e7f4      	b.n	8008aba <_scanf_float+0x186>
 8008ad0:	f1ba 0f00 	cmp.w	sl, #0
 8008ad4:	d10e      	bne.n	8008af4 <_scanf_float+0x1c0>
 8008ad6:	f1b9 0f00 	cmp.w	r9, #0
 8008ada:	d10e      	bne.n	8008afa <_scanf_float+0x1c6>
 8008adc:	6822      	ldr	r2, [r4, #0]
 8008ade:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008ae2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008ae6:	d108      	bne.n	8008afa <_scanf_float+0x1c6>
 8008ae8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008aec:	6022      	str	r2, [r4, #0]
 8008aee:	f04f 0a01 	mov.w	sl, #1
 8008af2:	e7e3      	b.n	8008abc <_scanf_float+0x188>
 8008af4:	f1ba 0f02 	cmp.w	sl, #2
 8008af8:	d055      	beq.n	8008ba6 <_scanf_float+0x272>
 8008afa:	2d01      	cmp	r5, #1
 8008afc:	d002      	beq.n	8008b04 <_scanf_float+0x1d0>
 8008afe:	2d04      	cmp	r5, #4
 8008b00:	f47f af48 	bne.w	8008994 <_scanf_float+0x60>
 8008b04:	3501      	adds	r5, #1
 8008b06:	b2ed      	uxtb	r5, r5
 8008b08:	e7d8      	b.n	8008abc <_scanf_float+0x188>
 8008b0a:	f1ba 0f01 	cmp.w	sl, #1
 8008b0e:	f47f af41 	bne.w	8008994 <_scanf_float+0x60>
 8008b12:	f04f 0a02 	mov.w	sl, #2
 8008b16:	e7d1      	b.n	8008abc <_scanf_float+0x188>
 8008b18:	b97d      	cbnz	r5, 8008b3a <_scanf_float+0x206>
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	f47f af3c 	bne.w	800899a <_scanf_float+0x66>
 8008b22:	6822      	ldr	r2, [r4, #0]
 8008b24:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008b28:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008b2c:	f47f af39 	bne.w	80089a2 <_scanf_float+0x6e>
 8008b30:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b34:	6022      	str	r2, [r4, #0]
 8008b36:	2501      	movs	r5, #1
 8008b38:	e7c0      	b.n	8008abc <_scanf_float+0x188>
 8008b3a:	2d03      	cmp	r5, #3
 8008b3c:	d0e2      	beq.n	8008b04 <_scanf_float+0x1d0>
 8008b3e:	2d05      	cmp	r5, #5
 8008b40:	e7de      	b.n	8008b00 <_scanf_float+0x1cc>
 8008b42:	2d02      	cmp	r5, #2
 8008b44:	f47f af26 	bne.w	8008994 <_scanf_float+0x60>
 8008b48:	2503      	movs	r5, #3
 8008b4a:	e7b7      	b.n	8008abc <_scanf_float+0x188>
 8008b4c:	2d06      	cmp	r5, #6
 8008b4e:	f47f af21 	bne.w	8008994 <_scanf_float+0x60>
 8008b52:	2507      	movs	r5, #7
 8008b54:	e7b2      	b.n	8008abc <_scanf_float+0x188>
 8008b56:	6822      	ldr	r2, [r4, #0]
 8008b58:	0591      	lsls	r1, r2, #22
 8008b5a:	f57f af1b 	bpl.w	8008994 <_scanf_float+0x60>
 8008b5e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008b62:	6022      	str	r2, [r4, #0]
 8008b64:	f8cd 9004 	str.w	r9, [sp, #4]
 8008b68:	e7a8      	b.n	8008abc <_scanf_float+0x188>
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008b70:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008b74:	d006      	beq.n	8008b84 <_scanf_float+0x250>
 8008b76:	0550      	lsls	r0, r2, #21
 8008b78:	f57f af0c 	bpl.w	8008994 <_scanf_float+0x60>
 8008b7c:	f1b9 0f00 	cmp.w	r9, #0
 8008b80:	f43f af0f 	beq.w	80089a2 <_scanf_float+0x6e>
 8008b84:	0591      	lsls	r1, r2, #22
 8008b86:	bf58      	it	pl
 8008b88:	9901      	ldrpl	r1, [sp, #4]
 8008b8a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008b8e:	bf58      	it	pl
 8008b90:	eba9 0101 	subpl.w	r1, r9, r1
 8008b94:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008b98:	bf58      	it	pl
 8008b9a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008b9e:	6022      	str	r2, [r4, #0]
 8008ba0:	f04f 0900 	mov.w	r9, #0
 8008ba4:	e78a      	b.n	8008abc <_scanf_float+0x188>
 8008ba6:	f04f 0a03 	mov.w	sl, #3
 8008baa:	e787      	b.n	8008abc <_scanf_float+0x188>
 8008bac:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008bb0:	4639      	mov	r1, r7
 8008bb2:	4640      	mov	r0, r8
 8008bb4:	4798      	blx	r3
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	f43f aedf 	beq.w	800897a <_scanf_float+0x46>
 8008bbc:	e6ea      	b.n	8008994 <_scanf_float+0x60>
 8008bbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008bc2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bc6:	463a      	mov	r2, r7
 8008bc8:	4640      	mov	r0, r8
 8008bca:	4798      	blx	r3
 8008bcc:	6923      	ldr	r3, [r4, #16]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	6123      	str	r3, [r4, #16]
 8008bd2:	e6ec      	b.n	80089ae <_scanf_float+0x7a>
 8008bd4:	1e6b      	subs	r3, r5, #1
 8008bd6:	2b06      	cmp	r3, #6
 8008bd8:	d825      	bhi.n	8008c26 <_scanf_float+0x2f2>
 8008bda:	2d02      	cmp	r5, #2
 8008bdc:	d836      	bhi.n	8008c4c <_scanf_float+0x318>
 8008bde:	455e      	cmp	r6, fp
 8008be0:	f67f aee8 	bls.w	80089b4 <_scanf_float+0x80>
 8008be4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008be8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008bec:	463a      	mov	r2, r7
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4798      	blx	r3
 8008bf2:	6923      	ldr	r3, [r4, #16]
 8008bf4:	3b01      	subs	r3, #1
 8008bf6:	6123      	str	r3, [r4, #16]
 8008bf8:	e7f1      	b.n	8008bde <_scanf_float+0x2aa>
 8008bfa:	9802      	ldr	r0, [sp, #8]
 8008bfc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c00:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008c04:	9002      	str	r0, [sp, #8]
 8008c06:	463a      	mov	r2, r7
 8008c08:	4640      	mov	r0, r8
 8008c0a:	4798      	blx	r3
 8008c0c:	6923      	ldr	r3, [r4, #16]
 8008c0e:	3b01      	subs	r3, #1
 8008c10:	6123      	str	r3, [r4, #16]
 8008c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c16:	fa5f fa8a 	uxtb.w	sl, sl
 8008c1a:	f1ba 0f02 	cmp.w	sl, #2
 8008c1e:	d1ec      	bne.n	8008bfa <_scanf_float+0x2c6>
 8008c20:	3d03      	subs	r5, #3
 8008c22:	b2ed      	uxtb	r5, r5
 8008c24:	1b76      	subs	r6, r6, r5
 8008c26:	6823      	ldr	r3, [r4, #0]
 8008c28:	05da      	lsls	r2, r3, #23
 8008c2a:	d52f      	bpl.n	8008c8c <_scanf_float+0x358>
 8008c2c:	055b      	lsls	r3, r3, #21
 8008c2e:	d510      	bpl.n	8008c52 <_scanf_float+0x31e>
 8008c30:	455e      	cmp	r6, fp
 8008c32:	f67f aebf 	bls.w	80089b4 <_scanf_float+0x80>
 8008c36:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c3a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008c3e:	463a      	mov	r2, r7
 8008c40:	4640      	mov	r0, r8
 8008c42:	4798      	blx	r3
 8008c44:	6923      	ldr	r3, [r4, #16]
 8008c46:	3b01      	subs	r3, #1
 8008c48:	6123      	str	r3, [r4, #16]
 8008c4a:	e7f1      	b.n	8008c30 <_scanf_float+0x2fc>
 8008c4c:	46aa      	mov	sl, r5
 8008c4e:	9602      	str	r6, [sp, #8]
 8008c50:	e7df      	b.n	8008c12 <_scanf_float+0x2de>
 8008c52:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008c56:	6923      	ldr	r3, [r4, #16]
 8008c58:	2965      	cmp	r1, #101	; 0x65
 8008c5a:	f103 33ff 	add.w	r3, r3, #4294967295
 8008c5e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008c62:	6123      	str	r3, [r4, #16]
 8008c64:	d00c      	beq.n	8008c80 <_scanf_float+0x34c>
 8008c66:	2945      	cmp	r1, #69	; 0x45
 8008c68:	d00a      	beq.n	8008c80 <_scanf_float+0x34c>
 8008c6a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c6e:	463a      	mov	r2, r7
 8008c70:	4640      	mov	r0, r8
 8008c72:	4798      	blx	r3
 8008c74:	6923      	ldr	r3, [r4, #16]
 8008c76:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	1eb5      	subs	r5, r6, #2
 8008c7e:	6123      	str	r3, [r4, #16]
 8008c80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008c84:	463a      	mov	r2, r7
 8008c86:	4640      	mov	r0, r8
 8008c88:	4798      	blx	r3
 8008c8a:	462e      	mov	r6, r5
 8008c8c:	6825      	ldr	r5, [r4, #0]
 8008c8e:	f015 0510 	ands.w	r5, r5, #16
 8008c92:	d159      	bne.n	8008d48 <_scanf_float+0x414>
 8008c94:	7035      	strb	r5, [r6, #0]
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008c9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ca0:	d11b      	bne.n	8008cda <_scanf_float+0x3a6>
 8008ca2:	9b01      	ldr	r3, [sp, #4]
 8008ca4:	454b      	cmp	r3, r9
 8008ca6:	eba3 0209 	sub.w	r2, r3, r9
 8008caa:	d123      	bne.n	8008cf4 <_scanf_float+0x3c0>
 8008cac:	2200      	movs	r2, #0
 8008cae:	4659      	mov	r1, fp
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	f000 fe97 	bl	80099e4 <_strtod_r>
 8008cb6:	6822      	ldr	r2, [r4, #0]
 8008cb8:	9b03      	ldr	r3, [sp, #12]
 8008cba:	f012 0f02 	tst.w	r2, #2
 8008cbe:	ec57 6b10 	vmov	r6, r7, d0
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	d021      	beq.n	8008d0a <_scanf_float+0x3d6>
 8008cc6:	9903      	ldr	r1, [sp, #12]
 8008cc8:	1d1a      	adds	r2, r3, #4
 8008cca:	600a      	str	r2, [r1, #0]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	e9c3 6700 	strd	r6, r7, [r3]
 8008cd2:	68e3      	ldr	r3, [r4, #12]
 8008cd4:	3301      	adds	r3, #1
 8008cd6:	60e3      	str	r3, [r4, #12]
 8008cd8:	e66d      	b.n	80089b6 <_scanf_float+0x82>
 8008cda:	9b04      	ldr	r3, [sp, #16]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d0e5      	beq.n	8008cac <_scanf_float+0x378>
 8008ce0:	9905      	ldr	r1, [sp, #20]
 8008ce2:	230a      	movs	r3, #10
 8008ce4:	462a      	mov	r2, r5
 8008ce6:	3101      	adds	r1, #1
 8008ce8:	4640      	mov	r0, r8
 8008cea:	f000 ff03 	bl	8009af4 <_strtol_r>
 8008cee:	9b04      	ldr	r3, [sp, #16]
 8008cf0:	9e05      	ldr	r6, [sp, #20]
 8008cf2:	1ac2      	subs	r2, r0, r3
 8008cf4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008cf8:	429e      	cmp	r6, r3
 8008cfa:	bf28      	it	cs
 8008cfc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008d00:	4912      	ldr	r1, [pc, #72]	; (8008d4c <_scanf_float+0x418>)
 8008d02:	4630      	mov	r0, r6
 8008d04:	f000 f82c 	bl	8008d60 <siprintf>
 8008d08:	e7d0      	b.n	8008cac <_scanf_float+0x378>
 8008d0a:	9903      	ldr	r1, [sp, #12]
 8008d0c:	f012 0f04 	tst.w	r2, #4
 8008d10:	f103 0204 	add.w	r2, r3, #4
 8008d14:	600a      	str	r2, [r1, #0]
 8008d16:	d1d9      	bne.n	8008ccc <_scanf_float+0x398>
 8008d18:	f8d3 8000 	ldr.w	r8, [r3]
 8008d1c:	ee10 2a10 	vmov	r2, s0
 8008d20:	ee10 0a10 	vmov	r0, s0
 8008d24:	463b      	mov	r3, r7
 8008d26:	4639      	mov	r1, r7
 8008d28:	f7f7 ff00 	bl	8000b2c <__aeabi_dcmpun>
 8008d2c:	b128      	cbz	r0, 8008d3a <_scanf_float+0x406>
 8008d2e:	4808      	ldr	r0, [pc, #32]	; (8008d50 <_scanf_float+0x41c>)
 8008d30:	f000 f810 	bl	8008d54 <nanf>
 8008d34:	ed88 0a00 	vstr	s0, [r8]
 8008d38:	e7cb      	b.n	8008cd2 <_scanf_float+0x39e>
 8008d3a:	4630      	mov	r0, r6
 8008d3c:	4639      	mov	r1, r7
 8008d3e:	f7f7 ff53 	bl	8000be8 <__aeabi_d2f>
 8008d42:	f8c8 0000 	str.w	r0, [r8]
 8008d46:	e7c4      	b.n	8008cd2 <_scanf_float+0x39e>
 8008d48:	2500      	movs	r5, #0
 8008d4a:	e634      	b.n	80089b6 <_scanf_float+0x82>
 8008d4c:	0800ca50 	.word	0x0800ca50
 8008d50:	0800ce58 	.word	0x0800ce58

08008d54 <nanf>:
 8008d54:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008d5c <nanf+0x8>
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	7fc00000 	.word	0x7fc00000

08008d60 <siprintf>:
 8008d60:	b40e      	push	{r1, r2, r3}
 8008d62:	b500      	push	{lr}
 8008d64:	b09c      	sub	sp, #112	; 0x70
 8008d66:	ab1d      	add	r3, sp, #116	; 0x74
 8008d68:	9002      	str	r0, [sp, #8]
 8008d6a:	9006      	str	r0, [sp, #24]
 8008d6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008d70:	4809      	ldr	r0, [pc, #36]	; (8008d98 <siprintf+0x38>)
 8008d72:	9107      	str	r1, [sp, #28]
 8008d74:	9104      	str	r1, [sp, #16]
 8008d76:	4909      	ldr	r1, [pc, #36]	; (8008d9c <siprintf+0x3c>)
 8008d78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d7c:	9105      	str	r1, [sp, #20]
 8008d7e:	6800      	ldr	r0, [r0, #0]
 8008d80:	9301      	str	r3, [sp, #4]
 8008d82:	a902      	add	r1, sp, #8
 8008d84:	f002 fee2 	bl	800bb4c <_svfiprintf_r>
 8008d88:	9b02      	ldr	r3, [sp, #8]
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	701a      	strb	r2, [r3, #0]
 8008d8e:	b01c      	add	sp, #112	; 0x70
 8008d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d94:	b003      	add	sp, #12
 8008d96:	4770      	bx	lr
 8008d98:	20000018 	.word	0x20000018
 8008d9c:	ffff0208 	.word	0xffff0208

08008da0 <sulp>:
 8008da0:	b570      	push	{r4, r5, r6, lr}
 8008da2:	4604      	mov	r4, r0
 8008da4:	460d      	mov	r5, r1
 8008da6:	ec45 4b10 	vmov	d0, r4, r5
 8008daa:	4616      	mov	r6, r2
 8008dac:	f002 fc2c 	bl	800b608 <__ulp>
 8008db0:	ec51 0b10 	vmov	r0, r1, d0
 8008db4:	b17e      	cbz	r6, 8008dd6 <sulp+0x36>
 8008db6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008dba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	dd09      	ble.n	8008dd6 <sulp+0x36>
 8008dc2:	051b      	lsls	r3, r3, #20
 8008dc4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008dc8:	2400      	movs	r4, #0
 8008dca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8008dce:	4622      	mov	r2, r4
 8008dd0:	462b      	mov	r3, r5
 8008dd2:	f7f7 fc11 	bl	80005f8 <__aeabi_dmul>
 8008dd6:	bd70      	pop	{r4, r5, r6, pc}

08008dd8 <_strtod_l>:
 8008dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ddc:	ed2d 8b02 	vpush	{d8}
 8008de0:	b09d      	sub	sp, #116	; 0x74
 8008de2:	461f      	mov	r7, r3
 8008de4:	2300      	movs	r3, #0
 8008de6:	9318      	str	r3, [sp, #96]	; 0x60
 8008de8:	4ba2      	ldr	r3, [pc, #648]	; (8009074 <_strtod_l+0x29c>)
 8008dea:	9213      	str	r2, [sp, #76]	; 0x4c
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	9305      	str	r3, [sp, #20]
 8008df0:	4604      	mov	r4, r0
 8008df2:	4618      	mov	r0, r3
 8008df4:	4688      	mov	r8, r1
 8008df6:	f7f7 f9eb 	bl	80001d0 <strlen>
 8008dfa:	f04f 0a00 	mov.w	sl, #0
 8008dfe:	4605      	mov	r5, r0
 8008e00:	f04f 0b00 	mov.w	fp, #0
 8008e04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008e08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008e0a:	781a      	ldrb	r2, [r3, #0]
 8008e0c:	2a2b      	cmp	r2, #43	; 0x2b
 8008e0e:	d04e      	beq.n	8008eae <_strtod_l+0xd6>
 8008e10:	d83b      	bhi.n	8008e8a <_strtod_l+0xb2>
 8008e12:	2a0d      	cmp	r2, #13
 8008e14:	d834      	bhi.n	8008e80 <_strtod_l+0xa8>
 8008e16:	2a08      	cmp	r2, #8
 8008e18:	d834      	bhi.n	8008e84 <_strtod_l+0xac>
 8008e1a:	2a00      	cmp	r2, #0
 8008e1c:	d03e      	beq.n	8008e9c <_strtod_l+0xc4>
 8008e1e:	2300      	movs	r3, #0
 8008e20:	930a      	str	r3, [sp, #40]	; 0x28
 8008e22:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008e24:	7833      	ldrb	r3, [r6, #0]
 8008e26:	2b30      	cmp	r3, #48	; 0x30
 8008e28:	f040 80b0 	bne.w	8008f8c <_strtod_l+0x1b4>
 8008e2c:	7873      	ldrb	r3, [r6, #1]
 8008e2e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008e32:	2b58      	cmp	r3, #88	; 0x58
 8008e34:	d168      	bne.n	8008f08 <_strtod_l+0x130>
 8008e36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e38:	9301      	str	r3, [sp, #4]
 8008e3a:	ab18      	add	r3, sp, #96	; 0x60
 8008e3c:	9702      	str	r7, [sp, #8]
 8008e3e:	9300      	str	r3, [sp, #0]
 8008e40:	4a8d      	ldr	r2, [pc, #564]	; (8009078 <_strtod_l+0x2a0>)
 8008e42:	ab19      	add	r3, sp, #100	; 0x64
 8008e44:	a917      	add	r1, sp, #92	; 0x5c
 8008e46:	4620      	mov	r0, r4
 8008e48:	f001 fd38 	bl	800a8bc <__gethex>
 8008e4c:	f010 0707 	ands.w	r7, r0, #7
 8008e50:	4605      	mov	r5, r0
 8008e52:	d005      	beq.n	8008e60 <_strtod_l+0x88>
 8008e54:	2f06      	cmp	r7, #6
 8008e56:	d12c      	bne.n	8008eb2 <_strtod_l+0xda>
 8008e58:	3601      	adds	r6, #1
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	9617      	str	r6, [sp, #92]	; 0x5c
 8008e5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008e60:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f040 8590 	bne.w	8009988 <_strtod_l+0xbb0>
 8008e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e6a:	b1eb      	cbz	r3, 8008ea8 <_strtod_l+0xd0>
 8008e6c:	4652      	mov	r2, sl
 8008e6e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e72:	ec43 2b10 	vmov	d0, r2, r3
 8008e76:	b01d      	add	sp, #116	; 0x74
 8008e78:	ecbd 8b02 	vpop	{d8}
 8008e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e80:	2a20      	cmp	r2, #32
 8008e82:	d1cc      	bne.n	8008e1e <_strtod_l+0x46>
 8008e84:	3301      	adds	r3, #1
 8008e86:	9317      	str	r3, [sp, #92]	; 0x5c
 8008e88:	e7be      	b.n	8008e08 <_strtod_l+0x30>
 8008e8a:	2a2d      	cmp	r2, #45	; 0x2d
 8008e8c:	d1c7      	bne.n	8008e1e <_strtod_l+0x46>
 8008e8e:	2201      	movs	r2, #1
 8008e90:	920a      	str	r2, [sp, #40]	; 0x28
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	9217      	str	r2, [sp, #92]	; 0x5c
 8008e96:	785b      	ldrb	r3, [r3, #1]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d1c2      	bne.n	8008e22 <_strtod_l+0x4a>
 8008e9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008e9e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	f040 856e 	bne.w	8009984 <_strtod_l+0xbac>
 8008ea8:	4652      	mov	r2, sl
 8008eaa:	465b      	mov	r3, fp
 8008eac:	e7e1      	b.n	8008e72 <_strtod_l+0x9a>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	e7ee      	b.n	8008e90 <_strtod_l+0xb8>
 8008eb2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008eb4:	b13a      	cbz	r2, 8008ec6 <_strtod_l+0xee>
 8008eb6:	2135      	movs	r1, #53	; 0x35
 8008eb8:	a81a      	add	r0, sp, #104	; 0x68
 8008eba:	f002 fcb0 	bl	800b81e <__copybits>
 8008ebe:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f002 f86f 	bl	800afa4 <_Bfree>
 8008ec6:	3f01      	subs	r7, #1
 8008ec8:	2f04      	cmp	r7, #4
 8008eca:	d806      	bhi.n	8008eda <_strtod_l+0x102>
 8008ecc:	e8df f007 	tbb	[pc, r7]
 8008ed0:	1714030a 	.word	0x1714030a
 8008ed4:	0a          	.byte	0x0a
 8008ed5:	00          	.byte	0x00
 8008ed6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8008eda:	0728      	lsls	r0, r5, #28
 8008edc:	d5c0      	bpl.n	8008e60 <_strtod_l+0x88>
 8008ede:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008ee2:	e7bd      	b.n	8008e60 <_strtod_l+0x88>
 8008ee4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008ee8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008eea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008eee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008ef2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008ef6:	e7f0      	b.n	8008eda <_strtod_l+0x102>
 8008ef8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800907c <_strtod_l+0x2a4>
 8008efc:	e7ed      	b.n	8008eda <_strtod_l+0x102>
 8008efe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008f02:	f04f 3aff 	mov.w	sl, #4294967295
 8008f06:	e7e8      	b.n	8008eda <_strtod_l+0x102>
 8008f08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f0a:	1c5a      	adds	r2, r3, #1
 8008f0c:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f0e:	785b      	ldrb	r3, [r3, #1]
 8008f10:	2b30      	cmp	r3, #48	; 0x30
 8008f12:	d0f9      	beq.n	8008f08 <_strtod_l+0x130>
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d0a3      	beq.n	8008e60 <_strtod_l+0x88>
 8008f18:	2301      	movs	r3, #1
 8008f1a:	f04f 0900 	mov.w	r9, #0
 8008f1e:	9304      	str	r3, [sp, #16]
 8008f20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f22:	9308      	str	r3, [sp, #32]
 8008f24:	f8cd 901c 	str.w	r9, [sp, #28]
 8008f28:	464f      	mov	r7, r9
 8008f2a:	220a      	movs	r2, #10
 8008f2c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008f2e:	7806      	ldrb	r6, [r0, #0]
 8008f30:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008f34:	b2d9      	uxtb	r1, r3
 8008f36:	2909      	cmp	r1, #9
 8008f38:	d92a      	bls.n	8008f90 <_strtod_l+0x1b8>
 8008f3a:	9905      	ldr	r1, [sp, #20]
 8008f3c:	462a      	mov	r2, r5
 8008f3e:	f002 ff1f 	bl	800bd80 <strncmp>
 8008f42:	b398      	cbz	r0, 8008fac <_strtod_l+0x1d4>
 8008f44:	2000      	movs	r0, #0
 8008f46:	4632      	mov	r2, r6
 8008f48:	463d      	mov	r5, r7
 8008f4a:	9005      	str	r0, [sp, #20]
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2a65      	cmp	r2, #101	; 0x65
 8008f50:	d001      	beq.n	8008f56 <_strtod_l+0x17e>
 8008f52:	2a45      	cmp	r2, #69	; 0x45
 8008f54:	d118      	bne.n	8008f88 <_strtod_l+0x1b0>
 8008f56:	b91d      	cbnz	r5, 8008f60 <_strtod_l+0x188>
 8008f58:	9a04      	ldr	r2, [sp, #16]
 8008f5a:	4302      	orrs	r2, r0
 8008f5c:	d09e      	beq.n	8008e9c <_strtod_l+0xc4>
 8008f5e:	2500      	movs	r5, #0
 8008f60:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008f64:	f108 0201 	add.w	r2, r8, #1
 8008f68:	9217      	str	r2, [sp, #92]	; 0x5c
 8008f6a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008f6e:	2a2b      	cmp	r2, #43	; 0x2b
 8008f70:	d075      	beq.n	800905e <_strtod_l+0x286>
 8008f72:	2a2d      	cmp	r2, #45	; 0x2d
 8008f74:	d07b      	beq.n	800906e <_strtod_l+0x296>
 8008f76:	f04f 0c00 	mov.w	ip, #0
 8008f7a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008f7e:	2909      	cmp	r1, #9
 8008f80:	f240 8082 	bls.w	8009088 <_strtod_l+0x2b0>
 8008f84:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008f88:	2600      	movs	r6, #0
 8008f8a:	e09d      	b.n	80090c8 <_strtod_l+0x2f0>
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	e7c4      	b.n	8008f1a <_strtod_l+0x142>
 8008f90:	2f08      	cmp	r7, #8
 8008f92:	bfd8      	it	le
 8008f94:	9907      	ldrle	r1, [sp, #28]
 8008f96:	f100 0001 	add.w	r0, r0, #1
 8008f9a:	bfda      	itte	le
 8008f9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008fa0:	9307      	strle	r3, [sp, #28]
 8008fa2:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008fa6:	3701      	adds	r7, #1
 8008fa8:	9017      	str	r0, [sp, #92]	; 0x5c
 8008faa:	e7bf      	b.n	8008f2c <_strtod_l+0x154>
 8008fac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fae:	195a      	adds	r2, r3, r5
 8008fb0:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fb2:	5d5a      	ldrb	r2, [r3, r5]
 8008fb4:	2f00      	cmp	r7, #0
 8008fb6:	d037      	beq.n	8009028 <_strtod_l+0x250>
 8008fb8:	9005      	str	r0, [sp, #20]
 8008fba:	463d      	mov	r5, r7
 8008fbc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008fc0:	2b09      	cmp	r3, #9
 8008fc2:	d912      	bls.n	8008fea <_strtod_l+0x212>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e7c2      	b.n	8008f4e <_strtod_l+0x176>
 8008fc8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fca:	1c5a      	adds	r2, r3, #1
 8008fcc:	9217      	str	r2, [sp, #92]	; 0x5c
 8008fce:	785a      	ldrb	r2, [r3, #1]
 8008fd0:	3001      	adds	r0, #1
 8008fd2:	2a30      	cmp	r2, #48	; 0x30
 8008fd4:	d0f8      	beq.n	8008fc8 <_strtod_l+0x1f0>
 8008fd6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8008fda:	2b08      	cmp	r3, #8
 8008fdc:	f200 84d9 	bhi.w	8009992 <_strtod_l+0xbba>
 8008fe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008fe2:	9005      	str	r0, [sp, #20]
 8008fe4:	2000      	movs	r0, #0
 8008fe6:	9308      	str	r3, [sp, #32]
 8008fe8:	4605      	mov	r5, r0
 8008fea:	3a30      	subs	r2, #48	; 0x30
 8008fec:	f100 0301 	add.w	r3, r0, #1
 8008ff0:	d014      	beq.n	800901c <_strtod_l+0x244>
 8008ff2:	9905      	ldr	r1, [sp, #20]
 8008ff4:	4419      	add	r1, r3
 8008ff6:	9105      	str	r1, [sp, #20]
 8008ff8:	462b      	mov	r3, r5
 8008ffa:	eb00 0e05 	add.w	lr, r0, r5
 8008ffe:	210a      	movs	r1, #10
 8009000:	4573      	cmp	r3, lr
 8009002:	d113      	bne.n	800902c <_strtod_l+0x254>
 8009004:	182b      	adds	r3, r5, r0
 8009006:	2b08      	cmp	r3, #8
 8009008:	f105 0501 	add.w	r5, r5, #1
 800900c:	4405      	add	r5, r0
 800900e:	dc1c      	bgt.n	800904a <_strtod_l+0x272>
 8009010:	9907      	ldr	r1, [sp, #28]
 8009012:	230a      	movs	r3, #10
 8009014:	fb03 2301 	mla	r3, r3, r1, r2
 8009018:	9307      	str	r3, [sp, #28]
 800901a:	2300      	movs	r3, #0
 800901c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800901e:	1c51      	adds	r1, r2, #1
 8009020:	9117      	str	r1, [sp, #92]	; 0x5c
 8009022:	7852      	ldrb	r2, [r2, #1]
 8009024:	4618      	mov	r0, r3
 8009026:	e7c9      	b.n	8008fbc <_strtod_l+0x1e4>
 8009028:	4638      	mov	r0, r7
 800902a:	e7d2      	b.n	8008fd2 <_strtod_l+0x1fa>
 800902c:	2b08      	cmp	r3, #8
 800902e:	dc04      	bgt.n	800903a <_strtod_l+0x262>
 8009030:	9e07      	ldr	r6, [sp, #28]
 8009032:	434e      	muls	r6, r1
 8009034:	9607      	str	r6, [sp, #28]
 8009036:	3301      	adds	r3, #1
 8009038:	e7e2      	b.n	8009000 <_strtod_l+0x228>
 800903a:	f103 0c01 	add.w	ip, r3, #1
 800903e:	f1bc 0f10 	cmp.w	ip, #16
 8009042:	bfd8      	it	le
 8009044:	fb01 f909 	mulle.w	r9, r1, r9
 8009048:	e7f5      	b.n	8009036 <_strtod_l+0x25e>
 800904a:	2d10      	cmp	r5, #16
 800904c:	bfdc      	itt	le
 800904e:	230a      	movle	r3, #10
 8009050:	fb03 2909 	mlale	r9, r3, r9, r2
 8009054:	e7e1      	b.n	800901a <_strtod_l+0x242>
 8009056:	2300      	movs	r3, #0
 8009058:	9305      	str	r3, [sp, #20]
 800905a:	2301      	movs	r3, #1
 800905c:	e77c      	b.n	8008f58 <_strtod_l+0x180>
 800905e:	f04f 0c00 	mov.w	ip, #0
 8009062:	f108 0202 	add.w	r2, r8, #2
 8009066:	9217      	str	r2, [sp, #92]	; 0x5c
 8009068:	f898 2002 	ldrb.w	r2, [r8, #2]
 800906c:	e785      	b.n	8008f7a <_strtod_l+0x1a2>
 800906e:	f04f 0c01 	mov.w	ip, #1
 8009072:	e7f6      	b.n	8009062 <_strtod_l+0x28a>
 8009074:	0800cca0 	.word	0x0800cca0
 8009078:	0800ca58 	.word	0x0800ca58
 800907c:	7ff00000 	.word	0x7ff00000
 8009080:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009082:	1c51      	adds	r1, r2, #1
 8009084:	9117      	str	r1, [sp, #92]	; 0x5c
 8009086:	7852      	ldrb	r2, [r2, #1]
 8009088:	2a30      	cmp	r2, #48	; 0x30
 800908a:	d0f9      	beq.n	8009080 <_strtod_l+0x2a8>
 800908c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009090:	2908      	cmp	r1, #8
 8009092:	f63f af79 	bhi.w	8008f88 <_strtod_l+0x1b0>
 8009096:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800909a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800909c:	9206      	str	r2, [sp, #24]
 800909e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80090a0:	1c51      	adds	r1, r2, #1
 80090a2:	9117      	str	r1, [sp, #92]	; 0x5c
 80090a4:	7852      	ldrb	r2, [r2, #1]
 80090a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80090aa:	2e09      	cmp	r6, #9
 80090ac:	d937      	bls.n	800911e <_strtod_l+0x346>
 80090ae:	9e06      	ldr	r6, [sp, #24]
 80090b0:	1b89      	subs	r1, r1, r6
 80090b2:	2908      	cmp	r1, #8
 80090b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80090b8:	dc02      	bgt.n	80090c0 <_strtod_l+0x2e8>
 80090ba:	4576      	cmp	r6, lr
 80090bc:	bfa8      	it	ge
 80090be:	4676      	movge	r6, lr
 80090c0:	f1bc 0f00 	cmp.w	ip, #0
 80090c4:	d000      	beq.n	80090c8 <_strtod_l+0x2f0>
 80090c6:	4276      	negs	r6, r6
 80090c8:	2d00      	cmp	r5, #0
 80090ca:	d14d      	bne.n	8009168 <_strtod_l+0x390>
 80090cc:	9904      	ldr	r1, [sp, #16]
 80090ce:	4301      	orrs	r1, r0
 80090d0:	f47f aec6 	bne.w	8008e60 <_strtod_l+0x88>
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f47f aee1 	bne.w	8008e9c <_strtod_l+0xc4>
 80090da:	2a69      	cmp	r2, #105	; 0x69
 80090dc:	d027      	beq.n	800912e <_strtod_l+0x356>
 80090de:	dc24      	bgt.n	800912a <_strtod_l+0x352>
 80090e0:	2a49      	cmp	r2, #73	; 0x49
 80090e2:	d024      	beq.n	800912e <_strtod_l+0x356>
 80090e4:	2a4e      	cmp	r2, #78	; 0x4e
 80090e6:	f47f aed9 	bne.w	8008e9c <_strtod_l+0xc4>
 80090ea:	499f      	ldr	r1, [pc, #636]	; (8009368 <_strtod_l+0x590>)
 80090ec:	a817      	add	r0, sp, #92	; 0x5c
 80090ee:	f001 fe3d 	bl	800ad6c <__match>
 80090f2:	2800      	cmp	r0, #0
 80090f4:	f43f aed2 	beq.w	8008e9c <_strtod_l+0xc4>
 80090f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80090fa:	781b      	ldrb	r3, [r3, #0]
 80090fc:	2b28      	cmp	r3, #40	; 0x28
 80090fe:	d12d      	bne.n	800915c <_strtod_l+0x384>
 8009100:	499a      	ldr	r1, [pc, #616]	; (800936c <_strtod_l+0x594>)
 8009102:	aa1a      	add	r2, sp, #104	; 0x68
 8009104:	a817      	add	r0, sp, #92	; 0x5c
 8009106:	f001 fe45 	bl	800ad94 <__hexnan>
 800910a:	2805      	cmp	r0, #5
 800910c:	d126      	bne.n	800915c <_strtod_l+0x384>
 800910e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009110:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009114:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009118:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800911c:	e6a0      	b.n	8008e60 <_strtod_l+0x88>
 800911e:	210a      	movs	r1, #10
 8009120:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009124:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009128:	e7b9      	b.n	800909e <_strtod_l+0x2c6>
 800912a:	2a6e      	cmp	r2, #110	; 0x6e
 800912c:	e7db      	b.n	80090e6 <_strtod_l+0x30e>
 800912e:	4990      	ldr	r1, [pc, #576]	; (8009370 <_strtod_l+0x598>)
 8009130:	a817      	add	r0, sp, #92	; 0x5c
 8009132:	f001 fe1b 	bl	800ad6c <__match>
 8009136:	2800      	cmp	r0, #0
 8009138:	f43f aeb0 	beq.w	8008e9c <_strtod_l+0xc4>
 800913c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800913e:	498d      	ldr	r1, [pc, #564]	; (8009374 <_strtod_l+0x59c>)
 8009140:	3b01      	subs	r3, #1
 8009142:	a817      	add	r0, sp, #92	; 0x5c
 8009144:	9317      	str	r3, [sp, #92]	; 0x5c
 8009146:	f001 fe11 	bl	800ad6c <__match>
 800914a:	b910      	cbnz	r0, 8009152 <_strtod_l+0x37a>
 800914c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800914e:	3301      	adds	r3, #1
 8009150:	9317      	str	r3, [sp, #92]	; 0x5c
 8009152:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009384 <_strtod_l+0x5ac>
 8009156:	f04f 0a00 	mov.w	sl, #0
 800915a:	e681      	b.n	8008e60 <_strtod_l+0x88>
 800915c:	4886      	ldr	r0, [pc, #536]	; (8009378 <_strtod_l+0x5a0>)
 800915e:	f002 fdf7 	bl	800bd50 <nan>
 8009162:	ec5b ab10 	vmov	sl, fp, d0
 8009166:	e67b      	b.n	8008e60 <_strtod_l+0x88>
 8009168:	9b05      	ldr	r3, [sp, #20]
 800916a:	9807      	ldr	r0, [sp, #28]
 800916c:	1af3      	subs	r3, r6, r3
 800916e:	2f00      	cmp	r7, #0
 8009170:	bf08      	it	eq
 8009172:	462f      	moveq	r7, r5
 8009174:	2d10      	cmp	r5, #16
 8009176:	9306      	str	r3, [sp, #24]
 8009178:	46a8      	mov	r8, r5
 800917a:	bfa8      	it	ge
 800917c:	f04f 0810 	movge.w	r8, #16
 8009180:	f7f7 f9c0 	bl	8000504 <__aeabi_ui2d>
 8009184:	2d09      	cmp	r5, #9
 8009186:	4682      	mov	sl, r0
 8009188:	468b      	mov	fp, r1
 800918a:	dd13      	ble.n	80091b4 <_strtod_l+0x3dc>
 800918c:	4b7b      	ldr	r3, [pc, #492]	; (800937c <_strtod_l+0x5a4>)
 800918e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009192:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009196:	f7f7 fa2f 	bl	80005f8 <__aeabi_dmul>
 800919a:	4682      	mov	sl, r0
 800919c:	4648      	mov	r0, r9
 800919e:	468b      	mov	fp, r1
 80091a0:	f7f7 f9b0 	bl	8000504 <__aeabi_ui2d>
 80091a4:	4602      	mov	r2, r0
 80091a6:	460b      	mov	r3, r1
 80091a8:	4650      	mov	r0, sl
 80091aa:	4659      	mov	r1, fp
 80091ac:	f7f7 f86e 	bl	800028c <__adddf3>
 80091b0:	4682      	mov	sl, r0
 80091b2:	468b      	mov	fp, r1
 80091b4:	2d0f      	cmp	r5, #15
 80091b6:	dc38      	bgt.n	800922a <_strtod_l+0x452>
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	f43f ae50 	beq.w	8008e60 <_strtod_l+0x88>
 80091c0:	dd24      	ble.n	800920c <_strtod_l+0x434>
 80091c2:	2b16      	cmp	r3, #22
 80091c4:	dc0b      	bgt.n	80091de <_strtod_l+0x406>
 80091c6:	496d      	ldr	r1, [pc, #436]	; (800937c <_strtod_l+0x5a4>)
 80091c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80091cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091d0:	4652      	mov	r2, sl
 80091d2:	465b      	mov	r3, fp
 80091d4:	f7f7 fa10 	bl	80005f8 <__aeabi_dmul>
 80091d8:	4682      	mov	sl, r0
 80091da:	468b      	mov	fp, r1
 80091dc:	e640      	b.n	8008e60 <_strtod_l+0x88>
 80091de:	9a06      	ldr	r2, [sp, #24]
 80091e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80091e4:	4293      	cmp	r3, r2
 80091e6:	db20      	blt.n	800922a <_strtod_l+0x452>
 80091e8:	4c64      	ldr	r4, [pc, #400]	; (800937c <_strtod_l+0x5a4>)
 80091ea:	f1c5 050f 	rsb	r5, r5, #15
 80091ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80091f2:	4652      	mov	r2, sl
 80091f4:	465b      	mov	r3, fp
 80091f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80091fa:	f7f7 f9fd 	bl	80005f8 <__aeabi_dmul>
 80091fe:	9b06      	ldr	r3, [sp, #24]
 8009200:	1b5d      	subs	r5, r3, r5
 8009202:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009206:	e9d4 2300 	ldrd	r2, r3, [r4]
 800920a:	e7e3      	b.n	80091d4 <_strtod_l+0x3fc>
 800920c:	9b06      	ldr	r3, [sp, #24]
 800920e:	3316      	adds	r3, #22
 8009210:	db0b      	blt.n	800922a <_strtod_l+0x452>
 8009212:	9b05      	ldr	r3, [sp, #20]
 8009214:	1b9e      	subs	r6, r3, r6
 8009216:	4b59      	ldr	r3, [pc, #356]	; (800937c <_strtod_l+0x5a4>)
 8009218:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800921c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009220:	4650      	mov	r0, sl
 8009222:	4659      	mov	r1, fp
 8009224:	f7f7 fb12 	bl	800084c <__aeabi_ddiv>
 8009228:	e7d6      	b.n	80091d8 <_strtod_l+0x400>
 800922a:	9b06      	ldr	r3, [sp, #24]
 800922c:	eba5 0808 	sub.w	r8, r5, r8
 8009230:	4498      	add	r8, r3
 8009232:	f1b8 0f00 	cmp.w	r8, #0
 8009236:	dd74      	ble.n	8009322 <_strtod_l+0x54a>
 8009238:	f018 030f 	ands.w	r3, r8, #15
 800923c:	d00a      	beq.n	8009254 <_strtod_l+0x47c>
 800923e:	494f      	ldr	r1, [pc, #316]	; (800937c <_strtod_l+0x5a4>)
 8009240:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009244:	4652      	mov	r2, sl
 8009246:	465b      	mov	r3, fp
 8009248:	e9d1 0100 	ldrd	r0, r1, [r1]
 800924c:	f7f7 f9d4 	bl	80005f8 <__aeabi_dmul>
 8009250:	4682      	mov	sl, r0
 8009252:	468b      	mov	fp, r1
 8009254:	f038 080f 	bics.w	r8, r8, #15
 8009258:	d04f      	beq.n	80092fa <_strtod_l+0x522>
 800925a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800925e:	dd22      	ble.n	80092a6 <_strtod_l+0x4ce>
 8009260:	2500      	movs	r5, #0
 8009262:	462e      	mov	r6, r5
 8009264:	9507      	str	r5, [sp, #28]
 8009266:	9505      	str	r5, [sp, #20]
 8009268:	2322      	movs	r3, #34	; 0x22
 800926a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009384 <_strtod_l+0x5ac>
 800926e:	6023      	str	r3, [r4, #0]
 8009270:	f04f 0a00 	mov.w	sl, #0
 8009274:	9b07      	ldr	r3, [sp, #28]
 8009276:	2b00      	cmp	r3, #0
 8009278:	f43f adf2 	beq.w	8008e60 <_strtod_l+0x88>
 800927c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800927e:	4620      	mov	r0, r4
 8009280:	f001 fe90 	bl	800afa4 <_Bfree>
 8009284:	9905      	ldr	r1, [sp, #20]
 8009286:	4620      	mov	r0, r4
 8009288:	f001 fe8c 	bl	800afa4 <_Bfree>
 800928c:	4631      	mov	r1, r6
 800928e:	4620      	mov	r0, r4
 8009290:	f001 fe88 	bl	800afa4 <_Bfree>
 8009294:	9907      	ldr	r1, [sp, #28]
 8009296:	4620      	mov	r0, r4
 8009298:	f001 fe84 	bl	800afa4 <_Bfree>
 800929c:	4629      	mov	r1, r5
 800929e:	4620      	mov	r0, r4
 80092a0:	f001 fe80 	bl	800afa4 <_Bfree>
 80092a4:	e5dc      	b.n	8008e60 <_strtod_l+0x88>
 80092a6:	4b36      	ldr	r3, [pc, #216]	; (8009380 <_strtod_l+0x5a8>)
 80092a8:	9304      	str	r3, [sp, #16]
 80092aa:	2300      	movs	r3, #0
 80092ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 80092b0:	4650      	mov	r0, sl
 80092b2:	4659      	mov	r1, fp
 80092b4:	4699      	mov	r9, r3
 80092b6:	f1b8 0f01 	cmp.w	r8, #1
 80092ba:	dc21      	bgt.n	8009300 <_strtod_l+0x528>
 80092bc:	b10b      	cbz	r3, 80092c2 <_strtod_l+0x4ea>
 80092be:	4682      	mov	sl, r0
 80092c0:	468b      	mov	fp, r1
 80092c2:	4b2f      	ldr	r3, [pc, #188]	; (8009380 <_strtod_l+0x5a8>)
 80092c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80092c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80092cc:	4652      	mov	r2, sl
 80092ce:	465b      	mov	r3, fp
 80092d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80092d4:	f7f7 f990 	bl	80005f8 <__aeabi_dmul>
 80092d8:	4b2a      	ldr	r3, [pc, #168]	; (8009384 <_strtod_l+0x5ac>)
 80092da:	460a      	mov	r2, r1
 80092dc:	400b      	ands	r3, r1
 80092de:	492a      	ldr	r1, [pc, #168]	; (8009388 <_strtod_l+0x5b0>)
 80092e0:	428b      	cmp	r3, r1
 80092e2:	4682      	mov	sl, r0
 80092e4:	d8bc      	bhi.n	8009260 <_strtod_l+0x488>
 80092e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80092ea:	428b      	cmp	r3, r1
 80092ec:	bf86      	itte	hi
 80092ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800938c <_strtod_l+0x5b4>
 80092f2:	f04f 3aff 	movhi.w	sl, #4294967295
 80092f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80092fa:	2300      	movs	r3, #0
 80092fc:	9304      	str	r3, [sp, #16]
 80092fe:	e084      	b.n	800940a <_strtod_l+0x632>
 8009300:	f018 0f01 	tst.w	r8, #1
 8009304:	d005      	beq.n	8009312 <_strtod_l+0x53a>
 8009306:	9b04      	ldr	r3, [sp, #16]
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f7f7 f974 	bl	80005f8 <__aeabi_dmul>
 8009310:	2301      	movs	r3, #1
 8009312:	9a04      	ldr	r2, [sp, #16]
 8009314:	3208      	adds	r2, #8
 8009316:	f109 0901 	add.w	r9, r9, #1
 800931a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800931e:	9204      	str	r2, [sp, #16]
 8009320:	e7c9      	b.n	80092b6 <_strtod_l+0x4de>
 8009322:	d0ea      	beq.n	80092fa <_strtod_l+0x522>
 8009324:	f1c8 0800 	rsb	r8, r8, #0
 8009328:	f018 020f 	ands.w	r2, r8, #15
 800932c:	d00a      	beq.n	8009344 <_strtod_l+0x56c>
 800932e:	4b13      	ldr	r3, [pc, #76]	; (800937c <_strtod_l+0x5a4>)
 8009330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009334:	4650      	mov	r0, sl
 8009336:	4659      	mov	r1, fp
 8009338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933c:	f7f7 fa86 	bl	800084c <__aeabi_ddiv>
 8009340:	4682      	mov	sl, r0
 8009342:	468b      	mov	fp, r1
 8009344:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009348:	d0d7      	beq.n	80092fa <_strtod_l+0x522>
 800934a:	f1b8 0f1f 	cmp.w	r8, #31
 800934e:	dd1f      	ble.n	8009390 <_strtod_l+0x5b8>
 8009350:	2500      	movs	r5, #0
 8009352:	462e      	mov	r6, r5
 8009354:	9507      	str	r5, [sp, #28]
 8009356:	9505      	str	r5, [sp, #20]
 8009358:	2322      	movs	r3, #34	; 0x22
 800935a:	f04f 0a00 	mov.w	sl, #0
 800935e:	f04f 0b00 	mov.w	fp, #0
 8009362:	6023      	str	r3, [r4, #0]
 8009364:	e786      	b.n	8009274 <_strtod_l+0x49c>
 8009366:	bf00      	nop
 8009368:	0800ca29 	.word	0x0800ca29
 800936c:	0800ca6c 	.word	0x0800ca6c
 8009370:	0800ca21 	.word	0x0800ca21
 8009374:	0800cbac 	.word	0x0800cbac
 8009378:	0800ce58 	.word	0x0800ce58
 800937c:	0800cd38 	.word	0x0800cd38
 8009380:	0800cd10 	.word	0x0800cd10
 8009384:	7ff00000 	.word	0x7ff00000
 8009388:	7ca00000 	.word	0x7ca00000
 800938c:	7fefffff 	.word	0x7fefffff
 8009390:	f018 0310 	ands.w	r3, r8, #16
 8009394:	bf18      	it	ne
 8009396:	236a      	movne	r3, #106	; 0x6a
 8009398:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009748 <_strtod_l+0x970>
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	4650      	mov	r0, sl
 80093a0:	4659      	mov	r1, fp
 80093a2:	2300      	movs	r3, #0
 80093a4:	f018 0f01 	tst.w	r8, #1
 80093a8:	d004      	beq.n	80093b4 <_strtod_l+0x5dc>
 80093aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 80093ae:	f7f7 f923 	bl	80005f8 <__aeabi_dmul>
 80093b2:	2301      	movs	r3, #1
 80093b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 80093b8:	f109 0908 	add.w	r9, r9, #8
 80093bc:	d1f2      	bne.n	80093a4 <_strtod_l+0x5cc>
 80093be:	b10b      	cbz	r3, 80093c4 <_strtod_l+0x5ec>
 80093c0:	4682      	mov	sl, r0
 80093c2:	468b      	mov	fp, r1
 80093c4:	9b04      	ldr	r3, [sp, #16]
 80093c6:	b1c3      	cbz	r3, 80093fa <_strtod_l+0x622>
 80093c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80093cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	4659      	mov	r1, fp
 80093d4:	dd11      	ble.n	80093fa <_strtod_l+0x622>
 80093d6:	2b1f      	cmp	r3, #31
 80093d8:	f340 8124 	ble.w	8009624 <_strtod_l+0x84c>
 80093dc:	2b34      	cmp	r3, #52	; 0x34
 80093de:	bfde      	ittt	le
 80093e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80093e4:	f04f 33ff 	movle.w	r3, #4294967295
 80093e8:	fa03 f202 	lslle.w	r2, r3, r2
 80093ec:	f04f 0a00 	mov.w	sl, #0
 80093f0:	bfcc      	ite	gt
 80093f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80093f6:	ea02 0b01 	andle.w	fp, r2, r1
 80093fa:	2200      	movs	r2, #0
 80093fc:	2300      	movs	r3, #0
 80093fe:	4650      	mov	r0, sl
 8009400:	4659      	mov	r1, fp
 8009402:	f7f7 fb61 	bl	8000ac8 <__aeabi_dcmpeq>
 8009406:	2800      	cmp	r0, #0
 8009408:	d1a2      	bne.n	8009350 <_strtod_l+0x578>
 800940a:	9b07      	ldr	r3, [sp, #28]
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	9908      	ldr	r1, [sp, #32]
 8009410:	462b      	mov	r3, r5
 8009412:	463a      	mov	r2, r7
 8009414:	4620      	mov	r0, r4
 8009416:	f001 fe2d 	bl	800b074 <__s2b>
 800941a:	9007      	str	r0, [sp, #28]
 800941c:	2800      	cmp	r0, #0
 800941e:	f43f af1f 	beq.w	8009260 <_strtod_l+0x488>
 8009422:	9b05      	ldr	r3, [sp, #20]
 8009424:	1b9e      	subs	r6, r3, r6
 8009426:	9b06      	ldr	r3, [sp, #24]
 8009428:	2b00      	cmp	r3, #0
 800942a:	bfb4      	ite	lt
 800942c:	4633      	movlt	r3, r6
 800942e:	2300      	movge	r3, #0
 8009430:	930c      	str	r3, [sp, #48]	; 0x30
 8009432:	9b06      	ldr	r3, [sp, #24]
 8009434:	2500      	movs	r5, #0
 8009436:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800943a:	9312      	str	r3, [sp, #72]	; 0x48
 800943c:	462e      	mov	r6, r5
 800943e:	9b07      	ldr	r3, [sp, #28]
 8009440:	4620      	mov	r0, r4
 8009442:	6859      	ldr	r1, [r3, #4]
 8009444:	f001 fd6e 	bl	800af24 <_Balloc>
 8009448:	9005      	str	r0, [sp, #20]
 800944a:	2800      	cmp	r0, #0
 800944c:	f43f af0c 	beq.w	8009268 <_strtod_l+0x490>
 8009450:	9b07      	ldr	r3, [sp, #28]
 8009452:	691a      	ldr	r2, [r3, #16]
 8009454:	3202      	adds	r2, #2
 8009456:	f103 010c 	add.w	r1, r3, #12
 800945a:	0092      	lsls	r2, r2, #2
 800945c:	300c      	adds	r0, #12
 800945e:	f001 fd53 	bl	800af08 <memcpy>
 8009462:	ec4b ab10 	vmov	d0, sl, fp
 8009466:	aa1a      	add	r2, sp, #104	; 0x68
 8009468:	a919      	add	r1, sp, #100	; 0x64
 800946a:	4620      	mov	r0, r4
 800946c:	f002 f948 	bl	800b700 <__d2b>
 8009470:	ec4b ab18 	vmov	d8, sl, fp
 8009474:	9018      	str	r0, [sp, #96]	; 0x60
 8009476:	2800      	cmp	r0, #0
 8009478:	f43f aef6 	beq.w	8009268 <_strtod_l+0x490>
 800947c:	2101      	movs	r1, #1
 800947e:	4620      	mov	r0, r4
 8009480:	f001 fe92 	bl	800b1a8 <__i2b>
 8009484:	4606      	mov	r6, r0
 8009486:	2800      	cmp	r0, #0
 8009488:	f43f aeee 	beq.w	8009268 <_strtod_l+0x490>
 800948c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800948e:	9904      	ldr	r1, [sp, #16]
 8009490:	2b00      	cmp	r3, #0
 8009492:	bfab      	itete	ge
 8009494:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009496:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009498:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800949a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800949e:	bfac      	ite	ge
 80094a0:	eb03 0902 	addge.w	r9, r3, r2
 80094a4:	1ad7      	sublt	r7, r2, r3
 80094a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80094a8:	eba3 0801 	sub.w	r8, r3, r1
 80094ac:	4490      	add	r8, r2
 80094ae:	4ba1      	ldr	r3, [pc, #644]	; (8009734 <_strtod_l+0x95c>)
 80094b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80094b4:	4598      	cmp	r8, r3
 80094b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80094ba:	f280 80c7 	bge.w	800964c <_strtod_l+0x874>
 80094be:	eba3 0308 	sub.w	r3, r3, r8
 80094c2:	2b1f      	cmp	r3, #31
 80094c4:	eba2 0203 	sub.w	r2, r2, r3
 80094c8:	f04f 0101 	mov.w	r1, #1
 80094cc:	f300 80b1 	bgt.w	8009632 <_strtod_l+0x85a>
 80094d0:	fa01 f303 	lsl.w	r3, r1, r3
 80094d4:	930d      	str	r3, [sp, #52]	; 0x34
 80094d6:	2300      	movs	r3, #0
 80094d8:	9308      	str	r3, [sp, #32]
 80094da:	eb09 0802 	add.w	r8, r9, r2
 80094de:	9b04      	ldr	r3, [sp, #16]
 80094e0:	45c1      	cmp	r9, r8
 80094e2:	4417      	add	r7, r2
 80094e4:	441f      	add	r7, r3
 80094e6:	464b      	mov	r3, r9
 80094e8:	bfa8      	it	ge
 80094ea:	4643      	movge	r3, r8
 80094ec:	42bb      	cmp	r3, r7
 80094ee:	bfa8      	it	ge
 80094f0:	463b      	movge	r3, r7
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	bfc2      	ittt	gt
 80094f6:	eba8 0803 	subgt.w	r8, r8, r3
 80094fa:	1aff      	subgt	r7, r7, r3
 80094fc:	eba9 0903 	subgt.w	r9, r9, r3
 8009500:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009502:	2b00      	cmp	r3, #0
 8009504:	dd17      	ble.n	8009536 <_strtod_l+0x75e>
 8009506:	4631      	mov	r1, r6
 8009508:	461a      	mov	r2, r3
 800950a:	4620      	mov	r0, r4
 800950c:	f001 ff0c 	bl	800b328 <__pow5mult>
 8009510:	4606      	mov	r6, r0
 8009512:	2800      	cmp	r0, #0
 8009514:	f43f aea8 	beq.w	8009268 <_strtod_l+0x490>
 8009518:	4601      	mov	r1, r0
 800951a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800951c:	4620      	mov	r0, r4
 800951e:	f001 fe59 	bl	800b1d4 <__multiply>
 8009522:	900b      	str	r0, [sp, #44]	; 0x2c
 8009524:	2800      	cmp	r0, #0
 8009526:	f43f ae9f 	beq.w	8009268 <_strtod_l+0x490>
 800952a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800952c:	4620      	mov	r0, r4
 800952e:	f001 fd39 	bl	800afa4 <_Bfree>
 8009532:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009534:	9318      	str	r3, [sp, #96]	; 0x60
 8009536:	f1b8 0f00 	cmp.w	r8, #0
 800953a:	f300 808c 	bgt.w	8009656 <_strtod_l+0x87e>
 800953e:	9b06      	ldr	r3, [sp, #24]
 8009540:	2b00      	cmp	r3, #0
 8009542:	dd08      	ble.n	8009556 <_strtod_l+0x77e>
 8009544:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009546:	9905      	ldr	r1, [sp, #20]
 8009548:	4620      	mov	r0, r4
 800954a:	f001 feed 	bl	800b328 <__pow5mult>
 800954e:	9005      	str	r0, [sp, #20]
 8009550:	2800      	cmp	r0, #0
 8009552:	f43f ae89 	beq.w	8009268 <_strtod_l+0x490>
 8009556:	2f00      	cmp	r7, #0
 8009558:	dd08      	ble.n	800956c <_strtod_l+0x794>
 800955a:	9905      	ldr	r1, [sp, #20]
 800955c:	463a      	mov	r2, r7
 800955e:	4620      	mov	r0, r4
 8009560:	f001 ff3c 	bl	800b3dc <__lshift>
 8009564:	9005      	str	r0, [sp, #20]
 8009566:	2800      	cmp	r0, #0
 8009568:	f43f ae7e 	beq.w	8009268 <_strtod_l+0x490>
 800956c:	f1b9 0f00 	cmp.w	r9, #0
 8009570:	dd08      	ble.n	8009584 <_strtod_l+0x7ac>
 8009572:	4631      	mov	r1, r6
 8009574:	464a      	mov	r2, r9
 8009576:	4620      	mov	r0, r4
 8009578:	f001 ff30 	bl	800b3dc <__lshift>
 800957c:	4606      	mov	r6, r0
 800957e:	2800      	cmp	r0, #0
 8009580:	f43f ae72 	beq.w	8009268 <_strtod_l+0x490>
 8009584:	9a05      	ldr	r2, [sp, #20]
 8009586:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009588:	4620      	mov	r0, r4
 800958a:	f001 ffb3 	bl	800b4f4 <__mdiff>
 800958e:	4605      	mov	r5, r0
 8009590:	2800      	cmp	r0, #0
 8009592:	f43f ae69 	beq.w	8009268 <_strtod_l+0x490>
 8009596:	68c3      	ldr	r3, [r0, #12]
 8009598:	930b      	str	r3, [sp, #44]	; 0x2c
 800959a:	2300      	movs	r3, #0
 800959c:	60c3      	str	r3, [r0, #12]
 800959e:	4631      	mov	r1, r6
 80095a0:	f001 ff8c 	bl	800b4bc <__mcmp>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	da60      	bge.n	800966a <_strtod_l+0x892>
 80095a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095aa:	ea53 030a 	orrs.w	r3, r3, sl
 80095ae:	f040 8082 	bne.w	80096b6 <_strtod_l+0x8de>
 80095b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d17d      	bne.n	80096b6 <_strtod_l+0x8de>
 80095ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80095be:	0d1b      	lsrs	r3, r3, #20
 80095c0:	051b      	lsls	r3, r3, #20
 80095c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80095c6:	d976      	bls.n	80096b6 <_strtod_l+0x8de>
 80095c8:	696b      	ldr	r3, [r5, #20]
 80095ca:	b913      	cbnz	r3, 80095d2 <_strtod_l+0x7fa>
 80095cc:	692b      	ldr	r3, [r5, #16]
 80095ce:	2b01      	cmp	r3, #1
 80095d0:	dd71      	ble.n	80096b6 <_strtod_l+0x8de>
 80095d2:	4629      	mov	r1, r5
 80095d4:	2201      	movs	r2, #1
 80095d6:	4620      	mov	r0, r4
 80095d8:	f001 ff00 	bl	800b3dc <__lshift>
 80095dc:	4631      	mov	r1, r6
 80095de:	4605      	mov	r5, r0
 80095e0:	f001 ff6c 	bl	800b4bc <__mcmp>
 80095e4:	2800      	cmp	r0, #0
 80095e6:	dd66      	ble.n	80096b6 <_strtod_l+0x8de>
 80095e8:	9904      	ldr	r1, [sp, #16]
 80095ea:	4a53      	ldr	r2, [pc, #332]	; (8009738 <_strtod_l+0x960>)
 80095ec:	465b      	mov	r3, fp
 80095ee:	2900      	cmp	r1, #0
 80095f0:	f000 8081 	beq.w	80096f6 <_strtod_l+0x91e>
 80095f4:	ea02 010b 	and.w	r1, r2, fp
 80095f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80095fc:	dc7b      	bgt.n	80096f6 <_strtod_l+0x91e>
 80095fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009602:	f77f aea9 	ble.w	8009358 <_strtod_l+0x580>
 8009606:	4b4d      	ldr	r3, [pc, #308]	; (800973c <_strtod_l+0x964>)
 8009608:	4650      	mov	r0, sl
 800960a:	4659      	mov	r1, fp
 800960c:	2200      	movs	r2, #0
 800960e:	f7f6 fff3 	bl	80005f8 <__aeabi_dmul>
 8009612:	460b      	mov	r3, r1
 8009614:	4303      	orrs	r3, r0
 8009616:	bf08      	it	eq
 8009618:	2322      	moveq	r3, #34	; 0x22
 800961a:	4682      	mov	sl, r0
 800961c:	468b      	mov	fp, r1
 800961e:	bf08      	it	eq
 8009620:	6023      	streq	r3, [r4, #0]
 8009622:	e62b      	b.n	800927c <_strtod_l+0x4a4>
 8009624:	f04f 32ff 	mov.w	r2, #4294967295
 8009628:	fa02 f303 	lsl.w	r3, r2, r3
 800962c:	ea03 0a0a 	and.w	sl, r3, sl
 8009630:	e6e3      	b.n	80093fa <_strtod_l+0x622>
 8009632:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009636:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800963a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800963e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009642:	fa01 f308 	lsl.w	r3, r1, r8
 8009646:	9308      	str	r3, [sp, #32]
 8009648:	910d      	str	r1, [sp, #52]	; 0x34
 800964a:	e746      	b.n	80094da <_strtod_l+0x702>
 800964c:	2300      	movs	r3, #0
 800964e:	9308      	str	r3, [sp, #32]
 8009650:	2301      	movs	r3, #1
 8009652:	930d      	str	r3, [sp, #52]	; 0x34
 8009654:	e741      	b.n	80094da <_strtod_l+0x702>
 8009656:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009658:	4642      	mov	r2, r8
 800965a:	4620      	mov	r0, r4
 800965c:	f001 febe 	bl	800b3dc <__lshift>
 8009660:	9018      	str	r0, [sp, #96]	; 0x60
 8009662:	2800      	cmp	r0, #0
 8009664:	f47f af6b 	bne.w	800953e <_strtod_l+0x766>
 8009668:	e5fe      	b.n	8009268 <_strtod_l+0x490>
 800966a:	465f      	mov	r7, fp
 800966c:	d16e      	bne.n	800974c <_strtod_l+0x974>
 800966e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009670:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009674:	b342      	cbz	r2, 80096c8 <_strtod_l+0x8f0>
 8009676:	4a32      	ldr	r2, [pc, #200]	; (8009740 <_strtod_l+0x968>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d128      	bne.n	80096ce <_strtod_l+0x8f6>
 800967c:	9b04      	ldr	r3, [sp, #16]
 800967e:	4651      	mov	r1, sl
 8009680:	b1eb      	cbz	r3, 80096be <_strtod_l+0x8e6>
 8009682:	4b2d      	ldr	r3, [pc, #180]	; (8009738 <_strtod_l+0x960>)
 8009684:	403b      	ands	r3, r7
 8009686:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800968a:	f04f 32ff 	mov.w	r2, #4294967295
 800968e:	d819      	bhi.n	80096c4 <_strtod_l+0x8ec>
 8009690:	0d1b      	lsrs	r3, r3, #20
 8009692:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009696:	fa02 f303 	lsl.w	r3, r2, r3
 800969a:	4299      	cmp	r1, r3
 800969c:	d117      	bne.n	80096ce <_strtod_l+0x8f6>
 800969e:	4b29      	ldr	r3, [pc, #164]	; (8009744 <_strtod_l+0x96c>)
 80096a0:	429f      	cmp	r7, r3
 80096a2:	d102      	bne.n	80096aa <_strtod_l+0x8d2>
 80096a4:	3101      	adds	r1, #1
 80096a6:	f43f addf 	beq.w	8009268 <_strtod_l+0x490>
 80096aa:	4b23      	ldr	r3, [pc, #140]	; (8009738 <_strtod_l+0x960>)
 80096ac:	403b      	ands	r3, r7
 80096ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80096b2:	f04f 0a00 	mov.w	sl, #0
 80096b6:	9b04      	ldr	r3, [sp, #16]
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d1a4      	bne.n	8009606 <_strtod_l+0x82e>
 80096bc:	e5de      	b.n	800927c <_strtod_l+0x4a4>
 80096be:	f04f 33ff 	mov.w	r3, #4294967295
 80096c2:	e7ea      	b.n	800969a <_strtod_l+0x8c2>
 80096c4:	4613      	mov	r3, r2
 80096c6:	e7e8      	b.n	800969a <_strtod_l+0x8c2>
 80096c8:	ea53 030a 	orrs.w	r3, r3, sl
 80096cc:	d08c      	beq.n	80095e8 <_strtod_l+0x810>
 80096ce:	9b08      	ldr	r3, [sp, #32]
 80096d0:	b1db      	cbz	r3, 800970a <_strtod_l+0x932>
 80096d2:	423b      	tst	r3, r7
 80096d4:	d0ef      	beq.n	80096b6 <_strtod_l+0x8de>
 80096d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096d8:	9a04      	ldr	r2, [sp, #16]
 80096da:	4650      	mov	r0, sl
 80096dc:	4659      	mov	r1, fp
 80096de:	b1c3      	cbz	r3, 8009712 <_strtod_l+0x93a>
 80096e0:	f7ff fb5e 	bl	8008da0 <sulp>
 80096e4:	4602      	mov	r2, r0
 80096e6:	460b      	mov	r3, r1
 80096e8:	ec51 0b18 	vmov	r0, r1, d8
 80096ec:	f7f6 fdce 	bl	800028c <__adddf3>
 80096f0:	4682      	mov	sl, r0
 80096f2:	468b      	mov	fp, r1
 80096f4:	e7df      	b.n	80096b6 <_strtod_l+0x8de>
 80096f6:	4013      	ands	r3, r2
 80096f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80096fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009700:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009704:	f04f 3aff 	mov.w	sl, #4294967295
 8009708:	e7d5      	b.n	80096b6 <_strtod_l+0x8de>
 800970a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800970c:	ea13 0f0a 	tst.w	r3, sl
 8009710:	e7e0      	b.n	80096d4 <_strtod_l+0x8fc>
 8009712:	f7ff fb45 	bl	8008da0 <sulp>
 8009716:	4602      	mov	r2, r0
 8009718:	460b      	mov	r3, r1
 800971a:	ec51 0b18 	vmov	r0, r1, d8
 800971e:	f7f6 fdb3 	bl	8000288 <__aeabi_dsub>
 8009722:	2200      	movs	r2, #0
 8009724:	2300      	movs	r3, #0
 8009726:	4682      	mov	sl, r0
 8009728:	468b      	mov	fp, r1
 800972a:	f7f7 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800972e:	2800      	cmp	r0, #0
 8009730:	d0c1      	beq.n	80096b6 <_strtod_l+0x8de>
 8009732:	e611      	b.n	8009358 <_strtod_l+0x580>
 8009734:	fffffc02 	.word	0xfffffc02
 8009738:	7ff00000 	.word	0x7ff00000
 800973c:	39500000 	.word	0x39500000
 8009740:	000fffff 	.word	0x000fffff
 8009744:	7fefffff 	.word	0x7fefffff
 8009748:	0800ca80 	.word	0x0800ca80
 800974c:	4631      	mov	r1, r6
 800974e:	4628      	mov	r0, r5
 8009750:	f002 f832 	bl	800b7b8 <__ratio>
 8009754:	ec59 8b10 	vmov	r8, r9, d0
 8009758:	ee10 0a10 	vmov	r0, s0
 800975c:	2200      	movs	r2, #0
 800975e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009762:	4649      	mov	r1, r9
 8009764:	f7f7 f9c4 	bl	8000af0 <__aeabi_dcmple>
 8009768:	2800      	cmp	r0, #0
 800976a:	d07a      	beq.n	8009862 <_strtod_l+0xa8a>
 800976c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800976e:	2b00      	cmp	r3, #0
 8009770:	d04a      	beq.n	8009808 <_strtod_l+0xa30>
 8009772:	4b95      	ldr	r3, [pc, #596]	; (80099c8 <_strtod_l+0xbf0>)
 8009774:	2200      	movs	r2, #0
 8009776:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800977a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80099c8 <_strtod_l+0xbf0>
 800977e:	f04f 0800 	mov.w	r8, #0
 8009782:	4b92      	ldr	r3, [pc, #584]	; (80099cc <_strtod_l+0xbf4>)
 8009784:	403b      	ands	r3, r7
 8009786:	930d      	str	r3, [sp, #52]	; 0x34
 8009788:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800978a:	4b91      	ldr	r3, [pc, #580]	; (80099d0 <_strtod_l+0xbf8>)
 800978c:	429a      	cmp	r2, r3
 800978e:	f040 80b0 	bne.w	80098f2 <_strtod_l+0xb1a>
 8009792:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009796:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800979a:	ec4b ab10 	vmov	d0, sl, fp
 800979e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80097a2:	f001 ff31 	bl	800b608 <__ulp>
 80097a6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80097aa:	ec53 2b10 	vmov	r2, r3, d0
 80097ae:	f7f6 ff23 	bl	80005f8 <__aeabi_dmul>
 80097b2:	4652      	mov	r2, sl
 80097b4:	465b      	mov	r3, fp
 80097b6:	f7f6 fd69 	bl	800028c <__adddf3>
 80097ba:	460b      	mov	r3, r1
 80097bc:	4983      	ldr	r1, [pc, #524]	; (80099cc <_strtod_l+0xbf4>)
 80097be:	4a85      	ldr	r2, [pc, #532]	; (80099d4 <_strtod_l+0xbfc>)
 80097c0:	4019      	ands	r1, r3
 80097c2:	4291      	cmp	r1, r2
 80097c4:	4682      	mov	sl, r0
 80097c6:	d960      	bls.n	800988a <_strtod_l+0xab2>
 80097c8:	ee18 3a90 	vmov	r3, s17
 80097cc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d104      	bne.n	80097de <_strtod_l+0xa06>
 80097d4:	ee18 3a10 	vmov	r3, s16
 80097d8:	3301      	adds	r3, #1
 80097da:	f43f ad45 	beq.w	8009268 <_strtod_l+0x490>
 80097de:	f8df b200 	ldr.w	fp, [pc, #512]	; 80099e0 <_strtod_l+0xc08>
 80097e2:	f04f 3aff 	mov.w	sl, #4294967295
 80097e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80097e8:	4620      	mov	r0, r4
 80097ea:	f001 fbdb 	bl	800afa4 <_Bfree>
 80097ee:	9905      	ldr	r1, [sp, #20]
 80097f0:	4620      	mov	r0, r4
 80097f2:	f001 fbd7 	bl	800afa4 <_Bfree>
 80097f6:	4631      	mov	r1, r6
 80097f8:	4620      	mov	r0, r4
 80097fa:	f001 fbd3 	bl	800afa4 <_Bfree>
 80097fe:	4629      	mov	r1, r5
 8009800:	4620      	mov	r0, r4
 8009802:	f001 fbcf 	bl	800afa4 <_Bfree>
 8009806:	e61a      	b.n	800943e <_strtod_l+0x666>
 8009808:	f1ba 0f00 	cmp.w	sl, #0
 800980c:	d11b      	bne.n	8009846 <_strtod_l+0xa6e>
 800980e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009812:	b9f3      	cbnz	r3, 8009852 <_strtod_l+0xa7a>
 8009814:	4b6c      	ldr	r3, [pc, #432]	; (80099c8 <_strtod_l+0xbf0>)
 8009816:	2200      	movs	r2, #0
 8009818:	4640      	mov	r0, r8
 800981a:	4649      	mov	r1, r9
 800981c:	f7f7 f95e 	bl	8000adc <__aeabi_dcmplt>
 8009820:	b9d0      	cbnz	r0, 8009858 <_strtod_l+0xa80>
 8009822:	4640      	mov	r0, r8
 8009824:	4649      	mov	r1, r9
 8009826:	4b6c      	ldr	r3, [pc, #432]	; (80099d8 <_strtod_l+0xc00>)
 8009828:	2200      	movs	r2, #0
 800982a:	f7f6 fee5 	bl	80005f8 <__aeabi_dmul>
 800982e:	4680      	mov	r8, r0
 8009830:	4689      	mov	r9, r1
 8009832:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009836:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800983a:	9315      	str	r3, [sp, #84]	; 0x54
 800983c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009840:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009844:	e79d      	b.n	8009782 <_strtod_l+0x9aa>
 8009846:	f1ba 0f01 	cmp.w	sl, #1
 800984a:	d102      	bne.n	8009852 <_strtod_l+0xa7a>
 800984c:	2f00      	cmp	r7, #0
 800984e:	f43f ad83 	beq.w	8009358 <_strtod_l+0x580>
 8009852:	4b62      	ldr	r3, [pc, #392]	; (80099dc <_strtod_l+0xc04>)
 8009854:	2200      	movs	r2, #0
 8009856:	e78e      	b.n	8009776 <_strtod_l+0x99e>
 8009858:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80099d8 <_strtod_l+0xc00>
 800985c:	f04f 0800 	mov.w	r8, #0
 8009860:	e7e7      	b.n	8009832 <_strtod_l+0xa5a>
 8009862:	4b5d      	ldr	r3, [pc, #372]	; (80099d8 <_strtod_l+0xc00>)
 8009864:	4640      	mov	r0, r8
 8009866:	4649      	mov	r1, r9
 8009868:	2200      	movs	r2, #0
 800986a:	f7f6 fec5 	bl	80005f8 <__aeabi_dmul>
 800986e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009870:	4680      	mov	r8, r0
 8009872:	4689      	mov	r9, r1
 8009874:	b933      	cbnz	r3, 8009884 <_strtod_l+0xaac>
 8009876:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800987a:	900e      	str	r0, [sp, #56]	; 0x38
 800987c:	930f      	str	r3, [sp, #60]	; 0x3c
 800987e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009882:	e7dd      	b.n	8009840 <_strtod_l+0xa68>
 8009884:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009888:	e7f9      	b.n	800987e <_strtod_l+0xaa6>
 800988a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800988e:	9b04      	ldr	r3, [sp, #16]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d1a8      	bne.n	80097e6 <_strtod_l+0xa0e>
 8009894:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009898:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800989a:	0d1b      	lsrs	r3, r3, #20
 800989c:	051b      	lsls	r3, r3, #20
 800989e:	429a      	cmp	r2, r3
 80098a0:	d1a1      	bne.n	80097e6 <_strtod_l+0xa0e>
 80098a2:	4640      	mov	r0, r8
 80098a4:	4649      	mov	r1, r9
 80098a6:	f7f7 fa07 	bl	8000cb8 <__aeabi_d2lz>
 80098aa:	f7f6 fe77 	bl	800059c <__aeabi_l2d>
 80098ae:	4602      	mov	r2, r0
 80098b0:	460b      	mov	r3, r1
 80098b2:	4640      	mov	r0, r8
 80098b4:	4649      	mov	r1, r9
 80098b6:	f7f6 fce7 	bl	8000288 <__aeabi_dsub>
 80098ba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80098c0:	ea43 030a 	orr.w	r3, r3, sl
 80098c4:	4313      	orrs	r3, r2
 80098c6:	4680      	mov	r8, r0
 80098c8:	4689      	mov	r9, r1
 80098ca:	d055      	beq.n	8009978 <_strtod_l+0xba0>
 80098cc:	a336      	add	r3, pc, #216	; (adr r3, 80099a8 <_strtod_l+0xbd0>)
 80098ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d2:	f7f7 f903 	bl	8000adc <__aeabi_dcmplt>
 80098d6:	2800      	cmp	r0, #0
 80098d8:	f47f acd0 	bne.w	800927c <_strtod_l+0x4a4>
 80098dc:	a334      	add	r3, pc, #208	; (adr r3, 80099b0 <_strtod_l+0xbd8>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	4640      	mov	r0, r8
 80098e4:	4649      	mov	r1, r9
 80098e6:	f7f7 f917 	bl	8000b18 <__aeabi_dcmpgt>
 80098ea:	2800      	cmp	r0, #0
 80098ec:	f43f af7b 	beq.w	80097e6 <_strtod_l+0xa0e>
 80098f0:	e4c4      	b.n	800927c <_strtod_l+0x4a4>
 80098f2:	9b04      	ldr	r3, [sp, #16]
 80098f4:	b333      	cbz	r3, 8009944 <_strtod_l+0xb6c>
 80098f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098f8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80098fc:	d822      	bhi.n	8009944 <_strtod_l+0xb6c>
 80098fe:	a32e      	add	r3, pc, #184	; (adr r3, 80099b8 <_strtod_l+0xbe0>)
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	4640      	mov	r0, r8
 8009906:	4649      	mov	r1, r9
 8009908:	f7f7 f8f2 	bl	8000af0 <__aeabi_dcmple>
 800990c:	b1a0      	cbz	r0, 8009938 <_strtod_l+0xb60>
 800990e:	4649      	mov	r1, r9
 8009910:	4640      	mov	r0, r8
 8009912:	f7f7 f949 	bl	8000ba8 <__aeabi_d2uiz>
 8009916:	2801      	cmp	r0, #1
 8009918:	bf38      	it	cc
 800991a:	2001      	movcc	r0, #1
 800991c:	f7f6 fdf2 	bl	8000504 <__aeabi_ui2d>
 8009920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009922:	4680      	mov	r8, r0
 8009924:	4689      	mov	r9, r1
 8009926:	bb23      	cbnz	r3, 8009972 <_strtod_l+0xb9a>
 8009928:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800992c:	9010      	str	r0, [sp, #64]	; 0x40
 800992e:	9311      	str	r3, [sp, #68]	; 0x44
 8009930:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009934:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009938:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800993a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800993c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009940:	1a9b      	subs	r3, r3, r2
 8009942:	9309      	str	r3, [sp, #36]	; 0x24
 8009944:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009948:	eeb0 0a48 	vmov.f32	s0, s16
 800994c:	eef0 0a68 	vmov.f32	s1, s17
 8009950:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009954:	f001 fe58 	bl	800b608 <__ulp>
 8009958:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800995c:	ec53 2b10 	vmov	r2, r3, d0
 8009960:	f7f6 fe4a 	bl	80005f8 <__aeabi_dmul>
 8009964:	ec53 2b18 	vmov	r2, r3, d8
 8009968:	f7f6 fc90 	bl	800028c <__adddf3>
 800996c:	4682      	mov	sl, r0
 800996e:	468b      	mov	fp, r1
 8009970:	e78d      	b.n	800988e <_strtod_l+0xab6>
 8009972:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009976:	e7db      	b.n	8009930 <_strtod_l+0xb58>
 8009978:	a311      	add	r3, pc, #68	; (adr r3, 80099c0 <_strtod_l+0xbe8>)
 800997a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800997e:	f7f7 f8ad 	bl	8000adc <__aeabi_dcmplt>
 8009982:	e7b2      	b.n	80098ea <_strtod_l+0xb12>
 8009984:	2300      	movs	r3, #0
 8009986:	930a      	str	r3, [sp, #40]	; 0x28
 8009988:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800998a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800998c:	6013      	str	r3, [r2, #0]
 800998e:	f7ff ba6b 	b.w	8008e68 <_strtod_l+0x90>
 8009992:	2a65      	cmp	r2, #101	; 0x65
 8009994:	f43f ab5f 	beq.w	8009056 <_strtod_l+0x27e>
 8009998:	2a45      	cmp	r2, #69	; 0x45
 800999a:	f43f ab5c 	beq.w	8009056 <_strtod_l+0x27e>
 800999e:	2301      	movs	r3, #1
 80099a0:	f7ff bb94 	b.w	80090cc <_strtod_l+0x2f4>
 80099a4:	f3af 8000 	nop.w
 80099a8:	94a03595 	.word	0x94a03595
 80099ac:	3fdfffff 	.word	0x3fdfffff
 80099b0:	35afe535 	.word	0x35afe535
 80099b4:	3fe00000 	.word	0x3fe00000
 80099b8:	ffc00000 	.word	0xffc00000
 80099bc:	41dfffff 	.word	0x41dfffff
 80099c0:	94a03595 	.word	0x94a03595
 80099c4:	3fcfffff 	.word	0x3fcfffff
 80099c8:	3ff00000 	.word	0x3ff00000
 80099cc:	7ff00000 	.word	0x7ff00000
 80099d0:	7fe00000 	.word	0x7fe00000
 80099d4:	7c9fffff 	.word	0x7c9fffff
 80099d8:	3fe00000 	.word	0x3fe00000
 80099dc:	bff00000 	.word	0xbff00000
 80099e0:	7fefffff 	.word	0x7fefffff

080099e4 <_strtod_r>:
 80099e4:	4b01      	ldr	r3, [pc, #4]	; (80099ec <_strtod_r+0x8>)
 80099e6:	f7ff b9f7 	b.w	8008dd8 <_strtod_l>
 80099ea:	bf00      	nop
 80099ec:	20000080 	.word	0x20000080

080099f0 <_strtol_l.constprop.0>:
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099f6:	d001      	beq.n	80099fc <_strtol_l.constprop.0+0xc>
 80099f8:	2b24      	cmp	r3, #36	; 0x24
 80099fa:	d906      	bls.n	8009a0a <_strtol_l.constprop.0+0x1a>
 80099fc:	f7fe fafe 	bl	8007ffc <__errno>
 8009a00:	2316      	movs	r3, #22
 8009a02:	6003      	str	r3, [r0, #0]
 8009a04:	2000      	movs	r0, #0
 8009a06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009af0 <_strtol_l.constprop.0+0x100>
 8009a0e:	460d      	mov	r5, r1
 8009a10:	462e      	mov	r6, r5
 8009a12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a16:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009a1a:	f017 0708 	ands.w	r7, r7, #8
 8009a1e:	d1f7      	bne.n	8009a10 <_strtol_l.constprop.0+0x20>
 8009a20:	2c2d      	cmp	r4, #45	; 0x2d
 8009a22:	d132      	bne.n	8009a8a <_strtol_l.constprop.0+0x9a>
 8009a24:	782c      	ldrb	r4, [r5, #0]
 8009a26:	2701      	movs	r7, #1
 8009a28:	1cb5      	adds	r5, r6, #2
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d05b      	beq.n	8009ae6 <_strtol_l.constprop.0+0xf6>
 8009a2e:	2b10      	cmp	r3, #16
 8009a30:	d109      	bne.n	8009a46 <_strtol_l.constprop.0+0x56>
 8009a32:	2c30      	cmp	r4, #48	; 0x30
 8009a34:	d107      	bne.n	8009a46 <_strtol_l.constprop.0+0x56>
 8009a36:	782c      	ldrb	r4, [r5, #0]
 8009a38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009a3c:	2c58      	cmp	r4, #88	; 0x58
 8009a3e:	d14d      	bne.n	8009adc <_strtol_l.constprop.0+0xec>
 8009a40:	786c      	ldrb	r4, [r5, #1]
 8009a42:	2310      	movs	r3, #16
 8009a44:	3502      	adds	r5, #2
 8009a46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009a4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009a4e:	f04f 0c00 	mov.w	ip, #0
 8009a52:	fbb8 f9f3 	udiv	r9, r8, r3
 8009a56:	4666      	mov	r6, ip
 8009a58:	fb03 8a19 	mls	sl, r3, r9, r8
 8009a5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009a60:	f1be 0f09 	cmp.w	lr, #9
 8009a64:	d816      	bhi.n	8009a94 <_strtol_l.constprop.0+0xa4>
 8009a66:	4674      	mov	r4, lr
 8009a68:	42a3      	cmp	r3, r4
 8009a6a:	dd24      	ble.n	8009ab6 <_strtol_l.constprop.0+0xc6>
 8009a6c:	f1bc 0f00 	cmp.w	ip, #0
 8009a70:	db1e      	blt.n	8009ab0 <_strtol_l.constprop.0+0xc0>
 8009a72:	45b1      	cmp	r9, r6
 8009a74:	d31c      	bcc.n	8009ab0 <_strtol_l.constprop.0+0xc0>
 8009a76:	d101      	bne.n	8009a7c <_strtol_l.constprop.0+0x8c>
 8009a78:	45a2      	cmp	sl, r4
 8009a7a:	db19      	blt.n	8009ab0 <_strtol_l.constprop.0+0xc0>
 8009a7c:	fb06 4603 	mla	r6, r6, r3, r4
 8009a80:	f04f 0c01 	mov.w	ip, #1
 8009a84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009a88:	e7e8      	b.n	8009a5c <_strtol_l.constprop.0+0x6c>
 8009a8a:	2c2b      	cmp	r4, #43	; 0x2b
 8009a8c:	bf04      	itt	eq
 8009a8e:	782c      	ldrbeq	r4, [r5, #0]
 8009a90:	1cb5      	addeq	r5, r6, #2
 8009a92:	e7ca      	b.n	8009a2a <_strtol_l.constprop.0+0x3a>
 8009a94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009a98:	f1be 0f19 	cmp.w	lr, #25
 8009a9c:	d801      	bhi.n	8009aa2 <_strtol_l.constprop.0+0xb2>
 8009a9e:	3c37      	subs	r4, #55	; 0x37
 8009aa0:	e7e2      	b.n	8009a68 <_strtol_l.constprop.0+0x78>
 8009aa2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8009aa6:	f1be 0f19 	cmp.w	lr, #25
 8009aaa:	d804      	bhi.n	8009ab6 <_strtol_l.constprop.0+0xc6>
 8009aac:	3c57      	subs	r4, #87	; 0x57
 8009aae:	e7db      	b.n	8009a68 <_strtol_l.constprop.0+0x78>
 8009ab0:	f04f 3cff 	mov.w	ip, #4294967295
 8009ab4:	e7e6      	b.n	8009a84 <_strtol_l.constprop.0+0x94>
 8009ab6:	f1bc 0f00 	cmp.w	ip, #0
 8009aba:	da05      	bge.n	8009ac8 <_strtol_l.constprop.0+0xd8>
 8009abc:	2322      	movs	r3, #34	; 0x22
 8009abe:	6003      	str	r3, [r0, #0]
 8009ac0:	4646      	mov	r6, r8
 8009ac2:	b942      	cbnz	r2, 8009ad6 <_strtol_l.constprop.0+0xe6>
 8009ac4:	4630      	mov	r0, r6
 8009ac6:	e79e      	b.n	8009a06 <_strtol_l.constprop.0+0x16>
 8009ac8:	b107      	cbz	r7, 8009acc <_strtol_l.constprop.0+0xdc>
 8009aca:	4276      	negs	r6, r6
 8009acc:	2a00      	cmp	r2, #0
 8009ace:	d0f9      	beq.n	8009ac4 <_strtol_l.constprop.0+0xd4>
 8009ad0:	f1bc 0f00 	cmp.w	ip, #0
 8009ad4:	d000      	beq.n	8009ad8 <_strtol_l.constprop.0+0xe8>
 8009ad6:	1e69      	subs	r1, r5, #1
 8009ad8:	6011      	str	r1, [r2, #0]
 8009ada:	e7f3      	b.n	8009ac4 <_strtol_l.constprop.0+0xd4>
 8009adc:	2430      	movs	r4, #48	; 0x30
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1b1      	bne.n	8009a46 <_strtol_l.constprop.0+0x56>
 8009ae2:	2308      	movs	r3, #8
 8009ae4:	e7af      	b.n	8009a46 <_strtol_l.constprop.0+0x56>
 8009ae6:	2c30      	cmp	r4, #48	; 0x30
 8009ae8:	d0a5      	beq.n	8009a36 <_strtol_l.constprop.0+0x46>
 8009aea:	230a      	movs	r3, #10
 8009aec:	e7ab      	b.n	8009a46 <_strtol_l.constprop.0+0x56>
 8009aee:	bf00      	nop
 8009af0:	0800caa9 	.word	0x0800caa9

08009af4 <_strtol_r>:
 8009af4:	f7ff bf7c 	b.w	80099f0 <_strtol_l.constprop.0>

08009af8 <quorem>:
 8009af8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009afc:	6903      	ldr	r3, [r0, #16]
 8009afe:	690c      	ldr	r4, [r1, #16]
 8009b00:	42a3      	cmp	r3, r4
 8009b02:	4607      	mov	r7, r0
 8009b04:	f2c0 8081 	blt.w	8009c0a <quorem+0x112>
 8009b08:	3c01      	subs	r4, #1
 8009b0a:	f101 0814 	add.w	r8, r1, #20
 8009b0e:	f100 0514 	add.w	r5, r0, #20
 8009b12:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009b16:	9301      	str	r3, [sp, #4]
 8009b18:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009b1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009b20:	3301      	adds	r3, #1
 8009b22:	429a      	cmp	r2, r3
 8009b24:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009b28:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009b2c:	fbb2 f6f3 	udiv	r6, r2, r3
 8009b30:	d331      	bcc.n	8009b96 <quorem+0x9e>
 8009b32:	f04f 0e00 	mov.w	lr, #0
 8009b36:	4640      	mov	r0, r8
 8009b38:	46ac      	mov	ip, r5
 8009b3a:	46f2      	mov	sl, lr
 8009b3c:	f850 2b04 	ldr.w	r2, [r0], #4
 8009b40:	b293      	uxth	r3, r2
 8009b42:	fb06 e303 	mla	r3, r6, r3, lr
 8009b46:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009b4a:	b29b      	uxth	r3, r3
 8009b4c:	ebaa 0303 	sub.w	r3, sl, r3
 8009b50:	f8dc a000 	ldr.w	sl, [ip]
 8009b54:	0c12      	lsrs	r2, r2, #16
 8009b56:	fa13 f38a 	uxtah	r3, r3, sl
 8009b5a:	fb06 e202 	mla	r2, r6, r2, lr
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	9b00      	ldr	r3, [sp, #0]
 8009b62:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009b66:	b292      	uxth	r2, r2
 8009b68:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009b6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009b70:	f8bd 3000 	ldrh.w	r3, [sp]
 8009b74:	4581      	cmp	r9, r0
 8009b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009b7a:	f84c 3b04 	str.w	r3, [ip], #4
 8009b7e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009b82:	d2db      	bcs.n	8009b3c <quorem+0x44>
 8009b84:	f855 300b 	ldr.w	r3, [r5, fp]
 8009b88:	b92b      	cbnz	r3, 8009b96 <quorem+0x9e>
 8009b8a:	9b01      	ldr	r3, [sp, #4]
 8009b8c:	3b04      	subs	r3, #4
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	461a      	mov	r2, r3
 8009b92:	d32e      	bcc.n	8009bf2 <quorem+0xfa>
 8009b94:	613c      	str	r4, [r7, #16]
 8009b96:	4638      	mov	r0, r7
 8009b98:	f001 fc90 	bl	800b4bc <__mcmp>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	db24      	blt.n	8009bea <quorem+0xf2>
 8009ba0:	3601      	adds	r6, #1
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	f04f 0c00 	mov.w	ip, #0
 8009ba8:	f858 2b04 	ldr.w	r2, [r8], #4
 8009bac:	f8d0 e000 	ldr.w	lr, [r0]
 8009bb0:	b293      	uxth	r3, r2
 8009bb2:	ebac 0303 	sub.w	r3, ip, r3
 8009bb6:	0c12      	lsrs	r2, r2, #16
 8009bb8:	fa13 f38e 	uxtah	r3, r3, lr
 8009bbc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009bc0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009bca:	45c1      	cmp	r9, r8
 8009bcc:	f840 3b04 	str.w	r3, [r0], #4
 8009bd0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009bd4:	d2e8      	bcs.n	8009ba8 <quorem+0xb0>
 8009bd6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009bda:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009bde:	b922      	cbnz	r2, 8009bea <quorem+0xf2>
 8009be0:	3b04      	subs	r3, #4
 8009be2:	429d      	cmp	r5, r3
 8009be4:	461a      	mov	r2, r3
 8009be6:	d30a      	bcc.n	8009bfe <quorem+0x106>
 8009be8:	613c      	str	r4, [r7, #16]
 8009bea:	4630      	mov	r0, r6
 8009bec:	b003      	add	sp, #12
 8009bee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bf2:	6812      	ldr	r2, [r2, #0]
 8009bf4:	3b04      	subs	r3, #4
 8009bf6:	2a00      	cmp	r2, #0
 8009bf8:	d1cc      	bne.n	8009b94 <quorem+0x9c>
 8009bfa:	3c01      	subs	r4, #1
 8009bfc:	e7c7      	b.n	8009b8e <quorem+0x96>
 8009bfe:	6812      	ldr	r2, [r2, #0]
 8009c00:	3b04      	subs	r3, #4
 8009c02:	2a00      	cmp	r2, #0
 8009c04:	d1f0      	bne.n	8009be8 <quorem+0xf0>
 8009c06:	3c01      	subs	r4, #1
 8009c08:	e7eb      	b.n	8009be2 <quorem+0xea>
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	e7ee      	b.n	8009bec <quorem+0xf4>
	...

08009c10 <_dtoa_r>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	ed2d 8b04 	vpush	{d8-d9}
 8009c18:	ec57 6b10 	vmov	r6, r7, d0
 8009c1c:	b093      	sub	sp, #76	; 0x4c
 8009c1e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009c20:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009c24:	9106      	str	r1, [sp, #24]
 8009c26:	ee10 aa10 	vmov	sl, s0
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8009c2e:	930c      	str	r3, [sp, #48]	; 0x30
 8009c30:	46bb      	mov	fp, r7
 8009c32:	b975      	cbnz	r5, 8009c52 <_dtoa_r+0x42>
 8009c34:	2010      	movs	r0, #16
 8009c36:	f001 f94d 	bl	800aed4 <malloc>
 8009c3a:	4602      	mov	r2, r0
 8009c3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009c3e:	b920      	cbnz	r0, 8009c4a <_dtoa_r+0x3a>
 8009c40:	4ba7      	ldr	r3, [pc, #668]	; (8009ee0 <_dtoa_r+0x2d0>)
 8009c42:	21ea      	movs	r1, #234	; 0xea
 8009c44:	48a7      	ldr	r0, [pc, #668]	; (8009ee4 <_dtoa_r+0x2d4>)
 8009c46:	f002 f8bd 	bl	800bdc4 <__assert_func>
 8009c4a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009c4e:	6005      	str	r5, [r0, #0]
 8009c50:	60c5      	str	r5, [r0, #12]
 8009c52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c54:	6819      	ldr	r1, [r3, #0]
 8009c56:	b151      	cbz	r1, 8009c6e <_dtoa_r+0x5e>
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	604a      	str	r2, [r1, #4]
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	4093      	lsls	r3, r2
 8009c60:	608b      	str	r3, [r1, #8]
 8009c62:	4620      	mov	r0, r4
 8009c64:	f001 f99e 	bl	800afa4 <_Bfree>
 8009c68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	601a      	str	r2, [r3, #0]
 8009c6e:	1e3b      	subs	r3, r7, #0
 8009c70:	bfaa      	itet	ge
 8009c72:	2300      	movge	r3, #0
 8009c74:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009c78:	f8c8 3000 	strge.w	r3, [r8]
 8009c7c:	4b9a      	ldr	r3, [pc, #616]	; (8009ee8 <_dtoa_r+0x2d8>)
 8009c7e:	bfbc      	itt	lt
 8009c80:	2201      	movlt	r2, #1
 8009c82:	f8c8 2000 	strlt.w	r2, [r8]
 8009c86:	ea33 030b 	bics.w	r3, r3, fp
 8009c8a:	d11b      	bne.n	8009cc4 <_dtoa_r+0xb4>
 8009c8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009c8e:	f242 730f 	movw	r3, #9999	; 0x270f
 8009c92:	6013      	str	r3, [r2, #0]
 8009c94:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c98:	4333      	orrs	r3, r6
 8009c9a:	f000 8592 	beq.w	800a7c2 <_dtoa_r+0xbb2>
 8009c9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ca0:	b963      	cbnz	r3, 8009cbc <_dtoa_r+0xac>
 8009ca2:	4b92      	ldr	r3, [pc, #584]	; (8009eec <_dtoa_r+0x2dc>)
 8009ca4:	e022      	b.n	8009cec <_dtoa_r+0xdc>
 8009ca6:	4b92      	ldr	r3, [pc, #584]	; (8009ef0 <_dtoa_r+0x2e0>)
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	3308      	adds	r3, #8
 8009cac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009cae:	6013      	str	r3, [r2, #0]
 8009cb0:	9801      	ldr	r0, [sp, #4]
 8009cb2:	b013      	add	sp, #76	; 0x4c
 8009cb4:	ecbd 8b04 	vpop	{d8-d9}
 8009cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbc:	4b8b      	ldr	r3, [pc, #556]	; (8009eec <_dtoa_r+0x2dc>)
 8009cbe:	9301      	str	r3, [sp, #4]
 8009cc0:	3303      	adds	r3, #3
 8009cc2:	e7f3      	b.n	8009cac <_dtoa_r+0x9c>
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	4650      	mov	r0, sl
 8009cca:	4659      	mov	r1, fp
 8009ccc:	f7f6 fefc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cd0:	ec4b ab19 	vmov	d9, sl, fp
 8009cd4:	4680      	mov	r8, r0
 8009cd6:	b158      	cbz	r0, 8009cf0 <_dtoa_r+0xe0>
 8009cd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009cda:	2301      	movs	r3, #1
 8009cdc:	6013      	str	r3, [r2, #0]
 8009cde:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 856b 	beq.w	800a7bc <_dtoa_r+0xbac>
 8009ce6:	4883      	ldr	r0, [pc, #524]	; (8009ef4 <_dtoa_r+0x2e4>)
 8009ce8:	6018      	str	r0, [r3, #0]
 8009cea:	1e43      	subs	r3, r0, #1
 8009cec:	9301      	str	r3, [sp, #4]
 8009cee:	e7df      	b.n	8009cb0 <_dtoa_r+0xa0>
 8009cf0:	ec4b ab10 	vmov	d0, sl, fp
 8009cf4:	aa10      	add	r2, sp, #64	; 0x40
 8009cf6:	a911      	add	r1, sp, #68	; 0x44
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f001 fd01 	bl	800b700 <__d2b>
 8009cfe:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009d02:	ee08 0a10 	vmov	s16, r0
 8009d06:	2d00      	cmp	r5, #0
 8009d08:	f000 8084 	beq.w	8009e14 <_dtoa_r+0x204>
 8009d0c:	ee19 3a90 	vmov	r3, s19
 8009d10:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009d14:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009d18:	4656      	mov	r6, sl
 8009d1a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009d1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009d22:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009d26:	4b74      	ldr	r3, [pc, #464]	; (8009ef8 <_dtoa_r+0x2e8>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	4630      	mov	r0, r6
 8009d2c:	4639      	mov	r1, r7
 8009d2e:	f7f6 faab 	bl	8000288 <__aeabi_dsub>
 8009d32:	a365      	add	r3, pc, #404	; (adr r3, 8009ec8 <_dtoa_r+0x2b8>)
 8009d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d38:	f7f6 fc5e 	bl	80005f8 <__aeabi_dmul>
 8009d3c:	a364      	add	r3, pc, #400	; (adr r3, 8009ed0 <_dtoa_r+0x2c0>)
 8009d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d42:	f7f6 faa3 	bl	800028c <__adddf3>
 8009d46:	4606      	mov	r6, r0
 8009d48:	4628      	mov	r0, r5
 8009d4a:	460f      	mov	r7, r1
 8009d4c:	f7f6 fbea 	bl	8000524 <__aeabi_i2d>
 8009d50:	a361      	add	r3, pc, #388	; (adr r3, 8009ed8 <_dtoa_r+0x2c8>)
 8009d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d56:	f7f6 fc4f 	bl	80005f8 <__aeabi_dmul>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4630      	mov	r0, r6
 8009d60:	4639      	mov	r1, r7
 8009d62:	f7f6 fa93 	bl	800028c <__adddf3>
 8009d66:	4606      	mov	r6, r0
 8009d68:	460f      	mov	r7, r1
 8009d6a:	f7f6 fef5 	bl	8000b58 <__aeabi_d2iz>
 8009d6e:	2200      	movs	r2, #0
 8009d70:	9000      	str	r0, [sp, #0]
 8009d72:	2300      	movs	r3, #0
 8009d74:	4630      	mov	r0, r6
 8009d76:	4639      	mov	r1, r7
 8009d78:	f7f6 feb0 	bl	8000adc <__aeabi_dcmplt>
 8009d7c:	b150      	cbz	r0, 8009d94 <_dtoa_r+0x184>
 8009d7e:	9800      	ldr	r0, [sp, #0]
 8009d80:	f7f6 fbd0 	bl	8000524 <__aeabi_i2d>
 8009d84:	4632      	mov	r2, r6
 8009d86:	463b      	mov	r3, r7
 8009d88:	f7f6 fe9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d8c:	b910      	cbnz	r0, 8009d94 <_dtoa_r+0x184>
 8009d8e:	9b00      	ldr	r3, [sp, #0]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	9300      	str	r3, [sp, #0]
 8009d94:	9b00      	ldr	r3, [sp, #0]
 8009d96:	2b16      	cmp	r3, #22
 8009d98:	d85a      	bhi.n	8009e50 <_dtoa_r+0x240>
 8009d9a:	9a00      	ldr	r2, [sp, #0]
 8009d9c:	4b57      	ldr	r3, [pc, #348]	; (8009efc <_dtoa_r+0x2ec>)
 8009d9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da6:	ec51 0b19 	vmov	r0, r1, d9
 8009daa:	f7f6 fe97 	bl	8000adc <__aeabi_dcmplt>
 8009dae:	2800      	cmp	r0, #0
 8009db0:	d050      	beq.n	8009e54 <_dtoa_r+0x244>
 8009db2:	9b00      	ldr	r3, [sp, #0]
 8009db4:	3b01      	subs	r3, #1
 8009db6:	9300      	str	r3, [sp, #0]
 8009db8:	2300      	movs	r3, #0
 8009dba:	930b      	str	r3, [sp, #44]	; 0x2c
 8009dbc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009dbe:	1b5d      	subs	r5, r3, r5
 8009dc0:	1e6b      	subs	r3, r5, #1
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	bf45      	ittet	mi
 8009dc6:	f1c5 0301 	rsbmi	r3, r5, #1
 8009dca:	9304      	strmi	r3, [sp, #16]
 8009dcc:	2300      	movpl	r3, #0
 8009dce:	2300      	movmi	r3, #0
 8009dd0:	bf4c      	ite	mi
 8009dd2:	9305      	strmi	r3, [sp, #20]
 8009dd4:	9304      	strpl	r3, [sp, #16]
 8009dd6:	9b00      	ldr	r3, [sp, #0]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	db3d      	blt.n	8009e58 <_dtoa_r+0x248>
 8009ddc:	9b05      	ldr	r3, [sp, #20]
 8009dde:	9a00      	ldr	r2, [sp, #0]
 8009de0:	920a      	str	r2, [sp, #40]	; 0x28
 8009de2:	4413      	add	r3, r2
 8009de4:	9305      	str	r3, [sp, #20]
 8009de6:	2300      	movs	r3, #0
 8009de8:	9307      	str	r3, [sp, #28]
 8009dea:	9b06      	ldr	r3, [sp, #24]
 8009dec:	2b09      	cmp	r3, #9
 8009dee:	f200 8089 	bhi.w	8009f04 <_dtoa_r+0x2f4>
 8009df2:	2b05      	cmp	r3, #5
 8009df4:	bfc4      	itt	gt
 8009df6:	3b04      	subgt	r3, #4
 8009df8:	9306      	strgt	r3, [sp, #24]
 8009dfa:	9b06      	ldr	r3, [sp, #24]
 8009dfc:	f1a3 0302 	sub.w	r3, r3, #2
 8009e00:	bfcc      	ite	gt
 8009e02:	2500      	movgt	r5, #0
 8009e04:	2501      	movle	r5, #1
 8009e06:	2b03      	cmp	r3, #3
 8009e08:	f200 8087 	bhi.w	8009f1a <_dtoa_r+0x30a>
 8009e0c:	e8df f003 	tbb	[pc, r3]
 8009e10:	59383a2d 	.word	0x59383a2d
 8009e14:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009e18:	441d      	add	r5, r3
 8009e1a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009e1e:	2b20      	cmp	r3, #32
 8009e20:	bfc1      	itttt	gt
 8009e22:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009e26:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009e2a:	fa0b f303 	lslgt.w	r3, fp, r3
 8009e2e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009e32:	bfda      	itte	le
 8009e34:	f1c3 0320 	rsble	r3, r3, #32
 8009e38:	fa06 f003 	lslle.w	r0, r6, r3
 8009e3c:	4318      	orrgt	r0, r3
 8009e3e:	f7f6 fb61 	bl	8000504 <__aeabi_ui2d>
 8009e42:	2301      	movs	r3, #1
 8009e44:	4606      	mov	r6, r0
 8009e46:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009e4a:	3d01      	subs	r5, #1
 8009e4c:	930e      	str	r3, [sp, #56]	; 0x38
 8009e4e:	e76a      	b.n	8009d26 <_dtoa_r+0x116>
 8009e50:	2301      	movs	r3, #1
 8009e52:	e7b2      	b.n	8009dba <_dtoa_r+0x1aa>
 8009e54:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e56:	e7b1      	b.n	8009dbc <_dtoa_r+0x1ac>
 8009e58:	9b04      	ldr	r3, [sp, #16]
 8009e5a:	9a00      	ldr	r2, [sp, #0]
 8009e5c:	1a9b      	subs	r3, r3, r2
 8009e5e:	9304      	str	r3, [sp, #16]
 8009e60:	4253      	negs	r3, r2
 8009e62:	9307      	str	r3, [sp, #28]
 8009e64:	2300      	movs	r3, #0
 8009e66:	930a      	str	r3, [sp, #40]	; 0x28
 8009e68:	e7bf      	b.n	8009dea <_dtoa_r+0x1da>
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	9308      	str	r3, [sp, #32]
 8009e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	dc55      	bgt.n	8009f20 <_dtoa_r+0x310>
 8009e74:	2301      	movs	r3, #1
 8009e76:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	9209      	str	r2, [sp, #36]	; 0x24
 8009e7e:	e00c      	b.n	8009e9a <_dtoa_r+0x28a>
 8009e80:	2301      	movs	r3, #1
 8009e82:	e7f3      	b.n	8009e6c <_dtoa_r+0x25c>
 8009e84:	2300      	movs	r3, #0
 8009e86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e88:	9308      	str	r3, [sp, #32]
 8009e8a:	9b00      	ldr	r3, [sp, #0]
 8009e8c:	4413      	add	r3, r2
 8009e8e:	9302      	str	r3, [sp, #8]
 8009e90:	3301      	adds	r3, #1
 8009e92:	2b01      	cmp	r3, #1
 8009e94:	9303      	str	r3, [sp, #12]
 8009e96:	bfb8      	it	lt
 8009e98:	2301      	movlt	r3, #1
 8009e9a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009e9c:	2200      	movs	r2, #0
 8009e9e:	6042      	str	r2, [r0, #4]
 8009ea0:	2204      	movs	r2, #4
 8009ea2:	f102 0614 	add.w	r6, r2, #20
 8009ea6:	429e      	cmp	r6, r3
 8009ea8:	6841      	ldr	r1, [r0, #4]
 8009eaa:	d93d      	bls.n	8009f28 <_dtoa_r+0x318>
 8009eac:	4620      	mov	r0, r4
 8009eae:	f001 f839 	bl	800af24 <_Balloc>
 8009eb2:	9001      	str	r0, [sp, #4]
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d13b      	bne.n	8009f30 <_dtoa_r+0x320>
 8009eb8:	4b11      	ldr	r3, [pc, #68]	; (8009f00 <_dtoa_r+0x2f0>)
 8009eba:	4602      	mov	r2, r0
 8009ebc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009ec0:	e6c0      	b.n	8009c44 <_dtoa_r+0x34>
 8009ec2:	2301      	movs	r3, #1
 8009ec4:	e7df      	b.n	8009e86 <_dtoa_r+0x276>
 8009ec6:	bf00      	nop
 8009ec8:	636f4361 	.word	0x636f4361
 8009ecc:	3fd287a7 	.word	0x3fd287a7
 8009ed0:	8b60c8b3 	.word	0x8b60c8b3
 8009ed4:	3fc68a28 	.word	0x3fc68a28
 8009ed8:	509f79fb 	.word	0x509f79fb
 8009edc:	3fd34413 	.word	0x3fd34413
 8009ee0:	0800cbb6 	.word	0x0800cbb6
 8009ee4:	0800cbcd 	.word	0x0800cbcd
 8009ee8:	7ff00000 	.word	0x7ff00000
 8009eec:	0800cbb2 	.word	0x0800cbb2
 8009ef0:	0800cba9 	.word	0x0800cba9
 8009ef4:	0800ca2d 	.word	0x0800ca2d
 8009ef8:	3ff80000 	.word	0x3ff80000
 8009efc:	0800cd38 	.word	0x0800cd38
 8009f00:	0800cc28 	.word	0x0800cc28
 8009f04:	2501      	movs	r5, #1
 8009f06:	2300      	movs	r3, #0
 8009f08:	9306      	str	r3, [sp, #24]
 8009f0a:	9508      	str	r5, [sp, #32]
 8009f0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009f10:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f14:	2200      	movs	r2, #0
 8009f16:	2312      	movs	r3, #18
 8009f18:	e7b0      	b.n	8009e7c <_dtoa_r+0x26c>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	9308      	str	r3, [sp, #32]
 8009f1e:	e7f5      	b.n	8009f0c <_dtoa_r+0x2fc>
 8009f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f22:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009f26:	e7b8      	b.n	8009e9a <_dtoa_r+0x28a>
 8009f28:	3101      	adds	r1, #1
 8009f2a:	6041      	str	r1, [r0, #4]
 8009f2c:	0052      	lsls	r2, r2, #1
 8009f2e:	e7b8      	b.n	8009ea2 <_dtoa_r+0x292>
 8009f30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f32:	9a01      	ldr	r2, [sp, #4]
 8009f34:	601a      	str	r2, [r3, #0]
 8009f36:	9b03      	ldr	r3, [sp, #12]
 8009f38:	2b0e      	cmp	r3, #14
 8009f3a:	f200 809d 	bhi.w	800a078 <_dtoa_r+0x468>
 8009f3e:	2d00      	cmp	r5, #0
 8009f40:	f000 809a 	beq.w	800a078 <_dtoa_r+0x468>
 8009f44:	9b00      	ldr	r3, [sp, #0]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	dd32      	ble.n	8009fb0 <_dtoa_r+0x3a0>
 8009f4a:	4ab7      	ldr	r2, [pc, #732]	; (800a228 <_dtoa_r+0x618>)
 8009f4c:	f003 030f 	and.w	r3, r3, #15
 8009f50:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009f54:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009f58:	9b00      	ldr	r3, [sp, #0]
 8009f5a:	05d8      	lsls	r0, r3, #23
 8009f5c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009f60:	d516      	bpl.n	8009f90 <_dtoa_r+0x380>
 8009f62:	4bb2      	ldr	r3, [pc, #712]	; (800a22c <_dtoa_r+0x61c>)
 8009f64:	ec51 0b19 	vmov	r0, r1, d9
 8009f68:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009f6c:	f7f6 fc6e 	bl	800084c <__aeabi_ddiv>
 8009f70:	f007 070f 	and.w	r7, r7, #15
 8009f74:	4682      	mov	sl, r0
 8009f76:	468b      	mov	fp, r1
 8009f78:	2503      	movs	r5, #3
 8009f7a:	4eac      	ldr	r6, [pc, #688]	; (800a22c <_dtoa_r+0x61c>)
 8009f7c:	b957      	cbnz	r7, 8009f94 <_dtoa_r+0x384>
 8009f7e:	4642      	mov	r2, r8
 8009f80:	464b      	mov	r3, r9
 8009f82:	4650      	mov	r0, sl
 8009f84:	4659      	mov	r1, fp
 8009f86:	f7f6 fc61 	bl	800084c <__aeabi_ddiv>
 8009f8a:	4682      	mov	sl, r0
 8009f8c:	468b      	mov	fp, r1
 8009f8e:	e028      	b.n	8009fe2 <_dtoa_r+0x3d2>
 8009f90:	2502      	movs	r5, #2
 8009f92:	e7f2      	b.n	8009f7a <_dtoa_r+0x36a>
 8009f94:	07f9      	lsls	r1, r7, #31
 8009f96:	d508      	bpl.n	8009faa <_dtoa_r+0x39a>
 8009f98:	4640      	mov	r0, r8
 8009f9a:	4649      	mov	r1, r9
 8009f9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fa0:	f7f6 fb2a 	bl	80005f8 <__aeabi_dmul>
 8009fa4:	3501      	adds	r5, #1
 8009fa6:	4680      	mov	r8, r0
 8009fa8:	4689      	mov	r9, r1
 8009faa:	107f      	asrs	r7, r7, #1
 8009fac:	3608      	adds	r6, #8
 8009fae:	e7e5      	b.n	8009f7c <_dtoa_r+0x36c>
 8009fb0:	f000 809b 	beq.w	800a0ea <_dtoa_r+0x4da>
 8009fb4:	9b00      	ldr	r3, [sp, #0]
 8009fb6:	4f9d      	ldr	r7, [pc, #628]	; (800a22c <_dtoa_r+0x61c>)
 8009fb8:	425e      	negs	r6, r3
 8009fba:	4b9b      	ldr	r3, [pc, #620]	; (800a228 <_dtoa_r+0x618>)
 8009fbc:	f006 020f 	and.w	r2, r6, #15
 8009fc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc8:	ec51 0b19 	vmov	r0, r1, d9
 8009fcc:	f7f6 fb14 	bl	80005f8 <__aeabi_dmul>
 8009fd0:	1136      	asrs	r6, r6, #4
 8009fd2:	4682      	mov	sl, r0
 8009fd4:	468b      	mov	fp, r1
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	2502      	movs	r5, #2
 8009fda:	2e00      	cmp	r6, #0
 8009fdc:	d17a      	bne.n	800a0d4 <_dtoa_r+0x4c4>
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d1d3      	bne.n	8009f8a <_dtoa_r+0x37a>
 8009fe2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	f000 8082 	beq.w	800a0ee <_dtoa_r+0x4de>
 8009fea:	4b91      	ldr	r3, [pc, #580]	; (800a230 <_dtoa_r+0x620>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	4650      	mov	r0, sl
 8009ff0:	4659      	mov	r1, fp
 8009ff2:	f7f6 fd73 	bl	8000adc <__aeabi_dcmplt>
 8009ff6:	2800      	cmp	r0, #0
 8009ff8:	d079      	beq.n	800a0ee <_dtoa_r+0x4de>
 8009ffa:	9b03      	ldr	r3, [sp, #12]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d076      	beq.n	800a0ee <_dtoa_r+0x4de>
 800a000:	9b02      	ldr	r3, [sp, #8]
 800a002:	2b00      	cmp	r3, #0
 800a004:	dd36      	ble.n	800a074 <_dtoa_r+0x464>
 800a006:	9b00      	ldr	r3, [sp, #0]
 800a008:	4650      	mov	r0, sl
 800a00a:	4659      	mov	r1, fp
 800a00c:	1e5f      	subs	r7, r3, #1
 800a00e:	2200      	movs	r2, #0
 800a010:	4b88      	ldr	r3, [pc, #544]	; (800a234 <_dtoa_r+0x624>)
 800a012:	f7f6 faf1 	bl	80005f8 <__aeabi_dmul>
 800a016:	9e02      	ldr	r6, [sp, #8]
 800a018:	4682      	mov	sl, r0
 800a01a:	468b      	mov	fp, r1
 800a01c:	3501      	adds	r5, #1
 800a01e:	4628      	mov	r0, r5
 800a020:	f7f6 fa80 	bl	8000524 <__aeabi_i2d>
 800a024:	4652      	mov	r2, sl
 800a026:	465b      	mov	r3, fp
 800a028:	f7f6 fae6 	bl	80005f8 <__aeabi_dmul>
 800a02c:	4b82      	ldr	r3, [pc, #520]	; (800a238 <_dtoa_r+0x628>)
 800a02e:	2200      	movs	r2, #0
 800a030:	f7f6 f92c 	bl	800028c <__adddf3>
 800a034:	46d0      	mov	r8, sl
 800a036:	46d9      	mov	r9, fp
 800a038:	4682      	mov	sl, r0
 800a03a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a03e:	2e00      	cmp	r6, #0
 800a040:	d158      	bne.n	800a0f4 <_dtoa_r+0x4e4>
 800a042:	4b7e      	ldr	r3, [pc, #504]	; (800a23c <_dtoa_r+0x62c>)
 800a044:	2200      	movs	r2, #0
 800a046:	4640      	mov	r0, r8
 800a048:	4649      	mov	r1, r9
 800a04a:	f7f6 f91d 	bl	8000288 <__aeabi_dsub>
 800a04e:	4652      	mov	r2, sl
 800a050:	465b      	mov	r3, fp
 800a052:	4680      	mov	r8, r0
 800a054:	4689      	mov	r9, r1
 800a056:	f7f6 fd5f 	bl	8000b18 <__aeabi_dcmpgt>
 800a05a:	2800      	cmp	r0, #0
 800a05c:	f040 8295 	bne.w	800a58a <_dtoa_r+0x97a>
 800a060:	4652      	mov	r2, sl
 800a062:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a066:	4640      	mov	r0, r8
 800a068:	4649      	mov	r1, r9
 800a06a:	f7f6 fd37 	bl	8000adc <__aeabi_dcmplt>
 800a06e:	2800      	cmp	r0, #0
 800a070:	f040 8289 	bne.w	800a586 <_dtoa_r+0x976>
 800a074:	ec5b ab19 	vmov	sl, fp, d9
 800a078:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	f2c0 8148 	blt.w	800a310 <_dtoa_r+0x700>
 800a080:	9a00      	ldr	r2, [sp, #0]
 800a082:	2a0e      	cmp	r2, #14
 800a084:	f300 8144 	bgt.w	800a310 <_dtoa_r+0x700>
 800a088:	4b67      	ldr	r3, [pc, #412]	; (800a228 <_dtoa_r+0x618>)
 800a08a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a08e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a092:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a094:	2b00      	cmp	r3, #0
 800a096:	f280 80d5 	bge.w	800a244 <_dtoa_r+0x634>
 800a09a:	9b03      	ldr	r3, [sp, #12]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	f300 80d1 	bgt.w	800a244 <_dtoa_r+0x634>
 800a0a2:	f040 826f 	bne.w	800a584 <_dtoa_r+0x974>
 800a0a6:	4b65      	ldr	r3, [pc, #404]	; (800a23c <_dtoa_r+0x62c>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	4640      	mov	r0, r8
 800a0ac:	4649      	mov	r1, r9
 800a0ae:	f7f6 faa3 	bl	80005f8 <__aeabi_dmul>
 800a0b2:	4652      	mov	r2, sl
 800a0b4:	465b      	mov	r3, fp
 800a0b6:	f7f6 fd25 	bl	8000b04 <__aeabi_dcmpge>
 800a0ba:	9e03      	ldr	r6, [sp, #12]
 800a0bc:	4637      	mov	r7, r6
 800a0be:	2800      	cmp	r0, #0
 800a0c0:	f040 8245 	bne.w	800a54e <_dtoa_r+0x93e>
 800a0c4:	9d01      	ldr	r5, [sp, #4]
 800a0c6:	2331      	movs	r3, #49	; 0x31
 800a0c8:	f805 3b01 	strb.w	r3, [r5], #1
 800a0cc:	9b00      	ldr	r3, [sp, #0]
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	9300      	str	r3, [sp, #0]
 800a0d2:	e240      	b.n	800a556 <_dtoa_r+0x946>
 800a0d4:	07f2      	lsls	r2, r6, #31
 800a0d6:	d505      	bpl.n	800a0e4 <_dtoa_r+0x4d4>
 800a0d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0dc:	f7f6 fa8c 	bl	80005f8 <__aeabi_dmul>
 800a0e0:	3501      	adds	r5, #1
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	1076      	asrs	r6, r6, #1
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	e777      	b.n	8009fda <_dtoa_r+0x3ca>
 800a0ea:	2502      	movs	r5, #2
 800a0ec:	e779      	b.n	8009fe2 <_dtoa_r+0x3d2>
 800a0ee:	9f00      	ldr	r7, [sp, #0]
 800a0f0:	9e03      	ldr	r6, [sp, #12]
 800a0f2:	e794      	b.n	800a01e <_dtoa_r+0x40e>
 800a0f4:	9901      	ldr	r1, [sp, #4]
 800a0f6:	4b4c      	ldr	r3, [pc, #304]	; (800a228 <_dtoa_r+0x618>)
 800a0f8:	4431      	add	r1, r6
 800a0fa:	910d      	str	r1, [sp, #52]	; 0x34
 800a0fc:	9908      	ldr	r1, [sp, #32]
 800a0fe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a102:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a106:	2900      	cmp	r1, #0
 800a108:	d043      	beq.n	800a192 <_dtoa_r+0x582>
 800a10a:	494d      	ldr	r1, [pc, #308]	; (800a240 <_dtoa_r+0x630>)
 800a10c:	2000      	movs	r0, #0
 800a10e:	f7f6 fb9d 	bl	800084c <__aeabi_ddiv>
 800a112:	4652      	mov	r2, sl
 800a114:	465b      	mov	r3, fp
 800a116:	f7f6 f8b7 	bl	8000288 <__aeabi_dsub>
 800a11a:	9d01      	ldr	r5, [sp, #4]
 800a11c:	4682      	mov	sl, r0
 800a11e:	468b      	mov	fp, r1
 800a120:	4649      	mov	r1, r9
 800a122:	4640      	mov	r0, r8
 800a124:	f7f6 fd18 	bl	8000b58 <__aeabi_d2iz>
 800a128:	4606      	mov	r6, r0
 800a12a:	f7f6 f9fb 	bl	8000524 <__aeabi_i2d>
 800a12e:	4602      	mov	r2, r0
 800a130:	460b      	mov	r3, r1
 800a132:	4640      	mov	r0, r8
 800a134:	4649      	mov	r1, r9
 800a136:	f7f6 f8a7 	bl	8000288 <__aeabi_dsub>
 800a13a:	3630      	adds	r6, #48	; 0x30
 800a13c:	f805 6b01 	strb.w	r6, [r5], #1
 800a140:	4652      	mov	r2, sl
 800a142:	465b      	mov	r3, fp
 800a144:	4680      	mov	r8, r0
 800a146:	4689      	mov	r9, r1
 800a148:	f7f6 fcc8 	bl	8000adc <__aeabi_dcmplt>
 800a14c:	2800      	cmp	r0, #0
 800a14e:	d163      	bne.n	800a218 <_dtoa_r+0x608>
 800a150:	4642      	mov	r2, r8
 800a152:	464b      	mov	r3, r9
 800a154:	4936      	ldr	r1, [pc, #216]	; (800a230 <_dtoa_r+0x620>)
 800a156:	2000      	movs	r0, #0
 800a158:	f7f6 f896 	bl	8000288 <__aeabi_dsub>
 800a15c:	4652      	mov	r2, sl
 800a15e:	465b      	mov	r3, fp
 800a160:	f7f6 fcbc 	bl	8000adc <__aeabi_dcmplt>
 800a164:	2800      	cmp	r0, #0
 800a166:	f040 80b5 	bne.w	800a2d4 <_dtoa_r+0x6c4>
 800a16a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a16c:	429d      	cmp	r5, r3
 800a16e:	d081      	beq.n	800a074 <_dtoa_r+0x464>
 800a170:	4b30      	ldr	r3, [pc, #192]	; (800a234 <_dtoa_r+0x624>)
 800a172:	2200      	movs	r2, #0
 800a174:	4650      	mov	r0, sl
 800a176:	4659      	mov	r1, fp
 800a178:	f7f6 fa3e 	bl	80005f8 <__aeabi_dmul>
 800a17c:	4b2d      	ldr	r3, [pc, #180]	; (800a234 <_dtoa_r+0x624>)
 800a17e:	4682      	mov	sl, r0
 800a180:	468b      	mov	fp, r1
 800a182:	4640      	mov	r0, r8
 800a184:	4649      	mov	r1, r9
 800a186:	2200      	movs	r2, #0
 800a188:	f7f6 fa36 	bl	80005f8 <__aeabi_dmul>
 800a18c:	4680      	mov	r8, r0
 800a18e:	4689      	mov	r9, r1
 800a190:	e7c6      	b.n	800a120 <_dtoa_r+0x510>
 800a192:	4650      	mov	r0, sl
 800a194:	4659      	mov	r1, fp
 800a196:	f7f6 fa2f 	bl	80005f8 <__aeabi_dmul>
 800a19a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a19c:	9d01      	ldr	r5, [sp, #4]
 800a19e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1a0:	4682      	mov	sl, r0
 800a1a2:	468b      	mov	fp, r1
 800a1a4:	4649      	mov	r1, r9
 800a1a6:	4640      	mov	r0, r8
 800a1a8:	f7f6 fcd6 	bl	8000b58 <__aeabi_d2iz>
 800a1ac:	4606      	mov	r6, r0
 800a1ae:	f7f6 f9b9 	bl	8000524 <__aeabi_i2d>
 800a1b2:	3630      	adds	r6, #48	; 0x30
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	460b      	mov	r3, r1
 800a1b8:	4640      	mov	r0, r8
 800a1ba:	4649      	mov	r1, r9
 800a1bc:	f7f6 f864 	bl	8000288 <__aeabi_dsub>
 800a1c0:	f805 6b01 	strb.w	r6, [r5], #1
 800a1c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1c6:	429d      	cmp	r5, r3
 800a1c8:	4680      	mov	r8, r0
 800a1ca:	4689      	mov	r9, r1
 800a1cc:	f04f 0200 	mov.w	r2, #0
 800a1d0:	d124      	bne.n	800a21c <_dtoa_r+0x60c>
 800a1d2:	4b1b      	ldr	r3, [pc, #108]	; (800a240 <_dtoa_r+0x630>)
 800a1d4:	4650      	mov	r0, sl
 800a1d6:	4659      	mov	r1, fp
 800a1d8:	f7f6 f858 	bl	800028c <__adddf3>
 800a1dc:	4602      	mov	r2, r0
 800a1de:	460b      	mov	r3, r1
 800a1e0:	4640      	mov	r0, r8
 800a1e2:	4649      	mov	r1, r9
 800a1e4:	f7f6 fc98 	bl	8000b18 <__aeabi_dcmpgt>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d173      	bne.n	800a2d4 <_dtoa_r+0x6c4>
 800a1ec:	4652      	mov	r2, sl
 800a1ee:	465b      	mov	r3, fp
 800a1f0:	4913      	ldr	r1, [pc, #76]	; (800a240 <_dtoa_r+0x630>)
 800a1f2:	2000      	movs	r0, #0
 800a1f4:	f7f6 f848 	bl	8000288 <__aeabi_dsub>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	460b      	mov	r3, r1
 800a1fc:	4640      	mov	r0, r8
 800a1fe:	4649      	mov	r1, r9
 800a200:	f7f6 fc6c 	bl	8000adc <__aeabi_dcmplt>
 800a204:	2800      	cmp	r0, #0
 800a206:	f43f af35 	beq.w	800a074 <_dtoa_r+0x464>
 800a20a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a20c:	1e6b      	subs	r3, r5, #1
 800a20e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a210:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a214:	2b30      	cmp	r3, #48	; 0x30
 800a216:	d0f8      	beq.n	800a20a <_dtoa_r+0x5fa>
 800a218:	9700      	str	r7, [sp, #0]
 800a21a:	e049      	b.n	800a2b0 <_dtoa_r+0x6a0>
 800a21c:	4b05      	ldr	r3, [pc, #20]	; (800a234 <_dtoa_r+0x624>)
 800a21e:	f7f6 f9eb 	bl	80005f8 <__aeabi_dmul>
 800a222:	4680      	mov	r8, r0
 800a224:	4689      	mov	r9, r1
 800a226:	e7bd      	b.n	800a1a4 <_dtoa_r+0x594>
 800a228:	0800cd38 	.word	0x0800cd38
 800a22c:	0800cd10 	.word	0x0800cd10
 800a230:	3ff00000 	.word	0x3ff00000
 800a234:	40240000 	.word	0x40240000
 800a238:	401c0000 	.word	0x401c0000
 800a23c:	40140000 	.word	0x40140000
 800a240:	3fe00000 	.word	0x3fe00000
 800a244:	9d01      	ldr	r5, [sp, #4]
 800a246:	4656      	mov	r6, sl
 800a248:	465f      	mov	r7, fp
 800a24a:	4642      	mov	r2, r8
 800a24c:	464b      	mov	r3, r9
 800a24e:	4630      	mov	r0, r6
 800a250:	4639      	mov	r1, r7
 800a252:	f7f6 fafb 	bl	800084c <__aeabi_ddiv>
 800a256:	f7f6 fc7f 	bl	8000b58 <__aeabi_d2iz>
 800a25a:	4682      	mov	sl, r0
 800a25c:	f7f6 f962 	bl	8000524 <__aeabi_i2d>
 800a260:	4642      	mov	r2, r8
 800a262:	464b      	mov	r3, r9
 800a264:	f7f6 f9c8 	bl	80005f8 <__aeabi_dmul>
 800a268:	4602      	mov	r2, r0
 800a26a:	460b      	mov	r3, r1
 800a26c:	4630      	mov	r0, r6
 800a26e:	4639      	mov	r1, r7
 800a270:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a274:	f7f6 f808 	bl	8000288 <__aeabi_dsub>
 800a278:	f805 6b01 	strb.w	r6, [r5], #1
 800a27c:	9e01      	ldr	r6, [sp, #4]
 800a27e:	9f03      	ldr	r7, [sp, #12]
 800a280:	1bae      	subs	r6, r5, r6
 800a282:	42b7      	cmp	r7, r6
 800a284:	4602      	mov	r2, r0
 800a286:	460b      	mov	r3, r1
 800a288:	d135      	bne.n	800a2f6 <_dtoa_r+0x6e6>
 800a28a:	f7f5 ffff 	bl	800028c <__adddf3>
 800a28e:	4642      	mov	r2, r8
 800a290:	464b      	mov	r3, r9
 800a292:	4606      	mov	r6, r0
 800a294:	460f      	mov	r7, r1
 800a296:	f7f6 fc3f 	bl	8000b18 <__aeabi_dcmpgt>
 800a29a:	b9d0      	cbnz	r0, 800a2d2 <_dtoa_r+0x6c2>
 800a29c:	4642      	mov	r2, r8
 800a29e:	464b      	mov	r3, r9
 800a2a0:	4630      	mov	r0, r6
 800a2a2:	4639      	mov	r1, r7
 800a2a4:	f7f6 fc10 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2a8:	b110      	cbz	r0, 800a2b0 <_dtoa_r+0x6a0>
 800a2aa:	f01a 0f01 	tst.w	sl, #1
 800a2ae:	d110      	bne.n	800a2d2 <_dtoa_r+0x6c2>
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	ee18 1a10 	vmov	r1, s16
 800a2b6:	f000 fe75 	bl	800afa4 <_Bfree>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9800      	ldr	r0, [sp, #0]
 800a2be:	702b      	strb	r3, [r5, #0]
 800a2c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	6018      	str	r0, [r3, #0]
 800a2c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f43f acf1 	beq.w	8009cb0 <_dtoa_r+0xa0>
 800a2ce:	601d      	str	r5, [r3, #0]
 800a2d0:	e4ee      	b.n	8009cb0 <_dtoa_r+0xa0>
 800a2d2:	9f00      	ldr	r7, [sp, #0]
 800a2d4:	462b      	mov	r3, r5
 800a2d6:	461d      	mov	r5, r3
 800a2d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2dc:	2a39      	cmp	r2, #57	; 0x39
 800a2de:	d106      	bne.n	800a2ee <_dtoa_r+0x6de>
 800a2e0:	9a01      	ldr	r2, [sp, #4]
 800a2e2:	429a      	cmp	r2, r3
 800a2e4:	d1f7      	bne.n	800a2d6 <_dtoa_r+0x6c6>
 800a2e6:	9901      	ldr	r1, [sp, #4]
 800a2e8:	2230      	movs	r2, #48	; 0x30
 800a2ea:	3701      	adds	r7, #1
 800a2ec:	700a      	strb	r2, [r1, #0]
 800a2ee:	781a      	ldrb	r2, [r3, #0]
 800a2f0:	3201      	adds	r2, #1
 800a2f2:	701a      	strb	r2, [r3, #0]
 800a2f4:	e790      	b.n	800a218 <_dtoa_r+0x608>
 800a2f6:	4ba6      	ldr	r3, [pc, #664]	; (800a590 <_dtoa_r+0x980>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f7f6 f97d 	bl	80005f8 <__aeabi_dmul>
 800a2fe:	2200      	movs	r2, #0
 800a300:	2300      	movs	r3, #0
 800a302:	4606      	mov	r6, r0
 800a304:	460f      	mov	r7, r1
 800a306:	f7f6 fbdf 	bl	8000ac8 <__aeabi_dcmpeq>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	d09d      	beq.n	800a24a <_dtoa_r+0x63a>
 800a30e:	e7cf      	b.n	800a2b0 <_dtoa_r+0x6a0>
 800a310:	9a08      	ldr	r2, [sp, #32]
 800a312:	2a00      	cmp	r2, #0
 800a314:	f000 80d7 	beq.w	800a4c6 <_dtoa_r+0x8b6>
 800a318:	9a06      	ldr	r2, [sp, #24]
 800a31a:	2a01      	cmp	r2, #1
 800a31c:	f300 80ba 	bgt.w	800a494 <_dtoa_r+0x884>
 800a320:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a322:	2a00      	cmp	r2, #0
 800a324:	f000 80b2 	beq.w	800a48c <_dtoa_r+0x87c>
 800a328:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a32c:	9e07      	ldr	r6, [sp, #28]
 800a32e:	9d04      	ldr	r5, [sp, #16]
 800a330:	9a04      	ldr	r2, [sp, #16]
 800a332:	441a      	add	r2, r3
 800a334:	9204      	str	r2, [sp, #16]
 800a336:	9a05      	ldr	r2, [sp, #20]
 800a338:	2101      	movs	r1, #1
 800a33a:	441a      	add	r2, r3
 800a33c:	4620      	mov	r0, r4
 800a33e:	9205      	str	r2, [sp, #20]
 800a340:	f000 ff32 	bl	800b1a8 <__i2b>
 800a344:	4607      	mov	r7, r0
 800a346:	2d00      	cmp	r5, #0
 800a348:	dd0c      	ble.n	800a364 <_dtoa_r+0x754>
 800a34a:	9b05      	ldr	r3, [sp, #20]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	dd09      	ble.n	800a364 <_dtoa_r+0x754>
 800a350:	42ab      	cmp	r3, r5
 800a352:	9a04      	ldr	r2, [sp, #16]
 800a354:	bfa8      	it	ge
 800a356:	462b      	movge	r3, r5
 800a358:	1ad2      	subs	r2, r2, r3
 800a35a:	9204      	str	r2, [sp, #16]
 800a35c:	9a05      	ldr	r2, [sp, #20]
 800a35e:	1aed      	subs	r5, r5, r3
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	9305      	str	r3, [sp, #20]
 800a364:	9b07      	ldr	r3, [sp, #28]
 800a366:	b31b      	cbz	r3, 800a3b0 <_dtoa_r+0x7a0>
 800a368:	9b08      	ldr	r3, [sp, #32]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	f000 80af 	beq.w	800a4ce <_dtoa_r+0x8be>
 800a370:	2e00      	cmp	r6, #0
 800a372:	dd13      	ble.n	800a39c <_dtoa_r+0x78c>
 800a374:	4639      	mov	r1, r7
 800a376:	4632      	mov	r2, r6
 800a378:	4620      	mov	r0, r4
 800a37a:	f000 ffd5 	bl	800b328 <__pow5mult>
 800a37e:	ee18 2a10 	vmov	r2, s16
 800a382:	4601      	mov	r1, r0
 800a384:	4607      	mov	r7, r0
 800a386:	4620      	mov	r0, r4
 800a388:	f000 ff24 	bl	800b1d4 <__multiply>
 800a38c:	ee18 1a10 	vmov	r1, s16
 800a390:	4680      	mov	r8, r0
 800a392:	4620      	mov	r0, r4
 800a394:	f000 fe06 	bl	800afa4 <_Bfree>
 800a398:	ee08 8a10 	vmov	s16, r8
 800a39c:	9b07      	ldr	r3, [sp, #28]
 800a39e:	1b9a      	subs	r2, r3, r6
 800a3a0:	d006      	beq.n	800a3b0 <_dtoa_r+0x7a0>
 800a3a2:	ee18 1a10 	vmov	r1, s16
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f000 ffbe 	bl	800b328 <__pow5mult>
 800a3ac:	ee08 0a10 	vmov	s16, r0
 800a3b0:	2101      	movs	r1, #1
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	f000 fef8 	bl	800b1a8 <__i2b>
 800a3b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	4606      	mov	r6, r0
 800a3be:	f340 8088 	ble.w	800a4d2 <_dtoa_r+0x8c2>
 800a3c2:	461a      	mov	r2, r3
 800a3c4:	4601      	mov	r1, r0
 800a3c6:	4620      	mov	r0, r4
 800a3c8:	f000 ffae 	bl	800b328 <__pow5mult>
 800a3cc:	9b06      	ldr	r3, [sp, #24]
 800a3ce:	2b01      	cmp	r3, #1
 800a3d0:	4606      	mov	r6, r0
 800a3d2:	f340 8081 	ble.w	800a4d8 <_dtoa_r+0x8c8>
 800a3d6:	f04f 0800 	mov.w	r8, #0
 800a3da:	6933      	ldr	r3, [r6, #16]
 800a3dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a3e0:	6918      	ldr	r0, [r3, #16]
 800a3e2:	f000 fe91 	bl	800b108 <__hi0bits>
 800a3e6:	f1c0 0020 	rsb	r0, r0, #32
 800a3ea:	9b05      	ldr	r3, [sp, #20]
 800a3ec:	4418      	add	r0, r3
 800a3ee:	f010 001f 	ands.w	r0, r0, #31
 800a3f2:	f000 8092 	beq.w	800a51a <_dtoa_r+0x90a>
 800a3f6:	f1c0 0320 	rsb	r3, r0, #32
 800a3fa:	2b04      	cmp	r3, #4
 800a3fc:	f340 808a 	ble.w	800a514 <_dtoa_r+0x904>
 800a400:	f1c0 001c 	rsb	r0, r0, #28
 800a404:	9b04      	ldr	r3, [sp, #16]
 800a406:	4403      	add	r3, r0
 800a408:	9304      	str	r3, [sp, #16]
 800a40a:	9b05      	ldr	r3, [sp, #20]
 800a40c:	4403      	add	r3, r0
 800a40e:	4405      	add	r5, r0
 800a410:	9305      	str	r3, [sp, #20]
 800a412:	9b04      	ldr	r3, [sp, #16]
 800a414:	2b00      	cmp	r3, #0
 800a416:	dd07      	ble.n	800a428 <_dtoa_r+0x818>
 800a418:	ee18 1a10 	vmov	r1, s16
 800a41c:	461a      	mov	r2, r3
 800a41e:	4620      	mov	r0, r4
 800a420:	f000 ffdc 	bl	800b3dc <__lshift>
 800a424:	ee08 0a10 	vmov	s16, r0
 800a428:	9b05      	ldr	r3, [sp, #20]
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	dd05      	ble.n	800a43a <_dtoa_r+0x82a>
 800a42e:	4631      	mov	r1, r6
 800a430:	461a      	mov	r2, r3
 800a432:	4620      	mov	r0, r4
 800a434:	f000 ffd2 	bl	800b3dc <__lshift>
 800a438:	4606      	mov	r6, r0
 800a43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d06e      	beq.n	800a51e <_dtoa_r+0x90e>
 800a440:	ee18 0a10 	vmov	r0, s16
 800a444:	4631      	mov	r1, r6
 800a446:	f001 f839 	bl	800b4bc <__mcmp>
 800a44a:	2800      	cmp	r0, #0
 800a44c:	da67      	bge.n	800a51e <_dtoa_r+0x90e>
 800a44e:	9b00      	ldr	r3, [sp, #0]
 800a450:	3b01      	subs	r3, #1
 800a452:	ee18 1a10 	vmov	r1, s16
 800a456:	9300      	str	r3, [sp, #0]
 800a458:	220a      	movs	r2, #10
 800a45a:	2300      	movs	r3, #0
 800a45c:	4620      	mov	r0, r4
 800a45e:	f000 fdc3 	bl	800afe8 <__multadd>
 800a462:	9b08      	ldr	r3, [sp, #32]
 800a464:	ee08 0a10 	vmov	s16, r0
 800a468:	2b00      	cmp	r3, #0
 800a46a:	f000 81b1 	beq.w	800a7d0 <_dtoa_r+0xbc0>
 800a46e:	2300      	movs	r3, #0
 800a470:	4639      	mov	r1, r7
 800a472:	220a      	movs	r2, #10
 800a474:	4620      	mov	r0, r4
 800a476:	f000 fdb7 	bl	800afe8 <__multadd>
 800a47a:	9b02      	ldr	r3, [sp, #8]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	4607      	mov	r7, r0
 800a480:	f300 808e 	bgt.w	800a5a0 <_dtoa_r+0x990>
 800a484:	9b06      	ldr	r3, [sp, #24]
 800a486:	2b02      	cmp	r3, #2
 800a488:	dc51      	bgt.n	800a52e <_dtoa_r+0x91e>
 800a48a:	e089      	b.n	800a5a0 <_dtoa_r+0x990>
 800a48c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a48e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a492:	e74b      	b.n	800a32c <_dtoa_r+0x71c>
 800a494:	9b03      	ldr	r3, [sp, #12]
 800a496:	1e5e      	subs	r6, r3, #1
 800a498:	9b07      	ldr	r3, [sp, #28]
 800a49a:	42b3      	cmp	r3, r6
 800a49c:	bfbf      	itttt	lt
 800a49e:	9b07      	ldrlt	r3, [sp, #28]
 800a4a0:	9607      	strlt	r6, [sp, #28]
 800a4a2:	1af2      	sublt	r2, r6, r3
 800a4a4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a4a6:	bfb6      	itet	lt
 800a4a8:	189b      	addlt	r3, r3, r2
 800a4aa:	1b9e      	subge	r6, r3, r6
 800a4ac:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a4ae:	9b03      	ldr	r3, [sp, #12]
 800a4b0:	bfb8      	it	lt
 800a4b2:	2600      	movlt	r6, #0
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	bfb7      	itett	lt
 800a4b8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a4bc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a4c0:	1a9d      	sublt	r5, r3, r2
 800a4c2:	2300      	movlt	r3, #0
 800a4c4:	e734      	b.n	800a330 <_dtoa_r+0x720>
 800a4c6:	9e07      	ldr	r6, [sp, #28]
 800a4c8:	9d04      	ldr	r5, [sp, #16]
 800a4ca:	9f08      	ldr	r7, [sp, #32]
 800a4cc:	e73b      	b.n	800a346 <_dtoa_r+0x736>
 800a4ce:	9a07      	ldr	r2, [sp, #28]
 800a4d0:	e767      	b.n	800a3a2 <_dtoa_r+0x792>
 800a4d2:	9b06      	ldr	r3, [sp, #24]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	dc18      	bgt.n	800a50a <_dtoa_r+0x8fa>
 800a4d8:	f1ba 0f00 	cmp.w	sl, #0
 800a4dc:	d115      	bne.n	800a50a <_dtoa_r+0x8fa>
 800a4de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a4e2:	b993      	cbnz	r3, 800a50a <_dtoa_r+0x8fa>
 800a4e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a4e8:	0d1b      	lsrs	r3, r3, #20
 800a4ea:	051b      	lsls	r3, r3, #20
 800a4ec:	b183      	cbz	r3, 800a510 <_dtoa_r+0x900>
 800a4ee:	9b04      	ldr	r3, [sp, #16]
 800a4f0:	3301      	adds	r3, #1
 800a4f2:	9304      	str	r3, [sp, #16]
 800a4f4:	9b05      	ldr	r3, [sp, #20]
 800a4f6:	3301      	adds	r3, #1
 800a4f8:	9305      	str	r3, [sp, #20]
 800a4fa:	f04f 0801 	mov.w	r8, #1
 800a4fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a500:	2b00      	cmp	r3, #0
 800a502:	f47f af6a 	bne.w	800a3da <_dtoa_r+0x7ca>
 800a506:	2001      	movs	r0, #1
 800a508:	e76f      	b.n	800a3ea <_dtoa_r+0x7da>
 800a50a:	f04f 0800 	mov.w	r8, #0
 800a50e:	e7f6      	b.n	800a4fe <_dtoa_r+0x8ee>
 800a510:	4698      	mov	r8, r3
 800a512:	e7f4      	b.n	800a4fe <_dtoa_r+0x8ee>
 800a514:	f43f af7d 	beq.w	800a412 <_dtoa_r+0x802>
 800a518:	4618      	mov	r0, r3
 800a51a:	301c      	adds	r0, #28
 800a51c:	e772      	b.n	800a404 <_dtoa_r+0x7f4>
 800a51e:	9b03      	ldr	r3, [sp, #12]
 800a520:	2b00      	cmp	r3, #0
 800a522:	dc37      	bgt.n	800a594 <_dtoa_r+0x984>
 800a524:	9b06      	ldr	r3, [sp, #24]
 800a526:	2b02      	cmp	r3, #2
 800a528:	dd34      	ble.n	800a594 <_dtoa_r+0x984>
 800a52a:	9b03      	ldr	r3, [sp, #12]
 800a52c:	9302      	str	r3, [sp, #8]
 800a52e:	9b02      	ldr	r3, [sp, #8]
 800a530:	b96b      	cbnz	r3, 800a54e <_dtoa_r+0x93e>
 800a532:	4631      	mov	r1, r6
 800a534:	2205      	movs	r2, #5
 800a536:	4620      	mov	r0, r4
 800a538:	f000 fd56 	bl	800afe8 <__multadd>
 800a53c:	4601      	mov	r1, r0
 800a53e:	4606      	mov	r6, r0
 800a540:	ee18 0a10 	vmov	r0, s16
 800a544:	f000 ffba 	bl	800b4bc <__mcmp>
 800a548:	2800      	cmp	r0, #0
 800a54a:	f73f adbb 	bgt.w	800a0c4 <_dtoa_r+0x4b4>
 800a54e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a550:	9d01      	ldr	r5, [sp, #4]
 800a552:	43db      	mvns	r3, r3
 800a554:	9300      	str	r3, [sp, #0]
 800a556:	f04f 0800 	mov.w	r8, #0
 800a55a:	4631      	mov	r1, r6
 800a55c:	4620      	mov	r0, r4
 800a55e:	f000 fd21 	bl	800afa4 <_Bfree>
 800a562:	2f00      	cmp	r7, #0
 800a564:	f43f aea4 	beq.w	800a2b0 <_dtoa_r+0x6a0>
 800a568:	f1b8 0f00 	cmp.w	r8, #0
 800a56c:	d005      	beq.n	800a57a <_dtoa_r+0x96a>
 800a56e:	45b8      	cmp	r8, r7
 800a570:	d003      	beq.n	800a57a <_dtoa_r+0x96a>
 800a572:	4641      	mov	r1, r8
 800a574:	4620      	mov	r0, r4
 800a576:	f000 fd15 	bl	800afa4 <_Bfree>
 800a57a:	4639      	mov	r1, r7
 800a57c:	4620      	mov	r0, r4
 800a57e:	f000 fd11 	bl	800afa4 <_Bfree>
 800a582:	e695      	b.n	800a2b0 <_dtoa_r+0x6a0>
 800a584:	2600      	movs	r6, #0
 800a586:	4637      	mov	r7, r6
 800a588:	e7e1      	b.n	800a54e <_dtoa_r+0x93e>
 800a58a:	9700      	str	r7, [sp, #0]
 800a58c:	4637      	mov	r7, r6
 800a58e:	e599      	b.n	800a0c4 <_dtoa_r+0x4b4>
 800a590:	40240000 	.word	0x40240000
 800a594:	9b08      	ldr	r3, [sp, #32]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f000 80ca 	beq.w	800a730 <_dtoa_r+0xb20>
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	9302      	str	r3, [sp, #8]
 800a5a0:	2d00      	cmp	r5, #0
 800a5a2:	dd05      	ble.n	800a5b0 <_dtoa_r+0x9a0>
 800a5a4:	4639      	mov	r1, r7
 800a5a6:	462a      	mov	r2, r5
 800a5a8:	4620      	mov	r0, r4
 800a5aa:	f000 ff17 	bl	800b3dc <__lshift>
 800a5ae:	4607      	mov	r7, r0
 800a5b0:	f1b8 0f00 	cmp.w	r8, #0
 800a5b4:	d05b      	beq.n	800a66e <_dtoa_r+0xa5e>
 800a5b6:	6879      	ldr	r1, [r7, #4]
 800a5b8:	4620      	mov	r0, r4
 800a5ba:	f000 fcb3 	bl	800af24 <_Balloc>
 800a5be:	4605      	mov	r5, r0
 800a5c0:	b928      	cbnz	r0, 800a5ce <_dtoa_r+0x9be>
 800a5c2:	4b87      	ldr	r3, [pc, #540]	; (800a7e0 <_dtoa_r+0xbd0>)
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a5ca:	f7ff bb3b 	b.w	8009c44 <_dtoa_r+0x34>
 800a5ce:	693a      	ldr	r2, [r7, #16]
 800a5d0:	3202      	adds	r2, #2
 800a5d2:	0092      	lsls	r2, r2, #2
 800a5d4:	f107 010c 	add.w	r1, r7, #12
 800a5d8:	300c      	adds	r0, #12
 800a5da:	f000 fc95 	bl	800af08 <memcpy>
 800a5de:	2201      	movs	r2, #1
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4620      	mov	r0, r4
 800a5e4:	f000 fefa 	bl	800b3dc <__lshift>
 800a5e8:	9b01      	ldr	r3, [sp, #4]
 800a5ea:	f103 0901 	add.w	r9, r3, #1
 800a5ee:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a5f2:	4413      	add	r3, r2
 800a5f4:	9305      	str	r3, [sp, #20]
 800a5f6:	f00a 0301 	and.w	r3, sl, #1
 800a5fa:	46b8      	mov	r8, r7
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	4607      	mov	r7, r0
 800a600:	4631      	mov	r1, r6
 800a602:	ee18 0a10 	vmov	r0, s16
 800a606:	f7ff fa77 	bl	8009af8 <quorem>
 800a60a:	4641      	mov	r1, r8
 800a60c:	9002      	str	r0, [sp, #8]
 800a60e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a612:	ee18 0a10 	vmov	r0, s16
 800a616:	f000 ff51 	bl	800b4bc <__mcmp>
 800a61a:	463a      	mov	r2, r7
 800a61c:	9003      	str	r0, [sp, #12]
 800a61e:	4631      	mov	r1, r6
 800a620:	4620      	mov	r0, r4
 800a622:	f000 ff67 	bl	800b4f4 <__mdiff>
 800a626:	68c2      	ldr	r2, [r0, #12]
 800a628:	f109 3bff 	add.w	fp, r9, #4294967295
 800a62c:	4605      	mov	r5, r0
 800a62e:	bb02      	cbnz	r2, 800a672 <_dtoa_r+0xa62>
 800a630:	4601      	mov	r1, r0
 800a632:	ee18 0a10 	vmov	r0, s16
 800a636:	f000 ff41 	bl	800b4bc <__mcmp>
 800a63a:	4602      	mov	r2, r0
 800a63c:	4629      	mov	r1, r5
 800a63e:	4620      	mov	r0, r4
 800a640:	9207      	str	r2, [sp, #28]
 800a642:	f000 fcaf 	bl	800afa4 <_Bfree>
 800a646:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a64a:	ea43 0102 	orr.w	r1, r3, r2
 800a64e:	9b04      	ldr	r3, [sp, #16]
 800a650:	430b      	orrs	r3, r1
 800a652:	464d      	mov	r5, r9
 800a654:	d10f      	bne.n	800a676 <_dtoa_r+0xa66>
 800a656:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a65a:	d02a      	beq.n	800a6b2 <_dtoa_r+0xaa2>
 800a65c:	9b03      	ldr	r3, [sp, #12]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	dd02      	ble.n	800a668 <_dtoa_r+0xa58>
 800a662:	9b02      	ldr	r3, [sp, #8]
 800a664:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a668:	f88b a000 	strb.w	sl, [fp]
 800a66c:	e775      	b.n	800a55a <_dtoa_r+0x94a>
 800a66e:	4638      	mov	r0, r7
 800a670:	e7ba      	b.n	800a5e8 <_dtoa_r+0x9d8>
 800a672:	2201      	movs	r2, #1
 800a674:	e7e2      	b.n	800a63c <_dtoa_r+0xa2c>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	db04      	blt.n	800a686 <_dtoa_r+0xa76>
 800a67c:	9906      	ldr	r1, [sp, #24]
 800a67e:	430b      	orrs	r3, r1
 800a680:	9904      	ldr	r1, [sp, #16]
 800a682:	430b      	orrs	r3, r1
 800a684:	d122      	bne.n	800a6cc <_dtoa_r+0xabc>
 800a686:	2a00      	cmp	r2, #0
 800a688:	ddee      	ble.n	800a668 <_dtoa_r+0xa58>
 800a68a:	ee18 1a10 	vmov	r1, s16
 800a68e:	2201      	movs	r2, #1
 800a690:	4620      	mov	r0, r4
 800a692:	f000 fea3 	bl	800b3dc <__lshift>
 800a696:	4631      	mov	r1, r6
 800a698:	ee08 0a10 	vmov	s16, r0
 800a69c:	f000 ff0e 	bl	800b4bc <__mcmp>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	dc03      	bgt.n	800a6ac <_dtoa_r+0xa9c>
 800a6a4:	d1e0      	bne.n	800a668 <_dtoa_r+0xa58>
 800a6a6:	f01a 0f01 	tst.w	sl, #1
 800a6aa:	d0dd      	beq.n	800a668 <_dtoa_r+0xa58>
 800a6ac:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6b0:	d1d7      	bne.n	800a662 <_dtoa_r+0xa52>
 800a6b2:	2339      	movs	r3, #57	; 0x39
 800a6b4:	f88b 3000 	strb.w	r3, [fp]
 800a6b8:	462b      	mov	r3, r5
 800a6ba:	461d      	mov	r5, r3
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6c2:	2a39      	cmp	r2, #57	; 0x39
 800a6c4:	d071      	beq.n	800a7aa <_dtoa_r+0xb9a>
 800a6c6:	3201      	adds	r2, #1
 800a6c8:	701a      	strb	r2, [r3, #0]
 800a6ca:	e746      	b.n	800a55a <_dtoa_r+0x94a>
 800a6cc:	2a00      	cmp	r2, #0
 800a6ce:	dd07      	ble.n	800a6e0 <_dtoa_r+0xad0>
 800a6d0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a6d4:	d0ed      	beq.n	800a6b2 <_dtoa_r+0xaa2>
 800a6d6:	f10a 0301 	add.w	r3, sl, #1
 800a6da:	f88b 3000 	strb.w	r3, [fp]
 800a6de:	e73c      	b.n	800a55a <_dtoa_r+0x94a>
 800a6e0:	9b05      	ldr	r3, [sp, #20]
 800a6e2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a6e6:	4599      	cmp	r9, r3
 800a6e8:	d047      	beq.n	800a77a <_dtoa_r+0xb6a>
 800a6ea:	ee18 1a10 	vmov	r1, s16
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	220a      	movs	r2, #10
 800a6f2:	4620      	mov	r0, r4
 800a6f4:	f000 fc78 	bl	800afe8 <__multadd>
 800a6f8:	45b8      	cmp	r8, r7
 800a6fa:	ee08 0a10 	vmov	s16, r0
 800a6fe:	f04f 0300 	mov.w	r3, #0
 800a702:	f04f 020a 	mov.w	r2, #10
 800a706:	4641      	mov	r1, r8
 800a708:	4620      	mov	r0, r4
 800a70a:	d106      	bne.n	800a71a <_dtoa_r+0xb0a>
 800a70c:	f000 fc6c 	bl	800afe8 <__multadd>
 800a710:	4680      	mov	r8, r0
 800a712:	4607      	mov	r7, r0
 800a714:	f109 0901 	add.w	r9, r9, #1
 800a718:	e772      	b.n	800a600 <_dtoa_r+0x9f0>
 800a71a:	f000 fc65 	bl	800afe8 <__multadd>
 800a71e:	4639      	mov	r1, r7
 800a720:	4680      	mov	r8, r0
 800a722:	2300      	movs	r3, #0
 800a724:	220a      	movs	r2, #10
 800a726:	4620      	mov	r0, r4
 800a728:	f000 fc5e 	bl	800afe8 <__multadd>
 800a72c:	4607      	mov	r7, r0
 800a72e:	e7f1      	b.n	800a714 <_dtoa_r+0xb04>
 800a730:	9b03      	ldr	r3, [sp, #12]
 800a732:	9302      	str	r3, [sp, #8]
 800a734:	9d01      	ldr	r5, [sp, #4]
 800a736:	ee18 0a10 	vmov	r0, s16
 800a73a:	4631      	mov	r1, r6
 800a73c:	f7ff f9dc 	bl	8009af8 <quorem>
 800a740:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a744:	9b01      	ldr	r3, [sp, #4]
 800a746:	f805 ab01 	strb.w	sl, [r5], #1
 800a74a:	1aea      	subs	r2, r5, r3
 800a74c:	9b02      	ldr	r3, [sp, #8]
 800a74e:	4293      	cmp	r3, r2
 800a750:	dd09      	ble.n	800a766 <_dtoa_r+0xb56>
 800a752:	ee18 1a10 	vmov	r1, s16
 800a756:	2300      	movs	r3, #0
 800a758:	220a      	movs	r2, #10
 800a75a:	4620      	mov	r0, r4
 800a75c:	f000 fc44 	bl	800afe8 <__multadd>
 800a760:	ee08 0a10 	vmov	s16, r0
 800a764:	e7e7      	b.n	800a736 <_dtoa_r+0xb26>
 800a766:	9b02      	ldr	r3, [sp, #8]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	bfc8      	it	gt
 800a76c:	461d      	movgt	r5, r3
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	bfd8      	it	le
 800a772:	2501      	movle	r5, #1
 800a774:	441d      	add	r5, r3
 800a776:	f04f 0800 	mov.w	r8, #0
 800a77a:	ee18 1a10 	vmov	r1, s16
 800a77e:	2201      	movs	r2, #1
 800a780:	4620      	mov	r0, r4
 800a782:	f000 fe2b 	bl	800b3dc <__lshift>
 800a786:	4631      	mov	r1, r6
 800a788:	ee08 0a10 	vmov	s16, r0
 800a78c:	f000 fe96 	bl	800b4bc <__mcmp>
 800a790:	2800      	cmp	r0, #0
 800a792:	dc91      	bgt.n	800a6b8 <_dtoa_r+0xaa8>
 800a794:	d102      	bne.n	800a79c <_dtoa_r+0xb8c>
 800a796:	f01a 0f01 	tst.w	sl, #1
 800a79a:	d18d      	bne.n	800a6b8 <_dtoa_r+0xaa8>
 800a79c:	462b      	mov	r3, r5
 800a79e:	461d      	mov	r5, r3
 800a7a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7a4:	2a30      	cmp	r2, #48	; 0x30
 800a7a6:	d0fa      	beq.n	800a79e <_dtoa_r+0xb8e>
 800a7a8:	e6d7      	b.n	800a55a <_dtoa_r+0x94a>
 800a7aa:	9a01      	ldr	r2, [sp, #4]
 800a7ac:	429a      	cmp	r2, r3
 800a7ae:	d184      	bne.n	800a6ba <_dtoa_r+0xaaa>
 800a7b0:	9b00      	ldr	r3, [sp, #0]
 800a7b2:	3301      	adds	r3, #1
 800a7b4:	9300      	str	r3, [sp, #0]
 800a7b6:	2331      	movs	r3, #49	; 0x31
 800a7b8:	7013      	strb	r3, [r2, #0]
 800a7ba:	e6ce      	b.n	800a55a <_dtoa_r+0x94a>
 800a7bc:	4b09      	ldr	r3, [pc, #36]	; (800a7e4 <_dtoa_r+0xbd4>)
 800a7be:	f7ff ba95 	b.w	8009cec <_dtoa_r+0xdc>
 800a7c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	f47f aa6e 	bne.w	8009ca6 <_dtoa_r+0x96>
 800a7ca:	4b07      	ldr	r3, [pc, #28]	; (800a7e8 <_dtoa_r+0xbd8>)
 800a7cc:	f7ff ba8e 	b.w	8009cec <_dtoa_r+0xdc>
 800a7d0:	9b02      	ldr	r3, [sp, #8]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	dcae      	bgt.n	800a734 <_dtoa_r+0xb24>
 800a7d6:	9b06      	ldr	r3, [sp, #24]
 800a7d8:	2b02      	cmp	r3, #2
 800a7da:	f73f aea8 	bgt.w	800a52e <_dtoa_r+0x91e>
 800a7de:	e7a9      	b.n	800a734 <_dtoa_r+0xb24>
 800a7e0:	0800cc28 	.word	0x0800cc28
 800a7e4:	0800ca2c 	.word	0x0800ca2c
 800a7e8:	0800cba9 	.word	0x0800cba9

0800a7ec <rshift>:
 800a7ec:	6903      	ldr	r3, [r0, #16]
 800a7ee:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a7f2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7f6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a7fa:	f100 0414 	add.w	r4, r0, #20
 800a7fe:	dd45      	ble.n	800a88c <rshift+0xa0>
 800a800:	f011 011f 	ands.w	r1, r1, #31
 800a804:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a808:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a80c:	d10c      	bne.n	800a828 <rshift+0x3c>
 800a80e:	f100 0710 	add.w	r7, r0, #16
 800a812:	4629      	mov	r1, r5
 800a814:	42b1      	cmp	r1, r6
 800a816:	d334      	bcc.n	800a882 <rshift+0x96>
 800a818:	1a9b      	subs	r3, r3, r2
 800a81a:	009b      	lsls	r3, r3, #2
 800a81c:	1eea      	subs	r2, r5, #3
 800a81e:	4296      	cmp	r6, r2
 800a820:	bf38      	it	cc
 800a822:	2300      	movcc	r3, #0
 800a824:	4423      	add	r3, r4
 800a826:	e015      	b.n	800a854 <rshift+0x68>
 800a828:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a82c:	f1c1 0820 	rsb	r8, r1, #32
 800a830:	40cf      	lsrs	r7, r1
 800a832:	f105 0e04 	add.w	lr, r5, #4
 800a836:	46a1      	mov	r9, r4
 800a838:	4576      	cmp	r6, lr
 800a83a:	46f4      	mov	ip, lr
 800a83c:	d815      	bhi.n	800a86a <rshift+0x7e>
 800a83e:	1a9a      	subs	r2, r3, r2
 800a840:	0092      	lsls	r2, r2, #2
 800a842:	3a04      	subs	r2, #4
 800a844:	3501      	adds	r5, #1
 800a846:	42ae      	cmp	r6, r5
 800a848:	bf38      	it	cc
 800a84a:	2200      	movcc	r2, #0
 800a84c:	18a3      	adds	r3, r4, r2
 800a84e:	50a7      	str	r7, [r4, r2]
 800a850:	b107      	cbz	r7, 800a854 <rshift+0x68>
 800a852:	3304      	adds	r3, #4
 800a854:	1b1a      	subs	r2, r3, r4
 800a856:	42a3      	cmp	r3, r4
 800a858:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a85c:	bf08      	it	eq
 800a85e:	2300      	moveq	r3, #0
 800a860:	6102      	str	r2, [r0, #16]
 800a862:	bf08      	it	eq
 800a864:	6143      	streq	r3, [r0, #20]
 800a866:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a86a:	f8dc c000 	ldr.w	ip, [ip]
 800a86e:	fa0c fc08 	lsl.w	ip, ip, r8
 800a872:	ea4c 0707 	orr.w	r7, ip, r7
 800a876:	f849 7b04 	str.w	r7, [r9], #4
 800a87a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a87e:	40cf      	lsrs	r7, r1
 800a880:	e7da      	b.n	800a838 <rshift+0x4c>
 800a882:	f851 cb04 	ldr.w	ip, [r1], #4
 800a886:	f847 cf04 	str.w	ip, [r7, #4]!
 800a88a:	e7c3      	b.n	800a814 <rshift+0x28>
 800a88c:	4623      	mov	r3, r4
 800a88e:	e7e1      	b.n	800a854 <rshift+0x68>

0800a890 <__hexdig_fun>:
 800a890:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a894:	2b09      	cmp	r3, #9
 800a896:	d802      	bhi.n	800a89e <__hexdig_fun+0xe>
 800a898:	3820      	subs	r0, #32
 800a89a:	b2c0      	uxtb	r0, r0
 800a89c:	4770      	bx	lr
 800a89e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a8a2:	2b05      	cmp	r3, #5
 800a8a4:	d801      	bhi.n	800a8aa <__hexdig_fun+0x1a>
 800a8a6:	3847      	subs	r0, #71	; 0x47
 800a8a8:	e7f7      	b.n	800a89a <__hexdig_fun+0xa>
 800a8aa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a8ae:	2b05      	cmp	r3, #5
 800a8b0:	d801      	bhi.n	800a8b6 <__hexdig_fun+0x26>
 800a8b2:	3827      	subs	r0, #39	; 0x27
 800a8b4:	e7f1      	b.n	800a89a <__hexdig_fun+0xa>
 800a8b6:	2000      	movs	r0, #0
 800a8b8:	4770      	bx	lr
	...

0800a8bc <__gethex>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	ed2d 8b02 	vpush	{d8}
 800a8c4:	b089      	sub	sp, #36	; 0x24
 800a8c6:	ee08 0a10 	vmov	s16, r0
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	4bb4      	ldr	r3, [pc, #720]	; (800aba0 <__gethex+0x2e4>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	9301      	str	r3, [sp, #4]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	468b      	mov	fp, r1
 800a8d6:	4690      	mov	r8, r2
 800a8d8:	f7f5 fc7a 	bl	80001d0 <strlen>
 800a8dc:	9b01      	ldr	r3, [sp, #4]
 800a8de:	f8db 2000 	ldr.w	r2, [fp]
 800a8e2:	4403      	add	r3, r0
 800a8e4:	4682      	mov	sl, r0
 800a8e6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a8ea:	9305      	str	r3, [sp, #20]
 800a8ec:	1c93      	adds	r3, r2, #2
 800a8ee:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a8f2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a8f6:	32fe      	adds	r2, #254	; 0xfe
 800a8f8:	18d1      	adds	r1, r2, r3
 800a8fa:	461f      	mov	r7, r3
 800a8fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a900:	9100      	str	r1, [sp, #0]
 800a902:	2830      	cmp	r0, #48	; 0x30
 800a904:	d0f8      	beq.n	800a8f8 <__gethex+0x3c>
 800a906:	f7ff ffc3 	bl	800a890 <__hexdig_fun>
 800a90a:	4604      	mov	r4, r0
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d13a      	bne.n	800a986 <__gethex+0xca>
 800a910:	9901      	ldr	r1, [sp, #4]
 800a912:	4652      	mov	r2, sl
 800a914:	4638      	mov	r0, r7
 800a916:	f001 fa33 	bl	800bd80 <strncmp>
 800a91a:	4605      	mov	r5, r0
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d168      	bne.n	800a9f2 <__gethex+0x136>
 800a920:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a924:	eb07 060a 	add.w	r6, r7, sl
 800a928:	f7ff ffb2 	bl	800a890 <__hexdig_fun>
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d062      	beq.n	800a9f6 <__gethex+0x13a>
 800a930:	4633      	mov	r3, r6
 800a932:	7818      	ldrb	r0, [r3, #0]
 800a934:	2830      	cmp	r0, #48	; 0x30
 800a936:	461f      	mov	r7, r3
 800a938:	f103 0301 	add.w	r3, r3, #1
 800a93c:	d0f9      	beq.n	800a932 <__gethex+0x76>
 800a93e:	f7ff ffa7 	bl	800a890 <__hexdig_fun>
 800a942:	2301      	movs	r3, #1
 800a944:	fab0 f480 	clz	r4, r0
 800a948:	0964      	lsrs	r4, r4, #5
 800a94a:	4635      	mov	r5, r6
 800a94c:	9300      	str	r3, [sp, #0]
 800a94e:	463a      	mov	r2, r7
 800a950:	4616      	mov	r6, r2
 800a952:	3201      	adds	r2, #1
 800a954:	7830      	ldrb	r0, [r6, #0]
 800a956:	f7ff ff9b 	bl	800a890 <__hexdig_fun>
 800a95a:	2800      	cmp	r0, #0
 800a95c:	d1f8      	bne.n	800a950 <__gethex+0x94>
 800a95e:	9901      	ldr	r1, [sp, #4]
 800a960:	4652      	mov	r2, sl
 800a962:	4630      	mov	r0, r6
 800a964:	f001 fa0c 	bl	800bd80 <strncmp>
 800a968:	b980      	cbnz	r0, 800a98c <__gethex+0xd0>
 800a96a:	b94d      	cbnz	r5, 800a980 <__gethex+0xc4>
 800a96c:	eb06 050a 	add.w	r5, r6, sl
 800a970:	462a      	mov	r2, r5
 800a972:	4616      	mov	r6, r2
 800a974:	3201      	adds	r2, #1
 800a976:	7830      	ldrb	r0, [r6, #0]
 800a978:	f7ff ff8a 	bl	800a890 <__hexdig_fun>
 800a97c:	2800      	cmp	r0, #0
 800a97e:	d1f8      	bne.n	800a972 <__gethex+0xb6>
 800a980:	1bad      	subs	r5, r5, r6
 800a982:	00ad      	lsls	r5, r5, #2
 800a984:	e004      	b.n	800a990 <__gethex+0xd4>
 800a986:	2400      	movs	r4, #0
 800a988:	4625      	mov	r5, r4
 800a98a:	e7e0      	b.n	800a94e <__gethex+0x92>
 800a98c:	2d00      	cmp	r5, #0
 800a98e:	d1f7      	bne.n	800a980 <__gethex+0xc4>
 800a990:	7833      	ldrb	r3, [r6, #0]
 800a992:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a996:	2b50      	cmp	r3, #80	; 0x50
 800a998:	d13b      	bne.n	800aa12 <__gethex+0x156>
 800a99a:	7873      	ldrb	r3, [r6, #1]
 800a99c:	2b2b      	cmp	r3, #43	; 0x2b
 800a99e:	d02c      	beq.n	800a9fa <__gethex+0x13e>
 800a9a0:	2b2d      	cmp	r3, #45	; 0x2d
 800a9a2:	d02e      	beq.n	800aa02 <__gethex+0x146>
 800a9a4:	1c71      	adds	r1, r6, #1
 800a9a6:	f04f 0900 	mov.w	r9, #0
 800a9aa:	7808      	ldrb	r0, [r1, #0]
 800a9ac:	f7ff ff70 	bl	800a890 <__hexdig_fun>
 800a9b0:	1e43      	subs	r3, r0, #1
 800a9b2:	b2db      	uxtb	r3, r3
 800a9b4:	2b18      	cmp	r3, #24
 800a9b6:	d82c      	bhi.n	800aa12 <__gethex+0x156>
 800a9b8:	f1a0 0210 	sub.w	r2, r0, #16
 800a9bc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a9c0:	f7ff ff66 	bl	800a890 <__hexdig_fun>
 800a9c4:	1e43      	subs	r3, r0, #1
 800a9c6:	b2db      	uxtb	r3, r3
 800a9c8:	2b18      	cmp	r3, #24
 800a9ca:	d91d      	bls.n	800aa08 <__gethex+0x14c>
 800a9cc:	f1b9 0f00 	cmp.w	r9, #0
 800a9d0:	d000      	beq.n	800a9d4 <__gethex+0x118>
 800a9d2:	4252      	negs	r2, r2
 800a9d4:	4415      	add	r5, r2
 800a9d6:	f8cb 1000 	str.w	r1, [fp]
 800a9da:	b1e4      	cbz	r4, 800aa16 <__gethex+0x15a>
 800a9dc:	9b00      	ldr	r3, [sp, #0]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	bf14      	ite	ne
 800a9e2:	2700      	movne	r7, #0
 800a9e4:	2706      	moveq	r7, #6
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	b009      	add	sp, #36	; 0x24
 800a9ea:	ecbd 8b02 	vpop	{d8}
 800a9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9f2:	463e      	mov	r6, r7
 800a9f4:	4625      	mov	r5, r4
 800a9f6:	2401      	movs	r4, #1
 800a9f8:	e7ca      	b.n	800a990 <__gethex+0xd4>
 800a9fa:	f04f 0900 	mov.w	r9, #0
 800a9fe:	1cb1      	adds	r1, r6, #2
 800aa00:	e7d3      	b.n	800a9aa <__gethex+0xee>
 800aa02:	f04f 0901 	mov.w	r9, #1
 800aa06:	e7fa      	b.n	800a9fe <__gethex+0x142>
 800aa08:	230a      	movs	r3, #10
 800aa0a:	fb03 0202 	mla	r2, r3, r2, r0
 800aa0e:	3a10      	subs	r2, #16
 800aa10:	e7d4      	b.n	800a9bc <__gethex+0x100>
 800aa12:	4631      	mov	r1, r6
 800aa14:	e7df      	b.n	800a9d6 <__gethex+0x11a>
 800aa16:	1bf3      	subs	r3, r6, r7
 800aa18:	3b01      	subs	r3, #1
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	2b07      	cmp	r3, #7
 800aa1e:	dc0b      	bgt.n	800aa38 <__gethex+0x17c>
 800aa20:	ee18 0a10 	vmov	r0, s16
 800aa24:	f000 fa7e 	bl	800af24 <_Balloc>
 800aa28:	4604      	mov	r4, r0
 800aa2a:	b940      	cbnz	r0, 800aa3e <__gethex+0x182>
 800aa2c:	4b5d      	ldr	r3, [pc, #372]	; (800aba4 <__gethex+0x2e8>)
 800aa2e:	4602      	mov	r2, r0
 800aa30:	21de      	movs	r1, #222	; 0xde
 800aa32:	485d      	ldr	r0, [pc, #372]	; (800aba8 <__gethex+0x2ec>)
 800aa34:	f001 f9c6 	bl	800bdc4 <__assert_func>
 800aa38:	3101      	adds	r1, #1
 800aa3a:	105b      	asrs	r3, r3, #1
 800aa3c:	e7ee      	b.n	800aa1c <__gethex+0x160>
 800aa3e:	f100 0914 	add.w	r9, r0, #20
 800aa42:	f04f 0b00 	mov.w	fp, #0
 800aa46:	f1ca 0301 	rsb	r3, sl, #1
 800aa4a:	f8cd 9008 	str.w	r9, [sp, #8]
 800aa4e:	f8cd b000 	str.w	fp, [sp]
 800aa52:	9306      	str	r3, [sp, #24]
 800aa54:	42b7      	cmp	r7, r6
 800aa56:	d340      	bcc.n	800aada <__gethex+0x21e>
 800aa58:	9802      	ldr	r0, [sp, #8]
 800aa5a:	9b00      	ldr	r3, [sp, #0]
 800aa5c:	f840 3b04 	str.w	r3, [r0], #4
 800aa60:	eba0 0009 	sub.w	r0, r0, r9
 800aa64:	1080      	asrs	r0, r0, #2
 800aa66:	0146      	lsls	r6, r0, #5
 800aa68:	6120      	str	r0, [r4, #16]
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	f000 fb4c 	bl	800b108 <__hi0bits>
 800aa70:	1a30      	subs	r0, r6, r0
 800aa72:	f8d8 6000 	ldr.w	r6, [r8]
 800aa76:	42b0      	cmp	r0, r6
 800aa78:	dd63      	ble.n	800ab42 <__gethex+0x286>
 800aa7a:	1b87      	subs	r7, r0, r6
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	4620      	mov	r0, r4
 800aa80:	f000 fef0 	bl	800b864 <__any_on>
 800aa84:	4682      	mov	sl, r0
 800aa86:	b1a8      	cbz	r0, 800aab4 <__gethex+0x1f8>
 800aa88:	1e7b      	subs	r3, r7, #1
 800aa8a:	1159      	asrs	r1, r3, #5
 800aa8c:	f003 021f 	and.w	r2, r3, #31
 800aa90:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800aa94:	f04f 0a01 	mov.w	sl, #1
 800aa98:	fa0a f202 	lsl.w	r2, sl, r2
 800aa9c:	420a      	tst	r2, r1
 800aa9e:	d009      	beq.n	800aab4 <__gethex+0x1f8>
 800aaa0:	4553      	cmp	r3, sl
 800aaa2:	dd05      	ble.n	800aab0 <__gethex+0x1f4>
 800aaa4:	1eb9      	subs	r1, r7, #2
 800aaa6:	4620      	mov	r0, r4
 800aaa8:	f000 fedc 	bl	800b864 <__any_on>
 800aaac:	2800      	cmp	r0, #0
 800aaae:	d145      	bne.n	800ab3c <__gethex+0x280>
 800aab0:	f04f 0a02 	mov.w	sl, #2
 800aab4:	4639      	mov	r1, r7
 800aab6:	4620      	mov	r0, r4
 800aab8:	f7ff fe98 	bl	800a7ec <rshift>
 800aabc:	443d      	add	r5, r7
 800aabe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aac2:	42ab      	cmp	r3, r5
 800aac4:	da4c      	bge.n	800ab60 <__gethex+0x2a4>
 800aac6:	ee18 0a10 	vmov	r0, s16
 800aaca:	4621      	mov	r1, r4
 800aacc:	f000 fa6a 	bl	800afa4 <_Bfree>
 800aad0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aad2:	2300      	movs	r3, #0
 800aad4:	6013      	str	r3, [r2, #0]
 800aad6:	27a3      	movs	r7, #163	; 0xa3
 800aad8:	e785      	b.n	800a9e6 <__gethex+0x12a>
 800aada:	1e73      	subs	r3, r6, #1
 800aadc:	9a05      	ldr	r2, [sp, #20]
 800aade:	9303      	str	r3, [sp, #12]
 800aae0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d019      	beq.n	800ab1c <__gethex+0x260>
 800aae8:	f1bb 0f20 	cmp.w	fp, #32
 800aaec:	d107      	bne.n	800aafe <__gethex+0x242>
 800aaee:	9b02      	ldr	r3, [sp, #8]
 800aaf0:	9a00      	ldr	r2, [sp, #0]
 800aaf2:	f843 2b04 	str.w	r2, [r3], #4
 800aaf6:	9302      	str	r3, [sp, #8]
 800aaf8:	2300      	movs	r3, #0
 800aafa:	9300      	str	r3, [sp, #0]
 800aafc:	469b      	mov	fp, r3
 800aafe:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800ab02:	f7ff fec5 	bl	800a890 <__hexdig_fun>
 800ab06:	9b00      	ldr	r3, [sp, #0]
 800ab08:	f000 000f 	and.w	r0, r0, #15
 800ab0c:	fa00 f00b 	lsl.w	r0, r0, fp
 800ab10:	4303      	orrs	r3, r0
 800ab12:	9300      	str	r3, [sp, #0]
 800ab14:	f10b 0b04 	add.w	fp, fp, #4
 800ab18:	9b03      	ldr	r3, [sp, #12]
 800ab1a:	e00d      	b.n	800ab38 <__gethex+0x27c>
 800ab1c:	9b03      	ldr	r3, [sp, #12]
 800ab1e:	9a06      	ldr	r2, [sp, #24]
 800ab20:	4413      	add	r3, r2
 800ab22:	42bb      	cmp	r3, r7
 800ab24:	d3e0      	bcc.n	800aae8 <__gethex+0x22c>
 800ab26:	4618      	mov	r0, r3
 800ab28:	9901      	ldr	r1, [sp, #4]
 800ab2a:	9307      	str	r3, [sp, #28]
 800ab2c:	4652      	mov	r2, sl
 800ab2e:	f001 f927 	bl	800bd80 <strncmp>
 800ab32:	9b07      	ldr	r3, [sp, #28]
 800ab34:	2800      	cmp	r0, #0
 800ab36:	d1d7      	bne.n	800aae8 <__gethex+0x22c>
 800ab38:	461e      	mov	r6, r3
 800ab3a:	e78b      	b.n	800aa54 <__gethex+0x198>
 800ab3c:	f04f 0a03 	mov.w	sl, #3
 800ab40:	e7b8      	b.n	800aab4 <__gethex+0x1f8>
 800ab42:	da0a      	bge.n	800ab5a <__gethex+0x29e>
 800ab44:	1a37      	subs	r7, r6, r0
 800ab46:	4621      	mov	r1, r4
 800ab48:	ee18 0a10 	vmov	r0, s16
 800ab4c:	463a      	mov	r2, r7
 800ab4e:	f000 fc45 	bl	800b3dc <__lshift>
 800ab52:	1bed      	subs	r5, r5, r7
 800ab54:	4604      	mov	r4, r0
 800ab56:	f100 0914 	add.w	r9, r0, #20
 800ab5a:	f04f 0a00 	mov.w	sl, #0
 800ab5e:	e7ae      	b.n	800aabe <__gethex+0x202>
 800ab60:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800ab64:	42a8      	cmp	r0, r5
 800ab66:	dd72      	ble.n	800ac4e <__gethex+0x392>
 800ab68:	1b45      	subs	r5, r0, r5
 800ab6a:	42ae      	cmp	r6, r5
 800ab6c:	dc36      	bgt.n	800abdc <__gethex+0x320>
 800ab6e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ab72:	2b02      	cmp	r3, #2
 800ab74:	d02a      	beq.n	800abcc <__gethex+0x310>
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d02c      	beq.n	800abd4 <__gethex+0x318>
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d11c      	bne.n	800abb8 <__gethex+0x2fc>
 800ab7e:	42ae      	cmp	r6, r5
 800ab80:	d11a      	bne.n	800abb8 <__gethex+0x2fc>
 800ab82:	2e01      	cmp	r6, #1
 800ab84:	d112      	bne.n	800abac <__gethex+0x2f0>
 800ab86:	9a04      	ldr	r2, [sp, #16]
 800ab88:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	2301      	movs	r3, #1
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	f8c9 3000 	str.w	r3, [r9]
 800ab96:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ab98:	2762      	movs	r7, #98	; 0x62
 800ab9a:	601c      	str	r4, [r3, #0]
 800ab9c:	e723      	b.n	800a9e6 <__gethex+0x12a>
 800ab9e:	bf00      	nop
 800aba0:	0800cca0 	.word	0x0800cca0
 800aba4:	0800cc28 	.word	0x0800cc28
 800aba8:	0800cc39 	.word	0x0800cc39
 800abac:	1e71      	subs	r1, r6, #1
 800abae:	4620      	mov	r0, r4
 800abb0:	f000 fe58 	bl	800b864 <__any_on>
 800abb4:	2800      	cmp	r0, #0
 800abb6:	d1e6      	bne.n	800ab86 <__gethex+0x2ca>
 800abb8:	ee18 0a10 	vmov	r0, s16
 800abbc:	4621      	mov	r1, r4
 800abbe:	f000 f9f1 	bl	800afa4 <_Bfree>
 800abc2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800abc4:	2300      	movs	r3, #0
 800abc6:	6013      	str	r3, [r2, #0]
 800abc8:	2750      	movs	r7, #80	; 0x50
 800abca:	e70c      	b.n	800a9e6 <__gethex+0x12a>
 800abcc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d1f2      	bne.n	800abb8 <__gethex+0x2fc>
 800abd2:	e7d8      	b.n	800ab86 <__gethex+0x2ca>
 800abd4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d1d5      	bne.n	800ab86 <__gethex+0x2ca>
 800abda:	e7ed      	b.n	800abb8 <__gethex+0x2fc>
 800abdc:	1e6f      	subs	r7, r5, #1
 800abde:	f1ba 0f00 	cmp.w	sl, #0
 800abe2:	d131      	bne.n	800ac48 <__gethex+0x38c>
 800abe4:	b127      	cbz	r7, 800abf0 <__gethex+0x334>
 800abe6:	4639      	mov	r1, r7
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 fe3b 	bl	800b864 <__any_on>
 800abee:	4682      	mov	sl, r0
 800abf0:	117b      	asrs	r3, r7, #5
 800abf2:	2101      	movs	r1, #1
 800abf4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800abf8:	f007 071f 	and.w	r7, r7, #31
 800abfc:	fa01 f707 	lsl.w	r7, r1, r7
 800ac00:	421f      	tst	r7, r3
 800ac02:	4629      	mov	r1, r5
 800ac04:	4620      	mov	r0, r4
 800ac06:	bf18      	it	ne
 800ac08:	f04a 0a02 	orrne.w	sl, sl, #2
 800ac0c:	1b76      	subs	r6, r6, r5
 800ac0e:	f7ff fded 	bl	800a7ec <rshift>
 800ac12:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800ac16:	2702      	movs	r7, #2
 800ac18:	f1ba 0f00 	cmp.w	sl, #0
 800ac1c:	d048      	beq.n	800acb0 <__gethex+0x3f4>
 800ac1e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800ac22:	2b02      	cmp	r3, #2
 800ac24:	d015      	beq.n	800ac52 <__gethex+0x396>
 800ac26:	2b03      	cmp	r3, #3
 800ac28:	d017      	beq.n	800ac5a <__gethex+0x39e>
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d109      	bne.n	800ac42 <__gethex+0x386>
 800ac2e:	f01a 0f02 	tst.w	sl, #2
 800ac32:	d006      	beq.n	800ac42 <__gethex+0x386>
 800ac34:	f8d9 0000 	ldr.w	r0, [r9]
 800ac38:	ea4a 0a00 	orr.w	sl, sl, r0
 800ac3c:	f01a 0f01 	tst.w	sl, #1
 800ac40:	d10e      	bne.n	800ac60 <__gethex+0x3a4>
 800ac42:	f047 0710 	orr.w	r7, r7, #16
 800ac46:	e033      	b.n	800acb0 <__gethex+0x3f4>
 800ac48:	f04f 0a01 	mov.w	sl, #1
 800ac4c:	e7d0      	b.n	800abf0 <__gethex+0x334>
 800ac4e:	2701      	movs	r7, #1
 800ac50:	e7e2      	b.n	800ac18 <__gethex+0x35c>
 800ac52:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac54:	f1c3 0301 	rsb	r3, r3, #1
 800ac58:	9315      	str	r3, [sp, #84]	; 0x54
 800ac5a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d0f0      	beq.n	800ac42 <__gethex+0x386>
 800ac60:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ac64:	f104 0314 	add.w	r3, r4, #20
 800ac68:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ac6c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ac70:	f04f 0c00 	mov.w	ip, #0
 800ac74:	4618      	mov	r0, r3
 800ac76:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac7a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ac7e:	d01c      	beq.n	800acba <__gethex+0x3fe>
 800ac80:	3201      	adds	r2, #1
 800ac82:	6002      	str	r2, [r0, #0]
 800ac84:	2f02      	cmp	r7, #2
 800ac86:	f104 0314 	add.w	r3, r4, #20
 800ac8a:	d13f      	bne.n	800ad0c <__gethex+0x450>
 800ac8c:	f8d8 2000 	ldr.w	r2, [r8]
 800ac90:	3a01      	subs	r2, #1
 800ac92:	42b2      	cmp	r2, r6
 800ac94:	d10a      	bne.n	800acac <__gethex+0x3f0>
 800ac96:	1171      	asrs	r1, r6, #5
 800ac98:	2201      	movs	r2, #1
 800ac9a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ac9e:	f006 061f 	and.w	r6, r6, #31
 800aca2:	fa02 f606 	lsl.w	r6, r2, r6
 800aca6:	421e      	tst	r6, r3
 800aca8:	bf18      	it	ne
 800acaa:	4617      	movne	r7, r2
 800acac:	f047 0720 	orr.w	r7, r7, #32
 800acb0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800acb2:	601c      	str	r4, [r3, #0]
 800acb4:	9b04      	ldr	r3, [sp, #16]
 800acb6:	601d      	str	r5, [r3, #0]
 800acb8:	e695      	b.n	800a9e6 <__gethex+0x12a>
 800acba:	4299      	cmp	r1, r3
 800acbc:	f843 cc04 	str.w	ip, [r3, #-4]
 800acc0:	d8d8      	bhi.n	800ac74 <__gethex+0x3b8>
 800acc2:	68a3      	ldr	r3, [r4, #8]
 800acc4:	459b      	cmp	fp, r3
 800acc6:	db19      	blt.n	800acfc <__gethex+0x440>
 800acc8:	6861      	ldr	r1, [r4, #4]
 800acca:	ee18 0a10 	vmov	r0, s16
 800acce:	3101      	adds	r1, #1
 800acd0:	f000 f928 	bl	800af24 <_Balloc>
 800acd4:	4681      	mov	r9, r0
 800acd6:	b918      	cbnz	r0, 800ace0 <__gethex+0x424>
 800acd8:	4b1a      	ldr	r3, [pc, #104]	; (800ad44 <__gethex+0x488>)
 800acda:	4602      	mov	r2, r0
 800acdc:	2184      	movs	r1, #132	; 0x84
 800acde:	e6a8      	b.n	800aa32 <__gethex+0x176>
 800ace0:	6922      	ldr	r2, [r4, #16]
 800ace2:	3202      	adds	r2, #2
 800ace4:	f104 010c 	add.w	r1, r4, #12
 800ace8:	0092      	lsls	r2, r2, #2
 800acea:	300c      	adds	r0, #12
 800acec:	f000 f90c 	bl	800af08 <memcpy>
 800acf0:	4621      	mov	r1, r4
 800acf2:	ee18 0a10 	vmov	r0, s16
 800acf6:	f000 f955 	bl	800afa4 <_Bfree>
 800acfa:	464c      	mov	r4, r9
 800acfc:	6923      	ldr	r3, [r4, #16]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ad04:	6122      	str	r2, [r4, #16]
 800ad06:	2201      	movs	r2, #1
 800ad08:	615a      	str	r2, [r3, #20]
 800ad0a:	e7bb      	b.n	800ac84 <__gethex+0x3c8>
 800ad0c:	6922      	ldr	r2, [r4, #16]
 800ad0e:	455a      	cmp	r2, fp
 800ad10:	dd0b      	ble.n	800ad2a <__gethex+0x46e>
 800ad12:	2101      	movs	r1, #1
 800ad14:	4620      	mov	r0, r4
 800ad16:	f7ff fd69 	bl	800a7ec <rshift>
 800ad1a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ad1e:	3501      	adds	r5, #1
 800ad20:	42ab      	cmp	r3, r5
 800ad22:	f6ff aed0 	blt.w	800aac6 <__gethex+0x20a>
 800ad26:	2701      	movs	r7, #1
 800ad28:	e7c0      	b.n	800acac <__gethex+0x3f0>
 800ad2a:	f016 061f 	ands.w	r6, r6, #31
 800ad2e:	d0fa      	beq.n	800ad26 <__gethex+0x46a>
 800ad30:	4453      	add	r3, sl
 800ad32:	f1c6 0620 	rsb	r6, r6, #32
 800ad36:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ad3a:	f000 f9e5 	bl	800b108 <__hi0bits>
 800ad3e:	42b0      	cmp	r0, r6
 800ad40:	dbe7      	blt.n	800ad12 <__gethex+0x456>
 800ad42:	e7f0      	b.n	800ad26 <__gethex+0x46a>
 800ad44:	0800cc28 	.word	0x0800cc28

0800ad48 <L_shift>:
 800ad48:	f1c2 0208 	rsb	r2, r2, #8
 800ad4c:	0092      	lsls	r2, r2, #2
 800ad4e:	b570      	push	{r4, r5, r6, lr}
 800ad50:	f1c2 0620 	rsb	r6, r2, #32
 800ad54:	6843      	ldr	r3, [r0, #4]
 800ad56:	6804      	ldr	r4, [r0, #0]
 800ad58:	fa03 f506 	lsl.w	r5, r3, r6
 800ad5c:	432c      	orrs	r4, r5
 800ad5e:	40d3      	lsrs	r3, r2
 800ad60:	6004      	str	r4, [r0, #0]
 800ad62:	f840 3f04 	str.w	r3, [r0, #4]!
 800ad66:	4288      	cmp	r0, r1
 800ad68:	d3f4      	bcc.n	800ad54 <L_shift+0xc>
 800ad6a:	bd70      	pop	{r4, r5, r6, pc}

0800ad6c <__match>:
 800ad6c:	b530      	push	{r4, r5, lr}
 800ad6e:	6803      	ldr	r3, [r0, #0]
 800ad70:	3301      	adds	r3, #1
 800ad72:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ad76:	b914      	cbnz	r4, 800ad7e <__match+0x12>
 800ad78:	6003      	str	r3, [r0, #0]
 800ad7a:	2001      	movs	r0, #1
 800ad7c:	bd30      	pop	{r4, r5, pc}
 800ad7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ad86:	2d19      	cmp	r5, #25
 800ad88:	bf98      	it	ls
 800ad8a:	3220      	addls	r2, #32
 800ad8c:	42a2      	cmp	r2, r4
 800ad8e:	d0f0      	beq.n	800ad72 <__match+0x6>
 800ad90:	2000      	movs	r0, #0
 800ad92:	e7f3      	b.n	800ad7c <__match+0x10>

0800ad94 <__hexnan>:
 800ad94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad98:	680b      	ldr	r3, [r1, #0]
 800ad9a:	115e      	asrs	r6, r3, #5
 800ad9c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ada0:	f013 031f 	ands.w	r3, r3, #31
 800ada4:	b087      	sub	sp, #28
 800ada6:	bf18      	it	ne
 800ada8:	3604      	addne	r6, #4
 800adaa:	2500      	movs	r5, #0
 800adac:	1f37      	subs	r7, r6, #4
 800adae:	4690      	mov	r8, r2
 800adb0:	6802      	ldr	r2, [r0, #0]
 800adb2:	9301      	str	r3, [sp, #4]
 800adb4:	4682      	mov	sl, r0
 800adb6:	f846 5c04 	str.w	r5, [r6, #-4]
 800adba:	46b9      	mov	r9, r7
 800adbc:	463c      	mov	r4, r7
 800adbe:	9502      	str	r5, [sp, #8]
 800adc0:	46ab      	mov	fp, r5
 800adc2:	7851      	ldrb	r1, [r2, #1]
 800adc4:	1c53      	adds	r3, r2, #1
 800adc6:	9303      	str	r3, [sp, #12]
 800adc8:	b341      	cbz	r1, 800ae1c <__hexnan+0x88>
 800adca:	4608      	mov	r0, r1
 800adcc:	9205      	str	r2, [sp, #20]
 800adce:	9104      	str	r1, [sp, #16]
 800add0:	f7ff fd5e 	bl	800a890 <__hexdig_fun>
 800add4:	2800      	cmp	r0, #0
 800add6:	d14f      	bne.n	800ae78 <__hexnan+0xe4>
 800add8:	9904      	ldr	r1, [sp, #16]
 800adda:	9a05      	ldr	r2, [sp, #20]
 800addc:	2920      	cmp	r1, #32
 800adde:	d818      	bhi.n	800ae12 <__hexnan+0x7e>
 800ade0:	9b02      	ldr	r3, [sp, #8]
 800ade2:	459b      	cmp	fp, r3
 800ade4:	dd13      	ble.n	800ae0e <__hexnan+0x7a>
 800ade6:	454c      	cmp	r4, r9
 800ade8:	d206      	bcs.n	800adf8 <__hexnan+0x64>
 800adea:	2d07      	cmp	r5, #7
 800adec:	dc04      	bgt.n	800adf8 <__hexnan+0x64>
 800adee:	462a      	mov	r2, r5
 800adf0:	4649      	mov	r1, r9
 800adf2:	4620      	mov	r0, r4
 800adf4:	f7ff ffa8 	bl	800ad48 <L_shift>
 800adf8:	4544      	cmp	r4, r8
 800adfa:	d950      	bls.n	800ae9e <__hexnan+0x10a>
 800adfc:	2300      	movs	r3, #0
 800adfe:	f1a4 0904 	sub.w	r9, r4, #4
 800ae02:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae06:	f8cd b008 	str.w	fp, [sp, #8]
 800ae0a:	464c      	mov	r4, r9
 800ae0c:	461d      	mov	r5, r3
 800ae0e:	9a03      	ldr	r2, [sp, #12]
 800ae10:	e7d7      	b.n	800adc2 <__hexnan+0x2e>
 800ae12:	2929      	cmp	r1, #41	; 0x29
 800ae14:	d156      	bne.n	800aec4 <__hexnan+0x130>
 800ae16:	3202      	adds	r2, #2
 800ae18:	f8ca 2000 	str.w	r2, [sl]
 800ae1c:	f1bb 0f00 	cmp.w	fp, #0
 800ae20:	d050      	beq.n	800aec4 <__hexnan+0x130>
 800ae22:	454c      	cmp	r4, r9
 800ae24:	d206      	bcs.n	800ae34 <__hexnan+0xa0>
 800ae26:	2d07      	cmp	r5, #7
 800ae28:	dc04      	bgt.n	800ae34 <__hexnan+0xa0>
 800ae2a:	462a      	mov	r2, r5
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f7ff ff8a 	bl	800ad48 <L_shift>
 800ae34:	4544      	cmp	r4, r8
 800ae36:	d934      	bls.n	800aea2 <__hexnan+0x10e>
 800ae38:	f1a8 0204 	sub.w	r2, r8, #4
 800ae3c:	4623      	mov	r3, r4
 800ae3e:	f853 1b04 	ldr.w	r1, [r3], #4
 800ae42:	f842 1f04 	str.w	r1, [r2, #4]!
 800ae46:	429f      	cmp	r7, r3
 800ae48:	d2f9      	bcs.n	800ae3e <__hexnan+0xaa>
 800ae4a:	1b3b      	subs	r3, r7, r4
 800ae4c:	f023 0303 	bic.w	r3, r3, #3
 800ae50:	3304      	adds	r3, #4
 800ae52:	3401      	adds	r4, #1
 800ae54:	3e03      	subs	r6, #3
 800ae56:	42b4      	cmp	r4, r6
 800ae58:	bf88      	it	hi
 800ae5a:	2304      	movhi	r3, #4
 800ae5c:	4443      	add	r3, r8
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f843 2b04 	str.w	r2, [r3], #4
 800ae64:	429f      	cmp	r7, r3
 800ae66:	d2fb      	bcs.n	800ae60 <__hexnan+0xcc>
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	b91b      	cbnz	r3, 800ae74 <__hexnan+0xe0>
 800ae6c:	4547      	cmp	r7, r8
 800ae6e:	d127      	bne.n	800aec0 <__hexnan+0x12c>
 800ae70:	2301      	movs	r3, #1
 800ae72:	603b      	str	r3, [r7, #0]
 800ae74:	2005      	movs	r0, #5
 800ae76:	e026      	b.n	800aec6 <__hexnan+0x132>
 800ae78:	3501      	adds	r5, #1
 800ae7a:	2d08      	cmp	r5, #8
 800ae7c:	f10b 0b01 	add.w	fp, fp, #1
 800ae80:	dd06      	ble.n	800ae90 <__hexnan+0xfc>
 800ae82:	4544      	cmp	r4, r8
 800ae84:	d9c3      	bls.n	800ae0e <__hexnan+0x7a>
 800ae86:	2300      	movs	r3, #0
 800ae88:	f844 3c04 	str.w	r3, [r4, #-4]
 800ae8c:	2501      	movs	r5, #1
 800ae8e:	3c04      	subs	r4, #4
 800ae90:	6822      	ldr	r2, [r4, #0]
 800ae92:	f000 000f 	and.w	r0, r0, #15
 800ae96:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ae9a:	6022      	str	r2, [r4, #0]
 800ae9c:	e7b7      	b.n	800ae0e <__hexnan+0x7a>
 800ae9e:	2508      	movs	r5, #8
 800aea0:	e7b5      	b.n	800ae0e <__hexnan+0x7a>
 800aea2:	9b01      	ldr	r3, [sp, #4]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d0df      	beq.n	800ae68 <__hexnan+0xd4>
 800aea8:	f04f 32ff 	mov.w	r2, #4294967295
 800aeac:	f1c3 0320 	rsb	r3, r3, #32
 800aeb0:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aeb8:	401a      	ands	r2, r3
 800aeba:	f846 2c04 	str.w	r2, [r6, #-4]
 800aebe:	e7d3      	b.n	800ae68 <__hexnan+0xd4>
 800aec0:	3f04      	subs	r7, #4
 800aec2:	e7d1      	b.n	800ae68 <__hexnan+0xd4>
 800aec4:	2004      	movs	r0, #4
 800aec6:	b007      	add	sp, #28
 800aec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aecc <_localeconv_r>:
 800aecc:	4800      	ldr	r0, [pc, #0]	; (800aed0 <_localeconv_r+0x4>)
 800aece:	4770      	bx	lr
 800aed0:	20000170 	.word	0x20000170

0800aed4 <malloc>:
 800aed4:	4b02      	ldr	r3, [pc, #8]	; (800aee0 <malloc+0xc>)
 800aed6:	4601      	mov	r1, r0
 800aed8:	6818      	ldr	r0, [r3, #0]
 800aeda:	f000 bd67 	b.w	800b9ac <_malloc_r>
 800aede:	bf00      	nop
 800aee0:	20000018 	.word	0x20000018

0800aee4 <__ascii_mbtowc>:
 800aee4:	b082      	sub	sp, #8
 800aee6:	b901      	cbnz	r1, 800aeea <__ascii_mbtowc+0x6>
 800aee8:	a901      	add	r1, sp, #4
 800aeea:	b142      	cbz	r2, 800aefe <__ascii_mbtowc+0x1a>
 800aeec:	b14b      	cbz	r3, 800af02 <__ascii_mbtowc+0x1e>
 800aeee:	7813      	ldrb	r3, [r2, #0]
 800aef0:	600b      	str	r3, [r1, #0]
 800aef2:	7812      	ldrb	r2, [r2, #0]
 800aef4:	1e10      	subs	r0, r2, #0
 800aef6:	bf18      	it	ne
 800aef8:	2001      	movne	r0, #1
 800aefa:	b002      	add	sp, #8
 800aefc:	4770      	bx	lr
 800aefe:	4610      	mov	r0, r2
 800af00:	e7fb      	b.n	800aefa <__ascii_mbtowc+0x16>
 800af02:	f06f 0001 	mvn.w	r0, #1
 800af06:	e7f8      	b.n	800aefa <__ascii_mbtowc+0x16>

0800af08 <memcpy>:
 800af08:	440a      	add	r2, r1
 800af0a:	4291      	cmp	r1, r2
 800af0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800af10:	d100      	bne.n	800af14 <memcpy+0xc>
 800af12:	4770      	bx	lr
 800af14:	b510      	push	{r4, lr}
 800af16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af1e:	4291      	cmp	r1, r2
 800af20:	d1f9      	bne.n	800af16 <memcpy+0xe>
 800af22:	bd10      	pop	{r4, pc}

0800af24 <_Balloc>:
 800af24:	b570      	push	{r4, r5, r6, lr}
 800af26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af28:	4604      	mov	r4, r0
 800af2a:	460d      	mov	r5, r1
 800af2c:	b976      	cbnz	r6, 800af4c <_Balloc+0x28>
 800af2e:	2010      	movs	r0, #16
 800af30:	f7ff ffd0 	bl	800aed4 <malloc>
 800af34:	4602      	mov	r2, r0
 800af36:	6260      	str	r0, [r4, #36]	; 0x24
 800af38:	b920      	cbnz	r0, 800af44 <_Balloc+0x20>
 800af3a:	4b18      	ldr	r3, [pc, #96]	; (800af9c <_Balloc+0x78>)
 800af3c:	4818      	ldr	r0, [pc, #96]	; (800afa0 <_Balloc+0x7c>)
 800af3e:	2166      	movs	r1, #102	; 0x66
 800af40:	f000 ff40 	bl	800bdc4 <__assert_func>
 800af44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af48:	6006      	str	r6, [r0, #0]
 800af4a:	60c6      	str	r6, [r0, #12]
 800af4c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af4e:	68f3      	ldr	r3, [r6, #12]
 800af50:	b183      	cbz	r3, 800af74 <_Balloc+0x50>
 800af52:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af5a:	b9b8      	cbnz	r0, 800af8c <_Balloc+0x68>
 800af5c:	2101      	movs	r1, #1
 800af5e:	fa01 f605 	lsl.w	r6, r1, r5
 800af62:	1d72      	adds	r2, r6, #5
 800af64:	0092      	lsls	r2, r2, #2
 800af66:	4620      	mov	r0, r4
 800af68:	f000 fc9d 	bl	800b8a6 <_calloc_r>
 800af6c:	b160      	cbz	r0, 800af88 <_Balloc+0x64>
 800af6e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af72:	e00e      	b.n	800af92 <_Balloc+0x6e>
 800af74:	2221      	movs	r2, #33	; 0x21
 800af76:	2104      	movs	r1, #4
 800af78:	4620      	mov	r0, r4
 800af7a:	f000 fc94 	bl	800b8a6 <_calloc_r>
 800af7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af80:	60f0      	str	r0, [r6, #12]
 800af82:	68db      	ldr	r3, [r3, #12]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d1e4      	bne.n	800af52 <_Balloc+0x2e>
 800af88:	2000      	movs	r0, #0
 800af8a:	bd70      	pop	{r4, r5, r6, pc}
 800af8c:	6802      	ldr	r2, [r0, #0]
 800af8e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af92:	2300      	movs	r3, #0
 800af94:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af98:	e7f7      	b.n	800af8a <_Balloc+0x66>
 800af9a:	bf00      	nop
 800af9c:	0800cbb6 	.word	0x0800cbb6
 800afa0:	0800ccb4 	.word	0x0800ccb4

0800afa4 <_Bfree>:
 800afa4:	b570      	push	{r4, r5, r6, lr}
 800afa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afa8:	4605      	mov	r5, r0
 800afaa:	460c      	mov	r4, r1
 800afac:	b976      	cbnz	r6, 800afcc <_Bfree+0x28>
 800afae:	2010      	movs	r0, #16
 800afb0:	f7ff ff90 	bl	800aed4 <malloc>
 800afb4:	4602      	mov	r2, r0
 800afb6:	6268      	str	r0, [r5, #36]	; 0x24
 800afb8:	b920      	cbnz	r0, 800afc4 <_Bfree+0x20>
 800afba:	4b09      	ldr	r3, [pc, #36]	; (800afe0 <_Bfree+0x3c>)
 800afbc:	4809      	ldr	r0, [pc, #36]	; (800afe4 <_Bfree+0x40>)
 800afbe:	218a      	movs	r1, #138	; 0x8a
 800afc0:	f000 ff00 	bl	800bdc4 <__assert_func>
 800afc4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800afc8:	6006      	str	r6, [r0, #0]
 800afca:	60c6      	str	r6, [r0, #12]
 800afcc:	b13c      	cbz	r4, 800afde <_Bfree+0x3a>
 800afce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800afd0:	6862      	ldr	r2, [r4, #4]
 800afd2:	68db      	ldr	r3, [r3, #12]
 800afd4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800afd8:	6021      	str	r1, [r4, #0]
 800afda:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800afde:	bd70      	pop	{r4, r5, r6, pc}
 800afe0:	0800cbb6 	.word	0x0800cbb6
 800afe4:	0800ccb4 	.word	0x0800ccb4

0800afe8 <__multadd>:
 800afe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afec:	690d      	ldr	r5, [r1, #16]
 800afee:	4607      	mov	r7, r0
 800aff0:	460c      	mov	r4, r1
 800aff2:	461e      	mov	r6, r3
 800aff4:	f101 0c14 	add.w	ip, r1, #20
 800aff8:	2000      	movs	r0, #0
 800affa:	f8dc 3000 	ldr.w	r3, [ip]
 800affe:	b299      	uxth	r1, r3
 800b000:	fb02 6101 	mla	r1, r2, r1, r6
 800b004:	0c1e      	lsrs	r6, r3, #16
 800b006:	0c0b      	lsrs	r3, r1, #16
 800b008:	fb02 3306 	mla	r3, r2, r6, r3
 800b00c:	b289      	uxth	r1, r1
 800b00e:	3001      	adds	r0, #1
 800b010:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b014:	4285      	cmp	r5, r0
 800b016:	f84c 1b04 	str.w	r1, [ip], #4
 800b01a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b01e:	dcec      	bgt.n	800affa <__multadd+0x12>
 800b020:	b30e      	cbz	r6, 800b066 <__multadd+0x7e>
 800b022:	68a3      	ldr	r3, [r4, #8]
 800b024:	42ab      	cmp	r3, r5
 800b026:	dc19      	bgt.n	800b05c <__multadd+0x74>
 800b028:	6861      	ldr	r1, [r4, #4]
 800b02a:	4638      	mov	r0, r7
 800b02c:	3101      	adds	r1, #1
 800b02e:	f7ff ff79 	bl	800af24 <_Balloc>
 800b032:	4680      	mov	r8, r0
 800b034:	b928      	cbnz	r0, 800b042 <__multadd+0x5a>
 800b036:	4602      	mov	r2, r0
 800b038:	4b0c      	ldr	r3, [pc, #48]	; (800b06c <__multadd+0x84>)
 800b03a:	480d      	ldr	r0, [pc, #52]	; (800b070 <__multadd+0x88>)
 800b03c:	21b5      	movs	r1, #181	; 0xb5
 800b03e:	f000 fec1 	bl	800bdc4 <__assert_func>
 800b042:	6922      	ldr	r2, [r4, #16]
 800b044:	3202      	adds	r2, #2
 800b046:	f104 010c 	add.w	r1, r4, #12
 800b04a:	0092      	lsls	r2, r2, #2
 800b04c:	300c      	adds	r0, #12
 800b04e:	f7ff ff5b 	bl	800af08 <memcpy>
 800b052:	4621      	mov	r1, r4
 800b054:	4638      	mov	r0, r7
 800b056:	f7ff ffa5 	bl	800afa4 <_Bfree>
 800b05a:	4644      	mov	r4, r8
 800b05c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b060:	3501      	adds	r5, #1
 800b062:	615e      	str	r6, [r3, #20]
 800b064:	6125      	str	r5, [r4, #16]
 800b066:	4620      	mov	r0, r4
 800b068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b06c:	0800cc28 	.word	0x0800cc28
 800b070:	0800ccb4 	.word	0x0800ccb4

0800b074 <__s2b>:
 800b074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b078:	460c      	mov	r4, r1
 800b07a:	4615      	mov	r5, r2
 800b07c:	461f      	mov	r7, r3
 800b07e:	2209      	movs	r2, #9
 800b080:	3308      	adds	r3, #8
 800b082:	4606      	mov	r6, r0
 800b084:	fb93 f3f2 	sdiv	r3, r3, r2
 800b088:	2100      	movs	r1, #0
 800b08a:	2201      	movs	r2, #1
 800b08c:	429a      	cmp	r2, r3
 800b08e:	db09      	blt.n	800b0a4 <__s2b+0x30>
 800b090:	4630      	mov	r0, r6
 800b092:	f7ff ff47 	bl	800af24 <_Balloc>
 800b096:	b940      	cbnz	r0, 800b0aa <__s2b+0x36>
 800b098:	4602      	mov	r2, r0
 800b09a:	4b19      	ldr	r3, [pc, #100]	; (800b100 <__s2b+0x8c>)
 800b09c:	4819      	ldr	r0, [pc, #100]	; (800b104 <__s2b+0x90>)
 800b09e:	21ce      	movs	r1, #206	; 0xce
 800b0a0:	f000 fe90 	bl	800bdc4 <__assert_func>
 800b0a4:	0052      	lsls	r2, r2, #1
 800b0a6:	3101      	adds	r1, #1
 800b0a8:	e7f0      	b.n	800b08c <__s2b+0x18>
 800b0aa:	9b08      	ldr	r3, [sp, #32]
 800b0ac:	6143      	str	r3, [r0, #20]
 800b0ae:	2d09      	cmp	r5, #9
 800b0b0:	f04f 0301 	mov.w	r3, #1
 800b0b4:	6103      	str	r3, [r0, #16]
 800b0b6:	dd16      	ble.n	800b0e6 <__s2b+0x72>
 800b0b8:	f104 0909 	add.w	r9, r4, #9
 800b0bc:	46c8      	mov	r8, r9
 800b0be:	442c      	add	r4, r5
 800b0c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b0c4:	4601      	mov	r1, r0
 800b0c6:	3b30      	subs	r3, #48	; 0x30
 800b0c8:	220a      	movs	r2, #10
 800b0ca:	4630      	mov	r0, r6
 800b0cc:	f7ff ff8c 	bl	800afe8 <__multadd>
 800b0d0:	45a0      	cmp	r8, r4
 800b0d2:	d1f5      	bne.n	800b0c0 <__s2b+0x4c>
 800b0d4:	f1a5 0408 	sub.w	r4, r5, #8
 800b0d8:	444c      	add	r4, r9
 800b0da:	1b2d      	subs	r5, r5, r4
 800b0dc:	1963      	adds	r3, r4, r5
 800b0de:	42bb      	cmp	r3, r7
 800b0e0:	db04      	blt.n	800b0ec <__s2b+0x78>
 800b0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b0e6:	340a      	adds	r4, #10
 800b0e8:	2509      	movs	r5, #9
 800b0ea:	e7f6      	b.n	800b0da <__s2b+0x66>
 800b0ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	3b30      	subs	r3, #48	; 0x30
 800b0f4:	220a      	movs	r2, #10
 800b0f6:	4630      	mov	r0, r6
 800b0f8:	f7ff ff76 	bl	800afe8 <__multadd>
 800b0fc:	e7ee      	b.n	800b0dc <__s2b+0x68>
 800b0fe:	bf00      	nop
 800b100:	0800cc28 	.word	0x0800cc28
 800b104:	0800ccb4 	.word	0x0800ccb4

0800b108 <__hi0bits>:
 800b108:	0c03      	lsrs	r3, r0, #16
 800b10a:	041b      	lsls	r3, r3, #16
 800b10c:	b9d3      	cbnz	r3, 800b144 <__hi0bits+0x3c>
 800b10e:	0400      	lsls	r0, r0, #16
 800b110:	2310      	movs	r3, #16
 800b112:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b116:	bf04      	itt	eq
 800b118:	0200      	lsleq	r0, r0, #8
 800b11a:	3308      	addeq	r3, #8
 800b11c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b120:	bf04      	itt	eq
 800b122:	0100      	lsleq	r0, r0, #4
 800b124:	3304      	addeq	r3, #4
 800b126:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b12a:	bf04      	itt	eq
 800b12c:	0080      	lsleq	r0, r0, #2
 800b12e:	3302      	addeq	r3, #2
 800b130:	2800      	cmp	r0, #0
 800b132:	db05      	blt.n	800b140 <__hi0bits+0x38>
 800b134:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b138:	f103 0301 	add.w	r3, r3, #1
 800b13c:	bf08      	it	eq
 800b13e:	2320      	moveq	r3, #32
 800b140:	4618      	mov	r0, r3
 800b142:	4770      	bx	lr
 800b144:	2300      	movs	r3, #0
 800b146:	e7e4      	b.n	800b112 <__hi0bits+0xa>

0800b148 <__lo0bits>:
 800b148:	6803      	ldr	r3, [r0, #0]
 800b14a:	f013 0207 	ands.w	r2, r3, #7
 800b14e:	4601      	mov	r1, r0
 800b150:	d00b      	beq.n	800b16a <__lo0bits+0x22>
 800b152:	07da      	lsls	r2, r3, #31
 800b154:	d423      	bmi.n	800b19e <__lo0bits+0x56>
 800b156:	0798      	lsls	r0, r3, #30
 800b158:	bf49      	itett	mi
 800b15a:	085b      	lsrmi	r3, r3, #1
 800b15c:	089b      	lsrpl	r3, r3, #2
 800b15e:	2001      	movmi	r0, #1
 800b160:	600b      	strmi	r3, [r1, #0]
 800b162:	bf5c      	itt	pl
 800b164:	600b      	strpl	r3, [r1, #0]
 800b166:	2002      	movpl	r0, #2
 800b168:	4770      	bx	lr
 800b16a:	b298      	uxth	r0, r3
 800b16c:	b9a8      	cbnz	r0, 800b19a <__lo0bits+0x52>
 800b16e:	0c1b      	lsrs	r3, r3, #16
 800b170:	2010      	movs	r0, #16
 800b172:	b2da      	uxtb	r2, r3
 800b174:	b90a      	cbnz	r2, 800b17a <__lo0bits+0x32>
 800b176:	3008      	adds	r0, #8
 800b178:	0a1b      	lsrs	r3, r3, #8
 800b17a:	071a      	lsls	r2, r3, #28
 800b17c:	bf04      	itt	eq
 800b17e:	091b      	lsreq	r3, r3, #4
 800b180:	3004      	addeq	r0, #4
 800b182:	079a      	lsls	r2, r3, #30
 800b184:	bf04      	itt	eq
 800b186:	089b      	lsreq	r3, r3, #2
 800b188:	3002      	addeq	r0, #2
 800b18a:	07da      	lsls	r2, r3, #31
 800b18c:	d403      	bmi.n	800b196 <__lo0bits+0x4e>
 800b18e:	085b      	lsrs	r3, r3, #1
 800b190:	f100 0001 	add.w	r0, r0, #1
 800b194:	d005      	beq.n	800b1a2 <__lo0bits+0x5a>
 800b196:	600b      	str	r3, [r1, #0]
 800b198:	4770      	bx	lr
 800b19a:	4610      	mov	r0, r2
 800b19c:	e7e9      	b.n	800b172 <__lo0bits+0x2a>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	4770      	bx	lr
 800b1a2:	2020      	movs	r0, #32
 800b1a4:	4770      	bx	lr
	...

0800b1a8 <__i2b>:
 800b1a8:	b510      	push	{r4, lr}
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	2101      	movs	r1, #1
 800b1ae:	f7ff feb9 	bl	800af24 <_Balloc>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	b928      	cbnz	r0, 800b1c2 <__i2b+0x1a>
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <__i2b+0x24>)
 800b1b8:	4805      	ldr	r0, [pc, #20]	; (800b1d0 <__i2b+0x28>)
 800b1ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b1be:	f000 fe01 	bl	800bdc4 <__assert_func>
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	6144      	str	r4, [r0, #20]
 800b1c6:	6103      	str	r3, [r0, #16]
 800b1c8:	bd10      	pop	{r4, pc}
 800b1ca:	bf00      	nop
 800b1cc:	0800cc28 	.word	0x0800cc28
 800b1d0:	0800ccb4 	.word	0x0800ccb4

0800b1d4 <__multiply>:
 800b1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	4691      	mov	r9, r2
 800b1da:	690a      	ldr	r2, [r1, #16]
 800b1dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	bfb8      	it	lt
 800b1e4:	460b      	movlt	r3, r1
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	bfbc      	itt	lt
 800b1ea:	464c      	movlt	r4, r9
 800b1ec:	4699      	movlt	r9, r3
 800b1ee:	6927      	ldr	r7, [r4, #16]
 800b1f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b1f4:	68a3      	ldr	r3, [r4, #8]
 800b1f6:	6861      	ldr	r1, [r4, #4]
 800b1f8:	eb07 060a 	add.w	r6, r7, sl
 800b1fc:	42b3      	cmp	r3, r6
 800b1fe:	b085      	sub	sp, #20
 800b200:	bfb8      	it	lt
 800b202:	3101      	addlt	r1, #1
 800b204:	f7ff fe8e 	bl	800af24 <_Balloc>
 800b208:	b930      	cbnz	r0, 800b218 <__multiply+0x44>
 800b20a:	4602      	mov	r2, r0
 800b20c:	4b44      	ldr	r3, [pc, #272]	; (800b320 <__multiply+0x14c>)
 800b20e:	4845      	ldr	r0, [pc, #276]	; (800b324 <__multiply+0x150>)
 800b210:	f240 115d 	movw	r1, #349	; 0x15d
 800b214:	f000 fdd6 	bl	800bdc4 <__assert_func>
 800b218:	f100 0514 	add.w	r5, r0, #20
 800b21c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b220:	462b      	mov	r3, r5
 800b222:	2200      	movs	r2, #0
 800b224:	4543      	cmp	r3, r8
 800b226:	d321      	bcc.n	800b26c <__multiply+0x98>
 800b228:	f104 0314 	add.w	r3, r4, #20
 800b22c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b230:	f109 0314 	add.w	r3, r9, #20
 800b234:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b238:	9202      	str	r2, [sp, #8]
 800b23a:	1b3a      	subs	r2, r7, r4
 800b23c:	3a15      	subs	r2, #21
 800b23e:	f022 0203 	bic.w	r2, r2, #3
 800b242:	3204      	adds	r2, #4
 800b244:	f104 0115 	add.w	r1, r4, #21
 800b248:	428f      	cmp	r7, r1
 800b24a:	bf38      	it	cc
 800b24c:	2204      	movcc	r2, #4
 800b24e:	9201      	str	r2, [sp, #4]
 800b250:	9a02      	ldr	r2, [sp, #8]
 800b252:	9303      	str	r3, [sp, #12]
 800b254:	429a      	cmp	r2, r3
 800b256:	d80c      	bhi.n	800b272 <__multiply+0x9e>
 800b258:	2e00      	cmp	r6, #0
 800b25a:	dd03      	ble.n	800b264 <__multiply+0x90>
 800b25c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b260:	2b00      	cmp	r3, #0
 800b262:	d05a      	beq.n	800b31a <__multiply+0x146>
 800b264:	6106      	str	r6, [r0, #16]
 800b266:	b005      	add	sp, #20
 800b268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b26c:	f843 2b04 	str.w	r2, [r3], #4
 800b270:	e7d8      	b.n	800b224 <__multiply+0x50>
 800b272:	f8b3 a000 	ldrh.w	sl, [r3]
 800b276:	f1ba 0f00 	cmp.w	sl, #0
 800b27a:	d024      	beq.n	800b2c6 <__multiply+0xf2>
 800b27c:	f104 0e14 	add.w	lr, r4, #20
 800b280:	46a9      	mov	r9, r5
 800b282:	f04f 0c00 	mov.w	ip, #0
 800b286:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b28a:	f8d9 1000 	ldr.w	r1, [r9]
 800b28e:	fa1f fb82 	uxth.w	fp, r2
 800b292:	b289      	uxth	r1, r1
 800b294:	fb0a 110b 	mla	r1, sl, fp, r1
 800b298:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b29c:	f8d9 2000 	ldr.w	r2, [r9]
 800b2a0:	4461      	add	r1, ip
 800b2a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800b2aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b2ae:	b289      	uxth	r1, r1
 800b2b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b2b4:	4577      	cmp	r7, lr
 800b2b6:	f849 1b04 	str.w	r1, [r9], #4
 800b2ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b2be:	d8e2      	bhi.n	800b286 <__multiply+0xb2>
 800b2c0:	9a01      	ldr	r2, [sp, #4]
 800b2c2:	f845 c002 	str.w	ip, [r5, r2]
 800b2c6:	9a03      	ldr	r2, [sp, #12]
 800b2c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b2cc:	3304      	adds	r3, #4
 800b2ce:	f1b9 0f00 	cmp.w	r9, #0
 800b2d2:	d020      	beq.n	800b316 <__multiply+0x142>
 800b2d4:	6829      	ldr	r1, [r5, #0]
 800b2d6:	f104 0c14 	add.w	ip, r4, #20
 800b2da:	46ae      	mov	lr, r5
 800b2dc:	f04f 0a00 	mov.w	sl, #0
 800b2e0:	f8bc b000 	ldrh.w	fp, [ip]
 800b2e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b2e8:	fb09 220b 	mla	r2, r9, fp, r2
 800b2ec:	4492      	add	sl, r2
 800b2ee:	b289      	uxth	r1, r1
 800b2f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b2f4:	f84e 1b04 	str.w	r1, [lr], #4
 800b2f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2fc:	f8be 1000 	ldrh.w	r1, [lr]
 800b300:	0c12      	lsrs	r2, r2, #16
 800b302:	fb09 1102 	mla	r1, r9, r2, r1
 800b306:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b30a:	4567      	cmp	r7, ip
 800b30c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b310:	d8e6      	bhi.n	800b2e0 <__multiply+0x10c>
 800b312:	9a01      	ldr	r2, [sp, #4]
 800b314:	50a9      	str	r1, [r5, r2]
 800b316:	3504      	adds	r5, #4
 800b318:	e79a      	b.n	800b250 <__multiply+0x7c>
 800b31a:	3e01      	subs	r6, #1
 800b31c:	e79c      	b.n	800b258 <__multiply+0x84>
 800b31e:	bf00      	nop
 800b320:	0800cc28 	.word	0x0800cc28
 800b324:	0800ccb4 	.word	0x0800ccb4

0800b328 <__pow5mult>:
 800b328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b32c:	4615      	mov	r5, r2
 800b32e:	f012 0203 	ands.w	r2, r2, #3
 800b332:	4606      	mov	r6, r0
 800b334:	460f      	mov	r7, r1
 800b336:	d007      	beq.n	800b348 <__pow5mult+0x20>
 800b338:	4c25      	ldr	r4, [pc, #148]	; (800b3d0 <__pow5mult+0xa8>)
 800b33a:	3a01      	subs	r2, #1
 800b33c:	2300      	movs	r3, #0
 800b33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b342:	f7ff fe51 	bl	800afe8 <__multadd>
 800b346:	4607      	mov	r7, r0
 800b348:	10ad      	asrs	r5, r5, #2
 800b34a:	d03d      	beq.n	800b3c8 <__pow5mult+0xa0>
 800b34c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b34e:	b97c      	cbnz	r4, 800b370 <__pow5mult+0x48>
 800b350:	2010      	movs	r0, #16
 800b352:	f7ff fdbf 	bl	800aed4 <malloc>
 800b356:	4602      	mov	r2, r0
 800b358:	6270      	str	r0, [r6, #36]	; 0x24
 800b35a:	b928      	cbnz	r0, 800b368 <__pow5mult+0x40>
 800b35c:	4b1d      	ldr	r3, [pc, #116]	; (800b3d4 <__pow5mult+0xac>)
 800b35e:	481e      	ldr	r0, [pc, #120]	; (800b3d8 <__pow5mult+0xb0>)
 800b360:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b364:	f000 fd2e 	bl	800bdc4 <__assert_func>
 800b368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b36c:	6004      	str	r4, [r0, #0]
 800b36e:	60c4      	str	r4, [r0, #12]
 800b370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b378:	b94c      	cbnz	r4, 800b38e <__pow5mult+0x66>
 800b37a:	f240 2171 	movw	r1, #625	; 0x271
 800b37e:	4630      	mov	r0, r6
 800b380:	f7ff ff12 	bl	800b1a8 <__i2b>
 800b384:	2300      	movs	r3, #0
 800b386:	f8c8 0008 	str.w	r0, [r8, #8]
 800b38a:	4604      	mov	r4, r0
 800b38c:	6003      	str	r3, [r0, #0]
 800b38e:	f04f 0900 	mov.w	r9, #0
 800b392:	07eb      	lsls	r3, r5, #31
 800b394:	d50a      	bpl.n	800b3ac <__pow5mult+0x84>
 800b396:	4639      	mov	r1, r7
 800b398:	4622      	mov	r2, r4
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7ff ff1a 	bl	800b1d4 <__multiply>
 800b3a0:	4639      	mov	r1, r7
 800b3a2:	4680      	mov	r8, r0
 800b3a4:	4630      	mov	r0, r6
 800b3a6:	f7ff fdfd 	bl	800afa4 <_Bfree>
 800b3aa:	4647      	mov	r7, r8
 800b3ac:	106d      	asrs	r5, r5, #1
 800b3ae:	d00b      	beq.n	800b3c8 <__pow5mult+0xa0>
 800b3b0:	6820      	ldr	r0, [r4, #0]
 800b3b2:	b938      	cbnz	r0, 800b3c4 <__pow5mult+0x9c>
 800b3b4:	4622      	mov	r2, r4
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	4630      	mov	r0, r6
 800b3ba:	f7ff ff0b 	bl	800b1d4 <__multiply>
 800b3be:	6020      	str	r0, [r4, #0]
 800b3c0:	f8c0 9000 	str.w	r9, [r0]
 800b3c4:	4604      	mov	r4, r0
 800b3c6:	e7e4      	b.n	800b392 <__pow5mult+0x6a>
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3ce:	bf00      	nop
 800b3d0:	0800ce00 	.word	0x0800ce00
 800b3d4:	0800cbb6 	.word	0x0800cbb6
 800b3d8:	0800ccb4 	.word	0x0800ccb4

0800b3dc <__lshift>:
 800b3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b3e0:	460c      	mov	r4, r1
 800b3e2:	6849      	ldr	r1, [r1, #4]
 800b3e4:	6923      	ldr	r3, [r4, #16]
 800b3e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b3ea:	68a3      	ldr	r3, [r4, #8]
 800b3ec:	4607      	mov	r7, r0
 800b3ee:	4691      	mov	r9, r2
 800b3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b3f4:	f108 0601 	add.w	r6, r8, #1
 800b3f8:	42b3      	cmp	r3, r6
 800b3fa:	db0b      	blt.n	800b414 <__lshift+0x38>
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	f7ff fd91 	bl	800af24 <_Balloc>
 800b402:	4605      	mov	r5, r0
 800b404:	b948      	cbnz	r0, 800b41a <__lshift+0x3e>
 800b406:	4602      	mov	r2, r0
 800b408:	4b2a      	ldr	r3, [pc, #168]	; (800b4b4 <__lshift+0xd8>)
 800b40a:	482b      	ldr	r0, [pc, #172]	; (800b4b8 <__lshift+0xdc>)
 800b40c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b410:	f000 fcd8 	bl	800bdc4 <__assert_func>
 800b414:	3101      	adds	r1, #1
 800b416:	005b      	lsls	r3, r3, #1
 800b418:	e7ee      	b.n	800b3f8 <__lshift+0x1c>
 800b41a:	2300      	movs	r3, #0
 800b41c:	f100 0114 	add.w	r1, r0, #20
 800b420:	f100 0210 	add.w	r2, r0, #16
 800b424:	4618      	mov	r0, r3
 800b426:	4553      	cmp	r3, sl
 800b428:	db37      	blt.n	800b49a <__lshift+0xbe>
 800b42a:	6920      	ldr	r0, [r4, #16]
 800b42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b430:	f104 0314 	add.w	r3, r4, #20
 800b434:	f019 091f 	ands.w	r9, r9, #31
 800b438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b43c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b440:	d02f      	beq.n	800b4a2 <__lshift+0xc6>
 800b442:	f1c9 0e20 	rsb	lr, r9, #32
 800b446:	468a      	mov	sl, r1
 800b448:	f04f 0c00 	mov.w	ip, #0
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	fa02 f209 	lsl.w	r2, r2, r9
 800b452:	ea42 020c 	orr.w	r2, r2, ip
 800b456:	f84a 2b04 	str.w	r2, [sl], #4
 800b45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b45e:	4298      	cmp	r0, r3
 800b460:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b464:	d8f2      	bhi.n	800b44c <__lshift+0x70>
 800b466:	1b03      	subs	r3, r0, r4
 800b468:	3b15      	subs	r3, #21
 800b46a:	f023 0303 	bic.w	r3, r3, #3
 800b46e:	3304      	adds	r3, #4
 800b470:	f104 0215 	add.w	r2, r4, #21
 800b474:	4290      	cmp	r0, r2
 800b476:	bf38      	it	cc
 800b478:	2304      	movcc	r3, #4
 800b47a:	f841 c003 	str.w	ip, [r1, r3]
 800b47e:	f1bc 0f00 	cmp.w	ip, #0
 800b482:	d001      	beq.n	800b488 <__lshift+0xac>
 800b484:	f108 0602 	add.w	r6, r8, #2
 800b488:	3e01      	subs	r6, #1
 800b48a:	4638      	mov	r0, r7
 800b48c:	612e      	str	r6, [r5, #16]
 800b48e:	4621      	mov	r1, r4
 800b490:	f7ff fd88 	bl	800afa4 <_Bfree>
 800b494:	4628      	mov	r0, r5
 800b496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b49a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b49e:	3301      	adds	r3, #1
 800b4a0:	e7c1      	b.n	800b426 <__lshift+0x4a>
 800b4a2:	3904      	subs	r1, #4
 800b4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800b4ac:	4298      	cmp	r0, r3
 800b4ae:	d8f9      	bhi.n	800b4a4 <__lshift+0xc8>
 800b4b0:	e7ea      	b.n	800b488 <__lshift+0xac>
 800b4b2:	bf00      	nop
 800b4b4:	0800cc28 	.word	0x0800cc28
 800b4b8:	0800ccb4 	.word	0x0800ccb4

0800b4bc <__mcmp>:
 800b4bc:	b530      	push	{r4, r5, lr}
 800b4be:	6902      	ldr	r2, [r0, #16]
 800b4c0:	690c      	ldr	r4, [r1, #16]
 800b4c2:	1b12      	subs	r2, r2, r4
 800b4c4:	d10e      	bne.n	800b4e4 <__mcmp+0x28>
 800b4c6:	f100 0314 	add.w	r3, r0, #20
 800b4ca:	3114      	adds	r1, #20
 800b4cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b4d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b4d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b4d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b4dc:	42a5      	cmp	r5, r4
 800b4de:	d003      	beq.n	800b4e8 <__mcmp+0x2c>
 800b4e0:	d305      	bcc.n	800b4ee <__mcmp+0x32>
 800b4e2:	2201      	movs	r2, #1
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	bd30      	pop	{r4, r5, pc}
 800b4e8:	4283      	cmp	r3, r0
 800b4ea:	d3f3      	bcc.n	800b4d4 <__mcmp+0x18>
 800b4ec:	e7fa      	b.n	800b4e4 <__mcmp+0x28>
 800b4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800b4f2:	e7f7      	b.n	800b4e4 <__mcmp+0x28>

0800b4f4 <__mdiff>:
 800b4f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4f8:	460c      	mov	r4, r1
 800b4fa:	4606      	mov	r6, r0
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	4620      	mov	r0, r4
 800b500:	4690      	mov	r8, r2
 800b502:	f7ff ffdb 	bl	800b4bc <__mcmp>
 800b506:	1e05      	subs	r5, r0, #0
 800b508:	d110      	bne.n	800b52c <__mdiff+0x38>
 800b50a:	4629      	mov	r1, r5
 800b50c:	4630      	mov	r0, r6
 800b50e:	f7ff fd09 	bl	800af24 <_Balloc>
 800b512:	b930      	cbnz	r0, 800b522 <__mdiff+0x2e>
 800b514:	4b3a      	ldr	r3, [pc, #232]	; (800b600 <__mdiff+0x10c>)
 800b516:	4602      	mov	r2, r0
 800b518:	f240 2132 	movw	r1, #562	; 0x232
 800b51c:	4839      	ldr	r0, [pc, #228]	; (800b604 <__mdiff+0x110>)
 800b51e:	f000 fc51 	bl	800bdc4 <__assert_func>
 800b522:	2301      	movs	r3, #1
 800b524:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52c:	bfa4      	itt	ge
 800b52e:	4643      	movge	r3, r8
 800b530:	46a0      	movge	r8, r4
 800b532:	4630      	mov	r0, r6
 800b534:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b538:	bfa6      	itte	ge
 800b53a:	461c      	movge	r4, r3
 800b53c:	2500      	movge	r5, #0
 800b53e:	2501      	movlt	r5, #1
 800b540:	f7ff fcf0 	bl	800af24 <_Balloc>
 800b544:	b920      	cbnz	r0, 800b550 <__mdiff+0x5c>
 800b546:	4b2e      	ldr	r3, [pc, #184]	; (800b600 <__mdiff+0x10c>)
 800b548:	4602      	mov	r2, r0
 800b54a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b54e:	e7e5      	b.n	800b51c <__mdiff+0x28>
 800b550:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b554:	6926      	ldr	r6, [r4, #16]
 800b556:	60c5      	str	r5, [r0, #12]
 800b558:	f104 0914 	add.w	r9, r4, #20
 800b55c:	f108 0514 	add.w	r5, r8, #20
 800b560:	f100 0e14 	add.w	lr, r0, #20
 800b564:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b568:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b56c:	f108 0210 	add.w	r2, r8, #16
 800b570:	46f2      	mov	sl, lr
 800b572:	2100      	movs	r1, #0
 800b574:	f859 3b04 	ldr.w	r3, [r9], #4
 800b578:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b57c:	fa1f f883 	uxth.w	r8, r3
 800b580:	fa11 f18b 	uxtah	r1, r1, fp
 800b584:	0c1b      	lsrs	r3, r3, #16
 800b586:	eba1 0808 	sub.w	r8, r1, r8
 800b58a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b58e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b592:	fa1f f888 	uxth.w	r8, r8
 800b596:	1419      	asrs	r1, r3, #16
 800b598:	454e      	cmp	r6, r9
 800b59a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b59e:	f84a 3b04 	str.w	r3, [sl], #4
 800b5a2:	d8e7      	bhi.n	800b574 <__mdiff+0x80>
 800b5a4:	1b33      	subs	r3, r6, r4
 800b5a6:	3b15      	subs	r3, #21
 800b5a8:	f023 0303 	bic.w	r3, r3, #3
 800b5ac:	3304      	adds	r3, #4
 800b5ae:	3415      	adds	r4, #21
 800b5b0:	42a6      	cmp	r6, r4
 800b5b2:	bf38      	it	cc
 800b5b4:	2304      	movcc	r3, #4
 800b5b6:	441d      	add	r5, r3
 800b5b8:	4473      	add	r3, lr
 800b5ba:	469e      	mov	lr, r3
 800b5bc:	462e      	mov	r6, r5
 800b5be:	4566      	cmp	r6, ip
 800b5c0:	d30e      	bcc.n	800b5e0 <__mdiff+0xec>
 800b5c2:	f10c 0203 	add.w	r2, ip, #3
 800b5c6:	1b52      	subs	r2, r2, r5
 800b5c8:	f022 0203 	bic.w	r2, r2, #3
 800b5cc:	3d03      	subs	r5, #3
 800b5ce:	45ac      	cmp	ip, r5
 800b5d0:	bf38      	it	cc
 800b5d2:	2200      	movcc	r2, #0
 800b5d4:	441a      	add	r2, r3
 800b5d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b5da:	b17b      	cbz	r3, 800b5fc <__mdiff+0x108>
 800b5dc:	6107      	str	r7, [r0, #16]
 800b5de:	e7a3      	b.n	800b528 <__mdiff+0x34>
 800b5e0:	f856 8b04 	ldr.w	r8, [r6], #4
 800b5e4:	fa11 f288 	uxtah	r2, r1, r8
 800b5e8:	1414      	asrs	r4, r2, #16
 800b5ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b5ee:	b292      	uxth	r2, r2
 800b5f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b5f4:	f84e 2b04 	str.w	r2, [lr], #4
 800b5f8:	1421      	asrs	r1, r4, #16
 800b5fa:	e7e0      	b.n	800b5be <__mdiff+0xca>
 800b5fc:	3f01      	subs	r7, #1
 800b5fe:	e7ea      	b.n	800b5d6 <__mdiff+0xe2>
 800b600:	0800cc28 	.word	0x0800cc28
 800b604:	0800ccb4 	.word	0x0800ccb4

0800b608 <__ulp>:
 800b608:	b082      	sub	sp, #8
 800b60a:	ed8d 0b00 	vstr	d0, [sp]
 800b60e:	9b01      	ldr	r3, [sp, #4]
 800b610:	4912      	ldr	r1, [pc, #72]	; (800b65c <__ulp+0x54>)
 800b612:	4019      	ands	r1, r3
 800b614:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b618:	2900      	cmp	r1, #0
 800b61a:	dd05      	ble.n	800b628 <__ulp+0x20>
 800b61c:	2200      	movs	r2, #0
 800b61e:	460b      	mov	r3, r1
 800b620:	ec43 2b10 	vmov	d0, r2, r3
 800b624:	b002      	add	sp, #8
 800b626:	4770      	bx	lr
 800b628:	4249      	negs	r1, r1
 800b62a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b62e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b632:	f04f 0200 	mov.w	r2, #0
 800b636:	f04f 0300 	mov.w	r3, #0
 800b63a:	da04      	bge.n	800b646 <__ulp+0x3e>
 800b63c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b640:	fa41 f300 	asr.w	r3, r1, r0
 800b644:	e7ec      	b.n	800b620 <__ulp+0x18>
 800b646:	f1a0 0114 	sub.w	r1, r0, #20
 800b64a:	291e      	cmp	r1, #30
 800b64c:	bfda      	itte	le
 800b64e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b652:	fa20 f101 	lsrle.w	r1, r0, r1
 800b656:	2101      	movgt	r1, #1
 800b658:	460a      	mov	r2, r1
 800b65a:	e7e1      	b.n	800b620 <__ulp+0x18>
 800b65c:	7ff00000 	.word	0x7ff00000

0800b660 <__b2d>:
 800b660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b662:	6905      	ldr	r5, [r0, #16]
 800b664:	f100 0714 	add.w	r7, r0, #20
 800b668:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b66c:	1f2e      	subs	r6, r5, #4
 800b66e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b672:	4620      	mov	r0, r4
 800b674:	f7ff fd48 	bl	800b108 <__hi0bits>
 800b678:	f1c0 0320 	rsb	r3, r0, #32
 800b67c:	280a      	cmp	r0, #10
 800b67e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b6fc <__b2d+0x9c>
 800b682:	600b      	str	r3, [r1, #0]
 800b684:	dc14      	bgt.n	800b6b0 <__b2d+0x50>
 800b686:	f1c0 0e0b 	rsb	lr, r0, #11
 800b68a:	fa24 f10e 	lsr.w	r1, r4, lr
 800b68e:	42b7      	cmp	r7, r6
 800b690:	ea41 030c 	orr.w	r3, r1, ip
 800b694:	bf34      	ite	cc
 800b696:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b69a:	2100      	movcs	r1, #0
 800b69c:	3015      	adds	r0, #21
 800b69e:	fa04 f000 	lsl.w	r0, r4, r0
 800b6a2:	fa21 f10e 	lsr.w	r1, r1, lr
 800b6a6:	ea40 0201 	orr.w	r2, r0, r1
 800b6aa:	ec43 2b10 	vmov	d0, r2, r3
 800b6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6b0:	42b7      	cmp	r7, r6
 800b6b2:	bf3a      	itte	cc
 800b6b4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b6b8:	f1a5 0608 	subcc.w	r6, r5, #8
 800b6bc:	2100      	movcs	r1, #0
 800b6be:	380b      	subs	r0, #11
 800b6c0:	d017      	beq.n	800b6f2 <__b2d+0x92>
 800b6c2:	f1c0 0c20 	rsb	ip, r0, #32
 800b6c6:	fa04 f500 	lsl.w	r5, r4, r0
 800b6ca:	42be      	cmp	r6, r7
 800b6cc:	fa21 f40c 	lsr.w	r4, r1, ip
 800b6d0:	ea45 0504 	orr.w	r5, r5, r4
 800b6d4:	bf8c      	ite	hi
 800b6d6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b6da:	2400      	movls	r4, #0
 800b6dc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b6e0:	fa01 f000 	lsl.w	r0, r1, r0
 800b6e4:	fa24 f40c 	lsr.w	r4, r4, ip
 800b6e8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b6ec:	ea40 0204 	orr.w	r2, r0, r4
 800b6f0:	e7db      	b.n	800b6aa <__b2d+0x4a>
 800b6f2:	ea44 030c 	orr.w	r3, r4, ip
 800b6f6:	460a      	mov	r2, r1
 800b6f8:	e7d7      	b.n	800b6aa <__b2d+0x4a>
 800b6fa:	bf00      	nop
 800b6fc:	3ff00000 	.word	0x3ff00000

0800b700 <__d2b>:
 800b700:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b704:	4689      	mov	r9, r1
 800b706:	2101      	movs	r1, #1
 800b708:	ec57 6b10 	vmov	r6, r7, d0
 800b70c:	4690      	mov	r8, r2
 800b70e:	f7ff fc09 	bl	800af24 <_Balloc>
 800b712:	4604      	mov	r4, r0
 800b714:	b930      	cbnz	r0, 800b724 <__d2b+0x24>
 800b716:	4602      	mov	r2, r0
 800b718:	4b25      	ldr	r3, [pc, #148]	; (800b7b0 <__d2b+0xb0>)
 800b71a:	4826      	ldr	r0, [pc, #152]	; (800b7b4 <__d2b+0xb4>)
 800b71c:	f240 310a 	movw	r1, #778	; 0x30a
 800b720:	f000 fb50 	bl	800bdc4 <__assert_func>
 800b724:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b728:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b72c:	bb35      	cbnz	r5, 800b77c <__d2b+0x7c>
 800b72e:	2e00      	cmp	r6, #0
 800b730:	9301      	str	r3, [sp, #4]
 800b732:	d028      	beq.n	800b786 <__d2b+0x86>
 800b734:	4668      	mov	r0, sp
 800b736:	9600      	str	r6, [sp, #0]
 800b738:	f7ff fd06 	bl	800b148 <__lo0bits>
 800b73c:	9900      	ldr	r1, [sp, #0]
 800b73e:	b300      	cbz	r0, 800b782 <__d2b+0x82>
 800b740:	9a01      	ldr	r2, [sp, #4]
 800b742:	f1c0 0320 	rsb	r3, r0, #32
 800b746:	fa02 f303 	lsl.w	r3, r2, r3
 800b74a:	430b      	orrs	r3, r1
 800b74c:	40c2      	lsrs	r2, r0
 800b74e:	6163      	str	r3, [r4, #20]
 800b750:	9201      	str	r2, [sp, #4]
 800b752:	9b01      	ldr	r3, [sp, #4]
 800b754:	61a3      	str	r3, [r4, #24]
 800b756:	2b00      	cmp	r3, #0
 800b758:	bf14      	ite	ne
 800b75a:	2202      	movne	r2, #2
 800b75c:	2201      	moveq	r2, #1
 800b75e:	6122      	str	r2, [r4, #16]
 800b760:	b1d5      	cbz	r5, 800b798 <__d2b+0x98>
 800b762:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b766:	4405      	add	r5, r0
 800b768:	f8c9 5000 	str.w	r5, [r9]
 800b76c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b770:	f8c8 0000 	str.w	r0, [r8]
 800b774:	4620      	mov	r0, r4
 800b776:	b003      	add	sp, #12
 800b778:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b77c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b780:	e7d5      	b.n	800b72e <__d2b+0x2e>
 800b782:	6161      	str	r1, [r4, #20]
 800b784:	e7e5      	b.n	800b752 <__d2b+0x52>
 800b786:	a801      	add	r0, sp, #4
 800b788:	f7ff fcde 	bl	800b148 <__lo0bits>
 800b78c:	9b01      	ldr	r3, [sp, #4]
 800b78e:	6163      	str	r3, [r4, #20]
 800b790:	2201      	movs	r2, #1
 800b792:	6122      	str	r2, [r4, #16]
 800b794:	3020      	adds	r0, #32
 800b796:	e7e3      	b.n	800b760 <__d2b+0x60>
 800b798:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b79c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b7a0:	f8c9 0000 	str.w	r0, [r9]
 800b7a4:	6918      	ldr	r0, [r3, #16]
 800b7a6:	f7ff fcaf 	bl	800b108 <__hi0bits>
 800b7aa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b7ae:	e7df      	b.n	800b770 <__d2b+0x70>
 800b7b0:	0800cc28 	.word	0x0800cc28
 800b7b4:	0800ccb4 	.word	0x0800ccb4

0800b7b8 <__ratio>:
 800b7b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	4688      	mov	r8, r1
 800b7be:	4669      	mov	r1, sp
 800b7c0:	4681      	mov	r9, r0
 800b7c2:	f7ff ff4d 	bl	800b660 <__b2d>
 800b7c6:	a901      	add	r1, sp, #4
 800b7c8:	4640      	mov	r0, r8
 800b7ca:	ec55 4b10 	vmov	r4, r5, d0
 800b7ce:	f7ff ff47 	bl	800b660 <__b2d>
 800b7d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b7d6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b7da:	eba3 0c02 	sub.w	ip, r3, r2
 800b7de:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b7e2:	1a9b      	subs	r3, r3, r2
 800b7e4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b7e8:	ec51 0b10 	vmov	r0, r1, d0
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	bfd6      	itet	le
 800b7f0:	460a      	movle	r2, r1
 800b7f2:	462a      	movgt	r2, r5
 800b7f4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b7f8:	468b      	mov	fp, r1
 800b7fa:	462f      	mov	r7, r5
 800b7fc:	bfd4      	ite	le
 800b7fe:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b802:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b806:	4620      	mov	r0, r4
 800b808:	ee10 2a10 	vmov	r2, s0
 800b80c:	465b      	mov	r3, fp
 800b80e:	4639      	mov	r1, r7
 800b810:	f7f5 f81c 	bl	800084c <__aeabi_ddiv>
 800b814:	ec41 0b10 	vmov	d0, r0, r1
 800b818:	b003      	add	sp, #12
 800b81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b81e <__copybits>:
 800b81e:	3901      	subs	r1, #1
 800b820:	b570      	push	{r4, r5, r6, lr}
 800b822:	1149      	asrs	r1, r1, #5
 800b824:	6914      	ldr	r4, [r2, #16]
 800b826:	3101      	adds	r1, #1
 800b828:	f102 0314 	add.w	r3, r2, #20
 800b82c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b830:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b834:	1f05      	subs	r5, r0, #4
 800b836:	42a3      	cmp	r3, r4
 800b838:	d30c      	bcc.n	800b854 <__copybits+0x36>
 800b83a:	1aa3      	subs	r3, r4, r2
 800b83c:	3b11      	subs	r3, #17
 800b83e:	f023 0303 	bic.w	r3, r3, #3
 800b842:	3211      	adds	r2, #17
 800b844:	42a2      	cmp	r2, r4
 800b846:	bf88      	it	hi
 800b848:	2300      	movhi	r3, #0
 800b84a:	4418      	add	r0, r3
 800b84c:	2300      	movs	r3, #0
 800b84e:	4288      	cmp	r0, r1
 800b850:	d305      	bcc.n	800b85e <__copybits+0x40>
 800b852:	bd70      	pop	{r4, r5, r6, pc}
 800b854:	f853 6b04 	ldr.w	r6, [r3], #4
 800b858:	f845 6f04 	str.w	r6, [r5, #4]!
 800b85c:	e7eb      	b.n	800b836 <__copybits+0x18>
 800b85e:	f840 3b04 	str.w	r3, [r0], #4
 800b862:	e7f4      	b.n	800b84e <__copybits+0x30>

0800b864 <__any_on>:
 800b864:	f100 0214 	add.w	r2, r0, #20
 800b868:	6900      	ldr	r0, [r0, #16]
 800b86a:	114b      	asrs	r3, r1, #5
 800b86c:	4298      	cmp	r0, r3
 800b86e:	b510      	push	{r4, lr}
 800b870:	db11      	blt.n	800b896 <__any_on+0x32>
 800b872:	dd0a      	ble.n	800b88a <__any_on+0x26>
 800b874:	f011 011f 	ands.w	r1, r1, #31
 800b878:	d007      	beq.n	800b88a <__any_on+0x26>
 800b87a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b87e:	fa24 f001 	lsr.w	r0, r4, r1
 800b882:	fa00 f101 	lsl.w	r1, r0, r1
 800b886:	428c      	cmp	r4, r1
 800b888:	d10b      	bne.n	800b8a2 <__any_on+0x3e>
 800b88a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b88e:	4293      	cmp	r3, r2
 800b890:	d803      	bhi.n	800b89a <__any_on+0x36>
 800b892:	2000      	movs	r0, #0
 800b894:	bd10      	pop	{r4, pc}
 800b896:	4603      	mov	r3, r0
 800b898:	e7f7      	b.n	800b88a <__any_on+0x26>
 800b89a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b89e:	2900      	cmp	r1, #0
 800b8a0:	d0f5      	beq.n	800b88e <__any_on+0x2a>
 800b8a2:	2001      	movs	r0, #1
 800b8a4:	e7f6      	b.n	800b894 <__any_on+0x30>

0800b8a6 <_calloc_r>:
 800b8a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8a8:	fba1 2402 	umull	r2, r4, r1, r2
 800b8ac:	b94c      	cbnz	r4, 800b8c2 <_calloc_r+0x1c>
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	9201      	str	r2, [sp, #4]
 800b8b2:	f000 f87b 	bl	800b9ac <_malloc_r>
 800b8b6:	9a01      	ldr	r2, [sp, #4]
 800b8b8:	4605      	mov	r5, r0
 800b8ba:	b930      	cbnz	r0, 800b8ca <_calloc_r+0x24>
 800b8bc:	4628      	mov	r0, r5
 800b8be:	b003      	add	sp, #12
 800b8c0:	bd30      	pop	{r4, r5, pc}
 800b8c2:	220c      	movs	r2, #12
 800b8c4:	6002      	str	r2, [r0, #0]
 800b8c6:	2500      	movs	r5, #0
 800b8c8:	e7f8      	b.n	800b8bc <_calloc_r+0x16>
 800b8ca:	4621      	mov	r1, r4
 800b8cc:	f7fc fbc0 	bl	8008050 <memset>
 800b8d0:	e7f4      	b.n	800b8bc <_calloc_r+0x16>
	...

0800b8d4 <_free_r>:
 800b8d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8d6:	2900      	cmp	r1, #0
 800b8d8:	d044      	beq.n	800b964 <_free_r+0x90>
 800b8da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8de:	9001      	str	r0, [sp, #4]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	f1a1 0404 	sub.w	r4, r1, #4
 800b8e6:	bfb8      	it	lt
 800b8e8:	18e4      	addlt	r4, r4, r3
 800b8ea:	f000 fab5 	bl	800be58 <__malloc_lock>
 800b8ee:	4a1e      	ldr	r2, [pc, #120]	; (800b968 <_free_r+0x94>)
 800b8f0:	9801      	ldr	r0, [sp, #4]
 800b8f2:	6813      	ldr	r3, [r2, #0]
 800b8f4:	b933      	cbnz	r3, 800b904 <_free_r+0x30>
 800b8f6:	6063      	str	r3, [r4, #4]
 800b8f8:	6014      	str	r4, [r2, #0]
 800b8fa:	b003      	add	sp, #12
 800b8fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b900:	f000 bab0 	b.w	800be64 <__malloc_unlock>
 800b904:	42a3      	cmp	r3, r4
 800b906:	d908      	bls.n	800b91a <_free_r+0x46>
 800b908:	6825      	ldr	r5, [r4, #0]
 800b90a:	1961      	adds	r1, r4, r5
 800b90c:	428b      	cmp	r3, r1
 800b90e:	bf01      	itttt	eq
 800b910:	6819      	ldreq	r1, [r3, #0]
 800b912:	685b      	ldreq	r3, [r3, #4]
 800b914:	1949      	addeq	r1, r1, r5
 800b916:	6021      	streq	r1, [r4, #0]
 800b918:	e7ed      	b.n	800b8f6 <_free_r+0x22>
 800b91a:	461a      	mov	r2, r3
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	b10b      	cbz	r3, 800b924 <_free_r+0x50>
 800b920:	42a3      	cmp	r3, r4
 800b922:	d9fa      	bls.n	800b91a <_free_r+0x46>
 800b924:	6811      	ldr	r1, [r2, #0]
 800b926:	1855      	adds	r5, r2, r1
 800b928:	42a5      	cmp	r5, r4
 800b92a:	d10b      	bne.n	800b944 <_free_r+0x70>
 800b92c:	6824      	ldr	r4, [r4, #0]
 800b92e:	4421      	add	r1, r4
 800b930:	1854      	adds	r4, r2, r1
 800b932:	42a3      	cmp	r3, r4
 800b934:	6011      	str	r1, [r2, #0]
 800b936:	d1e0      	bne.n	800b8fa <_free_r+0x26>
 800b938:	681c      	ldr	r4, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	6053      	str	r3, [r2, #4]
 800b93e:	4421      	add	r1, r4
 800b940:	6011      	str	r1, [r2, #0]
 800b942:	e7da      	b.n	800b8fa <_free_r+0x26>
 800b944:	d902      	bls.n	800b94c <_free_r+0x78>
 800b946:	230c      	movs	r3, #12
 800b948:	6003      	str	r3, [r0, #0]
 800b94a:	e7d6      	b.n	800b8fa <_free_r+0x26>
 800b94c:	6825      	ldr	r5, [r4, #0]
 800b94e:	1961      	adds	r1, r4, r5
 800b950:	428b      	cmp	r3, r1
 800b952:	bf04      	itt	eq
 800b954:	6819      	ldreq	r1, [r3, #0]
 800b956:	685b      	ldreq	r3, [r3, #4]
 800b958:	6063      	str	r3, [r4, #4]
 800b95a:	bf04      	itt	eq
 800b95c:	1949      	addeq	r1, r1, r5
 800b95e:	6021      	streq	r1, [r4, #0]
 800b960:	6054      	str	r4, [r2, #4]
 800b962:	e7ca      	b.n	800b8fa <_free_r+0x26>
 800b964:	b003      	add	sp, #12
 800b966:	bd30      	pop	{r4, r5, pc}
 800b968:	200007d0 	.word	0x200007d0

0800b96c <sbrk_aligned>:
 800b96c:	b570      	push	{r4, r5, r6, lr}
 800b96e:	4e0e      	ldr	r6, [pc, #56]	; (800b9a8 <sbrk_aligned+0x3c>)
 800b970:	460c      	mov	r4, r1
 800b972:	6831      	ldr	r1, [r6, #0]
 800b974:	4605      	mov	r5, r0
 800b976:	b911      	cbnz	r1, 800b97e <sbrk_aligned+0x12>
 800b978:	f000 f9f2 	bl	800bd60 <_sbrk_r>
 800b97c:	6030      	str	r0, [r6, #0]
 800b97e:	4621      	mov	r1, r4
 800b980:	4628      	mov	r0, r5
 800b982:	f000 f9ed 	bl	800bd60 <_sbrk_r>
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	d00a      	beq.n	800b9a0 <sbrk_aligned+0x34>
 800b98a:	1cc4      	adds	r4, r0, #3
 800b98c:	f024 0403 	bic.w	r4, r4, #3
 800b990:	42a0      	cmp	r0, r4
 800b992:	d007      	beq.n	800b9a4 <sbrk_aligned+0x38>
 800b994:	1a21      	subs	r1, r4, r0
 800b996:	4628      	mov	r0, r5
 800b998:	f000 f9e2 	bl	800bd60 <_sbrk_r>
 800b99c:	3001      	adds	r0, #1
 800b99e:	d101      	bne.n	800b9a4 <sbrk_aligned+0x38>
 800b9a0:	f04f 34ff 	mov.w	r4, #4294967295
 800b9a4:	4620      	mov	r0, r4
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}
 800b9a8:	200007d4 	.word	0x200007d4

0800b9ac <_malloc_r>:
 800b9ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9b0:	1ccd      	adds	r5, r1, #3
 800b9b2:	f025 0503 	bic.w	r5, r5, #3
 800b9b6:	3508      	adds	r5, #8
 800b9b8:	2d0c      	cmp	r5, #12
 800b9ba:	bf38      	it	cc
 800b9bc:	250c      	movcc	r5, #12
 800b9be:	2d00      	cmp	r5, #0
 800b9c0:	4607      	mov	r7, r0
 800b9c2:	db01      	blt.n	800b9c8 <_malloc_r+0x1c>
 800b9c4:	42a9      	cmp	r1, r5
 800b9c6:	d905      	bls.n	800b9d4 <_malloc_r+0x28>
 800b9c8:	230c      	movs	r3, #12
 800b9ca:	603b      	str	r3, [r7, #0]
 800b9cc:	2600      	movs	r6, #0
 800b9ce:	4630      	mov	r0, r6
 800b9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9d4:	4e2e      	ldr	r6, [pc, #184]	; (800ba90 <_malloc_r+0xe4>)
 800b9d6:	f000 fa3f 	bl	800be58 <__malloc_lock>
 800b9da:	6833      	ldr	r3, [r6, #0]
 800b9dc:	461c      	mov	r4, r3
 800b9de:	bb34      	cbnz	r4, 800ba2e <_malloc_r+0x82>
 800b9e0:	4629      	mov	r1, r5
 800b9e2:	4638      	mov	r0, r7
 800b9e4:	f7ff ffc2 	bl	800b96c <sbrk_aligned>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	4604      	mov	r4, r0
 800b9ec:	d14d      	bne.n	800ba8a <_malloc_r+0xde>
 800b9ee:	6834      	ldr	r4, [r6, #0]
 800b9f0:	4626      	mov	r6, r4
 800b9f2:	2e00      	cmp	r6, #0
 800b9f4:	d140      	bne.n	800ba78 <_malloc_r+0xcc>
 800b9f6:	6823      	ldr	r3, [r4, #0]
 800b9f8:	4631      	mov	r1, r6
 800b9fa:	4638      	mov	r0, r7
 800b9fc:	eb04 0803 	add.w	r8, r4, r3
 800ba00:	f000 f9ae 	bl	800bd60 <_sbrk_r>
 800ba04:	4580      	cmp	r8, r0
 800ba06:	d13a      	bne.n	800ba7e <_malloc_r+0xd2>
 800ba08:	6821      	ldr	r1, [r4, #0]
 800ba0a:	3503      	adds	r5, #3
 800ba0c:	1a6d      	subs	r5, r5, r1
 800ba0e:	f025 0503 	bic.w	r5, r5, #3
 800ba12:	3508      	adds	r5, #8
 800ba14:	2d0c      	cmp	r5, #12
 800ba16:	bf38      	it	cc
 800ba18:	250c      	movcc	r5, #12
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	4638      	mov	r0, r7
 800ba1e:	f7ff ffa5 	bl	800b96c <sbrk_aligned>
 800ba22:	3001      	adds	r0, #1
 800ba24:	d02b      	beq.n	800ba7e <_malloc_r+0xd2>
 800ba26:	6823      	ldr	r3, [r4, #0]
 800ba28:	442b      	add	r3, r5
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	e00e      	b.n	800ba4c <_malloc_r+0xa0>
 800ba2e:	6822      	ldr	r2, [r4, #0]
 800ba30:	1b52      	subs	r2, r2, r5
 800ba32:	d41e      	bmi.n	800ba72 <_malloc_r+0xc6>
 800ba34:	2a0b      	cmp	r2, #11
 800ba36:	d916      	bls.n	800ba66 <_malloc_r+0xba>
 800ba38:	1961      	adds	r1, r4, r5
 800ba3a:	42a3      	cmp	r3, r4
 800ba3c:	6025      	str	r5, [r4, #0]
 800ba3e:	bf18      	it	ne
 800ba40:	6059      	strne	r1, [r3, #4]
 800ba42:	6863      	ldr	r3, [r4, #4]
 800ba44:	bf08      	it	eq
 800ba46:	6031      	streq	r1, [r6, #0]
 800ba48:	5162      	str	r2, [r4, r5]
 800ba4a:	604b      	str	r3, [r1, #4]
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f104 060b 	add.w	r6, r4, #11
 800ba52:	f000 fa07 	bl	800be64 <__malloc_unlock>
 800ba56:	f026 0607 	bic.w	r6, r6, #7
 800ba5a:	1d23      	adds	r3, r4, #4
 800ba5c:	1af2      	subs	r2, r6, r3
 800ba5e:	d0b6      	beq.n	800b9ce <_malloc_r+0x22>
 800ba60:	1b9b      	subs	r3, r3, r6
 800ba62:	50a3      	str	r3, [r4, r2]
 800ba64:	e7b3      	b.n	800b9ce <_malloc_r+0x22>
 800ba66:	6862      	ldr	r2, [r4, #4]
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	bf0c      	ite	eq
 800ba6c:	6032      	streq	r2, [r6, #0]
 800ba6e:	605a      	strne	r2, [r3, #4]
 800ba70:	e7ec      	b.n	800ba4c <_malloc_r+0xa0>
 800ba72:	4623      	mov	r3, r4
 800ba74:	6864      	ldr	r4, [r4, #4]
 800ba76:	e7b2      	b.n	800b9de <_malloc_r+0x32>
 800ba78:	4634      	mov	r4, r6
 800ba7a:	6876      	ldr	r6, [r6, #4]
 800ba7c:	e7b9      	b.n	800b9f2 <_malloc_r+0x46>
 800ba7e:	230c      	movs	r3, #12
 800ba80:	603b      	str	r3, [r7, #0]
 800ba82:	4638      	mov	r0, r7
 800ba84:	f000 f9ee 	bl	800be64 <__malloc_unlock>
 800ba88:	e7a1      	b.n	800b9ce <_malloc_r+0x22>
 800ba8a:	6025      	str	r5, [r4, #0]
 800ba8c:	e7de      	b.n	800ba4c <_malloc_r+0xa0>
 800ba8e:	bf00      	nop
 800ba90:	200007d0 	.word	0x200007d0

0800ba94 <__ssputs_r>:
 800ba94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba98:	688e      	ldr	r6, [r1, #8]
 800ba9a:	429e      	cmp	r6, r3
 800ba9c:	4682      	mov	sl, r0
 800ba9e:	460c      	mov	r4, r1
 800baa0:	4690      	mov	r8, r2
 800baa2:	461f      	mov	r7, r3
 800baa4:	d838      	bhi.n	800bb18 <__ssputs_r+0x84>
 800baa6:	898a      	ldrh	r2, [r1, #12]
 800baa8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800baac:	d032      	beq.n	800bb14 <__ssputs_r+0x80>
 800baae:	6825      	ldr	r5, [r4, #0]
 800bab0:	6909      	ldr	r1, [r1, #16]
 800bab2:	eba5 0901 	sub.w	r9, r5, r1
 800bab6:	6965      	ldr	r5, [r4, #20]
 800bab8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800babc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bac0:	3301      	adds	r3, #1
 800bac2:	444b      	add	r3, r9
 800bac4:	106d      	asrs	r5, r5, #1
 800bac6:	429d      	cmp	r5, r3
 800bac8:	bf38      	it	cc
 800baca:	461d      	movcc	r5, r3
 800bacc:	0553      	lsls	r3, r2, #21
 800bace:	d531      	bpl.n	800bb34 <__ssputs_r+0xa0>
 800bad0:	4629      	mov	r1, r5
 800bad2:	f7ff ff6b 	bl	800b9ac <_malloc_r>
 800bad6:	4606      	mov	r6, r0
 800bad8:	b950      	cbnz	r0, 800baf0 <__ssputs_r+0x5c>
 800bada:	230c      	movs	r3, #12
 800badc:	f8ca 3000 	str.w	r3, [sl]
 800bae0:	89a3      	ldrh	r3, [r4, #12]
 800bae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bae6:	81a3      	strh	r3, [r4, #12]
 800bae8:	f04f 30ff 	mov.w	r0, #4294967295
 800baec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baf0:	6921      	ldr	r1, [r4, #16]
 800baf2:	464a      	mov	r2, r9
 800baf4:	f7ff fa08 	bl	800af08 <memcpy>
 800baf8:	89a3      	ldrh	r3, [r4, #12]
 800bafa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bafe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb02:	81a3      	strh	r3, [r4, #12]
 800bb04:	6126      	str	r6, [r4, #16]
 800bb06:	6165      	str	r5, [r4, #20]
 800bb08:	444e      	add	r6, r9
 800bb0a:	eba5 0509 	sub.w	r5, r5, r9
 800bb0e:	6026      	str	r6, [r4, #0]
 800bb10:	60a5      	str	r5, [r4, #8]
 800bb12:	463e      	mov	r6, r7
 800bb14:	42be      	cmp	r6, r7
 800bb16:	d900      	bls.n	800bb1a <__ssputs_r+0x86>
 800bb18:	463e      	mov	r6, r7
 800bb1a:	6820      	ldr	r0, [r4, #0]
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	4641      	mov	r1, r8
 800bb20:	f000 f980 	bl	800be24 <memmove>
 800bb24:	68a3      	ldr	r3, [r4, #8]
 800bb26:	1b9b      	subs	r3, r3, r6
 800bb28:	60a3      	str	r3, [r4, #8]
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	4433      	add	r3, r6
 800bb2e:	6023      	str	r3, [r4, #0]
 800bb30:	2000      	movs	r0, #0
 800bb32:	e7db      	b.n	800baec <__ssputs_r+0x58>
 800bb34:	462a      	mov	r2, r5
 800bb36:	f000 f99b 	bl	800be70 <_realloc_r>
 800bb3a:	4606      	mov	r6, r0
 800bb3c:	2800      	cmp	r0, #0
 800bb3e:	d1e1      	bne.n	800bb04 <__ssputs_r+0x70>
 800bb40:	6921      	ldr	r1, [r4, #16]
 800bb42:	4650      	mov	r0, sl
 800bb44:	f7ff fec6 	bl	800b8d4 <_free_r>
 800bb48:	e7c7      	b.n	800bada <__ssputs_r+0x46>
	...

0800bb4c <_svfiprintf_r>:
 800bb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb50:	4698      	mov	r8, r3
 800bb52:	898b      	ldrh	r3, [r1, #12]
 800bb54:	061b      	lsls	r3, r3, #24
 800bb56:	b09d      	sub	sp, #116	; 0x74
 800bb58:	4607      	mov	r7, r0
 800bb5a:	460d      	mov	r5, r1
 800bb5c:	4614      	mov	r4, r2
 800bb5e:	d50e      	bpl.n	800bb7e <_svfiprintf_r+0x32>
 800bb60:	690b      	ldr	r3, [r1, #16]
 800bb62:	b963      	cbnz	r3, 800bb7e <_svfiprintf_r+0x32>
 800bb64:	2140      	movs	r1, #64	; 0x40
 800bb66:	f7ff ff21 	bl	800b9ac <_malloc_r>
 800bb6a:	6028      	str	r0, [r5, #0]
 800bb6c:	6128      	str	r0, [r5, #16]
 800bb6e:	b920      	cbnz	r0, 800bb7a <_svfiprintf_r+0x2e>
 800bb70:	230c      	movs	r3, #12
 800bb72:	603b      	str	r3, [r7, #0]
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	e0d1      	b.n	800bd1e <_svfiprintf_r+0x1d2>
 800bb7a:	2340      	movs	r3, #64	; 0x40
 800bb7c:	616b      	str	r3, [r5, #20]
 800bb7e:	2300      	movs	r3, #0
 800bb80:	9309      	str	r3, [sp, #36]	; 0x24
 800bb82:	2320      	movs	r3, #32
 800bb84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb88:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb8c:	2330      	movs	r3, #48	; 0x30
 800bb8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bd38 <_svfiprintf_r+0x1ec>
 800bb92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb96:	f04f 0901 	mov.w	r9, #1
 800bb9a:	4623      	mov	r3, r4
 800bb9c:	469a      	mov	sl, r3
 800bb9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bba2:	b10a      	cbz	r2, 800bba8 <_svfiprintf_r+0x5c>
 800bba4:	2a25      	cmp	r2, #37	; 0x25
 800bba6:	d1f9      	bne.n	800bb9c <_svfiprintf_r+0x50>
 800bba8:	ebba 0b04 	subs.w	fp, sl, r4
 800bbac:	d00b      	beq.n	800bbc6 <_svfiprintf_r+0x7a>
 800bbae:	465b      	mov	r3, fp
 800bbb0:	4622      	mov	r2, r4
 800bbb2:	4629      	mov	r1, r5
 800bbb4:	4638      	mov	r0, r7
 800bbb6:	f7ff ff6d 	bl	800ba94 <__ssputs_r>
 800bbba:	3001      	adds	r0, #1
 800bbbc:	f000 80aa 	beq.w	800bd14 <_svfiprintf_r+0x1c8>
 800bbc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bbc2:	445a      	add	r2, fp
 800bbc4:	9209      	str	r2, [sp, #36]	; 0x24
 800bbc6:	f89a 3000 	ldrb.w	r3, [sl]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	f000 80a2 	beq.w	800bd14 <_svfiprintf_r+0x1c8>
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbda:	f10a 0a01 	add.w	sl, sl, #1
 800bbde:	9304      	str	r3, [sp, #16]
 800bbe0:	9307      	str	r3, [sp, #28]
 800bbe2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbe6:	931a      	str	r3, [sp, #104]	; 0x68
 800bbe8:	4654      	mov	r4, sl
 800bbea:	2205      	movs	r2, #5
 800bbec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbf0:	4851      	ldr	r0, [pc, #324]	; (800bd38 <_svfiprintf_r+0x1ec>)
 800bbf2:	f7f4 faf5 	bl	80001e0 <memchr>
 800bbf6:	9a04      	ldr	r2, [sp, #16]
 800bbf8:	b9d8      	cbnz	r0, 800bc32 <_svfiprintf_r+0xe6>
 800bbfa:	06d0      	lsls	r0, r2, #27
 800bbfc:	bf44      	itt	mi
 800bbfe:	2320      	movmi	r3, #32
 800bc00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc04:	0711      	lsls	r1, r2, #28
 800bc06:	bf44      	itt	mi
 800bc08:	232b      	movmi	r3, #43	; 0x2b
 800bc0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc0e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc12:	2b2a      	cmp	r3, #42	; 0x2a
 800bc14:	d015      	beq.n	800bc42 <_svfiprintf_r+0xf6>
 800bc16:	9a07      	ldr	r2, [sp, #28]
 800bc18:	4654      	mov	r4, sl
 800bc1a:	2000      	movs	r0, #0
 800bc1c:	f04f 0c0a 	mov.w	ip, #10
 800bc20:	4621      	mov	r1, r4
 800bc22:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc26:	3b30      	subs	r3, #48	; 0x30
 800bc28:	2b09      	cmp	r3, #9
 800bc2a:	d94e      	bls.n	800bcca <_svfiprintf_r+0x17e>
 800bc2c:	b1b0      	cbz	r0, 800bc5c <_svfiprintf_r+0x110>
 800bc2e:	9207      	str	r2, [sp, #28]
 800bc30:	e014      	b.n	800bc5c <_svfiprintf_r+0x110>
 800bc32:	eba0 0308 	sub.w	r3, r0, r8
 800bc36:	fa09 f303 	lsl.w	r3, r9, r3
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	9304      	str	r3, [sp, #16]
 800bc3e:	46a2      	mov	sl, r4
 800bc40:	e7d2      	b.n	800bbe8 <_svfiprintf_r+0x9c>
 800bc42:	9b03      	ldr	r3, [sp, #12]
 800bc44:	1d19      	adds	r1, r3, #4
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	9103      	str	r1, [sp, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	bfbb      	ittet	lt
 800bc4e:	425b      	neglt	r3, r3
 800bc50:	f042 0202 	orrlt.w	r2, r2, #2
 800bc54:	9307      	strge	r3, [sp, #28]
 800bc56:	9307      	strlt	r3, [sp, #28]
 800bc58:	bfb8      	it	lt
 800bc5a:	9204      	strlt	r2, [sp, #16]
 800bc5c:	7823      	ldrb	r3, [r4, #0]
 800bc5e:	2b2e      	cmp	r3, #46	; 0x2e
 800bc60:	d10c      	bne.n	800bc7c <_svfiprintf_r+0x130>
 800bc62:	7863      	ldrb	r3, [r4, #1]
 800bc64:	2b2a      	cmp	r3, #42	; 0x2a
 800bc66:	d135      	bne.n	800bcd4 <_svfiprintf_r+0x188>
 800bc68:	9b03      	ldr	r3, [sp, #12]
 800bc6a:	1d1a      	adds	r2, r3, #4
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	9203      	str	r2, [sp, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	bfb8      	it	lt
 800bc74:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc78:	3402      	adds	r4, #2
 800bc7a:	9305      	str	r3, [sp, #20]
 800bc7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bd48 <_svfiprintf_r+0x1fc>
 800bc80:	7821      	ldrb	r1, [r4, #0]
 800bc82:	2203      	movs	r2, #3
 800bc84:	4650      	mov	r0, sl
 800bc86:	f7f4 faab 	bl	80001e0 <memchr>
 800bc8a:	b140      	cbz	r0, 800bc9e <_svfiprintf_r+0x152>
 800bc8c:	2340      	movs	r3, #64	; 0x40
 800bc8e:	eba0 000a 	sub.w	r0, r0, sl
 800bc92:	fa03 f000 	lsl.w	r0, r3, r0
 800bc96:	9b04      	ldr	r3, [sp, #16]
 800bc98:	4303      	orrs	r3, r0
 800bc9a:	3401      	adds	r4, #1
 800bc9c:	9304      	str	r3, [sp, #16]
 800bc9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bca2:	4826      	ldr	r0, [pc, #152]	; (800bd3c <_svfiprintf_r+0x1f0>)
 800bca4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bca8:	2206      	movs	r2, #6
 800bcaa:	f7f4 fa99 	bl	80001e0 <memchr>
 800bcae:	2800      	cmp	r0, #0
 800bcb0:	d038      	beq.n	800bd24 <_svfiprintf_r+0x1d8>
 800bcb2:	4b23      	ldr	r3, [pc, #140]	; (800bd40 <_svfiprintf_r+0x1f4>)
 800bcb4:	bb1b      	cbnz	r3, 800bcfe <_svfiprintf_r+0x1b2>
 800bcb6:	9b03      	ldr	r3, [sp, #12]
 800bcb8:	3307      	adds	r3, #7
 800bcba:	f023 0307 	bic.w	r3, r3, #7
 800bcbe:	3308      	adds	r3, #8
 800bcc0:	9303      	str	r3, [sp, #12]
 800bcc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcc4:	4433      	add	r3, r6
 800bcc6:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc8:	e767      	b.n	800bb9a <_svfiprintf_r+0x4e>
 800bcca:	fb0c 3202 	mla	r2, ip, r2, r3
 800bcce:	460c      	mov	r4, r1
 800bcd0:	2001      	movs	r0, #1
 800bcd2:	e7a5      	b.n	800bc20 <_svfiprintf_r+0xd4>
 800bcd4:	2300      	movs	r3, #0
 800bcd6:	3401      	adds	r4, #1
 800bcd8:	9305      	str	r3, [sp, #20]
 800bcda:	4619      	mov	r1, r3
 800bcdc:	f04f 0c0a 	mov.w	ip, #10
 800bce0:	4620      	mov	r0, r4
 800bce2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bce6:	3a30      	subs	r2, #48	; 0x30
 800bce8:	2a09      	cmp	r2, #9
 800bcea:	d903      	bls.n	800bcf4 <_svfiprintf_r+0x1a8>
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d0c5      	beq.n	800bc7c <_svfiprintf_r+0x130>
 800bcf0:	9105      	str	r1, [sp, #20]
 800bcf2:	e7c3      	b.n	800bc7c <_svfiprintf_r+0x130>
 800bcf4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcf8:	4604      	mov	r4, r0
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	e7f0      	b.n	800bce0 <_svfiprintf_r+0x194>
 800bcfe:	ab03      	add	r3, sp, #12
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	462a      	mov	r2, r5
 800bd04:	4b0f      	ldr	r3, [pc, #60]	; (800bd44 <_svfiprintf_r+0x1f8>)
 800bd06:	a904      	add	r1, sp, #16
 800bd08:	4638      	mov	r0, r7
 800bd0a:	f7fc fa49 	bl	80081a0 <_printf_float>
 800bd0e:	1c42      	adds	r2, r0, #1
 800bd10:	4606      	mov	r6, r0
 800bd12:	d1d6      	bne.n	800bcc2 <_svfiprintf_r+0x176>
 800bd14:	89ab      	ldrh	r3, [r5, #12]
 800bd16:	065b      	lsls	r3, r3, #25
 800bd18:	f53f af2c 	bmi.w	800bb74 <_svfiprintf_r+0x28>
 800bd1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd1e:	b01d      	add	sp, #116	; 0x74
 800bd20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd24:	ab03      	add	r3, sp, #12
 800bd26:	9300      	str	r3, [sp, #0]
 800bd28:	462a      	mov	r2, r5
 800bd2a:	4b06      	ldr	r3, [pc, #24]	; (800bd44 <_svfiprintf_r+0x1f8>)
 800bd2c:	a904      	add	r1, sp, #16
 800bd2e:	4638      	mov	r0, r7
 800bd30:	f7fc fcda 	bl	80086e8 <_printf_i>
 800bd34:	e7eb      	b.n	800bd0e <_svfiprintf_r+0x1c2>
 800bd36:	bf00      	nop
 800bd38:	0800ce0c 	.word	0x0800ce0c
 800bd3c:	0800ce16 	.word	0x0800ce16
 800bd40:	080081a1 	.word	0x080081a1
 800bd44:	0800ba95 	.word	0x0800ba95
 800bd48:	0800ce12 	.word	0x0800ce12
 800bd4c:	00000000 	.word	0x00000000

0800bd50 <nan>:
 800bd50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800bd58 <nan+0x8>
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	00000000 	.word	0x00000000
 800bd5c:	7ff80000 	.word	0x7ff80000

0800bd60 <_sbrk_r>:
 800bd60:	b538      	push	{r3, r4, r5, lr}
 800bd62:	4d06      	ldr	r5, [pc, #24]	; (800bd7c <_sbrk_r+0x1c>)
 800bd64:	2300      	movs	r3, #0
 800bd66:	4604      	mov	r4, r0
 800bd68:	4608      	mov	r0, r1
 800bd6a:	602b      	str	r3, [r5, #0]
 800bd6c:	f7f6 f9b2 	bl	80020d4 <_sbrk>
 800bd70:	1c43      	adds	r3, r0, #1
 800bd72:	d102      	bne.n	800bd7a <_sbrk_r+0x1a>
 800bd74:	682b      	ldr	r3, [r5, #0]
 800bd76:	b103      	cbz	r3, 800bd7a <_sbrk_r+0x1a>
 800bd78:	6023      	str	r3, [r4, #0]
 800bd7a:	bd38      	pop	{r3, r4, r5, pc}
 800bd7c:	200007d8 	.word	0x200007d8

0800bd80 <strncmp>:
 800bd80:	b510      	push	{r4, lr}
 800bd82:	b17a      	cbz	r2, 800bda4 <strncmp+0x24>
 800bd84:	4603      	mov	r3, r0
 800bd86:	3901      	subs	r1, #1
 800bd88:	1884      	adds	r4, r0, r2
 800bd8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bd8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bd92:	4290      	cmp	r0, r2
 800bd94:	d101      	bne.n	800bd9a <strncmp+0x1a>
 800bd96:	42a3      	cmp	r3, r4
 800bd98:	d101      	bne.n	800bd9e <strncmp+0x1e>
 800bd9a:	1a80      	subs	r0, r0, r2
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	d1f3      	bne.n	800bd8a <strncmp+0xa>
 800bda2:	e7fa      	b.n	800bd9a <strncmp+0x1a>
 800bda4:	4610      	mov	r0, r2
 800bda6:	e7f9      	b.n	800bd9c <strncmp+0x1c>

0800bda8 <__ascii_wctomb>:
 800bda8:	b149      	cbz	r1, 800bdbe <__ascii_wctomb+0x16>
 800bdaa:	2aff      	cmp	r2, #255	; 0xff
 800bdac:	bf85      	ittet	hi
 800bdae:	238a      	movhi	r3, #138	; 0x8a
 800bdb0:	6003      	strhi	r3, [r0, #0]
 800bdb2:	700a      	strbls	r2, [r1, #0]
 800bdb4:	f04f 30ff 	movhi.w	r0, #4294967295
 800bdb8:	bf98      	it	ls
 800bdba:	2001      	movls	r0, #1
 800bdbc:	4770      	bx	lr
 800bdbe:	4608      	mov	r0, r1
 800bdc0:	4770      	bx	lr
	...

0800bdc4 <__assert_func>:
 800bdc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bdc6:	4614      	mov	r4, r2
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4b09      	ldr	r3, [pc, #36]	; (800bdf0 <__assert_func+0x2c>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4605      	mov	r5, r0
 800bdd0:	68d8      	ldr	r0, [r3, #12]
 800bdd2:	b14c      	cbz	r4, 800bde8 <__assert_func+0x24>
 800bdd4:	4b07      	ldr	r3, [pc, #28]	; (800bdf4 <__assert_func+0x30>)
 800bdd6:	9100      	str	r1, [sp, #0]
 800bdd8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bddc:	4906      	ldr	r1, [pc, #24]	; (800bdf8 <__assert_func+0x34>)
 800bdde:	462b      	mov	r3, r5
 800bde0:	f000 f80e 	bl	800be00 <fiprintf>
 800bde4:	f000 fa8c 	bl	800c300 <abort>
 800bde8:	4b04      	ldr	r3, [pc, #16]	; (800bdfc <__assert_func+0x38>)
 800bdea:	461c      	mov	r4, r3
 800bdec:	e7f3      	b.n	800bdd6 <__assert_func+0x12>
 800bdee:	bf00      	nop
 800bdf0:	20000018 	.word	0x20000018
 800bdf4:	0800ce1d 	.word	0x0800ce1d
 800bdf8:	0800ce2a 	.word	0x0800ce2a
 800bdfc:	0800ce58 	.word	0x0800ce58

0800be00 <fiprintf>:
 800be00:	b40e      	push	{r1, r2, r3}
 800be02:	b503      	push	{r0, r1, lr}
 800be04:	4601      	mov	r1, r0
 800be06:	ab03      	add	r3, sp, #12
 800be08:	4805      	ldr	r0, [pc, #20]	; (800be20 <fiprintf+0x20>)
 800be0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be0e:	6800      	ldr	r0, [r0, #0]
 800be10:	9301      	str	r3, [sp, #4]
 800be12:	f000 f885 	bl	800bf20 <_vfiprintf_r>
 800be16:	b002      	add	sp, #8
 800be18:	f85d eb04 	ldr.w	lr, [sp], #4
 800be1c:	b003      	add	sp, #12
 800be1e:	4770      	bx	lr
 800be20:	20000018 	.word	0x20000018

0800be24 <memmove>:
 800be24:	4288      	cmp	r0, r1
 800be26:	b510      	push	{r4, lr}
 800be28:	eb01 0402 	add.w	r4, r1, r2
 800be2c:	d902      	bls.n	800be34 <memmove+0x10>
 800be2e:	4284      	cmp	r4, r0
 800be30:	4623      	mov	r3, r4
 800be32:	d807      	bhi.n	800be44 <memmove+0x20>
 800be34:	1e43      	subs	r3, r0, #1
 800be36:	42a1      	cmp	r1, r4
 800be38:	d008      	beq.n	800be4c <memmove+0x28>
 800be3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be42:	e7f8      	b.n	800be36 <memmove+0x12>
 800be44:	4402      	add	r2, r0
 800be46:	4601      	mov	r1, r0
 800be48:	428a      	cmp	r2, r1
 800be4a:	d100      	bne.n	800be4e <memmove+0x2a>
 800be4c:	bd10      	pop	{r4, pc}
 800be4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be56:	e7f7      	b.n	800be48 <memmove+0x24>

0800be58 <__malloc_lock>:
 800be58:	4801      	ldr	r0, [pc, #4]	; (800be60 <__malloc_lock+0x8>)
 800be5a:	f000 bc11 	b.w	800c680 <__retarget_lock_acquire_recursive>
 800be5e:	bf00      	nop
 800be60:	200007dc 	.word	0x200007dc

0800be64 <__malloc_unlock>:
 800be64:	4801      	ldr	r0, [pc, #4]	; (800be6c <__malloc_unlock+0x8>)
 800be66:	f000 bc0c 	b.w	800c682 <__retarget_lock_release_recursive>
 800be6a:	bf00      	nop
 800be6c:	200007dc 	.word	0x200007dc

0800be70 <_realloc_r>:
 800be70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be74:	4680      	mov	r8, r0
 800be76:	4614      	mov	r4, r2
 800be78:	460e      	mov	r6, r1
 800be7a:	b921      	cbnz	r1, 800be86 <_realloc_r+0x16>
 800be7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be80:	4611      	mov	r1, r2
 800be82:	f7ff bd93 	b.w	800b9ac <_malloc_r>
 800be86:	b92a      	cbnz	r2, 800be94 <_realloc_r+0x24>
 800be88:	f7ff fd24 	bl	800b8d4 <_free_r>
 800be8c:	4625      	mov	r5, r4
 800be8e:	4628      	mov	r0, r5
 800be90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800be94:	f000 fc5c 	bl	800c750 <_malloc_usable_size_r>
 800be98:	4284      	cmp	r4, r0
 800be9a:	4607      	mov	r7, r0
 800be9c:	d802      	bhi.n	800bea4 <_realloc_r+0x34>
 800be9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bea2:	d812      	bhi.n	800beca <_realloc_r+0x5a>
 800bea4:	4621      	mov	r1, r4
 800bea6:	4640      	mov	r0, r8
 800bea8:	f7ff fd80 	bl	800b9ac <_malloc_r>
 800beac:	4605      	mov	r5, r0
 800beae:	2800      	cmp	r0, #0
 800beb0:	d0ed      	beq.n	800be8e <_realloc_r+0x1e>
 800beb2:	42bc      	cmp	r4, r7
 800beb4:	4622      	mov	r2, r4
 800beb6:	4631      	mov	r1, r6
 800beb8:	bf28      	it	cs
 800beba:	463a      	movcs	r2, r7
 800bebc:	f7ff f824 	bl	800af08 <memcpy>
 800bec0:	4631      	mov	r1, r6
 800bec2:	4640      	mov	r0, r8
 800bec4:	f7ff fd06 	bl	800b8d4 <_free_r>
 800bec8:	e7e1      	b.n	800be8e <_realloc_r+0x1e>
 800beca:	4635      	mov	r5, r6
 800becc:	e7df      	b.n	800be8e <_realloc_r+0x1e>

0800bece <__sfputc_r>:
 800bece:	6893      	ldr	r3, [r2, #8]
 800bed0:	3b01      	subs	r3, #1
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	b410      	push	{r4}
 800bed6:	6093      	str	r3, [r2, #8]
 800bed8:	da08      	bge.n	800beec <__sfputc_r+0x1e>
 800beda:	6994      	ldr	r4, [r2, #24]
 800bedc:	42a3      	cmp	r3, r4
 800bede:	db01      	blt.n	800bee4 <__sfputc_r+0x16>
 800bee0:	290a      	cmp	r1, #10
 800bee2:	d103      	bne.n	800beec <__sfputc_r+0x1e>
 800bee4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bee8:	f000 b94a 	b.w	800c180 <__swbuf_r>
 800beec:	6813      	ldr	r3, [r2, #0]
 800beee:	1c58      	adds	r0, r3, #1
 800bef0:	6010      	str	r0, [r2, #0]
 800bef2:	7019      	strb	r1, [r3, #0]
 800bef4:	4608      	mov	r0, r1
 800bef6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800befa:	4770      	bx	lr

0800befc <__sfputs_r>:
 800befc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800befe:	4606      	mov	r6, r0
 800bf00:	460f      	mov	r7, r1
 800bf02:	4614      	mov	r4, r2
 800bf04:	18d5      	adds	r5, r2, r3
 800bf06:	42ac      	cmp	r4, r5
 800bf08:	d101      	bne.n	800bf0e <__sfputs_r+0x12>
 800bf0a:	2000      	movs	r0, #0
 800bf0c:	e007      	b.n	800bf1e <__sfputs_r+0x22>
 800bf0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf12:	463a      	mov	r2, r7
 800bf14:	4630      	mov	r0, r6
 800bf16:	f7ff ffda 	bl	800bece <__sfputc_r>
 800bf1a:	1c43      	adds	r3, r0, #1
 800bf1c:	d1f3      	bne.n	800bf06 <__sfputs_r+0xa>
 800bf1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bf20 <_vfiprintf_r>:
 800bf20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf24:	460d      	mov	r5, r1
 800bf26:	b09d      	sub	sp, #116	; 0x74
 800bf28:	4614      	mov	r4, r2
 800bf2a:	4698      	mov	r8, r3
 800bf2c:	4606      	mov	r6, r0
 800bf2e:	b118      	cbz	r0, 800bf38 <_vfiprintf_r+0x18>
 800bf30:	6983      	ldr	r3, [r0, #24]
 800bf32:	b90b      	cbnz	r3, 800bf38 <_vfiprintf_r+0x18>
 800bf34:	f000 fb06 	bl	800c544 <__sinit>
 800bf38:	4b89      	ldr	r3, [pc, #548]	; (800c160 <_vfiprintf_r+0x240>)
 800bf3a:	429d      	cmp	r5, r3
 800bf3c:	d11b      	bne.n	800bf76 <_vfiprintf_r+0x56>
 800bf3e:	6875      	ldr	r5, [r6, #4]
 800bf40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf42:	07d9      	lsls	r1, r3, #31
 800bf44:	d405      	bmi.n	800bf52 <_vfiprintf_r+0x32>
 800bf46:	89ab      	ldrh	r3, [r5, #12]
 800bf48:	059a      	lsls	r2, r3, #22
 800bf4a:	d402      	bmi.n	800bf52 <_vfiprintf_r+0x32>
 800bf4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf4e:	f000 fb97 	bl	800c680 <__retarget_lock_acquire_recursive>
 800bf52:	89ab      	ldrh	r3, [r5, #12]
 800bf54:	071b      	lsls	r3, r3, #28
 800bf56:	d501      	bpl.n	800bf5c <_vfiprintf_r+0x3c>
 800bf58:	692b      	ldr	r3, [r5, #16]
 800bf5a:	b9eb      	cbnz	r3, 800bf98 <_vfiprintf_r+0x78>
 800bf5c:	4629      	mov	r1, r5
 800bf5e:	4630      	mov	r0, r6
 800bf60:	f000 f960 	bl	800c224 <__swsetup_r>
 800bf64:	b1c0      	cbz	r0, 800bf98 <_vfiprintf_r+0x78>
 800bf66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf68:	07dc      	lsls	r4, r3, #31
 800bf6a:	d50e      	bpl.n	800bf8a <_vfiprintf_r+0x6a>
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	b01d      	add	sp, #116	; 0x74
 800bf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf76:	4b7b      	ldr	r3, [pc, #492]	; (800c164 <_vfiprintf_r+0x244>)
 800bf78:	429d      	cmp	r5, r3
 800bf7a:	d101      	bne.n	800bf80 <_vfiprintf_r+0x60>
 800bf7c:	68b5      	ldr	r5, [r6, #8]
 800bf7e:	e7df      	b.n	800bf40 <_vfiprintf_r+0x20>
 800bf80:	4b79      	ldr	r3, [pc, #484]	; (800c168 <_vfiprintf_r+0x248>)
 800bf82:	429d      	cmp	r5, r3
 800bf84:	bf08      	it	eq
 800bf86:	68f5      	ldreq	r5, [r6, #12]
 800bf88:	e7da      	b.n	800bf40 <_vfiprintf_r+0x20>
 800bf8a:	89ab      	ldrh	r3, [r5, #12]
 800bf8c:	0598      	lsls	r0, r3, #22
 800bf8e:	d4ed      	bmi.n	800bf6c <_vfiprintf_r+0x4c>
 800bf90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf92:	f000 fb76 	bl	800c682 <__retarget_lock_release_recursive>
 800bf96:	e7e9      	b.n	800bf6c <_vfiprintf_r+0x4c>
 800bf98:	2300      	movs	r3, #0
 800bf9a:	9309      	str	r3, [sp, #36]	; 0x24
 800bf9c:	2320      	movs	r3, #32
 800bf9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bfa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800bfa6:	2330      	movs	r3, #48	; 0x30
 800bfa8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c16c <_vfiprintf_r+0x24c>
 800bfac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bfb0:	f04f 0901 	mov.w	r9, #1
 800bfb4:	4623      	mov	r3, r4
 800bfb6:	469a      	mov	sl, r3
 800bfb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfbc:	b10a      	cbz	r2, 800bfc2 <_vfiprintf_r+0xa2>
 800bfbe:	2a25      	cmp	r2, #37	; 0x25
 800bfc0:	d1f9      	bne.n	800bfb6 <_vfiprintf_r+0x96>
 800bfc2:	ebba 0b04 	subs.w	fp, sl, r4
 800bfc6:	d00b      	beq.n	800bfe0 <_vfiprintf_r+0xc0>
 800bfc8:	465b      	mov	r3, fp
 800bfca:	4622      	mov	r2, r4
 800bfcc:	4629      	mov	r1, r5
 800bfce:	4630      	mov	r0, r6
 800bfd0:	f7ff ff94 	bl	800befc <__sfputs_r>
 800bfd4:	3001      	adds	r0, #1
 800bfd6:	f000 80aa 	beq.w	800c12e <_vfiprintf_r+0x20e>
 800bfda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bfdc:	445a      	add	r2, fp
 800bfde:	9209      	str	r2, [sp, #36]	; 0x24
 800bfe0:	f89a 3000 	ldrb.w	r3, [sl]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	f000 80a2 	beq.w	800c12e <_vfiprintf_r+0x20e>
 800bfea:	2300      	movs	r3, #0
 800bfec:	f04f 32ff 	mov.w	r2, #4294967295
 800bff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bff4:	f10a 0a01 	add.w	sl, sl, #1
 800bff8:	9304      	str	r3, [sp, #16]
 800bffa:	9307      	str	r3, [sp, #28]
 800bffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c000:	931a      	str	r3, [sp, #104]	; 0x68
 800c002:	4654      	mov	r4, sl
 800c004:	2205      	movs	r2, #5
 800c006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c00a:	4858      	ldr	r0, [pc, #352]	; (800c16c <_vfiprintf_r+0x24c>)
 800c00c:	f7f4 f8e8 	bl	80001e0 <memchr>
 800c010:	9a04      	ldr	r2, [sp, #16]
 800c012:	b9d8      	cbnz	r0, 800c04c <_vfiprintf_r+0x12c>
 800c014:	06d1      	lsls	r1, r2, #27
 800c016:	bf44      	itt	mi
 800c018:	2320      	movmi	r3, #32
 800c01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c01e:	0713      	lsls	r3, r2, #28
 800c020:	bf44      	itt	mi
 800c022:	232b      	movmi	r3, #43	; 0x2b
 800c024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c028:	f89a 3000 	ldrb.w	r3, [sl]
 800c02c:	2b2a      	cmp	r3, #42	; 0x2a
 800c02e:	d015      	beq.n	800c05c <_vfiprintf_r+0x13c>
 800c030:	9a07      	ldr	r2, [sp, #28]
 800c032:	4654      	mov	r4, sl
 800c034:	2000      	movs	r0, #0
 800c036:	f04f 0c0a 	mov.w	ip, #10
 800c03a:	4621      	mov	r1, r4
 800c03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c040:	3b30      	subs	r3, #48	; 0x30
 800c042:	2b09      	cmp	r3, #9
 800c044:	d94e      	bls.n	800c0e4 <_vfiprintf_r+0x1c4>
 800c046:	b1b0      	cbz	r0, 800c076 <_vfiprintf_r+0x156>
 800c048:	9207      	str	r2, [sp, #28]
 800c04a:	e014      	b.n	800c076 <_vfiprintf_r+0x156>
 800c04c:	eba0 0308 	sub.w	r3, r0, r8
 800c050:	fa09 f303 	lsl.w	r3, r9, r3
 800c054:	4313      	orrs	r3, r2
 800c056:	9304      	str	r3, [sp, #16]
 800c058:	46a2      	mov	sl, r4
 800c05a:	e7d2      	b.n	800c002 <_vfiprintf_r+0xe2>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	1d19      	adds	r1, r3, #4
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	9103      	str	r1, [sp, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	bfbb      	ittet	lt
 800c068:	425b      	neglt	r3, r3
 800c06a:	f042 0202 	orrlt.w	r2, r2, #2
 800c06e:	9307      	strge	r3, [sp, #28]
 800c070:	9307      	strlt	r3, [sp, #28]
 800c072:	bfb8      	it	lt
 800c074:	9204      	strlt	r2, [sp, #16]
 800c076:	7823      	ldrb	r3, [r4, #0]
 800c078:	2b2e      	cmp	r3, #46	; 0x2e
 800c07a:	d10c      	bne.n	800c096 <_vfiprintf_r+0x176>
 800c07c:	7863      	ldrb	r3, [r4, #1]
 800c07e:	2b2a      	cmp	r3, #42	; 0x2a
 800c080:	d135      	bne.n	800c0ee <_vfiprintf_r+0x1ce>
 800c082:	9b03      	ldr	r3, [sp, #12]
 800c084:	1d1a      	adds	r2, r3, #4
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	9203      	str	r2, [sp, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	bfb8      	it	lt
 800c08e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c092:	3402      	adds	r4, #2
 800c094:	9305      	str	r3, [sp, #20]
 800c096:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c17c <_vfiprintf_r+0x25c>
 800c09a:	7821      	ldrb	r1, [r4, #0]
 800c09c:	2203      	movs	r2, #3
 800c09e:	4650      	mov	r0, sl
 800c0a0:	f7f4 f89e 	bl	80001e0 <memchr>
 800c0a4:	b140      	cbz	r0, 800c0b8 <_vfiprintf_r+0x198>
 800c0a6:	2340      	movs	r3, #64	; 0x40
 800c0a8:	eba0 000a 	sub.w	r0, r0, sl
 800c0ac:	fa03 f000 	lsl.w	r0, r3, r0
 800c0b0:	9b04      	ldr	r3, [sp, #16]
 800c0b2:	4303      	orrs	r3, r0
 800c0b4:	3401      	adds	r4, #1
 800c0b6:	9304      	str	r3, [sp, #16]
 800c0b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0bc:	482c      	ldr	r0, [pc, #176]	; (800c170 <_vfiprintf_r+0x250>)
 800c0be:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c0c2:	2206      	movs	r2, #6
 800c0c4:	f7f4 f88c 	bl	80001e0 <memchr>
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d03f      	beq.n	800c14c <_vfiprintf_r+0x22c>
 800c0cc:	4b29      	ldr	r3, [pc, #164]	; (800c174 <_vfiprintf_r+0x254>)
 800c0ce:	bb1b      	cbnz	r3, 800c118 <_vfiprintf_r+0x1f8>
 800c0d0:	9b03      	ldr	r3, [sp, #12]
 800c0d2:	3307      	adds	r3, #7
 800c0d4:	f023 0307 	bic.w	r3, r3, #7
 800c0d8:	3308      	adds	r3, #8
 800c0da:	9303      	str	r3, [sp, #12]
 800c0dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0de:	443b      	add	r3, r7
 800c0e0:	9309      	str	r3, [sp, #36]	; 0x24
 800c0e2:	e767      	b.n	800bfb4 <_vfiprintf_r+0x94>
 800c0e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c0e8:	460c      	mov	r4, r1
 800c0ea:	2001      	movs	r0, #1
 800c0ec:	e7a5      	b.n	800c03a <_vfiprintf_r+0x11a>
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	3401      	adds	r4, #1
 800c0f2:	9305      	str	r3, [sp, #20]
 800c0f4:	4619      	mov	r1, r3
 800c0f6:	f04f 0c0a 	mov.w	ip, #10
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c100:	3a30      	subs	r2, #48	; 0x30
 800c102:	2a09      	cmp	r2, #9
 800c104:	d903      	bls.n	800c10e <_vfiprintf_r+0x1ee>
 800c106:	2b00      	cmp	r3, #0
 800c108:	d0c5      	beq.n	800c096 <_vfiprintf_r+0x176>
 800c10a:	9105      	str	r1, [sp, #20]
 800c10c:	e7c3      	b.n	800c096 <_vfiprintf_r+0x176>
 800c10e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c112:	4604      	mov	r4, r0
 800c114:	2301      	movs	r3, #1
 800c116:	e7f0      	b.n	800c0fa <_vfiprintf_r+0x1da>
 800c118:	ab03      	add	r3, sp, #12
 800c11a:	9300      	str	r3, [sp, #0]
 800c11c:	462a      	mov	r2, r5
 800c11e:	4b16      	ldr	r3, [pc, #88]	; (800c178 <_vfiprintf_r+0x258>)
 800c120:	a904      	add	r1, sp, #16
 800c122:	4630      	mov	r0, r6
 800c124:	f7fc f83c 	bl	80081a0 <_printf_float>
 800c128:	4607      	mov	r7, r0
 800c12a:	1c78      	adds	r0, r7, #1
 800c12c:	d1d6      	bne.n	800c0dc <_vfiprintf_r+0x1bc>
 800c12e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c130:	07d9      	lsls	r1, r3, #31
 800c132:	d405      	bmi.n	800c140 <_vfiprintf_r+0x220>
 800c134:	89ab      	ldrh	r3, [r5, #12]
 800c136:	059a      	lsls	r2, r3, #22
 800c138:	d402      	bmi.n	800c140 <_vfiprintf_r+0x220>
 800c13a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c13c:	f000 faa1 	bl	800c682 <__retarget_lock_release_recursive>
 800c140:	89ab      	ldrh	r3, [r5, #12]
 800c142:	065b      	lsls	r3, r3, #25
 800c144:	f53f af12 	bmi.w	800bf6c <_vfiprintf_r+0x4c>
 800c148:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c14a:	e711      	b.n	800bf70 <_vfiprintf_r+0x50>
 800c14c:	ab03      	add	r3, sp, #12
 800c14e:	9300      	str	r3, [sp, #0]
 800c150:	462a      	mov	r2, r5
 800c152:	4b09      	ldr	r3, [pc, #36]	; (800c178 <_vfiprintf_r+0x258>)
 800c154:	a904      	add	r1, sp, #16
 800c156:	4630      	mov	r0, r6
 800c158:	f7fc fac6 	bl	80086e8 <_printf_i>
 800c15c:	e7e4      	b.n	800c128 <_vfiprintf_r+0x208>
 800c15e:	bf00      	nop
 800c160:	0800ce7c 	.word	0x0800ce7c
 800c164:	0800ce9c 	.word	0x0800ce9c
 800c168:	0800ce5c 	.word	0x0800ce5c
 800c16c:	0800ce0c 	.word	0x0800ce0c
 800c170:	0800ce16 	.word	0x0800ce16
 800c174:	080081a1 	.word	0x080081a1
 800c178:	0800befd 	.word	0x0800befd
 800c17c:	0800ce12 	.word	0x0800ce12

0800c180 <__swbuf_r>:
 800c180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c182:	460e      	mov	r6, r1
 800c184:	4614      	mov	r4, r2
 800c186:	4605      	mov	r5, r0
 800c188:	b118      	cbz	r0, 800c192 <__swbuf_r+0x12>
 800c18a:	6983      	ldr	r3, [r0, #24]
 800c18c:	b90b      	cbnz	r3, 800c192 <__swbuf_r+0x12>
 800c18e:	f000 f9d9 	bl	800c544 <__sinit>
 800c192:	4b21      	ldr	r3, [pc, #132]	; (800c218 <__swbuf_r+0x98>)
 800c194:	429c      	cmp	r4, r3
 800c196:	d12b      	bne.n	800c1f0 <__swbuf_r+0x70>
 800c198:	686c      	ldr	r4, [r5, #4]
 800c19a:	69a3      	ldr	r3, [r4, #24]
 800c19c:	60a3      	str	r3, [r4, #8]
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	071a      	lsls	r2, r3, #28
 800c1a2:	d52f      	bpl.n	800c204 <__swbuf_r+0x84>
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	b36b      	cbz	r3, 800c204 <__swbuf_r+0x84>
 800c1a8:	6923      	ldr	r3, [r4, #16]
 800c1aa:	6820      	ldr	r0, [r4, #0]
 800c1ac:	1ac0      	subs	r0, r0, r3
 800c1ae:	6963      	ldr	r3, [r4, #20]
 800c1b0:	b2f6      	uxtb	r6, r6
 800c1b2:	4283      	cmp	r3, r0
 800c1b4:	4637      	mov	r7, r6
 800c1b6:	dc04      	bgt.n	800c1c2 <__swbuf_r+0x42>
 800c1b8:	4621      	mov	r1, r4
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	f000 f92e 	bl	800c41c <_fflush_r>
 800c1c0:	bb30      	cbnz	r0, 800c210 <__swbuf_r+0x90>
 800c1c2:	68a3      	ldr	r3, [r4, #8]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	60a3      	str	r3, [r4, #8]
 800c1c8:	6823      	ldr	r3, [r4, #0]
 800c1ca:	1c5a      	adds	r2, r3, #1
 800c1cc:	6022      	str	r2, [r4, #0]
 800c1ce:	701e      	strb	r6, [r3, #0]
 800c1d0:	6963      	ldr	r3, [r4, #20]
 800c1d2:	3001      	adds	r0, #1
 800c1d4:	4283      	cmp	r3, r0
 800c1d6:	d004      	beq.n	800c1e2 <__swbuf_r+0x62>
 800c1d8:	89a3      	ldrh	r3, [r4, #12]
 800c1da:	07db      	lsls	r3, r3, #31
 800c1dc:	d506      	bpl.n	800c1ec <__swbuf_r+0x6c>
 800c1de:	2e0a      	cmp	r6, #10
 800c1e0:	d104      	bne.n	800c1ec <__swbuf_r+0x6c>
 800c1e2:	4621      	mov	r1, r4
 800c1e4:	4628      	mov	r0, r5
 800c1e6:	f000 f919 	bl	800c41c <_fflush_r>
 800c1ea:	b988      	cbnz	r0, 800c210 <__swbuf_r+0x90>
 800c1ec:	4638      	mov	r0, r7
 800c1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1f0:	4b0a      	ldr	r3, [pc, #40]	; (800c21c <__swbuf_r+0x9c>)
 800c1f2:	429c      	cmp	r4, r3
 800c1f4:	d101      	bne.n	800c1fa <__swbuf_r+0x7a>
 800c1f6:	68ac      	ldr	r4, [r5, #8]
 800c1f8:	e7cf      	b.n	800c19a <__swbuf_r+0x1a>
 800c1fa:	4b09      	ldr	r3, [pc, #36]	; (800c220 <__swbuf_r+0xa0>)
 800c1fc:	429c      	cmp	r4, r3
 800c1fe:	bf08      	it	eq
 800c200:	68ec      	ldreq	r4, [r5, #12]
 800c202:	e7ca      	b.n	800c19a <__swbuf_r+0x1a>
 800c204:	4621      	mov	r1, r4
 800c206:	4628      	mov	r0, r5
 800c208:	f000 f80c 	bl	800c224 <__swsetup_r>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	d0cb      	beq.n	800c1a8 <__swbuf_r+0x28>
 800c210:	f04f 37ff 	mov.w	r7, #4294967295
 800c214:	e7ea      	b.n	800c1ec <__swbuf_r+0x6c>
 800c216:	bf00      	nop
 800c218:	0800ce7c 	.word	0x0800ce7c
 800c21c:	0800ce9c 	.word	0x0800ce9c
 800c220:	0800ce5c 	.word	0x0800ce5c

0800c224 <__swsetup_r>:
 800c224:	4b32      	ldr	r3, [pc, #200]	; (800c2f0 <__swsetup_r+0xcc>)
 800c226:	b570      	push	{r4, r5, r6, lr}
 800c228:	681d      	ldr	r5, [r3, #0]
 800c22a:	4606      	mov	r6, r0
 800c22c:	460c      	mov	r4, r1
 800c22e:	b125      	cbz	r5, 800c23a <__swsetup_r+0x16>
 800c230:	69ab      	ldr	r3, [r5, #24]
 800c232:	b913      	cbnz	r3, 800c23a <__swsetup_r+0x16>
 800c234:	4628      	mov	r0, r5
 800c236:	f000 f985 	bl	800c544 <__sinit>
 800c23a:	4b2e      	ldr	r3, [pc, #184]	; (800c2f4 <__swsetup_r+0xd0>)
 800c23c:	429c      	cmp	r4, r3
 800c23e:	d10f      	bne.n	800c260 <__swsetup_r+0x3c>
 800c240:	686c      	ldr	r4, [r5, #4]
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c248:	0719      	lsls	r1, r3, #28
 800c24a:	d42c      	bmi.n	800c2a6 <__swsetup_r+0x82>
 800c24c:	06dd      	lsls	r5, r3, #27
 800c24e:	d411      	bmi.n	800c274 <__swsetup_r+0x50>
 800c250:	2309      	movs	r3, #9
 800c252:	6033      	str	r3, [r6, #0]
 800c254:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c258:	81a3      	strh	r3, [r4, #12]
 800c25a:	f04f 30ff 	mov.w	r0, #4294967295
 800c25e:	e03e      	b.n	800c2de <__swsetup_r+0xba>
 800c260:	4b25      	ldr	r3, [pc, #148]	; (800c2f8 <__swsetup_r+0xd4>)
 800c262:	429c      	cmp	r4, r3
 800c264:	d101      	bne.n	800c26a <__swsetup_r+0x46>
 800c266:	68ac      	ldr	r4, [r5, #8]
 800c268:	e7eb      	b.n	800c242 <__swsetup_r+0x1e>
 800c26a:	4b24      	ldr	r3, [pc, #144]	; (800c2fc <__swsetup_r+0xd8>)
 800c26c:	429c      	cmp	r4, r3
 800c26e:	bf08      	it	eq
 800c270:	68ec      	ldreq	r4, [r5, #12]
 800c272:	e7e6      	b.n	800c242 <__swsetup_r+0x1e>
 800c274:	0758      	lsls	r0, r3, #29
 800c276:	d512      	bpl.n	800c29e <__swsetup_r+0x7a>
 800c278:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c27a:	b141      	cbz	r1, 800c28e <__swsetup_r+0x6a>
 800c27c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c280:	4299      	cmp	r1, r3
 800c282:	d002      	beq.n	800c28a <__swsetup_r+0x66>
 800c284:	4630      	mov	r0, r6
 800c286:	f7ff fb25 	bl	800b8d4 <_free_r>
 800c28a:	2300      	movs	r3, #0
 800c28c:	6363      	str	r3, [r4, #52]	; 0x34
 800c28e:	89a3      	ldrh	r3, [r4, #12]
 800c290:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c294:	81a3      	strh	r3, [r4, #12]
 800c296:	2300      	movs	r3, #0
 800c298:	6063      	str	r3, [r4, #4]
 800c29a:	6923      	ldr	r3, [r4, #16]
 800c29c:	6023      	str	r3, [r4, #0]
 800c29e:	89a3      	ldrh	r3, [r4, #12]
 800c2a0:	f043 0308 	orr.w	r3, r3, #8
 800c2a4:	81a3      	strh	r3, [r4, #12]
 800c2a6:	6923      	ldr	r3, [r4, #16]
 800c2a8:	b94b      	cbnz	r3, 800c2be <__swsetup_r+0x9a>
 800c2aa:	89a3      	ldrh	r3, [r4, #12]
 800c2ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c2b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c2b4:	d003      	beq.n	800c2be <__swsetup_r+0x9a>
 800c2b6:	4621      	mov	r1, r4
 800c2b8:	4630      	mov	r0, r6
 800c2ba:	f000 fa09 	bl	800c6d0 <__smakebuf_r>
 800c2be:	89a0      	ldrh	r0, [r4, #12]
 800c2c0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c2c4:	f010 0301 	ands.w	r3, r0, #1
 800c2c8:	d00a      	beq.n	800c2e0 <__swsetup_r+0xbc>
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	60a3      	str	r3, [r4, #8]
 800c2ce:	6963      	ldr	r3, [r4, #20]
 800c2d0:	425b      	negs	r3, r3
 800c2d2:	61a3      	str	r3, [r4, #24]
 800c2d4:	6923      	ldr	r3, [r4, #16]
 800c2d6:	b943      	cbnz	r3, 800c2ea <__swsetup_r+0xc6>
 800c2d8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c2dc:	d1ba      	bne.n	800c254 <__swsetup_r+0x30>
 800c2de:	bd70      	pop	{r4, r5, r6, pc}
 800c2e0:	0781      	lsls	r1, r0, #30
 800c2e2:	bf58      	it	pl
 800c2e4:	6963      	ldrpl	r3, [r4, #20]
 800c2e6:	60a3      	str	r3, [r4, #8]
 800c2e8:	e7f4      	b.n	800c2d4 <__swsetup_r+0xb0>
 800c2ea:	2000      	movs	r0, #0
 800c2ec:	e7f7      	b.n	800c2de <__swsetup_r+0xba>
 800c2ee:	bf00      	nop
 800c2f0:	20000018 	.word	0x20000018
 800c2f4:	0800ce7c 	.word	0x0800ce7c
 800c2f8:	0800ce9c 	.word	0x0800ce9c
 800c2fc:	0800ce5c 	.word	0x0800ce5c

0800c300 <abort>:
 800c300:	b508      	push	{r3, lr}
 800c302:	2006      	movs	r0, #6
 800c304:	f000 fa54 	bl	800c7b0 <raise>
 800c308:	2001      	movs	r0, #1
 800c30a:	f7f5 fe6b 	bl	8001fe4 <_exit>
	...

0800c310 <__sflush_r>:
 800c310:	898a      	ldrh	r2, [r1, #12]
 800c312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c316:	4605      	mov	r5, r0
 800c318:	0710      	lsls	r0, r2, #28
 800c31a:	460c      	mov	r4, r1
 800c31c:	d458      	bmi.n	800c3d0 <__sflush_r+0xc0>
 800c31e:	684b      	ldr	r3, [r1, #4]
 800c320:	2b00      	cmp	r3, #0
 800c322:	dc05      	bgt.n	800c330 <__sflush_r+0x20>
 800c324:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c326:	2b00      	cmp	r3, #0
 800c328:	dc02      	bgt.n	800c330 <__sflush_r+0x20>
 800c32a:	2000      	movs	r0, #0
 800c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c330:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c332:	2e00      	cmp	r6, #0
 800c334:	d0f9      	beq.n	800c32a <__sflush_r+0x1a>
 800c336:	2300      	movs	r3, #0
 800c338:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c33c:	682f      	ldr	r7, [r5, #0]
 800c33e:	602b      	str	r3, [r5, #0]
 800c340:	d032      	beq.n	800c3a8 <__sflush_r+0x98>
 800c342:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c344:	89a3      	ldrh	r3, [r4, #12]
 800c346:	075a      	lsls	r2, r3, #29
 800c348:	d505      	bpl.n	800c356 <__sflush_r+0x46>
 800c34a:	6863      	ldr	r3, [r4, #4]
 800c34c:	1ac0      	subs	r0, r0, r3
 800c34e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c350:	b10b      	cbz	r3, 800c356 <__sflush_r+0x46>
 800c352:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c354:	1ac0      	subs	r0, r0, r3
 800c356:	2300      	movs	r3, #0
 800c358:	4602      	mov	r2, r0
 800c35a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c35c:	6a21      	ldr	r1, [r4, #32]
 800c35e:	4628      	mov	r0, r5
 800c360:	47b0      	blx	r6
 800c362:	1c43      	adds	r3, r0, #1
 800c364:	89a3      	ldrh	r3, [r4, #12]
 800c366:	d106      	bne.n	800c376 <__sflush_r+0x66>
 800c368:	6829      	ldr	r1, [r5, #0]
 800c36a:	291d      	cmp	r1, #29
 800c36c:	d82c      	bhi.n	800c3c8 <__sflush_r+0xb8>
 800c36e:	4a2a      	ldr	r2, [pc, #168]	; (800c418 <__sflush_r+0x108>)
 800c370:	40ca      	lsrs	r2, r1
 800c372:	07d6      	lsls	r6, r2, #31
 800c374:	d528      	bpl.n	800c3c8 <__sflush_r+0xb8>
 800c376:	2200      	movs	r2, #0
 800c378:	6062      	str	r2, [r4, #4]
 800c37a:	04d9      	lsls	r1, r3, #19
 800c37c:	6922      	ldr	r2, [r4, #16]
 800c37e:	6022      	str	r2, [r4, #0]
 800c380:	d504      	bpl.n	800c38c <__sflush_r+0x7c>
 800c382:	1c42      	adds	r2, r0, #1
 800c384:	d101      	bne.n	800c38a <__sflush_r+0x7a>
 800c386:	682b      	ldr	r3, [r5, #0]
 800c388:	b903      	cbnz	r3, 800c38c <__sflush_r+0x7c>
 800c38a:	6560      	str	r0, [r4, #84]	; 0x54
 800c38c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c38e:	602f      	str	r7, [r5, #0]
 800c390:	2900      	cmp	r1, #0
 800c392:	d0ca      	beq.n	800c32a <__sflush_r+0x1a>
 800c394:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c398:	4299      	cmp	r1, r3
 800c39a:	d002      	beq.n	800c3a2 <__sflush_r+0x92>
 800c39c:	4628      	mov	r0, r5
 800c39e:	f7ff fa99 	bl	800b8d4 <_free_r>
 800c3a2:	2000      	movs	r0, #0
 800c3a4:	6360      	str	r0, [r4, #52]	; 0x34
 800c3a6:	e7c1      	b.n	800c32c <__sflush_r+0x1c>
 800c3a8:	6a21      	ldr	r1, [r4, #32]
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	4628      	mov	r0, r5
 800c3ae:	47b0      	blx	r6
 800c3b0:	1c41      	adds	r1, r0, #1
 800c3b2:	d1c7      	bne.n	800c344 <__sflush_r+0x34>
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d0c4      	beq.n	800c344 <__sflush_r+0x34>
 800c3ba:	2b1d      	cmp	r3, #29
 800c3bc:	d001      	beq.n	800c3c2 <__sflush_r+0xb2>
 800c3be:	2b16      	cmp	r3, #22
 800c3c0:	d101      	bne.n	800c3c6 <__sflush_r+0xb6>
 800c3c2:	602f      	str	r7, [r5, #0]
 800c3c4:	e7b1      	b.n	800c32a <__sflush_r+0x1a>
 800c3c6:	89a3      	ldrh	r3, [r4, #12]
 800c3c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3cc:	81a3      	strh	r3, [r4, #12]
 800c3ce:	e7ad      	b.n	800c32c <__sflush_r+0x1c>
 800c3d0:	690f      	ldr	r7, [r1, #16]
 800c3d2:	2f00      	cmp	r7, #0
 800c3d4:	d0a9      	beq.n	800c32a <__sflush_r+0x1a>
 800c3d6:	0793      	lsls	r3, r2, #30
 800c3d8:	680e      	ldr	r6, [r1, #0]
 800c3da:	bf08      	it	eq
 800c3dc:	694b      	ldreq	r3, [r1, #20]
 800c3de:	600f      	str	r7, [r1, #0]
 800c3e0:	bf18      	it	ne
 800c3e2:	2300      	movne	r3, #0
 800c3e4:	eba6 0807 	sub.w	r8, r6, r7
 800c3e8:	608b      	str	r3, [r1, #8]
 800c3ea:	f1b8 0f00 	cmp.w	r8, #0
 800c3ee:	dd9c      	ble.n	800c32a <__sflush_r+0x1a>
 800c3f0:	6a21      	ldr	r1, [r4, #32]
 800c3f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c3f4:	4643      	mov	r3, r8
 800c3f6:	463a      	mov	r2, r7
 800c3f8:	4628      	mov	r0, r5
 800c3fa:	47b0      	blx	r6
 800c3fc:	2800      	cmp	r0, #0
 800c3fe:	dc06      	bgt.n	800c40e <__sflush_r+0xfe>
 800c400:	89a3      	ldrh	r3, [r4, #12]
 800c402:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c406:	81a3      	strh	r3, [r4, #12]
 800c408:	f04f 30ff 	mov.w	r0, #4294967295
 800c40c:	e78e      	b.n	800c32c <__sflush_r+0x1c>
 800c40e:	4407      	add	r7, r0
 800c410:	eba8 0800 	sub.w	r8, r8, r0
 800c414:	e7e9      	b.n	800c3ea <__sflush_r+0xda>
 800c416:	bf00      	nop
 800c418:	20400001 	.word	0x20400001

0800c41c <_fflush_r>:
 800c41c:	b538      	push	{r3, r4, r5, lr}
 800c41e:	690b      	ldr	r3, [r1, #16]
 800c420:	4605      	mov	r5, r0
 800c422:	460c      	mov	r4, r1
 800c424:	b913      	cbnz	r3, 800c42c <_fflush_r+0x10>
 800c426:	2500      	movs	r5, #0
 800c428:	4628      	mov	r0, r5
 800c42a:	bd38      	pop	{r3, r4, r5, pc}
 800c42c:	b118      	cbz	r0, 800c436 <_fflush_r+0x1a>
 800c42e:	6983      	ldr	r3, [r0, #24]
 800c430:	b90b      	cbnz	r3, 800c436 <_fflush_r+0x1a>
 800c432:	f000 f887 	bl	800c544 <__sinit>
 800c436:	4b14      	ldr	r3, [pc, #80]	; (800c488 <_fflush_r+0x6c>)
 800c438:	429c      	cmp	r4, r3
 800c43a:	d11b      	bne.n	800c474 <_fflush_r+0x58>
 800c43c:	686c      	ldr	r4, [r5, #4]
 800c43e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d0ef      	beq.n	800c426 <_fflush_r+0xa>
 800c446:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c448:	07d0      	lsls	r0, r2, #31
 800c44a:	d404      	bmi.n	800c456 <_fflush_r+0x3a>
 800c44c:	0599      	lsls	r1, r3, #22
 800c44e:	d402      	bmi.n	800c456 <_fflush_r+0x3a>
 800c450:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c452:	f000 f915 	bl	800c680 <__retarget_lock_acquire_recursive>
 800c456:	4628      	mov	r0, r5
 800c458:	4621      	mov	r1, r4
 800c45a:	f7ff ff59 	bl	800c310 <__sflush_r>
 800c45e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c460:	07da      	lsls	r2, r3, #31
 800c462:	4605      	mov	r5, r0
 800c464:	d4e0      	bmi.n	800c428 <_fflush_r+0xc>
 800c466:	89a3      	ldrh	r3, [r4, #12]
 800c468:	059b      	lsls	r3, r3, #22
 800c46a:	d4dd      	bmi.n	800c428 <_fflush_r+0xc>
 800c46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c46e:	f000 f908 	bl	800c682 <__retarget_lock_release_recursive>
 800c472:	e7d9      	b.n	800c428 <_fflush_r+0xc>
 800c474:	4b05      	ldr	r3, [pc, #20]	; (800c48c <_fflush_r+0x70>)
 800c476:	429c      	cmp	r4, r3
 800c478:	d101      	bne.n	800c47e <_fflush_r+0x62>
 800c47a:	68ac      	ldr	r4, [r5, #8]
 800c47c:	e7df      	b.n	800c43e <_fflush_r+0x22>
 800c47e:	4b04      	ldr	r3, [pc, #16]	; (800c490 <_fflush_r+0x74>)
 800c480:	429c      	cmp	r4, r3
 800c482:	bf08      	it	eq
 800c484:	68ec      	ldreq	r4, [r5, #12]
 800c486:	e7da      	b.n	800c43e <_fflush_r+0x22>
 800c488:	0800ce7c 	.word	0x0800ce7c
 800c48c:	0800ce9c 	.word	0x0800ce9c
 800c490:	0800ce5c 	.word	0x0800ce5c

0800c494 <std>:
 800c494:	2300      	movs	r3, #0
 800c496:	b510      	push	{r4, lr}
 800c498:	4604      	mov	r4, r0
 800c49a:	e9c0 3300 	strd	r3, r3, [r0]
 800c49e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c4a2:	6083      	str	r3, [r0, #8]
 800c4a4:	8181      	strh	r1, [r0, #12]
 800c4a6:	6643      	str	r3, [r0, #100]	; 0x64
 800c4a8:	81c2      	strh	r2, [r0, #14]
 800c4aa:	6183      	str	r3, [r0, #24]
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	2208      	movs	r2, #8
 800c4b0:	305c      	adds	r0, #92	; 0x5c
 800c4b2:	f7fb fdcd 	bl	8008050 <memset>
 800c4b6:	4b05      	ldr	r3, [pc, #20]	; (800c4cc <std+0x38>)
 800c4b8:	6263      	str	r3, [r4, #36]	; 0x24
 800c4ba:	4b05      	ldr	r3, [pc, #20]	; (800c4d0 <std+0x3c>)
 800c4bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800c4be:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <std+0x40>)
 800c4c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c4c2:	4b05      	ldr	r3, [pc, #20]	; (800c4d8 <std+0x44>)
 800c4c4:	6224      	str	r4, [r4, #32]
 800c4c6:	6323      	str	r3, [r4, #48]	; 0x30
 800c4c8:	bd10      	pop	{r4, pc}
 800c4ca:	bf00      	nop
 800c4cc:	0800c7e9 	.word	0x0800c7e9
 800c4d0:	0800c80b 	.word	0x0800c80b
 800c4d4:	0800c843 	.word	0x0800c843
 800c4d8:	0800c867 	.word	0x0800c867

0800c4dc <_cleanup_r>:
 800c4dc:	4901      	ldr	r1, [pc, #4]	; (800c4e4 <_cleanup_r+0x8>)
 800c4de:	f000 b8af 	b.w	800c640 <_fwalk_reent>
 800c4e2:	bf00      	nop
 800c4e4:	0800c41d 	.word	0x0800c41d

0800c4e8 <__sfmoreglue>:
 800c4e8:	b570      	push	{r4, r5, r6, lr}
 800c4ea:	2268      	movs	r2, #104	; 0x68
 800c4ec:	1e4d      	subs	r5, r1, #1
 800c4ee:	4355      	muls	r5, r2
 800c4f0:	460e      	mov	r6, r1
 800c4f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c4f6:	f7ff fa59 	bl	800b9ac <_malloc_r>
 800c4fa:	4604      	mov	r4, r0
 800c4fc:	b140      	cbz	r0, 800c510 <__sfmoreglue+0x28>
 800c4fe:	2100      	movs	r1, #0
 800c500:	e9c0 1600 	strd	r1, r6, [r0]
 800c504:	300c      	adds	r0, #12
 800c506:	60a0      	str	r0, [r4, #8]
 800c508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c50c:	f7fb fda0 	bl	8008050 <memset>
 800c510:	4620      	mov	r0, r4
 800c512:	bd70      	pop	{r4, r5, r6, pc}

0800c514 <__sfp_lock_acquire>:
 800c514:	4801      	ldr	r0, [pc, #4]	; (800c51c <__sfp_lock_acquire+0x8>)
 800c516:	f000 b8b3 	b.w	800c680 <__retarget_lock_acquire_recursive>
 800c51a:	bf00      	nop
 800c51c:	200007dd 	.word	0x200007dd

0800c520 <__sfp_lock_release>:
 800c520:	4801      	ldr	r0, [pc, #4]	; (800c528 <__sfp_lock_release+0x8>)
 800c522:	f000 b8ae 	b.w	800c682 <__retarget_lock_release_recursive>
 800c526:	bf00      	nop
 800c528:	200007dd 	.word	0x200007dd

0800c52c <__sinit_lock_acquire>:
 800c52c:	4801      	ldr	r0, [pc, #4]	; (800c534 <__sinit_lock_acquire+0x8>)
 800c52e:	f000 b8a7 	b.w	800c680 <__retarget_lock_acquire_recursive>
 800c532:	bf00      	nop
 800c534:	200007de 	.word	0x200007de

0800c538 <__sinit_lock_release>:
 800c538:	4801      	ldr	r0, [pc, #4]	; (800c540 <__sinit_lock_release+0x8>)
 800c53a:	f000 b8a2 	b.w	800c682 <__retarget_lock_release_recursive>
 800c53e:	bf00      	nop
 800c540:	200007de 	.word	0x200007de

0800c544 <__sinit>:
 800c544:	b510      	push	{r4, lr}
 800c546:	4604      	mov	r4, r0
 800c548:	f7ff fff0 	bl	800c52c <__sinit_lock_acquire>
 800c54c:	69a3      	ldr	r3, [r4, #24]
 800c54e:	b11b      	cbz	r3, 800c558 <__sinit+0x14>
 800c550:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c554:	f7ff bff0 	b.w	800c538 <__sinit_lock_release>
 800c558:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c55c:	6523      	str	r3, [r4, #80]	; 0x50
 800c55e:	4b13      	ldr	r3, [pc, #76]	; (800c5ac <__sinit+0x68>)
 800c560:	4a13      	ldr	r2, [pc, #76]	; (800c5b0 <__sinit+0x6c>)
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	62a2      	str	r2, [r4, #40]	; 0x28
 800c566:	42a3      	cmp	r3, r4
 800c568:	bf04      	itt	eq
 800c56a:	2301      	moveq	r3, #1
 800c56c:	61a3      	streq	r3, [r4, #24]
 800c56e:	4620      	mov	r0, r4
 800c570:	f000 f820 	bl	800c5b4 <__sfp>
 800c574:	6060      	str	r0, [r4, #4]
 800c576:	4620      	mov	r0, r4
 800c578:	f000 f81c 	bl	800c5b4 <__sfp>
 800c57c:	60a0      	str	r0, [r4, #8]
 800c57e:	4620      	mov	r0, r4
 800c580:	f000 f818 	bl	800c5b4 <__sfp>
 800c584:	2200      	movs	r2, #0
 800c586:	60e0      	str	r0, [r4, #12]
 800c588:	2104      	movs	r1, #4
 800c58a:	6860      	ldr	r0, [r4, #4]
 800c58c:	f7ff ff82 	bl	800c494 <std>
 800c590:	68a0      	ldr	r0, [r4, #8]
 800c592:	2201      	movs	r2, #1
 800c594:	2109      	movs	r1, #9
 800c596:	f7ff ff7d 	bl	800c494 <std>
 800c59a:	68e0      	ldr	r0, [r4, #12]
 800c59c:	2202      	movs	r2, #2
 800c59e:	2112      	movs	r1, #18
 800c5a0:	f7ff ff78 	bl	800c494 <std>
 800c5a4:	2301      	movs	r3, #1
 800c5a6:	61a3      	str	r3, [r4, #24]
 800c5a8:	e7d2      	b.n	800c550 <__sinit+0xc>
 800c5aa:	bf00      	nop
 800c5ac:	0800ca18 	.word	0x0800ca18
 800c5b0:	0800c4dd 	.word	0x0800c4dd

0800c5b4 <__sfp>:
 800c5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5b6:	4607      	mov	r7, r0
 800c5b8:	f7ff ffac 	bl	800c514 <__sfp_lock_acquire>
 800c5bc:	4b1e      	ldr	r3, [pc, #120]	; (800c638 <__sfp+0x84>)
 800c5be:	681e      	ldr	r6, [r3, #0]
 800c5c0:	69b3      	ldr	r3, [r6, #24]
 800c5c2:	b913      	cbnz	r3, 800c5ca <__sfp+0x16>
 800c5c4:	4630      	mov	r0, r6
 800c5c6:	f7ff ffbd 	bl	800c544 <__sinit>
 800c5ca:	3648      	adds	r6, #72	; 0x48
 800c5cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c5d0:	3b01      	subs	r3, #1
 800c5d2:	d503      	bpl.n	800c5dc <__sfp+0x28>
 800c5d4:	6833      	ldr	r3, [r6, #0]
 800c5d6:	b30b      	cbz	r3, 800c61c <__sfp+0x68>
 800c5d8:	6836      	ldr	r6, [r6, #0]
 800c5da:	e7f7      	b.n	800c5cc <__sfp+0x18>
 800c5dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c5e0:	b9d5      	cbnz	r5, 800c618 <__sfp+0x64>
 800c5e2:	4b16      	ldr	r3, [pc, #88]	; (800c63c <__sfp+0x88>)
 800c5e4:	60e3      	str	r3, [r4, #12]
 800c5e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c5ea:	6665      	str	r5, [r4, #100]	; 0x64
 800c5ec:	f000 f847 	bl	800c67e <__retarget_lock_init_recursive>
 800c5f0:	f7ff ff96 	bl	800c520 <__sfp_lock_release>
 800c5f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c5f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c5fc:	6025      	str	r5, [r4, #0]
 800c5fe:	61a5      	str	r5, [r4, #24]
 800c600:	2208      	movs	r2, #8
 800c602:	4629      	mov	r1, r5
 800c604:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c608:	f7fb fd22 	bl	8008050 <memset>
 800c60c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c610:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c614:	4620      	mov	r0, r4
 800c616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c618:	3468      	adds	r4, #104	; 0x68
 800c61a:	e7d9      	b.n	800c5d0 <__sfp+0x1c>
 800c61c:	2104      	movs	r1, #4
 800c61e:	4638      	mov	r0, r7
 800c620:	f7ff ff62 	bl	800c4e8 <__sfmoreglue>
 800c624:	4604      	mov	r4, r0
 800c626:	6030      	str	r0, [r6, #0]
 800c628:	2800      	cmp	r0, #0
 800c62a:	d1d5      	bne.n	800c5d8 <__sfp+0x24>
 800c62c:	f7ff ff78 	bl	800c520 <__sfp_lock_release>
 800c630:	230c      	movs	r3, #12
 800c632:	603b      	str	r3, [r7, #0]
 800c634:	e7ee      	b.n	800c614 <__sfp+0x60>
 800c636:	bf00      	nop
 800c638:	0800ca18 	.word	0x0800ca18
 800c63c:	ffff0001 	.word	0xffff0001

0800c640 <_fwalk_reent>:
 800c640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c644:	4606      	mov	r6, r0
 800c646:	4688      	mov	r8, r1
 800c648:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c64c:	2700      	movs	r7, #0
 800c64e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c652:	f1b9 0901 	subs.w	r9, r9, #1
 800c656:	d505      	bpl.n	800c664 <_fwalk_reent+0x24>
 800c658:	6824      	ldr	r4, [r4, #0]
 800c65a:	2c00      	cmp	r4, #0
 800c65c:	d1f7      	bne.n	800c64e <_fwalk_reent+0xe>
 800c65e:	4638      	mov	r0, r7
 800c660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c664:	89ab      	ldrh	r3, [r5, #12]
 800c666:	2b01      	cmp	r3, #1
 800c668:	d907      	bls.n	800c67a <_fwalk_reent+0x3a>
 800c66a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c66e:	3301      	adds	r3, #1
 800c670:	d003      	beq.n	800c67a <_fwalk_reent+0x3a>
 800c672:	4629      	mov	r1, r5
 800c674:	4630      	mov	r0, r6
 800c676:	47c0      	blx	r8
 800c678:	4307      	orrs	r7, r0
 800c67a:	3568      	adds	r5, #104	; 0x68
 800c67c:	e7e9      	b.n	800c652 <_fwalk_reent+0x12>

0800c67e <__retarget_lock_init_recursive>:
 800c67e:	4770      	bx	lr

0800c680 <__retarget_lock_acquire_recursive>:
 800c680:	4770      	bx	lr

0800c682 <__retarget_lock_release_recursive>:
 800c682:	4770      	bx	lr

0800c684 <__swhatbuf_r>:
 800c684:	b570      	push	{r4, r5, r6, lr}
 800c686:	460e      	mov	r6, r1
 800c688:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c68c:	2900      	cmp	r1, #0
 800c68e:	b096      	sub	sp, #88	; 0x58
 800c690:	4614      	mov	r4, r2
 800c692:	461d      	mov	r5, r3
 800c694:	da08      	bge.n	800c6a8 <__swhatbuf_r+0x24>
 800c696:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c69a:	2200      	movs	r2, #0
 800c69c:	602a      	str	r2, [r5, #0]
 800c69e:	061a      	lsls	r2, r3, #24
 800c6a0:	d410      	bmi.n	800c6c4 <__swhatbuf_r+0x40>
 800c6a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c6a6:	e00e      	b.n	800c6c6 <__swhatbuf_r+0x42>
 800c6a8:	466a      	mov	r2, sp
 800c6aa:	f000 f903 	bl	800c8b4 <_fstat_r>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	dbf1      	blt.n	800c696 <__swhatbuf_r+0x12>
 800c6b2:	9a01      	ldr	r2, [sp, #4]
 800c6b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c6b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c6bc:	425a      	negs	r2, r3
 800c6be:	415a      	adcs	r2, r3
 800c6c0:	602a      	str	r2, [r5, #0]
 800c6c2:	e7ee      	b.n	800c6a2 <__swhatbuf_r+0x1e>
 800c6c4:	2340      	movs	r3, #64	; 0x40
 800c6c6:	2000      	movs	r0, #0
 800c6c8:	6023      	str	r3, [r4, #0]
 800c6ca:	b016      	add	sp, #88	; 0x58
 800c6cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c6d0 <__smakebuf_r>:
 800c6d0:	898b      	ldrh	r3, [r1, #12]
 800c6d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c6d4:	079d      	lsls	r5, r3, #30
 800c6d6:	4606      	mov	r6, r0
 800c6d8:	460c      	mov	r4, r1
 800c6da:	d507      	bpl.n	800c6ec <__smakebuf_r+0x1c>
 800c6dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	6123      	str	r3, [r4, #16]
 800c6e4:	2301      	movs	r3, #1
 800c6e6:	6163      	str	r3, [r4, #20]
 800c6e8:	b002      	add	sp, #8
 800c6ea:	bd70      	pop	{r4, r5, r6, pc}
 800c6ec:	ab01      	add	r3, sp, #4
 800c6ee:	466a      	mov	r2, sp
 800c6f0:	f7ff ffc8 	bl	800c684 <__swhatbuf_r>
 800c6f4:	9900      	ldr	r1, [sp, #0]
 800c6f6:	4605      	mov	r5, r0
 800c6f8:	4630      	mov	r0, r6
 800c6fa:	f7ff f957 	bl	800b9ac <_malloc_r>
 800c6fe:	b948      	cbnz	r0, 800c714 <__smakebuf_r+0x44>
 800c700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c704:	059a      	lsls	r2, r3, #22
 800c706:	d4ef      	bmi.n	800c6e8 <__smakebuf_r+0x18>
 800c708:	f023 0303 	bic.w	r3, r3, #3
 800c70c:	f043 0302 	orr.w	r3, r3, #2
 800c710:	81a3      	strh	r3, [r4, #12]
 800c712:	e7e3      	b.n	800c6dc <__smakebuf_r+0xc>
 800c714:	4b0d      	ldr	r3, [pc, #52]	; (800c74c <__smakebuf_r+0x7c>)
 800c716:	62b3      	str	r3, [r6, #40]	; 0x28
 800c718:	89a3      	ldrh	r3, [r4, #12]
 800c71a:	6020      	str	r0, [r4, #0]
 800c71c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c720:	81a3      	strh	r3, [r4, #12]
 800c722:	9b00      	ldr	r3, [sp, #0]
 800c724:	6163      	str	r3, [r4, #20]
 800c726:	9b01      	ldr	r3, [sp, #4]
 800c728:	6120      	str	r0, [r4, #16]
 800c72a:	b15b      	cbz	r3, 800c744 <__smakebuf_r+0x74>
 800c72c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c730:	4630      	mov	r0, r6
 800c732:	f000 f8d1 	bl	800c8d8 <_isatty_r>
 800c736:	b128      	cbz	r0, 800c744 <__smakebuf_r+0x74>
 800c738:	89a3      	ldrh	r3, [r4, #12]
 800c73a:	f023 0303 	bic.w	r3, r3, #3
 800c73e:	f043 0301 	orr.w	r3, r3, #1
 800c742:	81a3      	strh	r3, [r4, #12]
 800c744:	89a0      	ldrh	r0, [r4, #12]
 800c746:	4305      	orrs	r5, r0
 800c748:	81a5      	strh	r5, [r4, #12]
 800c74a:	e7cd      	b.n	800c6e8 <__smakebuf_r+0x18>
 800c74c:	0800c4dd 	.word	0x0800c4dd

0800c750 <_malloc_usable_size_r>:
 800c750:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c754:	1f18      	subs	r0, r3, #4
 800c756:	2b00      	cmp	r3, #0
 800c758:	bfbc      	itt	lt
 800c75a:	580b      	ldrlt	r3, [r1, r0]
 800c75c:	18c0      	addlt	r0, r0, r3
 800c75e:	4770      	bx	lr

0800c760 <_raise_r>:
 800c760:	291f      	cmp	r1, #31
 800c762:	b538      	push	{r3, r4, r5, lr}
 800c764:	4604      	mov	r4, r0
 800c766:	460d      	mov	r5, r1
 800c768:	d904      	bls.n	800c774 <_raise_r+0x14>
 800c76a:	2316      	movs	r3, #22
 800c76c:	6003      	str	r3, [r0, #0]
 800c76e:	f04f 30ff 	mov.w	r0, #4294967295
 800c772:	bd38      	pop	{r3, r4, r5, pc}
 800c774:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c776:	b112      	cbz	r2, 800c77e <_raise_r+0x1e>
 800c778:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c77c:	b94b      	cbnz	r3, 800c792 <_raise_r+0x32>
 800c77e:	4620      	mov	r0, r4
 800c780:	f000 f830 	bl	800c7e4 <_getpid_r>
 800c784:	462a      	mov	r2, r5
 800c786:	4601      	mov	r1, r0
 800c788:	4620      	mov	r0, r4
 800c78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c78e:	f000 b817 	b.w	800c7c0 <_kill_r>
 800c792:	2b01      	cmp	r3, #1
 800c794:	d00a      	beq.n	800c7ac <_raise_r+0x4c>
 800c796:	1c59      	adds	r1, r3, #1
 800c798:	d103      	bne.n	800c7a2 <_raise_r+0x42>
 800c79a:	2316      	movs	r3, #22
 800c79c:	6003      	str	r3, [r0, #0]
 800c79e:	2001      	movs	r0, #1
 800c7a0:	e7e7      	b.n	800c772 <_raise_r+0x12>
 800c7a2:	2400      	movs	r4, #0
 800c7a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	4798      	blx	r3
 800c7ac:	2000      	movs	r0, #0
 800c7ae:	e7e0      	b.n	800c772 <_raise_r+0x12>

0800c7b0 <raise>:
 800c7b0:	4b02      	ldr	r3, [pc, #8]	; (800c7bc <raise+0xc>)
 800c7b2:	4601      	mov	r1, r0
 800c7b4:	6818      	ldr	r0, [r3, #0]
 800c7b6:	f7ff bfd3 	b.w	800c760 <_raise_r>
 800c7ba:	bf00      	nop
 800c7bc:	20000018 	.word	0x20000018

0800c7c0 <_kill_r>:
 800c7c0:	b538      	push	{r3, r4, r5, lr}
 800c7c2:	4d07      	ldr	r5, [pc, #28]	; (800c7e0 <_kill_r+0x20>)
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	4604      	mov	r4, r0
 800c7c8:	4608      	mov	r0, r1
 800c7ca:	4611      	mov	r1, r2
 800c7cc:	602b      	str	r3, [r5, #0]
 800c7ce:	f7f5 fbf9 	bl	8001fc4 <_kill>
 800c7d2:	1c43      	adds	r3, r0, #1
 800c7d4:	d102      	bne.n	800c7dc <_kill_r+0x1c>
 800c7d6:	682b      	ldr	r3, [r5, #0]
 800c7d8:	b103      	cbz	r3, 800c7dc <_kill_r+0x1c>
 800c7da:	6023      	str	r3, [r4, #0]
 800c7dc:	bd38      	pop	{r3, r4, r5, pc}
 800c7de:	bf00      	nop
 800c7e0:	200007d8 	.word	0x200007d8

0800c7e4 <_getpid_r>:
 800c7e4:	f7f5 bbe6 	b.w	8001fb4 <_getpid>

0800c7e8 <__sread>:
 800c7e8:	b510      	push	{r4, lr}
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c7f0:	f000 f894 	bl	800c91c <_read_r>
 800c7f4:	2800      	cmp	r0, #0
 800c7f6:	bfab      	itete	ge
 800c7f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c7fa:	89a3      	ldrhlt	r3, [r4, #12]
 800c7fc:	181b      	addge	r3, r3, r0
 800c7fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c802:	bfac      	ite	ge
 800c804:	6563      	strge	r3, [r4, #84]	; 0x54
 800c806:	81a3      	strhlt	r3, [r4, #12]
 800c808:	bd10      	pop	{r4, pc}

0800c80a <__swrite>:
 800c80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80e:	461f      	mov	r7, r3
 800c810:	898b      	ldrh	r3, [r1, #12]
 800c812:	05db      	lsls	r3, r3, #23
 800c814:	4605      	mov	r5, r0
 800c816:	460c      	mov	r4, r1
 800c818:	4616      	mov	r6, r2
 800c81a:	d505      	bpl.n	800c828 <__swrite+0x1e>
 800c81c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c820:	2302      	movs	r3, #2
 800c822:	2200      	movs	r2, #0
 800c824:	f000 f868 	bl	800c8f8 <_lseek_r>
 800c828:	89a3      	ldrh	r3, [r4, #12]
 800c82a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c82e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c832:	81a3      	strh	r3, [r4, #12]
 800c834:	4632      	mov	r2, r6
 800c836:	463b      	mov	r3, r7
 800c838:	4628      	mov	r0, r5
 800c83a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c83e:	f000 b817 	b.w	800c870 <_write_r>

0800c842 <__sseek>:
 800c842:	b510      	push	{r4, lr}
 800c844:	460c      	mov	r4, r1
 800c846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c84a:	f000 f855 	bl	800c8f8 <_lseek_r>
 800c84e:	1c43      	adds	r3, r0, #1
 800c850:	89a3      	ldrh	r3, [r4, #12]
 800c852:	bf15      	itete	ne
 800c854:	6560      	strne	r0, [r4, #84]	; 0x54
 800c856:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c85a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c85e:	81a3      	strheq	r3, [r4, #12]
 800c860:	bf18      	it	ne
 800c862:	81a3      	strhne	r3, [r4, #12]
 800c864:	bd10      	pop	{r4, pc}

0800c866 <__sclose>:
 800c866:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c86a:	f000 b813 	b.w	800c894 <_close_r>
	...

0800c870 <_write_r>:
 800c870:	b538      	push	{r3, r4, r5, lr}
 800c872:	4d07      	ldr	r5, [pc, #28]	; (800c890 <_write_r+0x20>)
 800c874:	4604      	mov	r4, r0
 800c876:	4608      	mov	r0, r1
 800c878:	4611      	mov	r1, r2
 800c87a:	2200      	movs	r2, #0
 800c87c:	602a      	str	r2, [r5, #0]
 800c87e:	461a      	mov	r2, r3
 800c880:	f7f5 fbd7 	bl	8002032 <_write>
 800c884:	1c43      	adds	r3, r0, #1
 800c886:	d102      	bne.n	800c88e <_write_r+0x1e>
 800c888:	682b      	ldr	r3, [r5, #0]
 800c88a:	b103      	cbz	r3, 800c88e <_write_r+0x1e>
 800c88c:	6023      	str	r3, [r4, #0]
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	200007d8 	.word	0x200007d8

0800c894 <_close_r>:
 800c894:	b538      	push	{r3, r4, r5, lr}
 800c896:	4d06      	ldr	r5, [pc, #24]	; (800c8b0 <_close_r+0x1c>)
 800c898:	2300      	movs	r3, #0
 800c89a:	4604      	mov	r4, r0
 800c89c:	4608      	mov	r0, r1
 800c89e:	602b      	str	r3, [r5, #0]
 800c8a0:	f7f5 fbe3 	bl	800206a <_close>
 800c8a4:	1c43      	adds	r3, r0, #1
 800c8a6:	d102      	bne.n	800c8ae <_close_r+0x1a>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	b103      	cbz	r3, 800c8ae <_close_r+0x1a>
 800c8ac:	6023      	str	r3, [r4, #0]
 800c8ae:	bd38      	pop	{r3, r4, r5, pc}
 800c8b0:	200007d8 	.word	0x200007d8

0800c8b4 <_fstat_r>:
 800c8b4:	b538      	push	{r3, r4, r5, lr}
 800c8b6:	4d07      	ldr	r5, [pc, #28]	; (800c8d4 <_fstat_r+0x20>)
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	4604      	mov	r4, r0
 800c8bc:	4608      	mov	r0, r1
 800c8be:	4611      	mov	r1, r2
 800c8c0:	602b      	str	r3, [r5, #0]
 800c8c2:	f7f5 fbde 	bl	8002082 <_fstat>
 800c8c6:	1c43      	adds	r3, r0, #1
 800c8c8:	d102      	bne.n	800c8d0 <_fstat_r+0x1c>
 800c8ca:	682b      	ldr	r3, [r5, #0]
 800c8cc:	b103      	cbz	r3, 800c8d0 <_fstat_r+0x1c>
 800c8ce:	6023      	str	r3, [r4, #0]
 800c8d0:	bd38      	pop	{r3, r4, r5, pc}
 800c8d2:	bf00      	nop
 800c8d4:	200007d8 	.word	0x200007d8

0800c8d8 <_isatty_r>:
 800c8d8:	b538      	push	{r3, r4, r5, lr}
 800c8da:	4d06      	ldr	r5, [pc, #24]	; (800c8f4 <_isatty_r+0x1c>)
 800c8dc:	2300      	movs	r3, #0
 800c8de:	4604      	mov	r4, r0
 800c8e0:	4608      	mov	r0, r1
 800c8e2:	602b      	str	r3, [r5, #0]
 800c8e4:	f7f5 fbdd 	bl	80020a2 <_isatty>
 800c8e8:	1c43      	adds	r3, r0, #1
 800c8ea:	d102      	bne.n	800c8f2 <_isatty_r+0x1a>
 800c8ec:	682b      	ldr	r3, [r5, #0]
 800c8ee:	b103      	cbz	r3, 800c8f2 <_isatty_r+0x1a>
 800c8f0:	6023      	str	r3, [r4, #0]
 800c8f2:	bd38      	pop	{r3, r4, r5, pc}
 800c8f4:	200007d8 	.word	0x200007d8

0800c8f8 <_lseek_r>:
 800c8f8:	b538      	push	{r3, r4, r5, lr}
 800c8fa:	4d07      	ldr	r5, [pc, #28]	; (800c918 <_lseek_r+0x20>)
 800c8fc:	4604      	mov	r4, r0
 800c8fe:	4608      	mov	r0, r1
 800c900:	4611      	mov	r1, r2
 800c902:	2200      	movs	r2, #0
 800c904:	602a      	str	r2, [r5, #0]
 800c906:	461a      	mov	r2, r3
 800c908:	f7f5 fbd6 	bl	80020b8 <_lseek>
 800c90c:	1c43      	adds	r3, r0, #1
 800c90e:	d102      	bne.n	800c916 <_lseek_r+0x1e>
 800c910:	682b      	ldr	r3, [r5, #0]
 800c912:	b103      	cbz	r3, 800c916 <_lseek_r+0x1e>
 800c914:	6023      	str	r3, [r4, #0]
 800c916:	bd38      	pop	{r3, r4, r5, pc}
 800c918:	200007d8 	.word	0x200007d8

0800c91c <_read_r>:
 800c91c:	b538      	push	{r3, r4, r5, lr}
 800c91e:	4d07      	ldr	r5, [pc, #28]	; (800c93c <_read_r+0x20>)
 800c920:	4604      	mov	r4, r0
 800c922:	4608      	mov	r0, r1
 800c924:	4611      	mov	r1, r2
 800c926:	2200      	movs	r2, #0
 800c928:	602a      	str	r2, [r5, #0]
 800c92a:	461a      	mov	r2, r3
 800c92c:	f7f5 fb64 	bl	8001ff8 <_read>
 800c930:	1c43      	adds	r3, r0, #1
 800c932:	d102      	bne.n	800c93a <_read_r+0x1e>
 800c934:	682b      	ldr	r3, [r5, #0]
 800c936:	b103      	cbz	r3, 800c93a <_read_r+0x1e>
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	bd38      	pop	{r3, r4, r5, pc}
 800c93c:	200007d8 	.word	0x200007d8

0800c940 <_init>:
 800c940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c942:	bf00      	nop
 800c944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c946:	bc08      	pop	{r3}
 800c948:	469e      	mov	lr, r3
 800c94a:	4770      	bx	lr

0800c94c <_fini>:
 800c94c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c94e:	bf00      	nop
 800c950:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c952:	bc08      	pop	{r3}
 800c954:	469e      	mov	lr, r3
 800c956:	4770      	bx	lr
