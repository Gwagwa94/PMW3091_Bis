
PMW3091_Bis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b998  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800bb28  0800bb28  0001bb28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c07c  0800c07c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800c07c  0800c07c  0001c07c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c084  0800c084  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c084  0800c084  0001c084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c088  0800c088  0001c088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800c08c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  200001ec  0800c278  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b8  0800c278  000207b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013cdb  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002831  00000000  00000000  00033ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00036728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00037940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022821  00000000  00000000  00038a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014f7e  00000000  00000000  0005b271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf5bf  00000000  00000000  000701ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013f7ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061dc  00000000  00000000  0013f800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800bb10 	.word	0x0800bb10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	0800bb10 	.word	0x0800bb10

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8001000:	2100      	movs	r1, #0
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f003 ff94 	bl	8004f30 <HAL_TIM_PWM_Stop_DMA>
}
 8001008:	bf00      	nop
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}

08001010 <NEOPIXELS_SETUP>:

void NEOPIXELS_SETUP(PixelRGB_t pixel[], uint32_t *dmaBuffer, uint32_t *pBuff, int numPixelsOn, int k, int modulo, int color[], int intensity)
{
 8001010:	b480      	push	{r7}
 8001012:	b089      	sub	sp, #36	; 0x24
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
 800101c:	603b      	str	r3, [r7, #0]
	for (int i = (NUM_PIXELS - 1); i > 0; i--)
 800101e:	230b      	movs	r3, #11
 8001020:	61fb      	str	r3, [r7, #28]
 8001022:	e00f      	b.n	8001044 <NEOPIXELS_SETUP+0x34>
	{
		pixel[i].data = pixel[i-1].data;
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800102a:	3b01      	subs	r3, #1
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	68fa      	ldr	r2, [r7, #12]
 8001030:	441a      	add	r2, r3
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	68f9      	ldr	r1, [r7, #12]
 8001038:	440b      	add	r3, r1
 800103a:	6812      	ldr	r2, [r2, #0]
 800103c:	601a      	str	r2, [r3, #0]
	for (int i = (NUM_PIXELS - 1); i > 0; i--)
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3b01      	subs	r3, #1
 8001042:	61fb      	str	r3, [r7, #28]
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dcec      	bgt.n	8001024 <NEOPIXELS_SETUP+0x14>
	}

	if((k % modulo) != 0)
 800104a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800104c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800104e:	fb93 f2f2 	sdiv	r2, r3, r2
 8001052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001054:	fb01 f202 	mul.w	r2, r1, r2
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d009      	beq.n	8001072 <NEOPIXELS_SETUP+0x62>
	{
		pixel[0].color.r = 0;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	2200      	movs	r2, #0
 8001062:	705a      	strb	r2, [r3, #1]
		pixel[0].color.g = 0;
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2200      	movs	r2, #0
 8001068:	709a      	strb	r2, [r3, #2]
		pixel[0].color.b = 0;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	2200      	movs	r2, #0
 800106e:	701a      	strb	r2, [r3, #0]
 8001070:	e010      	b.n	8001094 <NEOPIXELS_SETUP+0x84>
	}

	else
	{
		pixel[0].color.r = color[0];
 8001072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	b2da      	uxtb	r2, r3
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	705a      	strb	r2, [r3, #1]
		pixel[0].color.g = color[1];
 800107c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800107e:	3304      	adds	r3, #4
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	b2da      	uxtb	r2, r3
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	709a      	strb	r2, [r3, #2]
		pixel[0].color.b = color[2];
 8001088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800108a:	3308      	adds	r3, #8
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	b2da      	uxtb	r2, r3
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	701a      	strb	r2, [r3, #0]
	}

	pixel[0].color.g >>= intensity;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	789b      	ldrb	r3, [r3, #2]
 8001098:	461a      	mov	r2, r3
 800109a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800109c:	fa42 f303 	asr.w	r3, r2, r3
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	709a      	strb	r2, [r3, #2]
	pixel[0].color.r >>= intensity;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	461a      	mov	r2, r3
 80010ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010ae:	fa42 f303 	asr.w	r3, r2, r3
 80010b2:	b2da      	uxtb	r2, r3
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	705a      	strb	r2, [r3, #1]
	pixel[0].color.b >>= intensity;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c0:	fa42 f303 	asr.w	r3, r2, r3
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	701a      	strb	r2, [r3, #0]

	pBuff = dmaBuffer;
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	607b      	str	r3, [r7, #4]

	for (int i = 0; i < numPixelsOn; i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	61bb      	str	r3, [r7, #24]
 80010d2:	e02b      	b.n	800112c <NEOPIXELS_SETUP+0x11c>
	{
		for (int j = 23; j >= 0; j--)
 80010d4:	2317      	movs	r3, #23
 80010d6:	617b      	str	r3, [r7, #20]
 80010d8:	e022      	b.n	8001120 <NEOPIXELS_SETUP+0x110>
	    {
			if (((pixel[i].data >> j) & 0x01) && ((k % modulo) == 0))
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	4413      	add	r3, r2
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	fa22 f303 	lsr.w	r3, r2, r3
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d00d      	beq.n	800110e <NEOPIXELS_SETUP+0xfe>
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010f6:	fb93 f2f2 	sdiv	r2, r3, r2
 80010fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80010fc:	fb01 f202 	mul.w	r2, r1, r2
 8001100:	1a9b      	subs	r3, r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d103      	bne.n	800110e <NEOPIXELS_SETUP+0xfe>
	        {
				*pBuff = NEOPIXEL_ONE;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	223d      	movs	r2, #61	; 0x3d
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	e002      	b.n	8001114 <NEOPIXELS_SETUP+0x104>
	        }
	        else
	        {
	        	*pBuff = NEOPIXEL_ZERO;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	221f      	movs	r2, #31
 8001112:	601a      	str	r2, [r3, #0]
	        }
	        pBuff++;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	3304      	adds	r3, #4
 8001118:	607b      	str	r3, [r7, #4]
		for (int j = 23; j >= 0; j--)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	3b01      	subs	r3, #1
 800111e:	617b      	str	r3, [r7, #20]
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	2b00      	cmp	r3, #0
 8001124:	dad9      	bge.n	80010da <NEOPIXELS_SETUP+0xca>
	for (int i = 0; i < numPixelsOn; i++)
 8001126:	69bb      	ldr	r3, [r7, #24]
 8001128:	3301      	adds	r3, #1
 800112a:	61bb      	str	r3, [r7, #24]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	429a      	cmp	r2, r3
 8001132:	dbcf      	blt.n	80010d4 <NEOPIXELS_SETUP+0xc4>
	     }
	 }
	 dmaBuffer[DMA_BUFF_SIZE - 1] = 0;
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f503 6390 	add.w	r3, r3, #1152	; 0x480
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
}
 800113e:	bf00      	nop
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b5b0      	push	{r4, r5, r7, lr}
 800114e:	f5ad 6da1 	sub.w	sp, sp, #1288	; 0x508
 8001152:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
	PixelRGB_t pixel[NUM_PIXELS] = {0};
 8001154:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 8001158:	2230      	movs	r2, #48	; 0x30
 800115a:	2100      	movs	r1, #0
 800115c:	4618      	mov	r0, r3
 800115e:	f006 f85f 	bl	8007220 <memset>
	  uint32_t dmaBuffer[DMA_BUFF_SIZE] = {0};
 8001162:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8001166:	f2a3 43d4 	subw	r3, r3, #1236	; 0x4d4
 800116a:	4618      	mov	r0, r3
 800116c:	f240 4384 	movw	r3, #1156	; 0x484
 8001170:	461a      	mov	r2, r3
 8001172:	2100      	movs	r1, #0
 8001174:	f006 f854 	bl	8007220 <memset>
	  uint32_t *pBuff = NULL;
 8001178:	2300      	movs	r3, #0
 800117a:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
	  int k, modulo, numPixelsOff = 0, numPixelsOn;
 800117e:	2300      	movs	r3, #0
 8001180:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001184:	f000 fe0b 	bl	8001d9e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001188:	f000 f97e 	bl	8001488 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118c:	f000 fb16 	bl	80017bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001190:	f000 faf6 	bl	8001780 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001194:	f000 fac4 	bl	8001720 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001198:	f000 f9d8 	bl	800154c <MX_SPI1_Init>
  MX_TIM1_Init();
 800119c:	f000 fa14 	bl	80015c8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  Tx_len = sprintf (buffer, "init\r\n"); // Début initialisation + écriture de "init"
 80011a0:	49a7      	ldr	r1, [pc, #668]	; (8001440 <main+0x2f4>)
 80011a2:	48a8      	ldr	r0, [pc, #672]	; (8001444 <main+0x2f8>)
 80011a4:	f006 fec4 	bl	8007f30 <siprintf>
 80011a8:	4603      	mov	r3, r0
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	4ba6      	ldr	r3, [pc, #664]	; (8001448 <main+0x2fc>)
 80011ae:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*) buffer, Tx_len, 100); // Permet d'écrire en uart le tx_len : Va écrire dans le terminal ; "init"
 80011b0:	4ba5      	ldr	r3, [pc, #660]	; (8001448 <main+0x2fc>)
 80011b2:	881a      	ldrh	r2, [r3, #0]
 80011b4:	2364      	movs	r3, #100	; 0x64
 80011b6:	49a3      	ldr	r1, [pc, #652]	; (8001444 <main+0x2f8>)
 80011b8:	48a4      	ldr	r0, [pc, #656]	; (800144c <main+0x300>)
 80011ba:	f004 ff31 	bl	8006020 <HAL_UART_Transmit>

  status = PMW3901_Init(&PMW3901_Descriptor); // Permet d'initialiser le capteur optique
 80011be:	48a4      	ldr	r0, [pc, #656]	; (8001450 <main+0x304>)
 80011c0:	f005 fc48 	bl	8006a54 <PMW3901_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	461a      	mov	r2, r3
 80011c8:	4ba2      	ldr	r3, [pc, #648]	; (8001454 <main+0x308>)
 80011ca:	701a      	strb	r2, [r3, #0]

  Tx_len = sprintf (buffer, "init status = %d\r\n",status); // Permet d'afficher status qui s'il est égal à 0 veut dire que tout fonctionne
 80011cc:	4ba1      	ldr	r3, [pc, #644]	; (8001454 <main+0x308>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	461a      	mov	r2, r3
 80011d2:	49a1      	ldr	r1, [pc, #644]	; (8001458 <main+0x30c>)
 80011d4:	489b      	ldr	r0, [pc, #620]	; (8001444 <main+0x2f8>)
 80011d6:	f006 feab 	bl	8007f30 <siprintf>
 80011da:	4603      	mov	r3, r0
 80011dc:	b29a      	uxth	r2, r3
 80011de:	4b9a      	ldr	r3, [pc, #616]	; (8001448 <main+0x2fc>)
 80011e0:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100); // Permet d'écrire dans le terminal : "init status = " avec le status qui doit être à 0 indiquant que tout fonctionne
 80011e2:	4b99      	ldr	r3, [pc, #612]	; (8001448 <main+0x2fc>)
 80011e4:	881a      	ldrh	r2, [r3, #0]
 80011e6:	2364      	movs	r3, #100	; 0x64
 80011e8:	4996      	ldr	r1, [pc, #600]	; (8001444 <main+0x2f8>)
 80011ea:	4898      	ldr	r0, [pc, #608]	; (800144c <main+0x300>)
 80011ec:	f004 ff18 	bl	8006020 <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  numPixelsOn = NUM_PIXELS - numPixelsOff;
 80011f0:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 80011f4:	f1c3 030c 	rsb	r3, r3, #12
 80011f8:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0

    modulo = 2;
 80011fc:	2302      	movs	r3, #2
 80011fe:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
    for(int m = 0; m < numPixelsOn; m++)
 8001202:	2300      	movs	r3, #0
 8001204:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8001208:	e02c      	b.n	8001264 <main+0x118>
    {
    	  NEOPIXELS_SETUP(pixel, dmaBuffer, pBuff, numPixelsOn, m, modulo, COLOR_YELLOW, INTENSITY_LOW);
 800120a:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 800120e:	f5a3 639c 	sub.w	r3, r3, #1248	; 0x4e0
 8001212:	4a92      	ldr	r2, [pc, #584]	; (800145c <main+0x310>)
 8001214:	ca07      	ldmia	r2, {r0, r1, r2}
 8001216:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800121a:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800121e:	f507 6095 	add.w	r0, r7, #1192	; 0x4a8
 8001222:	2306      	movs	r3, #6
 8001224:	9303      	str	r3, [sp, #12]
 8001226:	f107 0318 	add.w	r3, r7, #24
 800122a:	9302      	str	r3, [sp, #8]
 800122c:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 8001236:	9300      	str	r3, [sp, #0]
 8001238:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800123c:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 8001240:	f7ff fee6 	bl	8001010 <NEOPIXELS_SETUP>
    	  HAL_Delay(100);
 8001244:	2064      	movs	r0, #100	; 0x64
 8001246:	f000 fe1f 	bl	8001e88 <HAL_Delay>
    	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
 800124a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800124e:	f240 1321 	movw	r3, #289	; 0x121
 8001252:	2100      	movs	r1, #0
 8001254:	4882      	ldr	r0, [pc, #520]	; (8001460 <main+0x314>)
 8001256:	f003 fc73 	bl	8004b40 <HAL_TIM_PWM_Start_DMA>
    for(int m = 0; m < numPixelsOn; m++)
 800125a:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	; 0x4f4
 800125e:	3301      	adds	r3, #1
 8001260:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8001264:	f8d7 24f4 	ldr.w	r2, [r7, #1268]	; 0x4f4
 8001268:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800126c:	429a      	cmp	r2, r3
 800126e:	dbcc      	blt.n	800120a <main+0xbe>
    }
    HAL_Delay(1000);
 8001270:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001274:	f000 fe08 	bl	8001e88 <HAL_Delay>

    k = 0;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
    modulo = 1;
 800127e:	2301      	movs	r3, #1
 8001280:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
    for(int m = 0; m < numPixelsOn; m++){
 8001284:	2300      	movs	r3, #0
 8001286:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 800128a:	e029      	b.n	80012e0 <main+0x194>
		NEOPIXELS_SETUP(pixel, dmaBuffer, pBuff, numPixelsOn, k, modulo, COLOR_WHITE, INTENSITY_LOW);
 800128c:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8001290:	f2a3 43ec 	subw	r3, r3, #1260	; 0x4ec
 8001294:	4a73      	ldr	r2, [pc, #460]	; (8001464 <main+0x318>)
 8001296:	ca07      	ldmia	r2, {r0, r1, r2}
 8001298:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800129c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80012a0:	f507 6095 	add.w	r0, r7, #1192	; 0x4a8
 80012a4:	2306      	movs	r3, #6
 80012a6:	9303      	str	r3, [sp, #12]
 80012a8:	f107 030c 	add.w	r3, r7, #12
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80012be:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 80012c2:	f7ff fea5 	bl	8001010 <NEOPIXELS_SETUP>
		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
 80012c6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012ca:	f240 1321 	movw	r3, #289	; 0x121
 80012ce:	2100      	movs	r1, #0
 80012d0:	4863      	ldr	r0, [pc, #396]	; (8001460 <main+0x314>)
 80012d2:	f003 fc35 	bl	8004b40 <HAL_TIM_PWM_Start_DMA>
    for(int m = 0; m < numPixelsOn; m++){
 80012d6:	f8d7 34f0 	ldr.w	r3, [r7, #1264]	; 0x4f0
 80012da:	3301      	adds	r3, #1
 80012dc:	f8c7 34f0 	str.w	r3, [r7, #1264]	; 0x4f0
 80012e0:	f8d7 24f0 	ldr.w	r2, [r7, #1264]	; 0x4f0
 80012e4:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbcf      	blt.n	800128c <main+0x140>
    }
    HAL_Delay(500);
 80012ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012f0:	f000 fdca 	bl	8001e88 <HAL_Delay>
  while (1)
  {
	  for(int m = 0; m < numPixelsOn; m++){
 80012f4:	2300      	movs	r3, #0
 80012f6:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 80012fa:	e028      	b.n	800134e <main+0x202>
	  		NEOPIXELS_SETUP(pixel, dmaBuffer, pBuff, numPixelsOn, k, modulo, COLOR_WHITE, INTENSITY_LOW);
 80012fc:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8001300:	f5a3 639f 	sub.w	r3, r3, #1272	; 0x4f8
 8001304:	4a57      	ldr	r2, [pc, #348]	; (8001464 <main+0x318>)
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800130c:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8001310:	f507 6095 	add.w	r0, r7, #1192	; 0x4a8
 8001314:	2306      	movs	r3, #6
 8001316:	9303      	str	r3, [sp, #12]
 8001318:	463b      	mov	r3, r7
 800131a:	9302      	str	r3, [sp, #8]
 800131c:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 800132c:	f8d7 24e8 	ldr.w	r2, [r7, #1256]	; 0x4e8
 8001330:	f7ff fe6e 	bl	8001010 <NEOPIXELS_SETUP>
	  		HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, dmaBuffer, DMA_BUFF_SIZE);
 8001334:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8001338:	f240 1321 	movw	r3, #289	; 0x121
 800133c:	2100      	movs	r1, #0
 800133e:	4848      	ldr	r0, [pc, #288]	; (8001460 <main+0x314>)
 8001340:	f003 fbfe 	bl	8004b40 <HAL_TIM_PWM_Start_DMA>
	  for(int m = 0; m < numPixelsOn; m++){
 8001344:	f8d7 34ec 	ldr.w	r3, [r7, #1260]	; 0x4ec
 8001348:	3301      	adds	r3, #1
 800134a:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 800134e:	f8d7 24ec 	ldr.w	r2, [r7, #1260]	; 0x4ec
 8001352:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8001356:	429a      	cmp	r2, r3
 8001358:	dbd0      	blt.n	80012fc <main+0x1b0>
	      }
	      HAL_Delay(500);
 800135a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800135e:	f000 fd93 	bl	8001e88 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  status = PMW3901_Read_Variation(&var_x, &var_y); // Permet de lire les valeurs de var_x et var_y
 8001362:	4941      	ldr	r1, [pc, #260]	; (8001468 <main+0x31c>)
 8001364:	4841      	ldr	r0, [pc, #260]	; (800146c <main+0x320>)
 8001366:	f005 fedb 	bl	8007120 <PMW3901_Read_Variation>
 800136a:	4603      	mov	r3, r0
 800136c:	461a      	mov	r2, r3
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <main+0x308>)
 8001370:	701a      	strb	r2, [r3, #0]

	  dx = COEF_CAPTEUR_Petit_Robot_X * var_x;
 8001372:	4b3e      	ldr	r3, [pc, #248]	; (800146c <main+0x320>)
 8001374:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff f8d3 	bl	8000524 <__aeabi_i2d>
 800137e:	f04f 0200 	mov.w	r2, #0
 8001382:	4b3b      	ldr	r3, [pc, #236]	; (8001470 <main+0x324>)
 8001384:	f7ff f938 	bl	80005f8 <__aeabi_dmul>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4610      	mov	r0, r2
 800138e:	4619      	mov	r1, r3
 8001390:	f7ff fc2a 	bl	8000be8 <__aeabi_d2f>
 8001394:	4603      	mov	r3, r0
 8001396:	4a37      	ldr	r2, [pc, #220]	; (8001474 <main+0x328>)
 8001398:	6013      	str	r3, [r2, #0]
	  posX = posX + dx; // Permet de déterminer la position du robot grâce au capteur optique en X
 800139a:	4b37      	ldr	r3, [pc, #220]	; (8001478 <main+0x32c>)
 800139c:	ed93 7a00 	vldr	s14, [r3]
 80013a0:	4b34      	ldr	r3, [pc, #208]	; (8001474 <main+0x328>)
 80013a2:	edd3 7a00 	vldr	s15, [r3]
 80013a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013aa:	4b33      	ldr	r3, [pc, #204]	; (8001478 <main+0x32c>)
 80013ac:	edc3 7a00 	vstr	s15, [r3]

	  dy = COEF_CAPTEUR_Petit_Robot_Y * var_y;
 80013b0:	4b2d      	ldr	r3, [pc, #180]	; (8001468 <main+0x31c>)
 80013b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff f8b4 	bl	8000524 <__aeabi_i2d>
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	4b2b      	ldr	r3, [pc, #172]	; (8001470 <main+0x324>)
 80013c2:	f7ff f919 	bl	80005f8 <__aeabi_dmul>
 80013c6:	4602      	mov	r2, r0
 80013c8:	460b      	mov	r3, r1
 80013ca:	4610      	mov	r0, r2
 80013cc:	4619      	mov	r1, r3
 80013ce:	f7ff fc0b 	bl	8000be8 <__aeabi_d2f>
 80013d2:	4603      	mov	r3, r0
 80013d4:	4a29      	ldr	r2, [pc, #164]	; (800147c <main+0x330>)
 80013d6:	6013      	str	r3, [r2, #0]
	  posY = posY + dy; // Permet de déterminer la position du robot grâce au capteur optique en Y
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <main+0x334>)
 80013da:	ed93 7a00 	vldr	s14, [r3]
 80013de:	4b27      	ldr	r3, [pc, #156]	; (800147c <main+0x330>)
 80013e0:	edd3 7a00 	vldr	s15, [r3]
 80013e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <main+0x334>)
 80013ea:	edc3 7a00 	vstr	s15, [r3]

	  Tx_len = sprintf (buffer, "Position x = %f\tPosition y = %f\tStatus = %d\r\n",posX,posY,status);
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <main+0x32c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff f8a8 	bl	8000548 <__aeabi_f2d>
 80013f8:	4604      	mov	r4, r0
 80013fa:	460d      	mov	r5, r1
 80013fc:	4b20      	ldr	r3, [pc, #128]	; (8001480 <main+0x334>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff f8a1 	bl	8000548 <__aeabi_f2d>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4912      	ldr	r1, [pc, #72]	; (8001454 <main+0x308>)
 800140c:	7809      	ldrb	r1, [r1, #0]
 800140e:	9102      	str	r1, [sp, #8]
 8001410:	e9cd 2300 	strd	r2, r3, [sp]
 8001414:	4622      	mov	r2, r4
 8001416:	462b      	mov	r3, r5
 8001418:	491a      	ldr	r1, [pc, #104]	; (8001484 <main+0x338>)
 800141a:	480a      	ldr	r0, [pc, #40]	; (8001444 <main+0x2f8>)
 800141c:	f006 fd88 	bl	8007f30 <siprintf>
 8001420:	4603      	mov	r3, r0
 8001422:	b29a      	uxth	r2, r3
 8001424:	4b08      	ldr	r3, [pc, #32]	; (8001448 <main+0x2fc>)
 8001426:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100); // Permet d'afficher en uart dans le terminal le posX, posY, status
 8001428:	4b07      	ldr	r3, [pc, #28]	; (8001448 <main+0x2fc>)
 800142a:	881a      	ldrh	r2, [r3, #0]
 800142c:	2364      	movs	r3, #100	; 0x64
 800142e:	4905      	ldr	r1, [pc, #20]	; (8001444 <main+0x2f8>)
 8001430:	4806      	ldr	r0, [pc, #24]	; (800144c <main+0x300>)
 8001432:	f004 fdf5 	bl	8006020 <HAL_UART_Transmit>

	  HAL_Delay(10); // Permet de mettre un délai de 10 ms
 8001436:	200a      	movs	r0, #10
 8001438:	f000 fd26 	bl	8001e88 <HAL_Delay>
	  for(int m = 0; m < numPixelsOn; m++){
 800143c:	e75a      	b.n	80012f4 <main+0x1a8>
 800143e:	bf00      	nop
 8001440:	0800bb28 	.word	0x0800bb28
 8001444:	20000384 	.word	0x20000384
 8001448:	20000784 	.word	0x20000784
 800144c:	20000300 	.word	0x20000300
 8001450:	20000000 	.word	0x20000000
 8001454:	20000786 	.word	0x20000786
 8001458:	0800bb30 	.word	0x0800bb30
 800145c:	0800bb74 	.word	0x0800bb74
 8001460:	2000026c 	.word	0x2000026c
 8001464:	0800bb80 	.word	0x0800bb80
 8001468:	2000078a 	.word	0x2000078a
 800146c:	20000788 	.word	0x20000788
 8001470:	3fd00000 	.word	0x3fd00000
 8001474:	20000794 	.word	0x20000794
 8001478:	2000078c 	.word	0x2000078c
 800147c:	20000798 	.word	0x20000798
 8001480:	20000790 	.word	0x20000790
 8001484:	0800bb44 	.word	0x0800bb44

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b096      	sub	sp, #88	; 0x58
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0314 	add.w	r3, r7, #20
 8001492:	2244      	movs	r2, #68	; 0x44
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f005 fec2 	bl	8007220 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014aa:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ae:	f001 f9f9 	bl	80028a4 <HAL_PWREx_ControlVoltageScaling>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014b8:	f000 f9e0 	bl	800187c <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014bc:	f001 f9d4 	bl	8002868 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014c0:	4b21      	ldr	r3, [pc, #132]	; (8001548 <SystemClock_Config+0xc0>)
 80014c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c6:	4a20      	ldr	r2, [pc, #128]	; (8001548 <SystemClock_Config+0xc0>)
 80014c8:	f023 0318 	bic.w	r3, r3, #24
 80014cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014d0:	2314      	movs	r3, #20
 80014d2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014d4:	2301      	movs	r3, #1
 80014d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014d8:	2301      	movs	r3, #1
 80014da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014dc:	2300      	movs	r3, #0
 80014de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80014e0:	2360      	movs	r3, #96	; 0x60
 80014e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014e4:	2302      	movs	r3, #2
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80014e8:	2301      	movs	r3, #1
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80014ec:	2301      	movs	r3, #1
 80014ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80014f0:	2328      	movs	r3, #40	; 0x28
 80014f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80014f4:	2307      	movs	r3, #7
 80014f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014f8:	2302      	movs	r3, #2
 80014fa:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014fc:	2302      	movs	r3, #2
 80014fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001500:	f107 0314 	add.w	r3, r7, #20
 8001504:	4618      	mov	r0, r3
 8001506:	f001 fa23 	bl	8002950 <HAL_RCC_OscConfig>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001510:	f000 f9b4 	bl	800187c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001514:	230f      	movs	r3, #15
 8001516:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001518:	2303      	movs	r3, #3
 800151a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800151c:	2300      	movs	r3, #0
 800151e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001520:	2300      	movs	r3, #0
 8001522:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001524:	2300      	movs	r3, #0
 8001526:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001528:	463b      	mov	r3, r7
 800152a:	2104      	movs	r1, #4
 800152c:	4618      	mov	r0, r3
 800152e:	f001 fe23 	bl	8003178 <HAL_RCC_ClockConfig>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001538:	f000 f9a0 	bl	800187c <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800153c:	f002 fa36 	bl	80039ac <HAL_RCCEx_EnableMSIPLLMode>
}
 8001540:	bf00      	nop
 8001542:	3758      	adds	r7, #88	; 0x58
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000

0800154c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <MX_SPI1_Init+0x78>)
 8001554:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001556:	4b1a      	ldr	r3, [pc, #104]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001558:	f44f 7282 	mov.w	r2, #260	; 0x104
 800155c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001564:	4b16      	ldr	r3, [pc, #88]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001566:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800156a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800156c:	4b14      	ldr	r3, [pc, #80]	; (80015c0 <MX_SPI1_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001572:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <MX_SPI1_Init+0x74>)
 800157a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800157e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001582:	2238      	movs	r2, #56	; 0x38
 8001584:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <MX_SPI1_Init+0x74>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <MX_SPI1_Init+0x74>)
 8001594:	2200      	movs	r2, #0
 8001596:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001598:	4b09      	ldr	r3, [pc, #36]	; (80015c0 <MX_SPI1_Init+0x74>)
 800159a:	2207      	movs	r2, #7
 800159c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800159e:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <MX_SPI1_Init+0x74>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <MX_SPI1_Init+0x74>)
 80015a6:	2208      	movs	r2, #8
 80015a8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <MX_SPI1_Init+0x74>)
 80015ac:	f002 fb00 	bl	8003bb0 <HAL_SPI_Init>
 80015b0:	4603      	mov	r3, r0
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d001      	beq.n	80015ba <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80015b6:	f000 f961 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80015ba:	bf00      	nop
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000208 	.word	0x20000208
 80015c4:	40013000 	.word	0x40013000

080015c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09a      	sub	sp, #104	; 0x68
 80015cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
 80015f8:	615a      	str	r2, [r3, #20]
 80015fa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	222c      	movs	r2, #44	; 0x2c
 8001600:	2100      	movs	r1, #0
 8001602:	4618      	mov	r0, r3
 8001604:	f005 fe0c 	bl	8007220 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001608:	4b43      	ldr	r3, [pc, #268]	; (8001718 <MX_TIM1_Init+0x150>)
 800160a:	4a44      	ldr	r2, [pc, #272]	; (800171c <MX_TIM1_Init+0x154>)
 800160c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800160e:	4b42      	ldr	r3, [pc, #264]	; (8001718 <MX_TIM1_Init+0x150>)
 8001610:	2200      	movs	r2, #0
 8001612:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <MX_TIM1_Init+0x150>)
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 95;
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <MX_TIM1_Init+0x150>)
 800161c:	225f      	movs	r2, #95	; 0x5f
 800161e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001620:	4b3d      	ldr	r3, [pc, #244]	; (8001718 <MX_TIM1_Init+0x150>)
 8001622:	2200      	movs	r2, #0
 8001624:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001626:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <MX_TIM1_Init+0x150>)
 8001628:	2200      	movs	r2, #0
 800162a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800162c:	4b3a      	ldr	r3, [pc, #232]	; (8001718 <MX_TIM1_Init+0x150>)
 800162e:	2200      	movs	r2, #0
 8001630:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001632:	4839      	ldr	r0, [pc, #228]	; (8001718 <MX_TIM1_Init+0x150>)
 8001634:	f003 f9cc 	bl	80049d0 <HAL_TIM_Base_Init>
 8001638:	4603      	mov	r3, r0
 800163a:	2b00      	cmp	r3, #0
 800163c:	d001      	beq.n	8001642 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800163e:	f000 f91d 	bl	800187c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001646:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001648:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800164c:	4619      	mov	r1, r3
 800164e:	4832      	ldr	r0, [pc, #200]	; (8001718 <MX_TIM1_Init+0x150>)
 8001650:	f003 fe6a 	bl	8005328 <HAL_TIM_ConfigClockSource>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800165a:	f000 f90f 	bl	800187c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800165e:	482e      	ldr	r0, [pc, #184]	; (8001718 <MX_TIM1_Init+0x150>)
 8001660:	f003 fa0d 	bl	8004a7e <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800166a:	f000 f907 	bl	800187c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001672:	2300      	movs	r3, #0
 8001674:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001676:	2300      	movs	r3, #0
 8001678:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800167a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800167e:	4619      	mov	r1, r3
 8001680:	4825      	ldr	r0, [pc, #148]	; (8001718 <MX_TIM1_Init+0x150>)
 8001682:	f004 fba1 	bl	8005dc8 <HAL_TIMEx_MasterConfigSynchronization>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 800168c:	f000 f8f6 	bl	800187c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001690:	2360      	movs	r3, #96	; 0x60
 8001692:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001694:	2300      	movs	r3, #0
 8001696:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001698:	2300      	movs	r3, #0
 800169a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800169c:	2300      	movs	r3, #0
 800169e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016b0:	2200      	movs	r2, #0
 80016b2:	4619      	mov	r1, r3
 80016b4:	4818      	ldr	r0, [pc, #96]	; (8001718 <MX_TIM1_Init+0x150>)
 80016b6:	f003 fd23 	bl	8005100 <HAL_TIM_PWM_ConfigChannel>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80016c0:	f000 f8dc 	bl	800187c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016d0:	2300      	movs	r3, #0
 80016d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016d4:	2300      	movs	r3, #0
 80016d6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016dc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016e2:	2300      	movs	r3, #0
 80016e4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80016f4:	1d3b      	adds	r3, r7, #4
 80016f6:	4619      	mov	r1, r3
 80016f8:	4807      	ldr	r0, [pc, #28]	; (8001718 <MX_TIM1_Init+0x150>)
 80016fa:	f004 fbcb 	bl	8005e94 <HAL_TIMEx_ConfigBreakDeadTime>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001704:	f000 f8ba 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001708:	4803      	ldr	r0, [pc, #12]	; (8001718 <MX_TIM1_Init+0x150>)
 800170a:	f000 f971 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 800170e:	bf00      	nop
 8001710:	3768      	adds	r7, #104	; 0x68
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	2000026c 	.word	0x2000026c
 800171c:	40012c00 	.word	0x40012c00

08001720 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001724:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001726:	4a15      	ldr	r2, [pc, #84]	; (800177c <MX_USART2_UART_Init+0x5c>)
 8001728:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172a:	4b13      	ldr	r3, [pc, #76]	; (8001778 <MX_USART2_UART_Init+0x58>)
 800172c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001730:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001738:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_USART2_UART_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800173e:	4b0e      	ldr	r3, [pc, #56]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001744:	4b0c      	ldr	r3, [pc, #48]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001746:	220c      	movs	r2, #12
 8001748:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174a:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <MX_USART2_UART_Init+0x58>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001750:	4b09      	ldr	r3, [pc, #36]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001756:	4b08      	ldr	r3, [pc, #32]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <MX_USART2_UART_Init+0x58>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001762:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_USART2_UART_Init+0x58>)
 8001764:	f004 fc0e 	bl	8005f84 <HAL_UART_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800176e:	f000 f885 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	20000300 	.word	0x20000300
 800177c:	40004400 	.word	0x40004400

08001780 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001786:	4b0c      	ldr	r3, [pc, #48]	; (80017b8 <MX_DMA_Init+0x38>)
 8001788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800178a:	4a0b      	ldr	r2, [pc, #44]	; (80017b8 <MX_DMA_Init+0x38>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	6493      	str	r3, [r2, #72]	; 0x48
 8001792:	4b09      	ldr	r3, [pc, #36]	; (80017b8 <MX_DMA_Init+0x38>)
 8001794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001796:	f003 0301 	and.w	r3, r3, #1
 800179a:	607b      	str	r3, [r7, #4]
 800179c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800179e:	2200      	movs	r2, #0
 80017a0:	2100      	movs	r1, #0
 80017a2:	200c      	movs	r0, #12
 80017a4:	f000 fc6f 	bl	8002086 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80017a8:	200c      	movs	r0, #12
 80017aa:	f000 fc88 	bl	80020be <HAL_NVIC_EnableIRQ>

}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40021000 	.word	0x40021000

080017bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b088      	sub	sp, #32
 80017c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c2:	f107 030c 	add.w	r3, r7, #12
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
 80017d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d2:	4b28      	ldr	r3, [pc, #160]	; (8001874 <MX_GPIO_Init+0xb8>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017d6:	4a27      	ldr	r2, [pc, #156]	; (8001874 <MX_GPIO_Init+0xb8>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017de:	4b25      	ldr	r3, [pc, #148]	; (8001874 <MX_GPIO_Init+0xb8>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e2:	f003 0304 	and.w	r3, r3, #4
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ea:	4b22      	ldr	r3, [pc, #136]	; (8001874 <MX_GPIO_Init+0xb8>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ee:	4a21      	ldr	r2, [pc, #132]	; (8001874 <MX_GPIO_Init+0xb8>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f6:	4b1f      	ldr	r3, [pc, #124]	; (8001874 <MX_GPIO_Init+0xb8>)
 80017f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fa:	f003 0301 	and.w	r3, r3, #1
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001802:	4b1c      	ldr	r3, [pc, #112]	; (8001874 <MX_GPIO_Init+0xb8>)
 8001804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001806:	4a1b      	ldr	r2, [pc, #108]	; (8001874 <MX_GPIO_Init+0xb8>)
 8001808:	f043 0302 	orr.w	r3, r3, #2
 800180c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180e:	4b19      	ldr	r3, [pc, #100]	; (8001874 <MX_GPIO_Init+0xb8>)
 8001810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	603b      	str	r3, [r7, #0]
 8001818:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800181a:	2200      	movs	r2, #0
 800181c:	2110      	movs	r1, #16
 800181e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001822:	f001 f809 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001826:	2200      	movs	r2, #0
 8001828:	2108      	movs	r1, #8
 800182a:	4813      	ldr	r0, [pc, #76]	; (8001878 <MX_GPIO_Init+0xbc>)
 800182c:	f001 f804 	bl	8002838 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001830:	2310      	movs	r3, #16
 8001832:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184a:	f000 fe8b 	bl	8002564 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800184e:	2308      	movs	r3, #8
 8001850:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800185e:	f107 030c 	add.w	r3, r7, #12
 8001862:	4619      	mov	r1, r3
 8001864:	4804      	ldr	r0, [pc, #16]	; (8001878 <MX_GPIO_Init+0xbc>)
 8001866:	f000 fe7d 	bl	8002564 <HAL_GPIO_Init>

}
 800186a:	bf00      	nop
 800186c:	3720      	adds	r7, #32
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40021000 	.word	0x40021000
 8001878:	48000400 	.word	0x48000400

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <HAL_MspInit+0x44>)
 8001890:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001892:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <HAL_MspInit+0x44>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6613      	str	r3, [r2, #96]	; 0x60
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <HAL_MspInit+0x44>)
 800189c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	607b      	str	r3, [r7, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_MspInit+0x44>)
 80018a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018aa:	4a08      	ldr	r2, [pc, #32]	; (80018cc <HAL_MspInit+0x44>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	6593      	str	r3, [r2, #88]	; 0x58
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_MspInit+0x44>)
 80018b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40021000 	.word	0x40021000

080018d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b08a      	sub	sp, #40	; 0x28
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 0314 	add.w	r3, r7, #20
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a17      	ldr	r2, [pc, #92]	; (800194c <HAL_SPI_MspInit+0x7c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d128      	bne.n	8001944 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80018f2:	4b17      	ldr	r3, [pc, #92]	; (8001950 <HAL_SPI_MspInit+0x80>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	4a16      	ldr	r2, [pc, #88]	; (8001950 <HAL_SPI_MspInit+0x80>)
 80018f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018fc:	6613      	str	r3, [r2, #96]	; 0x60
 80018fe:	4b14      	ldr	r3, [pc, #80]	; (8001950 <HAL_SPI_MspInit+0x80>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001906:	613b      	str	r3, [r7, #16]
 8001908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <HAL_SPI_MspInit+0x80>)
 800190c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800190e:	4a10      	ldr	r2, [pc, #64]	; (8001950 <HAL_SPI_MspInit+0x80>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <HAL_SPI_MspInit+0x80>)
 8001918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001922:	23e0      	movs	r3, #224	; 0xe0
 8001924:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001926:	2302      	movs	r3, #2
 8001928:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192a:	2300      	movs	r3, #0
 800192c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192e:	2303      	movs	r3, #3
 8001930:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001932:	2305      	movs	r3, #5
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001936:	f107 0314 	add.w	r3, r7, #20
 800193a:	4619      	mov	r1, r3
 800193c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001940:	f000 fe10 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3728      	adds	r7, #40	; 0x28
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40013000 	.word	0x40013000
 8001950:	40021000 	.word	0x40021000

08001954 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a1f      	ldr	r2, [pc, #124]	; (80019e0 <HAL_TIM_Base_MspInit+0x8c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d137      	bne.n	80019d6 <HAL_TIM_Base_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001966:	4b1f      	ldr	r3, [pc, #124]	; (80019e4 <HAL_TIM_Base_MspInit+0x90>)
 8001968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800196a:	4a1e      	ldr	r2, [pc, #120]	; (80019e4 <HAL_TIM_Base_MspInit+0x90>)
 800196c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001970:	6613      	str	r3, [r2, #96]	; 0x60
 8001972:	4b1c      	ldr	r3, [pc, #112]	; (80019e4 <HAL_TIM_Base_MspInit+0x90>)
 8001974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 800197e:	4b1a      	ldr	r3, [pc, #104]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 8001980:	4a1a      	ldr	r2, [pc, #104]	; (80019ec <HAL_TIM_Base_MspInit+0x98>)
 8001982:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Request = DMA_REQUEST_7;
 8001984:	4b18      	ldr	r3, [pc, #96]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 8001986:	2207      	movs	r2, #7
 8001988:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800198a:	4b17      	ldr	r3, [pc, #92]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 800198c:	2210      	movs	r2, #16
 800198e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001990:	4b15      	ldr	r3, [pc, #84]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 8001992:	2200      	movs	r2, #0
 8001994:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001996:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 8001998:	2280      	movs	r2, #128	; 0x80
 800199a:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800199c:	4b12      	ldr	r3, [pc, #72]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 800199e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019a2:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019a4:	4b10      	ldr	r3, [pc, #64]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 80019a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019aa:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80019ac:	4b0e      	ldr	r3, [pc, #56]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80019b2:	4b0d      	ldr	r3, [pc, #52]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 80019b4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80019b8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80019ba:	480b      	ldr	r0, [pc, #44]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 80019bc:	f000 fb9a 	bl	80020f4 <HAL_DMA_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <HAL_TIM_Base_MspInit+0x76>
    {
      Error_Handler();
 80019c6:	f7ff ff59 	bl	800187c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	4a06      	ldr	r2, [pc, #24]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
 80019d0:	4a05      	ldr	r2, [pc, #20]	; (80019e8 <HAL_TIM_Base_MspInit+0x94>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019d6:	bf00      	nop
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	40012c00 	.word	0x40012c00
 80019e4:	40021000 	.word	0x40021000
 80019e8:	200002b8 	.word	0x200002b8
 80019ec:	4002001c 	.word	0x4002001c

080019f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 030c 	add.w	r3, r7, #12
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_TIM_MspPostInit+0x68>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d11d      	bne.n	8001a4e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_TIM_MspPostInit+0x6c>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a2e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 030c 	add.w	r3, r7, #12
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f000 fd8b 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3720      	adds	r7, #32
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40012c00 	.word	0x40012c00
 8001a5c:	40021000 	.word	0x40021000

08001a60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b09e      	sub	sp, #120	; 0x78
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a78:	f107 0310 	add.w	r3, r7, #16
 8001a7c:	2254      	movs	r2, #84	; 0x54
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	f005 fbcd 	bl	8007220 <memset>
  if(huart->Instance==USART2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a28      	ldr	r2, [pc, #160]	; (8001b2c <HAL_UART_MspInit+0xcc>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d148      	bne.n	8001b22 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a90:	2302      	movs	r3, #2
 8001a92:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a98:	f107 0310 	add.w	r3, r7, #16
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f001 fd8f 	bl	80035c0 <HAL_RCCEx_PeriphCLKConfig>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001aa8:	f7ff fee8 	bl	800187c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aac:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_UART_MspInit+0xd0>)
 8001aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab0:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <HAL_UART_MspInit+0xd0>)
 8001ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ab8:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_UART_MspInit+0xd0>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac4:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_UART_MspInit+0xd0>)
 8001ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac8:	4a19      	ldr	r2, [pc, #100]	; (8001b30 <HAL_UART_MspInit+0xd0>)
 8001aca:	f043 0301 	orr.w	r3, r3, #1
 8001ace:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ad0:	4b17      	ldr	r3, [pc, #92]	; (8001b30 <HAL_UART_MspInit+0xd0>)
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	60bb      	str	r3, [r7, #8]
 8001ada:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001adc:	2304      	movs	r3, #4
 8001ade:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001aec:	2307      	movs	r3, #7
 8001aee:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001af0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f000 fd33 	bl	8002564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b02:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b04:	2302      	movs	r3, #2
 8001b06:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001b10:	2303      	movs	r3, #3
 8001b12:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001b14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b18:	4619      	mov	r1, r3
 8001b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b1e:	f000 fd21 	bl	8002564 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3778      	adds	r7, #120	; 0x78
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40004400 	.word	0x40004400
 8001b30:	40021000 	.word	0x40021000

08001b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler+0x4>

08001b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <HardFault_Handler+0x4>

08001b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <MemManage_Handler+0x4>

08001b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b46:	b480      	push	{r7}
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b4a:	e7fe      	b.n	8001b4a <BusFault_Handler+0x4>

08001b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <UsageFault_Handler+0x4>

08001b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b64:	bf00      	nop
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b72:	bf00      	nop
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b80:	f000 f962 	bl	8001e48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b84:	bf00      	nop
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <DMA1_Channel2_IRQHandler+0x10>)
 8001b8e:	f000 fc0a 	bl	80023a6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	200002b8 	.word	0x200002b8

08001b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
	return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bb6:	f005 fb09 	bl	80071cc <__errno>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_exit>:

void _exit (int status)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ffe7 	bl	8001bac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bde:	e7fe      	b.n	8001bde <_exit+0x12>

08001be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e00a      	b.n	8001c08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bf2:	f3af 8000 	nop.w
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60ba      	str	r2, [r7, #8]
 8001bfe:	b2ca      	uxtb	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf0      	blt.n	8001bf2 <_read+0x12>
	}

return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	e009      	b.n	8001c40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf1      	blt.n	8001c2c <_write+0x12>
	}
	return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_close>:

int _close(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_isatty>:

int _isatty(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	return 1;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
	return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f005 fa6e 	bl	80071cc <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	2000c000 	.word	0x2000c000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	2000079c 	.word	0x2000079c
 8001d24:	200007b8 	.word	0x200007b8

08001d28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d84 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d50:	f7ff ffea 	bl	8001d28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <LoopForever+0x6>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <LoopForever+0xe>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	; (8001d98 <LoopForever+0x16>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f005 fa2d 	bl	80071d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d7e:	f7ff f9e5 	bl	800114c <main>

08001d82 <LoopForever>:

LoopForever:
    b LoopForever
 8001d82:	e7fe      	b.n	8001d82 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d84:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 8001d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d8c:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 8001d90:	0800c08c 	.word	0x0800c08c
  ldr r2, =_sbss
 8001d94:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 8001d98:	200007b8 	.word	0x200007b8

08001d9c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC1_IRQHandler>

08001d9e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da8:	2003      	movs	r0, #3
 8001daa:	f000 f961 	bl	8002070 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dae:	2000      	movs	r0, #0
 8001db0:	f000 f80e 	bl	8001dd0 <HAL_InitTick>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	71fb      	strb	r3, [r7, #7]
 8001dbe:	e001      	b.n	8001dc4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001dc0:	f7ff fd62 	bl	8001888 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
	...

08001dd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <HAL_InitTick+0x6c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d023      	beq.n	8001e2c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_InitTick+0x70>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b14      	ldr	r3, [pc, #80]	; (8001e3c <HAL_InitTick+0x6c>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001df6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f000 f96d 	bl	80020da <HAL_SYSTICK_Config>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10f      	bne.n	8001e26 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b0f      	cmp	r3, #15
 8001e0a:	d809      	bhi.n	8001e20 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	6879      	ldr	r1, [r7, #4]
 8001e10:	f04f 30ff 	mov.w	r0, #4294967295
 8001e14:	f000 f937 	bl	8002086 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e18:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <HAL_InitTick+0x74>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6013      	str	r3, [r2, #0]
 8001e1e:	e007      	b.n	8001e30 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	73fb      	strb	r3, [r7, #15]
 8001e24:	e004      	b.n	8001e30 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	e001      	b.n	8001e30 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3710      	adds	r7, #16
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000014 	.word	0x20000014
 8001e40:	2000000c 	.word	0x2000000c
 8001e44:	20000010 	.word	0x20000010

08001e48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <HAL_IncTick+0x20>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_IncTick+0x24>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4413      	add	r3, r2
 8001e58:	4a04      	ldr	r2, [pc, #16]	; (8001e6c <HAL_IncTick+0x24>)
 8001e5a:	6013      	str	r3, [r2, #0]
}
 8001e5c:	bf00      	nop
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000014 	.word	0x20000014
 8001e6c:	200007a0 	.word	0x200007a0

08001e70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	af00      	add	r7, sp, #0
  return uwTick;
 8001e74:	4b03      	ldr	r3, [pc, #12]	; (8001e84 <HAL_GetTick+0x14>)
 8001e76:	681b      	ldr	r3, [r3, #0]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	200007a0 	.word	0x200007a0

08001e88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e90:	f7ff ffee 	bl	8001e70 <HAL_GetTick>
 8001e94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea0:	d005      	beq.n	8001eae <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <HAL_Delay+0x44>)
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	4413      	add	r3, r2
 8001eac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eae:	bf00      	nop
 8001eb0:	f7ff ffde 	bl	8001e70 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d8f7      	bhi.n	8001eb0 <HAL_Delay+0x28>
  {
  }
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000014 	.word	0x20000014

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f12:	4770      	bx	lr
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	db0b      	blt.n	8001f5e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	f003 021f 	and.w	r2, r3, #31
 8001f4c:	4907      	ldr	r1, [pc, #28]	; (8001f6c <__NVIC_EnableIRQ+0x38>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	095b      	lsrs	r3, r3, #5
 8001f54:	2001      	movs	r0, #1
 8001f56:	fa00 f202 	lsl.w	r2, r0, r2
 8001f5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	e000e100 	.word	0xe000e100

08001f70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	6039      	str	r1, [r7, #0]
 8001f7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	db0a      	blt.n	8001f9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	b2da      	uxtb	r2, r3
 8001f88:	490c      	ldr	r1, [pc, #48]	; (8001fbc <__NVIC_SetPriority+0x4c>)
 8001f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f8e:	0112      	lsls	r2, r2, #4
 8001f90:	b2d2      	uxtb	r2, r2
 8001f92:	440b      	add	r3, r1
 8001f94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f98:	e00a      	b.n	8001fb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	4908      	ldr	r1, [pc, #32]	; (8001fc0 <__NVIC_SetPriority+0x50>)
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	3b04      	subs	r3, #4
 8001fa8:	0112      	lsls	r2, r2, #4
 8001faa:	b2d2      	uxtb	r2, r2
 8001fac:	440b      	add	r3, r1
 8001fae:	761a      	strb	r2, [r3, #24]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr
 8001fbc:	e000e100 	.word	0xe000e100
 8001fc0:	e000ed00 	.word	0xe000ed00

08001fc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd8:	69fb      	ldr	r3, [r7, #28]
 8001fda:	f1c3 0307 	rsb	r3, r3, #7
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	bf28      	it	cs
 8001fe2:	2304      	movcs	r3, #4
 8001fe4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3304      	adds	r3, #4
 8001fea:	2b06      	cmp	r3, #6
 8001fec:	d902      	bls.n	8001ff4 <NVIC_EncodePriority+0x30>
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3b03      	subs	r3, #3
 8001ff2:	e000      	b.n	8001ff6 <NVIC_EncodePriority+0x32>
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	401a      	ands	r2, r3
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800200c:	f04f 31ff 	mov.w	r1, #4294967295
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	fa01 f303 	lsl.w	r3, r1, r3
 8002016:	43d9      	mvns	r1, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800201c:	4313      	orrs	r3, r2
         );
}
 800201e:	4618      	mov	r0, r3
 8002020:	3724      	adds	r7, #36	; 0x24
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b082      	sub	sp, #8
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	3b01      	subs	r3, #1
 8002038:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800203c:	d301      	bcc.n	8002042 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800203e:	2301      	movs	r3, #1
 8002040:	e00f      	b.n	8002062 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002042:	4a0a      	ldr	r2, [pc, #40]	; (800206c <SysTick_Config+0x40>)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3b01      	subs	r3, #1
 8002048:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800204a:	210f      	movs	r1, #15
 800204c:	f04f 30ff 	mov.w	r0, #4294967295
 8002050:	f7ff ff8e 	bl	8001f70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <SysTick_Config+0x40>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800205a:	4b04      	ldr	r3, [pc, #16]	; (800206c <SysTick_Config+0x40>)
 800205c:	2207      	movs	r2, #7
 800205e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	e000e010 	.word	0xe000e010

08002070 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff ff29 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b086      	sub	sp, #24
 800208a:	af00      	add	r7, sp, #0
 800208c:	4603      	mov	r3, r0
 800208e:	60b9      	str	r1, [r7, #8]
 8002090:	607a      	str	r2, [r7, #4]
 8002092:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002098:	f7ff ff3e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800209c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	6978      	ldr	r0, [r7, #20]
 80020a4:	f7ff ff8e 	bl	8001fc4 <NVIC_EncodePriority>
 80020a8:	4602      	mov	r2, r0
 80020aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ae:	4611      	mov	r1, r2
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff5d 	bl	8001f70 <__NVIC_SetPriority>
}
 80020b6:	bf00      	nop
 80020b8:	3718      	adds	r7, #24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	4603      	mov	r3, r0
 80020c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff ff31 	bl	8001f34 <__NVIC_EnableIRQ>
}
 80020d2:	bf00      	nop
 80020d4:	3708      	adds	r7, #8
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}

080020da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020da:	b580      	push	{r7, lr}
 80020dc:	b082      	sub	sp, #8
 80020de:	af00      	add	r7, sp, #0
 80020e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f7ff ffa2 	bl	800202c <SysTick_Config>
 80020e8:	4603      	mov	r3, r0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3708      	adds	r7, #8
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
	...

080020f4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d101      	bne.n	8002106 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e098      	b.n	8002238 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	4b4d      	ldr	r3, [pc, #308]	; (8002244 <HAL_DMA_Init+0x150>)
 800210e:	429a      	cmp	r2, r3
 8002110:	d80f      	bhi.n	8002132 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	4b4b      	ldr	r3, [pc, #300]	; (8002248 <HAL_DMA_Init+0x154>)
 800211a:	4413      	add	r3, r2
 800211c:	4a4b      	ldr	r2, [pc, #300]	; (800224c <HAL_DMA_Init+0x158>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	009a      	lsls	r2, r3, #2
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a48      	ldr	r2, [pc, #288]	; (8002250 <HAL_DMA_Init+0x15c>)
 800212e:	641a      	str	r2, [r3, #64]	; 0x40
 8002130:	e00e      	b.n	8002150 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	4b46      	ldr	r3, [pc, #280]	; (8002254 <HAL_DMA_Init+0x160>)
 800213a:	4413      	add	r3, r2
 800213c:	4a43      	ldr	r2, [pc, #268]	; (800224c <HAL_DMA_Init+0x158>)
 800213e:	fba2 2303 	umull	r2, r3, r2, r3
 8002142:	091b      	lsrs	r3, r3, #4
 8002144:	009a      	lsls	r2, r3, #2
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a42      	ldr	r2, [pc, #264]	; (8002258 <HAL_DMA_Init+0x164>)
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800216a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002174:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002180:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800218c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6a1b      	ldr	r3, [r3, #32]
 8002192:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021aa:	d039      	beq.n	8002220 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	4a27      	ldr	r2, [pc, #156]	; (8002250 <HAL_DMA_Init+0x15c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d11a      	bne.n	80021ec <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_DMA_Init+0x168>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 031c 	and.w	r3, r3, #28
 80021c2:	210f      	movs	r1, #15
 80021c4:	fa01 f303 	lsl.w	r3, r1, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	4924      	ldr	r1, [pc, #144]	; (800225c <HAL_DMA_Init+0x168>)
 80021cc:	4013      	ands	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80021d0:	4b22      	ldr	r3, [pc, #136]	; (800225c <HAL_DMA_Init+0x168>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6859      	ldr	r1, [r3, #4]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	f003 031c 	and.w	r3, r3, #28
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	491d      	ldr	r1, [pc, #116]	; (800225c <HAL_DMA_Init+0x168>)
 80021e6:	4313      	orrs	r3, r2
 80021e8:	600b      	str	r3, [r1, #0]
 80021ea:	e019      	b.n	8002220 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80021ec:	4b1c      	ldr	r3, [pc, #112]	; (8002260 <HAL_DMA_Init+0x16c>)
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	f003 031c 	and.w	r3, r3, #28
 80021f8:	210f      	movs	r1, #15
 80021fa:	fa01 f303 	lsl.w	r3, r1, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	4917      	ldr	r1, [pc, #92]	; (8002260 <HAL_DMA_Init+0x16c>)
 8002202:	4013      	ands	r3, r2
 8002204:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002206:	4b16      	ldr	r3, [pc, #88]	; (8002260 <HAL_DMA_Init+0x16c>)
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6859      	ldr	r1, [r3, #4]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002212:	f003 031c 	and.w	r3, r3, #28
 8002216:	fa01 f303 	lsl.w	r3, r1, r3
 800221a:	4911      	ldr	r1, [pc, #68]	; (8002260 <HAL_DMA_Init+0x16c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2201      	movs	r2, #1
 800222a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr
 8002244:	40020407 	.word	0x40020407
 8002248:	bffdfff8 	.word	0xbffdfff8
 800224c:	cccccccd 	.word	0xcccccccd
 8002250:	40020000 	.word	0x40020000
 8002254:	bffdfbf8 	.word	0xbffdfbf8
 8002258:	40020400 	.word	0x40020400
 800225c:	400200a8 	.word	0x400200a8
 8002260:	400204a8 	.word	0x400204a8

08002264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	60f8      	str	r0, [r7, #12]
 800226c:	60b9      	str	r1, [r7, #8]
 800226e:	607a      	str	r2, [r7, #4]
 8002270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2300      	movs	r3, #0
 8002274:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800227c:	2b01      	cmp	r3, #1
 800227e:	d101      	bne.n	8002284 <HAL_DMA_Start_IT+0x20>
 8002280:	2302      	movs	r3, #2
 8002282:	e04b      	b.n	800231c <HAL_DMA_Start_IT+0xb8>
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d13a      	bne.n	800230e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f022 0201 	bic.w	r2, r2, #1
 80022b4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68b9      	ldr	r1, [r7, #8]
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f000 f921 	bl	8002504 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d008      	beq.n	80022dc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f042 020e 	orr.w	r2, r2, #14
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	e00f      	b.n	80022fc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 0204 	bic.w	r2, r2, #4
 80022ea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f042 020a 	orr.w	r2, r2, #10
 80022fa:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681a      	ldr	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f042 0201 	orr.w	r2, r2, #1
 800230a:	601a      	str	r2, [r3, #0]
 800230c:	e005      	b.n	800231a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002316:	2302      	movs	r3, #2
 8002318:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800231a:	7dfb      	ldrb	r3, [r7, #23]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800232c:	2300      	movs	r3, #0
 800232e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d005      	beq.n	8002348 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2204      	movs	r2, #4
 8002340:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	73fb      	strb	r3, [r7, #15]
 8002346:	e029      	b.n	800239c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 020e 	bic.w	r2, r2, #14
 8002356:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f022 0201 	bic.w	r2, r2, #1
 8002366:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f003 021c 	and.w	r2, r3, #28
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	2101      	movs	r1, #1
 8002376:	fa01 f202 	lsl.w	r2, r1, r2
 800237a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	4798      	blx	r3
    }
  }
  return status;
 800239c:	7bfb      	ldrb	r3, [r7, #15]
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b084      	sub	sp, #16
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f003 031c 	and.w	r3, r3, #28
 80023c6:	2204      	movs	r2, #4
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d026      	beq.n	8002420 <HAL_DMA_IRQHandler+0x7a>
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	f003 0304 	and.w	r3, r3, #4
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d021      	beq.n	8002420 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d107      	bne.n	80023fa <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0204 	bic.w	r2, r2, #4
 80023f8:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	f003 021c 	and.w	r2, r3, #28
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	2104      	movs	r1, #4
 8002408:	fa01 f202 	lsl.w	r2, r1, r2
 800240c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	2b00      	cmp	r3, #0
 8002414:	d071      	beq.n	80024fa <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800241e:	e06c      	b.n	80024fa <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002424:	f003 031c 	and.w	r3, r3, #28
 8002428:	2202      	movs	r2, #2
 800242a:	409a      	lsls	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	4013      	ands	r3, r2
 8002430:	2b00      	cmp	r3, #0
 8002432:	d02e      	beq.n	8002492 <HAL_DMA_IRQHandler+0xec>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d029      	beq.n	8002492 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0320 	and.w	r3, r3, #32
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 020a 	bic.w	r2, r2, #10
 800245a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	f003 021c 	and.w	r2, r3, #28
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002470:	2102      	movs	r1, #2
 8002472:	fa01 f202 	lsl.w	r2, r1, r2
 8002476:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002484:	2b00      	cmp	r3, #0
 8002486:	d038      	beq.n	80024fa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8002490:	e033      	b.n	80024fa <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f003 031c 	and.w	r3, r3, #28
 800249a:	2208      	movs	r2, #8
 800249c:	409a      	lsls	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d02a      	beq.n	80024fc <HAL_DMA_IRQHandler+0x156>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	f003 0308 	and.w	r3, r3, #8
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d025      	beq.n	80024fc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681a      	ldr	r2, [r3, #0]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f022 020e 	bic.w	r2, r2, #14
 80024be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c4:	f003 021c 	and.w	r2, r3, #28
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024cc:	2101      	movs	r1, #1
 80024ce:	fa01 f202 	lsl.w	r2, r1, r2
 80024d2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2201      	movs	r2, #1
 80024de:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2200      	movs	r2, #0
 80024e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80024fa:	bf00      	nop
 80024fc:	bf00      	nop
}
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
 8002510:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f003 021c 	and.w	r2, r3, #28
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	2101      	movs	r1, #1
 8002520:	fa01 f202 	lsl.w	r2, r1, r2
 8002524:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2b10      	cmp	r3, #16
 8002534:	d108      	bne.n	8002548 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	68ba      	ldr	r2, [r7, #8]
 8002544:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002546:	e007      	b.n	8002558 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	60da      	str	r2, [r3, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002564:	b480      	push	{r7}
 8002566:	b087      	sub	sp, #28
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800256e:	2300      	movs	r3, #0
 8002570:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002572:	e148      	b.n	8002806 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	2101      	movs	r1, #1
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	fa01 f303 	lsl.w	r3, r1, r3
 8002580:	4013      	ands	r3, r2
 8002582:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 813a 	beq.w	8002800 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b01      	cmp	r3, #1
 8002596:	d005      	beq.n	80025a4 <HAL_GPIO_Init+0x40>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 0303 	and.w	r3, r3, #3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d130      	bne.n	8002606 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	005b      	lsls	r3, r3, #1
 80025ae:	2203      	movs	r2, #3
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	4013      	ands	r3, r2
 80025ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	68da      	ldr	r2, [r3, #12]
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	005b      	lsls	r3, r3, #1
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	693a      	ldr	r2, [r7, #16]
 80025ca:	4313      	orrs	r3, r2
 80025cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	693a      	ldr	r2, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80025da:	2201      	movs	r2, #1
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	fa02 f303 	lsl.w	r3, r2, r3
 80025e2:	43db      	mvns	r3, r3
 80025e4:	693a      	ldr	r2, [r7, #16]
 80025e6:	4013      	ands	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	091b      	lsrs	r3, r3, #4
 80025f0:	f003 0201 	and.w	r2, r3, #1
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	f003 0303 	and.w	r3, r3, #3
 800260e:	2b03      	cmp	r3, #3
 8002610:	d017      	beq.n	8002642 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68db      	ldr	r3, [r3, #12]
 8002616:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	005b      	lsls	r3, r3, #1
 800261c:	2203      	movs	r2, #3
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	4013      	ands	r3, r2
 8002628:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	693a      	ldr	r2, [r7, #16]
 8002640:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b02      	cmp	r3, #2
 800264c:	d123      	bne.n	8002696 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800265a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 0307 	and.w	r3, r3, #7
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	220f      	movs	r2, #15
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	693a      	ldr	r2, [r7, #16]
 800266e:	4013      	ands	r3, r2
 8002670:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	691a      	ldr	r2, [r3, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0307 	and.w	r3, r3, #7
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	693a      	ldr	r2, [r7, #16]
 8002684:	4313      	orrs	r3, r2
 8002686:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	08da      	lsrs	r2, r3, #3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3208      	adds	r2, #8
 8002690:	6939      	ldr	r1, [r7, #16]
 8002692:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	2203      	movs	r2, #3
 80026a2:	fa02 f303 	lsl.w	r3, r2, r3
 80026a6:	43db      	mvns	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4013      	ands	r3, r2
 80026ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f003 0203 	and.w	r2, r3, #3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	f000 8094 	beq.w	8002800 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026d8:	4b52      	ldr	r3, [pc, #328]	; (8002824 <HAL_GPIO_Init+0x2c0>)
 80026da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_GPIO_Init+0x2c0>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6613      	str	r3, [r2, #96]	; 0x60
 80026e4:	4b4f      	ldr	r3, [pc, #316]	; (8002824 <HAL_GPIO_Init+0x2c0>)
 80026e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026e8:	f003 0301 	and.w	r3, r3, #1
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026f0:	4a4d      	ldr	r2, [pc, #308]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	089b      	lsrs	r3, r3, #2
 80026f6:	3302      	adds	r3, #2
 80026f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026fc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0303 	and.w	r3, r3, #3
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	220f      	movs	r2, #15
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	693a      	ldr	r2, [r7, #16]
 8002710:	4013      	ands	r3, r2
 8002712:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800271a:	d00d      	beq.n	8002738 <HAL_GPIO_Init+0x1d4>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a43      	ldr	r2, [pc, #268]	; (800282c <HAL_GPIO_Init+0x2c8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <HAL_GPIO_Init+0x1d0>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a42      	ldr	r2, [pc, #264]	; (8002830 <HAL_GPIO_Init+0x2cc>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d101      	bne.n	8002730 <HAL_GPIO_Init+0x1cc>
 800272c:	2302      	movs	r3, #2
 800272e:	e004      	b.n	800273a <HAL_GPIO_Init+0x1d6>
 8002730:	2307      	movs	r3, #7
 8002732:	e002      	b.n	800273a <HAL_GPIO_Init+0x1d6>
 8002734:	2301      	movs	r3, #1
 8002736:	e000      	b.n	800273a <HAL_GPIO_Init+0x1d6>
 8002738:	2300      	movs	r3, #0
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	f002 0203 	and.w	r2, r2, #3
 8002740:	0092      	lsls	r2, r2, #2
 8002742:	4093      	lsls	r3, r2
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800274a:	4937      	ldr	r1, [pc, #220]	; (8002828 <HAL_GPIO_Init+0x2c4>)
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	089b      	lsrs	r3, r3, #2
 8002750:	3302      	adds	r3, #2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002758:	4b36      	ldr	r3, [pc, #216]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	43db      	mvns	r3, r3
 8002762:	693a      	ldr	r2, [r7, #16]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800277c:	4a2d      	ldr	r2, [pc, #180]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	43db      	mvns	r3, r3
 800278c:	693a      	ldr	r2, [r7, #16]
 800278e:	4013      	ands	r3, r2
 8002790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800279e:	693a      	ldr	r2, [r7, #16]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80027a6:	4a23      	ldr	r2, [pc, #140]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80027ac:	4b21      	ldr	r3, [pc, #132]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4013      	ands	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80027d0:	4a18      	ldr	r2, [pc, #96]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80027d6:	4b17      	ldr	r3, [pc, #92]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	43db      	mvns	r3, r3
 80027e0:	693a      	ldr	r2, [r7, #16]
 80027e2:	4013      	ands	r3, r2
 80027e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d003      	beq.n	80027fa <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80027f2:	693a      	ldr	r2, [r7, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80027fa:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <HAL_GPIO_Init+0x2d0>)
 80027fc:	693b      	ldr	r3, [r7, #16]
 80027fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3301      	adds	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	fa22 f303 	lsr.w	r3, r2, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	f47f aeaf 	bne.w	8002574 <HAL_GPIO_Init+0x10>
  }
}
 8002816:	bf00      	nop
 8002818:	bf00      	nop
 800281a:	371c      	adds	r7, #28
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr
 8002824:	40021000 	.word	0x40021000
 8002828:	40010000 	.word	0x40010000
 800282c:	48000400 	.word	0x48000400
 8002830:	48000800 	.word	0x48000800
 8002834:	40010400 	.word	0x40010400

08002838 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	807b      	strh	r3, [r7, #2]
 8002844:	4613      	mov	r3, r2
 8002846:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002848:	787b      	ldrb	r3, [r7, #1]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d003      	beq.n	8002856 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800284e:	887a      	ldrh	r2, [r7, #2]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002854:	e002      	b.n	800285c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002856:	887a      	ldrh	r2, [r7, #2]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800286c:	4b05      	ldr	r3, [pc, #20]	; (8002884 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a04      	ldr	r2, [pc, #16]	; (8002884 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002876:	6013      	str	r3, [r2, #0]
}
 8002878:	bf00      	nop
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40007000 	.word	0x40007000

08002888 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800288c:	4b04      	ldr	r3, [pc, #16]	; (80028a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002894:	4618      	mov	r0, r3
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40007000 	.word	0x40007000

080028a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028b2:	d130      	bne.n	8002916 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80028b4:	4b23      	ldr	r3, [pc, #140]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80028bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028c0:	d038      	beq.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80028c2:	4b20      	ldr	r3, [pc, #128]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80028ca:	4a1e      	ldr	r2, [pc, #120]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80028d2:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2232      	movs	r2, #50	; 0x32
 80028d8:	fb02 f303 	mul.w	r3, r2, r3
 80028dc:	4a1b      	ldr	r2, [pc, #108]	; (800294c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	0c9b      	lsrs	r3, r3, #18
 80028e4:	3301      	adds	r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028e8:	e002      	b.n	80028f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80028f2:	695b      	ldr	r3, [r3, #20]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028fc:	d102      	bne.n	8002904 <HAL_PWREx_ControlVoltageScaling+0x60>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f2      	bne.n	80028ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002904:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800290c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002910:	d110      	bne.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e00f      	b.n	8002936 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002916:	4b0b      	ldr	r3, [pc, #44]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800291e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002922:	d007      	beq.n	8002934 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002924:	4b07      	ldr	r3, [pc, #28]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800292c:	4a05      	ldr	r2, [pc, #20]	; (8002944 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800292e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002932:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3714      	adds	r7, #20
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40007000 	.word	0x40007000
 8002948:	2000000c 	.word	0x2000000c
 800294c:	431bde83 	.word	0x431bde83

08002950 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b088      	sub	sp, #32
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	f000 bc02 	b.w	8003168 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	4b96      	ldr	r3, [pc, #600]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f003 030c 	and.w	r3, r3, #12
 800296c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800296e:	4b94      	ldr	r3, [pc, #592]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 0303 	and.w	r3, r3, #3
 8002976:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0310 	and.w	r3, r3, #16
 8002980:	2b00      	cmp	r3, #0
 8002982:	f000 80e4 	beq.w	8002b4e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d007      	beq.n	800299c <HAL_RCC_OscConfig+0x4c>
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	2b0c      	cmp	r3, #12
 8002990:	f040 808b 	bne.w	8002aaa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2b01      	cmp	r3, #1
 8002998:	f040 8087 	bne.w	8002aaa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800299c:	4b88      	ldr	r3, [pc, #544]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x64>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d101      	bne.n	80029b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e3d9      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	4b81      	ldr	r3, [pc, #516]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0308 	and.w	r3, r3, #8
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_RCC_OscConfig+0x7e>
 80029c4:	4b7e      	ldr	r3, [pc, #504]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029cc:	e005      	b.n	80029da <HAL_RCC_OscConfig+0x8a>
 80029ce:	4b7c      	ldr	r3, [pc, #496]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80029d4:	091b      	lsrs	r3, r3, #4
 80029d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029da:	4293      	cmp	r3, r2
 80029dc:	d223      	bcs.n	8002a26 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 fd8c 	bl	8003500 <RCC_SetFlashLatencyFromMSIRange>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e3ba      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029f2:	4b73      	ldr	r3, [pc, #460]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a72      	ldr	r2, [pc, #456]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 80029f8:	f043 0308 	orr.w	r3, r3, #8
 80029fc:	6013      	str	r3, [r2, #0]
 80029fe:	4b70      	ldr	r3, [pc, #448]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	496d      	ldr	r1, [pc, #436]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a10:	4b6b      	ldr	r3, [pc, #428]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69db      	ldr	r3, [r3, #28]
 8002a1c:	021b      	lsls	r3, r3, #8
 8002a1e:	4968      	ldr	r1, [pc, #416]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	604b      	str	r3, [r1, #4]
 8002a24:	e025      	b.n	8002a72 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a26:	4b66      	ldr	r3, [pc, #408]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a65      	ldr	r2, [pc, #404]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4960      	ldr	r1, [pc, #384]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a44:	4b5e      	ldr	r3, [pc, #376]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	495b      	ldr	r1, [pc, #364]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6a1b      	ldr	r3, [r3, #32]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fd4c 	bl	8003500 <RCC_SetFlashLatencyFromMSIRange>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e37a      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a72:	f000 fc81 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b51      	ldr	r3, [pc, #324]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	4950      	ldr	r1, [pc, #320]	; (8002bc4 <HAL_RCC_OscConfig+0x274>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	f003 031f 	and.w	r3, r3, #31
 8002a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8e:	4a4e      	ldr	r2, [pc, #312]	; (8002bc8 <HAL_RCC_OscConfig+0x278>)
 8002a90:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002a92:	4b4e      	ldr	r3, [pc, #312]	; (8002bcc <HAL_RCC_OscConfig+0x27c>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f99a 	bl	8001dd0 <HAL_InitTick>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002aa0:	7bfb      	ldrb	r3, [r7, #15]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d052      	beq.n	8002b4c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002aa6:	7bfb      	ldrb	r3, [r7, #15]
 8002aa8:	e35e      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d032      	beq.n	8002b18 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002ab2:	4b43      	ldr	r3, [pc, #268]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a42      	ldr	r2, [pc, #264]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002abe:	f7ff f9d7 	bl	8001e70 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002ac6:	f7ff f9d3 	bl	8001e70 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e347      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ad8:	4b39      	ldr	r3, [pc, #228]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0302 	and.w	r3, r3, #2
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002ae4:	4b36      	ldr	r3, [pc, #216]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a35      	ldr	r2, [pc, #212]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002aea:	f043 0308 	orr.w	r3, r3, #8
 8002aee:	6013      	str	r3, [r2, #0]
 8002af0:	4b33      	ldr	r3, [pc, #204]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6a1b      	ldr	r3, [r3, #32]
 8002afc:	4930      	ldr	r1, [pc, #192]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b02:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	69db      	ldr	r3, [r3, #28]
 8002b0e:	021b      	lsls	r3, r3, #8
 8002b10:	492b      	ldr	r1, [pc, #172]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
 8002b16:	e01a      	b.n	8002b4e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a28      	ldr	r2, [pc, #160]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002b24:	f7ff f9a4 	bl	8001e70 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b2c:	f7ff f9a0 	bl	8001e70 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e314      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1dc>
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002b4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d073      	beq.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	2b08      	cmp	r3, #8
 8002b5e:	d005      	beq.n	8002b6c <HAL_RCC_OscConfig+0x21c>
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d10e      	bne.n	8002b84 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d10b      	bne.n	8002b84 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b6c:	4b14      	ldr	r3, [pc, #80]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d063      	beq.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d15f      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e2f1      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b8c:	d106      	bne.n	8002b9c <HAL_RCC_OscConfig+0x24c>
 8002b8e:	4b0c      	ldr	r3, [pc, #48]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a0b      	ldr	r2, [pc, #44]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b98:	6013      	str	r3, [r2, #0]
 8002b9a:	e025      	b.n	8002be8 <HAL_RCC_OscConfig+0x298>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba4:	d114      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x280>
 8002ba6:	4b06      	ldr	r3, [pc, #24]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a05      	ldr	r2, [pc, #20]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb0:	6013      	str	r3, [r2, #0]
 8002bb2:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a02      	ldr	r2, [pc, #8]	; (8002bc0 <HAL_RCC_OscConfig+0x270>)
 8002bb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bbc:	6013      	str	r3, [r2, #0]
 8002bbe:	e013      	b.n	8002be8 <HAL_RCC_OscConfig+0x298>
 8002bc0:	40021000 	.word	0x40021000
 8002bc4:	0800bb8c 	.word	0x0800bb8c
 8002bc8:	2000000c 	.word	0x2000000c
 8002bcc:	20000010 	.word	0x20000010
 8002bd0:	4ba0      	ldr	r3, [pc, #640]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a9f      	ldr	r2, [pc, #636]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bda:	6013      	str	r3, [r2, #0]
 8002bdc:	4b9d      	ldr	r3, [pc, #628]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a9c      	ldr	r2, [pc, #624]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d013      	beq.n	8002c18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf0:	f7ff f93e 	bl	8001e70 <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bf8:	f7ff f93a 	bl	8001e70 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b64      	cmp	r3, #100	; 0x64
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e2ae      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c0a:	4b92      	ldr	r3, [pc, #584]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d0f0      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x2a8>
 8002c16:	e014      	b.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7ff f92a 	bl	8001e70 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff f926 	bl	8001e70 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e29a      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002c32:	4b88      	ldr	r3, [pc, #544]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d1f0      	bne.n	8002c20 <HAL_RCC_OscConfig+0x2d0>
 8002c3e:	e000      	b.n	8002c42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d060      	beq.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	2b04      	cmp	r3, #4
 8002c52:	d005      	beq.n	8002c60 <HAL_RCC_OscConfig+0x310>
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d119      	bne.n	8002c8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d116      	bne.n	8002c8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c60:	4b7c      	ldr	r3, [pc, #496]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d005      	beq.n	8002c78 <HAL_RCC_OscConfig+0x328>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e277      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c78:	4b76      	ldr	r3, [pc, #472]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	691b      	ldr	r3, [r3, #16]
 8002c84:	061b      	lsls	r3, r3, #24
 8002c86:	4973      	ldr	r1, [pc, #460]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002c8c:	e040      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d023      	beq.n	8002cde <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c96:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a6e      	ldr	r2, [pc, #440]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ca0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7ff f8e5 	bl	8001e70 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002caa:	f7ff f8e1 	bl	8001e70 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e255      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cbc:	4b65      	ldr	r3, [pc, #404]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b62      	ldr	r3, [pc, #392]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	061b      	lsls	r3, r3, #24
 8002cd6:	495f      	ldr	r1, [pc, #380]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	604b      	str	r3, [r1, #4]
 8002cdc:	e018      	b.n	8002d10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cde:	4b5d      	ldr	r3, [pc, #372]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a5c      	ldr	r2, [pc, #368]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cea:	f7ff f8c1 	bl	8001e70 <HAL_GetTick>
 8002cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cf2:	f7ff f8bd 	bl	8001e70 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e231      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002d04:	4b53      	ldr	r3, [pc, #332]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0308 	and.w	r3, r3, #8
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d03c      	beq.n	8002d96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d01c      	beq.n	8002d5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d24:	4b4b      	ldr	r3, [pc, #300]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d2a:	4a4a      	ldr	r2, [pc, #296]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d2c:	f043 0301 	orr.w	r3, r3, #1
 8002d30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d34:	f7ff f89c 	bl	8001e70 <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d3a:	e008      	b.n	8002d4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d3c:	f7ff f898 	bl	8001e70 <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	2b02      	cmp	r3, #2
 8002d48:	d901      	bls.n	8002d4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	e20c      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d4e:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d0ef      	beq.n	8002d3c <HAL_RCC_OscConfig+0x3ec>
 8002d5c:	e01b      	b.n	8002d96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d5e:	4b3d      	ldr	r3, [pc, #244]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d64:	4a3b      	ldr	r2, [pc, #236]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d66:	f023 0301 	bic.w	r3, r3, #1
 8002d6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6e:	f7ff f87f 	bl	8001e70 <HAL_GetTick>
 8002d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d74:	e008      	b.n	8002d88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d76:	f7ff f87b 	bl	8001e70 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	693b      	ldr	r3, [r7, #16]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d901      	bls.n	8002d88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	e1ef      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002d88:	4b32      	ldr	r3, [pc, #200]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8e:	f003 0302 	and.w	r3, r3, #2
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1ef      	bne.n	8002d76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0304 	and.w	r3, r3, #4
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 80a6 	beq.w	8002ef0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002da4:	2300      	movs	r3, #0
 8002da6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002da8:	4b2a      	ldr	r3, [pc, #168]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10d      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002db4:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	4a26      	ldr	r2, [pc, #152]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6593      	str	r3, [r2, #88]	; 0x58
 8002dc0:	4b24      	ldr	r3, [pc, #144]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	60bb      	str	r3, [r7, #8]
 8002dca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd0:	4b21      	ldr	r3, [pc, #132]	; (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d118      	bne.n	8002e0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ddc:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002de8:	f7ff f842 	bl	8001e70 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df0:	f7ff f83e 	bl	8001e70 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e1b2      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002e02:	4b15      	ldr	r3, [pc, #84]	; (8002e58 <HAL_RCC_OscConfig+0x508>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d108      	bne.n	8002e28 <HAL_RCC_OscConfig+0x4d8>
 8002e16:	4b0f      	ldr	r3, [pc, #60]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e26:	e029      	b.n	8002e7c <HAL_RCC_OscConfig+0x52c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	2b05      	cmp	r3, #5
 8002e2e:	d115      	bne.n	8002e5c <HAL_RCC_OscConfig+0x50c>
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e36:	4a07      	ldr	r2, [pc, #28]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e38:	f043 0304 	orr.w	r3, r3, #4
 8002e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e40:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e46:	4a03      	ldr	r2, [pc, #12]	; (8002e54 <HAL_RCC_OscConfig+0x504>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e50:	e014      	b.n	8002e7c <HAL_RCC_OscConfig+0x52c>
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000
 8002e58:	40007000 	.word	0x40007000
 8002e5c:	4b9a      	ldr	r3, [pc, #616]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002e5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e62:	4a99      	ldr	r2, [pc, #612]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002e6c:	4b96      	ldr	r3, [pc, #600]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	4a95      	ldr	r2, [pc, #596]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002e74:	f023 0304 	bic.w	r3, r3, #4
 8002e78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	689b      	ldr	r3, [r3, #8]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d016      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fff4 	bl	8001e70 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fff0 	bl	8001e70 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e162      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea2:	4b89      	ldr	r3, [pc, #548]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ed      	beq.n	8002e8c <HAL_RCC_OscConfig+0x53c>
 8002eb0:	e015      	b.n	8002ede <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb2:	f7fe ffdd 	bl	8001e70 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002eb8:	e00a      	b.n	8002ed0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eba:	f7fe ffd9 	bl	8001e70 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e14b      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ed0:	4b7d      	ldr	r3, [pc, #500]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1ed      	bne.n	8002eba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ede:	7ffb      	ldrb	r3, [r7, #31]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d105      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee4:	4b78      	ldr	r3, [pc, #480]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	4a77      	ldr	r2, [pc, #476]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002eea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d03c      	beq.n	8002f76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d01c      	beq.n	8002f3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002f04:	4b70      	ldr	r3, [pc, #448]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f0a:	4a6f      	ldr	r2, [pc, #444]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f0c:	f043 0301 	orr.w	r3, r3, #1
 8002f10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f14:	f7fe ffac 	bl	8001e70 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f1c:	f7fe ffa8 	bl	8001e70 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e11c      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002f2e:	4b66      	ldr	r3, [pc, #408]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f34:	f003 0302 	and.w	r3, r3, #2
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0ef      	beq.n	8002f1c <HAL_RCC_OscConfig+0x5cc>
 8002f3c:	e01b      	b.n	8002f76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002f3e:	4b62      	ldr	r3, [pc, #392]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f44:	4a60      	ldr	r2, [pc, #384]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f46:	f023 0301 	bic.w	r3, r3, #1
 8002f4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f4e:	f7fe ff8f 	bl	8001e70 <HAL_GetTick>
 8002f52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f54:	e008      	b.n	8002f68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002f56:	f7fe ff8b 	bl	8001e70 <HAL_GetTick>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	693b      	ldr	r3, [r7, #16]
 8002f5e:	1ad3      	subs	r3, r2, r3
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d901      	bls.n	8002f68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002f64:	2303      	movs	r3, #3
 8002f66:	e0ff      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002f68:	4b57      	ldr	r3, [pc, #348]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d1ef      	bne.n	8002f56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	f000 80f3 	beq.w	8003166 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f84:	2b02      	cmp	r3, #2
 8002f86:	f040 80c9 	bne.w	800311c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002f8a:	4b4f      	ldr	r3, [pc, #316]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	f003 0203 	and.w	r2, r3, #3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d12c      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d123      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d113      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fda:	085b      	lsrs	r3, r3, #1
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d109      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d06b      	beq.n	80030d0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d062      	beq.n	80030c4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ffe:	4b32      	ldr	r3, [pc, #200]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e0ac      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800300e:	4b2e      	ldr	r3, [pc, #184]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003014:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003018:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800301a:	f7fe ff29 	bl	8001e70 <HAL_GetTick>
 800301e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003020:	e008      	b.n	8003034 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003022:	f7fe ff25 	bl	8001e70 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	2b02      	cmp	r3, #2
 800302e:	d901      	bls.n	8003034 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e099      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003034:	4b24      	ldr	r3, [pc, #144]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d1f0      	bne.n	8003022 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003040:	4b21      	ldr	r3, [pc, #132]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	4b21      	ldr	r3, [pc, #132]	; (80030cc <HAL_RCC_OscConfig+0x77c>)
 8003046:	4013      	ands	r3, r2
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003050:	3a01      	subs	r2, #1
 8003052:	0112      	lsls	r2, r2, #4
 8003054:	4311      	orrs	r1, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800305a:	0212      	lsls	r2, r2, #8
 800305c:	4311      	orrs	r1, r2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003062:	0852      	lsrs	r2, r2, #1
 8003064:	3a01      	subs	r2, #1
 8003066:	0552      	lsls	r2, r2, #21
 8003068:	4311      	orrs	r1, r2
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800306e:	0852      	lsrs	r2, r2, #1
 8003070:	3a01      	subs	r2, #1
 8003072:	0652      	lsls	r2, r2, #25
 8003074:	4311      	orrs	r1, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800307a:	06d2      	lsls	r2, r2, #27
 800307c:	430a      	orrs	r2, r1
 800307e:	4912      	ldr	r1, [pc, #72]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003080:	4313      	orrs	r3, r2
 8003082:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003084:	4b10      	ldr	r3, [pc, #64]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a0f      	ldr	r2, [pc, #60]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 800308a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800308e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003090:	4b0d      	ldr	r3, [pc, #52]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	4a0c      	ldr	r2, [pc, #48]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 8003096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800309a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800309c:	f7fe fee8 	bl	8001e70 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a4:	f7fe fee4 	bl	8001e70 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e058      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030b6:	4b04      	ldr	r3, [pc, #16]	; (80030c8 <HAL_RCC_OscConfig+0x778>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d0f0      	beq.n	80030a4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80030c2:	e050      	b.n	8003166 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e04f      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
 80030c8:	40021000 	.word	0x40021000
 80030cc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d0:	4b27      	ldr	r3, [pc, #156]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d144      	bne.n	8003166 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80030dc:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a23      	ldr	r2, [pc, #140]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030e6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80030e8:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a20      	ldr	r2, [pc, #128]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 80030ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030f2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80030f4:	f7fe febc 	bl	8001e70 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe feb8 	bl	8001e70 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e02c      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800310e:	4b18      	ldr	r3, [pc, #96]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d0f0      	beq.n	80030fc <HAL_RCC_OscConfig+0x7ac>
 800311a:	e024      	b.n	8003166 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	2b0c      	cmp	r3, #12
 8003120:	d01f      	beq.n	8003162 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003122:	4b13      	ldr	r3, [pc, #76]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a12      	ldr	r2, [pc, #72]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 8003128:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800312c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800312e:	f7fe fe9f 	bl	8001e70 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003134:	e008      	b.n	8003148 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003136:	f7fe fe9b 	bl	8001e70 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	2b02      	cmp	r3, #2
 8003142:	d901      	bls.n	8003148 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e00f      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d1f0      	bne.n	8003136 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003154:	4b06      	ldr	r3, [pc, #24]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 8003156:	68da      	ldr	r2, [r3, #12]
 8003158:	4905      	ldr	r1, [pc, #20]	; (8003170 <HAL_RCC_OscConfig+0x820>)
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_OscConfig+0x824>)
 800315c:	4013      	ands	r3, r2
 800315e:	60cb      	str	r3, [r1, #12]
 8003160:	e001      	b.n	8003166 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40021000 	.word	0x40021000
 8003174:	feeefffc 	.word	0xfeeefffc

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0e7      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b75      	ldr	r3, [pc, #468]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d910      	bls.n	80031bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b72      	ldr	r3, [pc, #456]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 0207 	bic.w	r2, r3, #7
 80031a2:	4970      	ldr	r1, [pc, #448]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031aa:	4b6e      	ldr	r3, [pc, #440]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f003 0307 	and.w	r3, r3, #7
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d001      	beq.n	80031bc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0cf      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d010      	beq.n	80031ea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	4b66      	ldr	r3, [pc, #408]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d908      	bls.n	80031ea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d8:	4b63      	ldr	r3, [pc, #396]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	4960      	ldr	r1, [pc, #384]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d04c      	beq.n	8003290 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d107      	bne.n	800320e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80031fe:	4b5a      	ldr	r3, [pc, #360]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d121      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e0a6      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003216:	4b54      	ldr	r3, [pc, #336]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d115      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e09a      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800322e:	4b4e      	ldr	r3, [pc, #312]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d109      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e08e      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800323e:	4b4a      	ldr	r3, [pc, #296]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e086      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800324e:	4b46      	ldr	r3, [pc, #280]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	f023 0203 	bic.w	r2, r3, #3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	4943      	ldr	r1, [pc, #268]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 800325c:	4313      	orrs	r3, r2
 800325e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003260:	f7fe fe06 	bl	8001e70 <HAL_GetTick>
 8003264:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003266:	e00a      	b.n	800327e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003268:	f7fe fe02 	bl	8001e70 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	f241 3288 	movw	r2, #5000	; 0x1388
 8003276:	4293      	cmp	r3, r2
 8003278:	d901      	bls.n	800327e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e06e      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800327e:	4b3a      	ldr	r3, [pc, #232]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f003 020c 	and.w	r2, r3, #12
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	429a      	cmp	r2, r3
 800328e:	d1eb      	bne.n	8003268 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0302 	and.w	r3, r3, #2
 8003298:	2b00      	cmp	r3, #0
 800329a:	d010      	beq.n	80032be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	4b31      	ldr	r3, [pc, #196]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d208      	bcs.n	80032be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	492b      	ldr	r1, [pc, #172]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d210      	bcs.n	80032ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032cc:	4b25      	ldr	r3, [pc, #148]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	4923      	ldr	r1, [pc, #140]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032dc:	4b21      	ldr	r3, [pc, #132]	; (8003364 <HAL_RCC_ClockConfig+0x1ec>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d001      	beq.n	80032ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e036      	b.n	800335c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0304 	and.w	r3, r3, #4
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d008      	beq.n	800330c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032fa:	4b1b      	ldr	r3, [pc, #108]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	4918      	ldr	r1, [pc, #96]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003308:	4313      	orrs	r3, r2
 800330a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f003 0308 	and.w	r3, r3, #8
 8003314:	2b00      	cmp	r3, #0
 8003316:	d009      	beq.n	800332c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003318:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	691b      	ldr	r3, [r3, #16]
 8003324:	00db      	lsls	r3, r3, #3
 8003326:	4910      	ldr	r1, [pc, #64]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800332c:	f000 f824 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8003330:	4602      	mov	r2, r0
 8003332:	4b0d      	ldr	r3, [pc, #52]	; (8003368 <HAL_RCC_ClockConfig+0x1f0>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	091b      	lsrs	r3, r3, #4
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	490b      	ldr	r1, [pc, #44]	; (800336c <HAL_RCC_ClockConfig+0x1f4>)
 800333e:	5ccb      	ldrb	r3, [r1, r3]
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	fa22 f303 	lsr.w	r3, r2, r3
 8003348:	4a09      	ldr	r2, [pc, #36]	; (8003370 <HAL_RCC_ClockConfig+0x1f8>)
 800334a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800334c:	4b09      	ldr	r3, [pc, #36]	; (8003374 <HAL_RCC_ClockConfig+0x1fc>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe fd3d 	bl	8001dd0 <HAL_InitTick>
 8003356:	4603      	mov	r3, r0
 8003358:	72fb      	strb	r3, [r7, #11]

  return status;
 800335a:	7afb      	ldrb	r3, [r7, #11]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3710      	adds	r7, #16
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40022000 	.word	0x40022000
 8003368:	40021000 	.word	0x40021000
 800336c:	0800bb8c 	.word	0x0800bb8c
 8003370:	2000000c 	.word	0x2000000c
 8003374:	20000010 	.word	0x20000010

08003378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003378:	b480      	push	{r7}
 800337a:	b089      	sub	sp, #36	; 0x24
 800337c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800337e:	2300      	movs	r3, #0
 8003380:	61fb      	str	r3, [r7, #28]
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003386:	4b3e      	ldr	r3, [pc, #248]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 030c 	and.w	r3, r3, #12
 800338e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003390:	4b3b      	ldr	r3, [pc, #236]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f003 0303 	and.w	r3, r3, #3
 8003398:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d005      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0x34>
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	2b0c      	cmp	r3, #12
 80033a4:	d121      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d11e      	bne.n	80033ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80033ac:	4b34      	ldr	r3, [pc, #208]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0308 	and.w	r3, r3, #8
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d107      	bne.n	80033c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033be:	0a1b      	lsrs	r3, r3, #8
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	e005      	b.n	80033d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80033c8:	4b2d      	ldr	r3, [pc, #180]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	091b      	lsrs	r3, r3, #4
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80033d4:	4a2b      	ldr	r2, [pc, #172]	; (8003484 <HAL_RCC_GetSysClockFreq+0x10c>)
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10d      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80033e8:	e00a      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	2b04      	cmp	r3, #4
 80033ee:	d102      	bne.n	80033f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <HAL_RCC_GetSysClockFreq+0x110>)
 80033f2:	61bb      	str	r3, [r7, #24]
 80033f4:	e004      	b.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	2b08      	cmp	r3, #8
 80033fa:	d101      	bne.n	8003400 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80033fc:	4b23      	ldr	r3, [pc, #140]	; (800348c <HAL_RCC_GetSysClockFreq+0x114>)
 80033fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	2b0c      	cmp	r3, #12
 8003404:	d134      	bne.n	8003470 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003406:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2b02      	cmp	r3, #2
 8003414:	d003      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0xa6>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2b03      	cmp	r3, #3
 800341a:	d003      	beq.n	8003424 <HAL_RCC_GetSysClockFreq+0xac>
 800341c:	e005      	b.n	800342a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800341e:	4b1a      	ldr	r3, [pc, #104]	; (8003488 <HAL_RCC_GetSysClockFreq+0x110>)
 8003420:	617b      	str	r3, [r7, #20]
      break;
 8003422:	e005      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003424:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_RCC_GetSysClockFreq+0x114>)
 8003426:	617b      	str	r3, [r7, #20]
      break;
 8003428:	e002      	b.n	8003430 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	617b      	str	r3, [r7, #20]
      break;
 800342e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003430:	4b13      	ldr	r3, [pc, #76]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	091b      	lsrs	r3, r3, #4
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	3301      	adds	r3, #1
 800343c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800343e:	4b10      	ldr	r3, [pc, #64]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	0a1b      	lsrs	r3, r3, #8
 8003444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	fb03 f202 	mul.w	r2, r3, r2
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	fbb2 f3f3 	udiv	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003456:	4b0a      	ldr	r3, [pc, #40]	; (8003480 <HAL_RCC_GetSysClockFreq+0x108>)
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	0e5b      	lsrs	r3, r3, #25
 800345c:	f003 0303 	and.w	r3, r3, #3
 8003460:	3301      	adds	r3, #1
 8003462:	005b      	lsls	r3, r3, #1
 8003464:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	fbb2 f3f3 	udiv	r3, r2, r3
 800346e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003470:	69bb      	ldr	r3, [r7, #24]
}
 8003472:	4618      	mov	r0, r3
 8003474:	3724      	adds	r7, #36	; 0x24
 8003476:	46bd      	mov	sp, r7
 8003478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347c:	4770      	bx	lr
 800347e:	bf00      	nop
 8003480:	40021000 	.word	0x40021000
 8003484:	0800bba4 	.word	0x0800bba4
 8003488:	00f42400 	.word	0x00f42400
 800348c:	007a1200 	.word	0x007a1200

08003490 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	; (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	2000000c 	.word	0x2000000c

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a1b      	lsrs	r3, r3, #8
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4904      	ldr	r1, [pc, #16]	; (80034d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	f003 031f 	and.w	r3, r3, #31
 80034c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	40021000 	.word	0x40021000
 80034d0:	0800bb9c 	.word	0x0800bb9c

080034d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80034d8:	f7ff ffda 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034dc:	4602      	mov	r2, r0
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	0adb      	lsrs	r3, r3, #11
 80034e4:	f003 0307 	and.w	r3, r3, #7
 80034e8:	4904      	ldr	r1, [pc, #16]	; (80034fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80034ea:	5ccb      	ldrb	r3, [r1, r3]
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	40021000 	.word	0x40021000
 80034fc:	0800bb9c 	.word	0x0800bb9c

08003500 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003508:	2300      	movs	r3, #0
 800350a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800350c:	4b2a      	ldr	r3, [pc, #168]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003510:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d003      	beq.n	8003520 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003518:	f7ff f9b6 	bl	8002888 <HAL_PWREx_GetVoltageRange>
 800351c:	6178      	str	r0, [r7, #20]
 800351e:	e014      	b.n	800354a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003520:	4b25      	ldr	r3, [pc, #148]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003524:	4a24      	ldr	r2, [pc, #144]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800352a:	6593      	str	r3, [r2, #88]	; 0x58
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800352e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003534:	60fb      	str	r3, [r7, #12]
 8003536:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003538:	f7ff f9a6 	bl	8002888 <HAL_PWREx_GetVoltageRange>
 800353c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800353e:	4b1e      	ldr	r3, [pc, #120]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	4a1d      	ldr	r2, [pc, #116]	; (80035b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003550:	d10b      	bne.n	800356a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b80      	cmp	r3, #128	; 0x80
 8003556:	d919      	bls.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2ba0      	cmp	r3, #160	; 0xa0
 800355c:	d902      	bls.n	8003564 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800355e:	2302      	movs	r3, #2
 8003560:	613b      	str	r3, [r7, #16]
 8003562:	e013      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003564:	2301      	movs	r3, #1
 8003566:	613b      	str	r3, [r7, #16]
 8003568:	e010      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2b80      	cmp	r3, #128	; 0x80
 800356e:	d902      	bls.n	8003576 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003570:	2303      	movs	r3, #3
 8003572:	613b      	str	r3, [r7, #16]
 8003574:	e00a      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2b80      	cmp	r3, #128	; 0x80
 800357a:	d102      	bne.n	8003582 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800357c:	2302      	movs	r3, #2
 800357e:	613b      	str	r3, [r7, #16]
 8003580:	e004      	b.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b70      	cmp	r3, #112	; 0x70
 8003586:	d101      	bne.n	800358c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003588:	2301      	movs	r3, #1
 800358a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800358c:	4b0b      	ldr	r3, [pc, #44]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f023 0207 	bic.w	r2, r3, #7
 8003594:	4909      	ldr	r1, [pc, #36]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	4313      	orrs	r3, r2
 800359a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800359c:	4b07      	ldr	r3, [pc, #28]	; (80035bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	693a      	ldr	r2, [r7, #16]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d001      	beq.n	80035ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e000      	b.n	80035b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80035ae:	2300      	movs	r3, #0
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}
 80035b8:	40021000 	.word	0x40021000
 80035bc:	40022000 	.word	0x40022000

080035c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035c8:	2300      	movs	r3, #0
 80035ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035cc:	2300      	movs	r3, #0
 80035ce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d031      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035e4:	d01a      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80035e6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80035ea:	d814      	bhi.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80035f4:	d10f      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80035f6:	4b5d      	ldr	r3, [pc, #372]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	4a5c      	ldr	r2, [pc, #368]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80035fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003600:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003602:	e00c      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	3304      	adds	r3, #4
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f000 f9de 	bl	80039cc <RCCEx_PLLSAI1_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003614:	e003      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	74fb      	strb	r3, [r7, #19]
      break;
 800361a:	e000      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800361c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800361e:	7cfb      	ldrb	r3, [r7, #19]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10b      	bne.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003624:	4b51      	ldr	r3, [pc, #324]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800362a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003632:	494e      	ldr	r1, [pc, #312]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800363a:	e001      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 809e 	beq.w	800378a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800364e:	2300      	movs	r3, #0
 8003650:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003652:	4b46      	ldr	r3, [pc, #280]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003654:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003656:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d101      	bne.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800365e:	2301      	movs	r3, #1
 8003660:	e000      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003662:	2300      	movs	r3, #0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d00d      	beq.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003668:	4b40      	ldr	r3, [pc, #256]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800366a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366c:	4a3f      	ldr	r2, [pc, #252]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800366e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003672:	6593      	str	r3, [r2, #88]	; 0x58
 8003674:	4b3d      	ldr	r3, [pc, #244]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003678:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367c:	60bb      	str	r3, [r7, #8]
 800367e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003680:	2301      	movs	r3, #1
 8003682:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003684:	4b3a      	ldr	r3, [pc, #232]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a39      	ldr	r2, [pc, #228]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003690:	f7fe fbee 	bl	8001e70 <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003696:	e009      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003698:	f7fe fbea 	bl	8001e70 <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d902      	bls.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	74fb      	strb	r3, [r7, #19]
        break;
 80036aa:	e005      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80036ac:	4b30      	ldr	r3, [pc, #192]	; (8003770 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ef      	beq.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80036b8:	7cfb      	ldrb	r3, [r7, #19]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d15a      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80036be:	4b2b      	ldr	r3, [pc, #172]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01e      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d019      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80036da:	4b24      	ldr	r3, [pc, #144]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036e4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80036e6:	4b21      	ldr	r3, [pc, #132]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ec:	4a1f      	ldr	r2, [pc, #124]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80036f6:	4b1d      	ldr	r3, [pc, #116]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	4a1b      	ldr	r2, [pc, #108]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80036fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003706:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f003 0301 	and.w	r3, r3, #1
 8003714:	2b00      	cmp	r3, #0
 8003716:	d016      	beq.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003718:	f7fe fbaa 	bl	8001e70 <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371e:	e00b      	b.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003720:	f7fe fba6 	bl	8001e70 <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d902      	bls.n	8003738 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	74fb      	strb	r3, [r7, #19]
            break;
 8003736:	e006      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003738:	4b0c      	ldr	r3, [pc, #48]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800373a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	2b00      	cmp	r3, #0
 8003744:	d0ec      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003746:	7cfb      	ldrb	r3, [r7, #19]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d10b      	bne.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800374c:	4b07      	ldr	r3, [pc, #28]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800375a:	4904      	ldr	r1, [pc, #16]	; (800376c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003762:	e009      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003764:	7cfb      	ldrb	r3, [r7, #19]
 8003766:	74bb      	strb	r3, [r7, #18]
 8003768:	e006      	b.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003774:	7cfb      	ldrb	r3, [r7, #19]
 8003776:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003778:	7c7b      	ldrb	r3, [r7, #17]
 800377a:	2b01      	cmp	r3, #1
 800377c:	d105      	bne.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377e:	4b8a      	ldr	r3, [pc, #552]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003782:	4a89      	ldr	r2, [pc, #548]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003784:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003788:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003796:	4b84      	ldr	r3, [pc, #528]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003798:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800379c:	f023 0203 	bic.w	r2, r3, #3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	4980      	ldr	r1, [pc, #512]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037a6:	4313      	orrs	r3, r2
 80037a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00a      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80037b8:	4b7b      	ldr	r3, [pc, #492]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037be:	f023 020c 	bic.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	4978      	ldr	r1, [pc, #480]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037c8:	4313      	orrs	r3, r2
 80037ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 0320 	and.w	r3, r3, #32
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037da:	4b73      	ldr	r3, [pc, #460]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037e0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	496f      	ldr	r1, [pc, #444]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037fc:	4b6a      	ldr	r3, [pc, #424]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80037fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003802:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800380a:	4967      	ldr	r1, [pc, #412]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003820:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003824:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382c:	495e      	ldr	r1, [pc, #376]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003846:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800384e:	4956      	ldr	r1, [pc, #344]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003862:	4b51      	ldr	r3, [pc, #324]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003868:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	494d      	ldr	r1, [pc, #308]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d028      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003884:	4b48      	ldr	r3, [pc, #288]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800388a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	4945      	ldr	r1, [pc, #276]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80038a2:	d106      	bne.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038a4:	4b40      	ldr	r3, [pc, #256]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4a3f      	ldr	r2, [pc, #252]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038ae:	60d3      	str	r3, [r2, #12]
 80038b0:	e011      	b.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ba:	d10c      	bne.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3304      	adds	r3, #4
 80038c0:	2101      	movs	r1, #1
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f882 	bl	80039cc <RCCEx_PLLSAI1_Config>
 80038c8:	4603      	mov	r3, r0
 80038ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038cc:	7cfb      	ldrb	r3, [r7, #19]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80038d2:	7cfb      	ldrb	r3, [r7, #19]
 80038d4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d028      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80038e2:	4b31      	ldr	r3, [pc, #196]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f0:	492d      	ldr	r1, [pc, #180]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003900:	d106      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003902:	4b29      	ldr	r3, [pc, #164]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003908:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800390c:	60d3      	str	r3, [r2, #12]
 800390e:	e011      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003914:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003918:	d10c      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3304      	adds	r3, #4
 800391e:	2101      	movs	r1, #1
 8003920:	4618      	mov	r0, r3
 8003922:	f000 f853 	bl	80039cc <RCCEx_PLLSAI1_Config>
 8003926:	4603      	mov	r3, r0
 8003928:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800392a:	7cfb      	ldrb	r3, [r7, #19]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d001      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d01c      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003940:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003946:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800394e:	4916      	ldr	r1, [pc, #88]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800395a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800395e:	d10c      	bne.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	3304      	adds	r3, #4
 8003964:	2102      	movs	r1, #2
 8003966:	4618      	mov	r0, r3
 8003968:	f000 f830 	bl	80039cc <RCCEx_PLLSAI1_Config>
 800396c:	4603      	mov	r3, r0
 800396e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003970:	7cfb      	ldrb	r3, [r7, #19]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003976:	7cfb      	ldrb	r3, [r7, #19]
 8003978:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003986:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800398c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003994:	4904      	ldr	r1, [pc, #16]	; (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003996:	4313      	orrs	r3, r2
 8003998:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800399c:	7cbb      	ldrb	r3, [r7, #18]
}
 800399e:	4618      	mov	r0, r3
 80039a0:	3718      	adds	r7, #24
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	40021000 	.word	0x40021000

080039ac <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80039ac:	b480      	push	{r7}
 80039ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039b0:	4b05      	ldr	r3, [pc, #20]	; (80039c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a04      	ldr	r2, [pc, #16]	; (80039c8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039b6:	f043 0304 	orr.w	r3, r3, #4
 80039ba:	6013      	str	r3, [r2, #0]
}
 80039bc:	bf00      	nop
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	40021000 	.word	0x40021000

080039cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
 80039d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039d6:	2300      	movs	r3, #0
 80039d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039da:	4b74      	ldr	r3, [pc, #464]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 80039dc:	68db      	ldr	r3, [r3, #12]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d018      	beq.n	8003a18 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039e6:	4b71      	ldr	r3, [pc, #452]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f003 0203 	and.w	r2, r3, #3
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d10d      	bne.n	8003a12 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
       ||
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d009      	beq.n	8003a12 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039fe:	4b6b      	ldr	r3, [pc, #428]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	091b      	lsrs	r3, r3, #4
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
       ||
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d047      	beq.n	8003aa2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e044      	b.n	8003aa2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	2b03      	cmp	r3, #3
 8003a1e:	d018      	beq.n	8003a52 <RCCEx_PLLSAI1_Config+0x86>
 8003a20:	2b03      	cmp	r3, #3
 8003a22:	d825      	bhi.n	8003a70 <RCCEx_PLLSAI1_Config+0xa4>
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d002      	beq.n	8003a2e <RCCEx_PLLSAI1_Config+0x62>
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d009      	beq.n	8003a40 <RCCEx_PLLSAI1_Config+0x74>
 8003a2c:	e020      	b.n	8003a70 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a2e:	4b5f      	ldr	r3, [pc, #380]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d11d      	bne.n	8003a76 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a3e:	e01a      	b.n	8003a76 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a40:	4b5a      	ldr	r3, [pc, #360]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d116      	bne.n	8003a7a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a50:	e013      	b.n	8003a7a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a52:	4b56      	ldr	r3, [pc, #344]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d10f      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a5e:	4b53      	ldr	r3, [pc, #332]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d109      	bne.n	8003a7e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a6e:	e006      	b.n	8003a7e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      break;
 8003a74:	e004      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a76:	bf00      	nop
 8003a78:	e002      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7a:	bf00      	nop
 8003a7c:	e000      	b.n	8003a80 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a7e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a80:	7bfb      	ldrb	r3, [r7, #15]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a86:	4b49      	ldr	r3, [pc, #292]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6819      	ldr	r1, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	685b      	ldr	r3, [r3, #4]
 8003a96:	3b01      	subs	r3, #1
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	430b      	orrs	r3, r1
 8003a9c:	4943      	ldr	r1, [pc, #268]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d17c      	bne.n	8003ba2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003aa8:	4b40      	ldr	r3, [pc, #256]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a3f      	ldr	r2, [pc, #252]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ab2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab4:	f7fe f9dc 	bl	8001e70 <HAL_GetTick>
 8003ab8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003aba:	e009      	b.n	8003ad0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003abc:	f7fe f9d8 	bl	8001e70 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d902      	bls.n	8003ad0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	73fb      	strb	r3, [r7, #15]
        break;
 8003ace:	e005      	b.n	8003adc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ad0:	4b36      	ldr	r3, [pc, #216]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d1ef      	bne.n	8003abc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003adc:	7bfb      	ldrb	r3, [r7, #15]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d15f      	bne.n	8003ba2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d110      	bne.n	8003b0a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae8:	4b30      	ldr	r3, [pc, #192]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003af0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	6892      	ldr	r2, [r2, #8]
 8003af8:	0211      	lsls	r1, r2, #8
 8003afa:	687a      	ldr	r2, [r7, #4]
 8003afc:	68d2      	ldr	r2, [r2, #12]
 8003afe:	06d2      	lsls	r2, r2, #27
 8003b00:	430a      	orrs	r2, r1
 8003b02:	492a      	ldr	r1, [pc, #168]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b04:	4313      	orrs	r3, r2
 8003b06:	610b      	str	r3, [r1, #16]
 8003b08:	e027      	b.n	8003b5a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d112      	bne.n	8003b36 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b10:	4b26      	ldr	r3, [pc, #152]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003b18:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	6892      	ldr	r2, [r2, #8]
 8003b20:	0211      	lsls	r1, r2, #8
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	6912      	ldr	r2, [r2, #16]
 8003b26:	0852      	lsrs	r2, r2, #1
 8003b28:	3a01      	subs	r2, #1
 8003b2a:	0552      	lsls	r2, r2, #21
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	491f      	ldr	r1, [pc, #124]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b30:	4313      	orrs	r3, r2
 8003b32:	610b      	str	r3, [r1, #16]
 8003b34:	e011      	b.n	8003b5a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b36:	4b1d      	ldr	r3, [pc, #116]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003b3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6892      	ldr	r2, [r2, #8]
 8003b46:	0211      	lsls	r1, r2, #8
 8003b48:	687a      	ldr	r2, [r7, #4]
 8003b4a:	6952      	ldr	r2, [r2, #20]
 8003b4c:	0852      	lsrs	r2, r2, #1
 8003b4e:	3a01      	subs	r2, #1
 8003b50:	0652      	lsls	r2, r2, #25
 8003b52:	430a      	orrs	r2, r1
 8003b54:	4915      	ldr	r1, [pc, #84]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b5a:	4b14      	ldr	r3, [pc, #80]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b60:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b64:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b66:	f7fe f983 	bl	8001e70 <HAL_GetTick>
 8003b6a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b6c:	e009      	b.n	8003b82 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b6e:	f7fe f97f 	bl	8001e70 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d902      	bls.n	8003b82 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	73fb      	strb	r3, [r7, #15]
          break;
 8003b80:	e005      	b.n	8003b8e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b82:	4b0a      	ldr	r3, [pc, #40]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d0ef      	beq.n	8003b6e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003b8e:	7bfb      	ldrb	r3, [r7, #15]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d106      	bne.n	8003ba2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b94:	4b05      	ldr	r3, [pc, #20]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	4903      	ldr	r1, [pc, #12]	; (8003bac <RCCEx_PLLSAI1_Config+0x1e0>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	40021000 	.word	0x40021000

08003bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e095      	b.n	8003cee <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d108      	bne.n	8003bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bd2:	d009      	beq.n	8003be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	61da      	str	r2, [r3, #28]
 8003bda:	e005      	b.n	8003be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fd fe64 	bl	80018d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681a      	ldr	r2, [r3, #0]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c28:	d902      	bls.n	8003c30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	e002      	b.n	8003c36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003c3e:	d007      	beq.n	8003c50 <HAL_SPI_Init+0xa0>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003c48:	d002      	beq.n	8003c50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c60:	431a      	orrs	r2, r3
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	f003 0301 	and.w	r3, r3, #1
 8003c74:	431a      	orrs	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	699b      	ldr	r3, [r3, #24]
 8003c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c7e:	431a      	orrs	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69db      	ldr	r3, [r3, #28]
 8003c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c88:	431a      	orrs	r2, r3
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a1b      	ldr	r3, [r3, #32]
 8003c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c92:	ea42 0103 	orr.w	r1, r2, r3
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	430a      	orrs	r2, r1
 8003ca4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	0c1b      	lsrs	r3, r3, #16
 8003cac:	f003 0204 	and.w	r2, r3, #4
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb4:	f003 0310 	and.w	r3, r3, #16
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003ccc:	ea42 0103 	orr.w	r1, r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003cec:	2300      	movs	r3, #0
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3710      	adds	r7, #16
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cf6:	b580      	push	{r7, lr}
 8003cf8:	b088      	sub	sp, #32
 8003cfa:	af00      	add	r7, sp, #0
 8003cfc:	60f8      	str	r0, [r7, #12]
 8003cfe:	60b9      	str	r1, [r7, #8]
 8003d00:	603b      	str	r3, [r7, #0]
 8003d02:	4613      	mov	r3, r2
 8003d04:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d06:	2300      	movs	r3, #0
 8003d08:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_SPI_Transmit+0x22>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e158      	b.n	8003fca <HAL_SPI_Transmit+0x2d4>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d20:	f7fe f8a6 	bl	8001e70 <HAL_GetTick>
 8003d24:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d002      	beq.n	8003d3c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003d36:	2302      	movs	r3, #2
 8003d38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d3a:	e13d      	b.n	8003fb8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <HAL_SPI_Transmit+0x52>
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d102      	bne.n	8003d4e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003d4c:	e134      	b.n	8003fb8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2203      	movs	r2, #3
 8003d52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	88fa      	ldrh	r2, [r7, #6]
 8003d66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	88fa      	ldrh	r2, [r7, #6]
 8003d6c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2200      	movs	r2, #0
 8003d72:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d98:	d10f      	bne.n	8003dba <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003da8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc4:	2b40      	cmp	r3, #64	; 0x40
 8003dc6:	d007      	beq.n	8003dd8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dd6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003de0:	d94b      	bls.n	8003e7a <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d002      	beq.n	8003df0 <HAL_SPI_Transmit+0xfa>
 8003dea:	8afb      	ldrh	r3, [r7, #22]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d13e      	bne.n	8003e6e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	881a      	ldrh	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	1c9a      	adds	r2, r3, #2
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	3b01      	subs	r3, #1
 8003e0e:	b29a      	uxth	r2, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e14:	e02b      	b.n	8003e6e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	f003 0302 	and.w	r3, r3, #2
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d112      	bne.n	8003e4a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e28:	881a      	ldrh	r2, [r3, #0]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	1c9a      	adds	r2, r3, #2
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003e48:	e011      	b.n	8003e6e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e4a:	f7fe f811 	bl	8001e70 <HAL_GetTick>
 8003e4e:	4602      	mov	r2, r0
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	1ad3      	subs	r3, r2, r3
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	429a      	cmp	r2, r3
 8003e58:	d803      	bhi.n	8003e62 <HAL_SPI_Transmit+0x16c>
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e60:	d102      	bne.n	8003e68 <HAL_SPI_Transmit+0x172>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d102      	bne.n	8003e6e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e6c:	e0a4      	b.n	8003fb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e72:	b29b      	uxth	r3, r3
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1ce      	bne.n	8003e16 <HAL_SPI_Transmit+0x120>
 8003e78:	e07c      	b.n	8003f74 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d002      	beq.n	8003e88 <HAL_SPI_Transmit+0x192>
 8003e82:	8afb      	ldrh	r3, [r7, #22]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d170      	bne.n	8003f6a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d912      	bls.n	8003eb8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e96:	881a      	ldrh	r2, [r3, #0]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea2:	1c9a      	adds	r2, r3, #2
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	3b02      	subs	r3, #2
 8003eb0:	b29a      	uxth	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003eb6:	e058      	b.n	8003f6a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	330c      	adds	r3, #12
 8003ec2:	7812      	ldrb	r2, [r2, #0]
 8003ec4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003ede:	e044      	b.n	8003f6a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 0302 	and.w	r3, r3, #2
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d12b      	bne.n	8003f46 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d912      	bls.n	8003f1e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efc:	881a      	ldrh	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f08:	1c9a      	adds	r2, r3, #2
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	3b02      	subs	r3, #2
 8003f16:	b29a      	uxth	r2, r3
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f1c:	e025      	b.n	8003f6a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	330c      	adds	r3, #12
 8003f28:	7812      	ldrb	r2, [r2, #0]
 8003f2a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f30:	1c5a      	adds	r2, r3, #1
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f44:	e011      	b.n	8003f6a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f46:	f7fd ff93 	bl	8001e70 <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	69bb      	ldr	r3, [r7, #24]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d803      	bhi.n	8003f5e <HAL_SPI_Transmit+0x268>
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d102      	bne.n	8003f64 <HAL_SPI_Transmit+0x26e>
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d102      	bne.n	8003f6a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003f68:	e026      	b.n	8003fb8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1b5      	bne.n	8003ee0 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	6839      	ldr	r1, [r7, #0]
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 fce3 	bl	8004944 <SPI_EndRxTxTransaction>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d002      	beq.n	8003f8a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f92:	2300      	movs	r3, #0
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	613b      	str	r3, [r7, #16]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	613b      	str	r3, [r7, #16]
 8003fa6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	77fb      	strb	r3, [r7, #31]
 8003fb4:	e000      	b.n	8003fb8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003fb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003fc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b088      	sub	sp, #32
 8003fd6:	af02      	add	r7, sp, #8
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fee:	d112      	bne.n	8004016 <HAL_SPI_Receive+0x44>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d10e      	bne.n	8004016 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004000:	88fa      	ldrh	r2, [r7, #6]
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	9300      	str	r3, [sp, #0]
 8004006:	4613      	mov	r3, r2
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	68b9      	ldr	r1, [r7, #8]
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f000 f910 	bl	8004232 <HAL_SPI_TransmitReceive>
 8004012:	4603      	mov	r3, r0
 8004014:	e109      	b.n	800422a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_SPI_Receive+0x52>
 8004020:	2302      	movs	r3, #2
 8004022:	e102      	b.n	800422a <HAL_SPI_Receive+0x258>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800402c:	f7fd ff20 	bl	8001e70 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b01      	cmp	r3, #1
 800403c:	d002      	beq.n	8004044 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800403e:	2302      	movs	r3, #2
 8004040:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004042:	e0e9      	b.n	8004218 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d002      	beq.n	8004050 <HAL_SPI_Receive+0x7e>
 800404a:	88fb      	ldrh	r3, [r7, #6]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d102      	bne.n	8004056 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004054:	e0e0      	b.n	8004218 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2204      	movs	r2, #4
 800405a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	2200      	movs	r2, #0
 8004062:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	68ba      	ldr	r2, [r7, #8]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	88fa      	ldrh	r2, [r7, #6]
 800406e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	88fa      	ldrh	r2, [r7, #6]
 8004076:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	2200      	movs	r2, #0
 800408a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80040a0:	d908      	bls.n	80040b4 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685a      	ldr	r2, [r3, #4]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	e007      	b.n	80040c4 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80040c2:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040cc:	d10f      	bne.n	80040ee <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040dc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80040ec:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b40      	cmp	r3, #64	; 0x40
 80040fa:	d007      	beq.n	800410c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800410a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004114:	d867      	bhi.n	80041e6 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004116:	e030      	b.n	800417a <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b01      	cmp	r3, #1
 8004124:	d117      	bne.n	8004156 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f103 020c 	add.w	r2, r3, #12
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	7812      	ldrb	r2, [r2, #0]
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8004154:	e011      	b.n	800417a <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004156:	f7fd fe8b 	bl	8001e70 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	683a      	ldr	r2, [r7, #0]
 8004162:	429a      	cmp	r2, r3
 8004164:	d803      	bhi.n	800416e <HAL_SPI_Receive+0x19c>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416c:	d102      	bne.n	8004174 <HAL_SPI_Receive+0x1a2>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d102      	bne.n	800417a <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004178:	e04e      	b.n	8004218 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004180:	b29b      	uxth	r3, r3
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1c8      	bne.n	8004118 <HAL_SPI_Receive+0x146>
 8004186:	e034      	b.n	80041f2 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	f003 0301 	and.w	r3, r3, #1
 8004192:	2b01      	cmp	r3, #1
 8004194:	d115      	bne.n	80041c2 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a0:	b292      	uxth	r2, r2
 80041a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a8:	1c9a      	adds	r2, r3, #2
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	3b01      	subs	r3, #1
 80041b8:	b29a      	uxth	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80041c0:	e011      	b.n	80041e6 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041c2:	f7fd fe55 	bl	8001e70 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d803      	bhi.n	80041da <HAL_SPI_Receive+0x208>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d8:	d102      	bne.n	80041e0 <HAL_SPI_Receive+0x20e>
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d102      	bne.n	80041e6 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80041e4:	e018      	b.n	8004218 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80041ec:	b29b      	uxth	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ca      	bne.n	8004188 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f2:	693a      	ldr	r2, [r7, #16]
 80041f4:	6839      	ldr	r1, [r7, #0]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fb4c 	bl	8004894 <SPI_EndRxTransaction>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2220      	movs	r2, #32
 8004206:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
 8004214:	e000      	b.n	8004218 <HAL_SPI_Receive+0x246>
  }

error :
 8004216:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004228:	7dfb      	ldrb	r3, [r7, #23]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b08a      	sub	sp, #40	; 0x28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
 800423e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004240:	2301      	movs	r3, #1
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_SPI_TransmitReceive+0x26>
 8004254:	2302      	movs	r3, #2
 8004256:	e1fb      	b.n	8004650 <HAL_SPI_TransmitReceive+0x41e>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004260:	f7fd fe06 	bl	8001e70 <HAL_GetTick>
 8004264:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800426c:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8004274:	887b      	ldrh	r3, [r7, #2]
 8004276:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8004278:	887b      	ldrh	r3, [r7, #2]
 800427a:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800427c:	7efb      	ldrb	r3, [r7, #27]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d00e      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x6e>
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004288:	d106      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <HAL_SPI_TransmitReceive+0x66>
 8004292:	7efb      	ldrb	r3, [r7, #27]
 8004294:	2b04      	cmp	r3, #4
 8004296:	d003      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8004298:	2302      	movs	r3, #2
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800429e:	e1cd      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d005      	beq.n	80042b2 <HAL_SPI_TransmitReceive+0x80>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d002      	beq.n	80042b2 <HAL_SPI_TransmitReceive+0x80>
 80042ac:	887b      	ldrh	r3, [r7, #2]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d103      	bne.n	80042ba <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80042b8:	e1c0      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d003      	beq.n	80042ce <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2205      	movs	r2, #5
 80042ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	887a      	ldrh	r2, [r7, #2]
 80042de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	887a      	ldrh	r2, [r7, #2]
 80042e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	887a      	ldrh	r2, [r7, #2]
 80042fa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004310:	d802      	bhi.n	8004318 <HAL_SPI_TransmitReceive+0xe6>
 8004312:	8a3b      	ldrh	r3, [r7, #16]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d908      	bls.n	800432a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004326:	605a      	str	r2, [r3, #4]
 8004328:	e007      	b.n	800433a <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	685a      	ldr	r2, [r3, #4]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004338:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004344:	2b40      	cmp	r3, #64	; 0x40
 8004346:	d007      	beq.n	8004358 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004356:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004360:	d97c      	bls.n	800445c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d002      	beq.n	8004370 <HAL_SPI_TransmitReceive+0x13e>
 800436a:	8a7b      	ldrh	r3, [r7, #18]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d169      	bne.n	8004444 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004374:	881a      	ldrh	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004394:	e056      	b.n	8004444 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d11b      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x1aa>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043a8:	b29b      	uxth	r3, r3
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d016      	beq.n	80043dc <HAL_SPI_TransmitReceive+0x1aa>
 80043ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d113      	bne.n	80043dc <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b8:	881a      	ldrh	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c4:	1c9a      	adds	r2, r3, #2
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	3b01      	subs	r3, #1
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f003 0301 	and.w	r3, r3, #1
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d11c      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x1f2>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d016      	beq.n	8004424 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68da      	ldr	r2, [r3, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004400:	b292      	uxth	r2, r2
 8004402:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004408:	1c9a      	adds	r2, r3, #2
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004420:	2301      	movs	r3, #1
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004424:	f7fd fd24 	bl	8001e70 <HAL_GetTick>
 8004428:	4602      	mov	r2, r0
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004430:	429a      	cmp	r2, r3
 8004432:	d807      	bhi.n	8004444 <HAL_SPI_TransmitReceive+0x212>
 8004434:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800443a:	d003      	beq.n	8004444 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004442:	e0fb      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1a3      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x164>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d19d      	bne.n	8004396 <HAL_SPI_TransmitReceive+0x164>
 800445a:	e0df      	b.n	800461c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d003      	beq.n	800446c <HAL_SPI_TransmitReceive+0x23a>
 8004464:	8a7b      	ldrh	r3, [r7, #18]
 8004466:	2b01      	cmp	r3, #1
 8004468:	f040 80cb 	bne.w	8004602 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b01      	cmp	r3, #1
 8004474:	d912      	bls.n	800449c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800447a:	881a      	ldrh	r2, [r3, #0]
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	1c9a      	adds	r2, r3, #2
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004490:	b29b      	uxth	r3, r3
 8004492:	3b02      	subs	r3, #2
 8004494:	b29a      	uxth	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	87da      	strh	r2, [r3, #62]	; 0x3e
 800449a:	e0b2      	b.n	8004602 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	330c      	adds	r3, #12
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	3b01      	subs	r3, #1
 80044bc:	b29a      	uxth	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044c2:	e09e      	b.n	8004602 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	f003 0302 	and.w	r3, r3, #2
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d134      	bne.n	800453c <HAL_SPI_TransmitReceive+0x30a>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d02f      	beq.n	800453c <HAL_SPI_TransmitReceive+0x30a>
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d12c      	bne.n	800453c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d912      	bls.n	8004512 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f0:	881a      	ldrh	r2, [r3, #0]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044fc:	1c9a      	adds	r2, r3, #2
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004506:	b29b      	uxth	r3, r3
 8004508:	3b02      	subs	r3, #2
 800450a:	b29a      	uxth	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004510:	e012      	b.n	8004538 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	330c      	adds	r3, #12
 800451c:	7812      	ldrb	r2, [r2, #0]
 800451e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004538:	2300      	movs	r3, #0
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b01      	cmp	r3, #1
 8004548:	d148      	bne.n	80045dc <HAL_SPI_TransmitReceive+0x3aa>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004550:	b29b      	uxth	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d042      	beq.n	80045dc <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800455c:	b29b      	uxth	r3, r3
 800455e:	2b01      	cmp	r3, #1
 8004560:	d923      	bls.n	80045aa <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68da      	ldr	r2, [r3, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456c:	b292      	uxth	r2, r2
 800456e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004574:	1c9a      	adds	r2, r3, #2
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b02      	subs	r3, #2
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004592:	b29b      	uxth	r3, r3
 8004594:	2b01      	cmp	r3, #1
 8004596:	d81f      	bhi.n	80045d8 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685a      	ldr	r2, [r3, #4]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80045a6:	605a      	str	r2, [r3, #4]
 80045a8:	e016      	b.n	80045d8 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f103 020c 	add.w	r2, r3, #12
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	7812      	ldrb	r2, [r2, #0]
 80045b8:	b2d2      	uxtb	r2, r2
 80045ba:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	1c5a      	adds	r2, r3, #1
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80045d8:	2301      	movs	r3, #1
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80045dc:	f7fd fc48 	bl	8001e70 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d803      	bhi.n	80045f4 <HAL_SPI_TransmitReceive+0x3c2>
 80045ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f2:	d102      	bne.n	80045fa <HAL_SPI_TransmitReceive+0x3c8>
 80045f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d103      	bne.n	8004602 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8004600:	e01c      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004606:	b29b      	uxth	r3, r3
 8004608:	2b00      	cmp	r3, #0
 800460a:	f47f af5b 	bne.w	80044c4 <HAL_SPI_TransmitReceive+0x292>
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	f47f af54 	bne.w	80044c4 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004620:	68f8      	ldr	r0, [r7, #12]
 8004622:	f000 f98f 	bl	8004944 <SPI_EndRxTxTransaction>
 8004626:	4603      	mov	r3, r0
 8004628:	2b00      	cmp	r3, #0
 800462a:	d006      	beq.n	800463a <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	661a      	str	r2, [r3, #96]	; 0x60
 8004638:	e000      	b.n	800463c <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800463a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800464c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8004650:	4618      	mov	r0, r3
 8004652:	3728      	adds	r7, #40	; 0x28
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	603b      	str	r3, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004668:	f7fd fc02 	bl	8001e70 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	4413      	add	r3, r2
 8004676:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004678:	f7fd fbfa 	bl	8001e70 <HAL_GetTick>
 800467c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800467e:	4b39      	ldr	r3, [pc, #228]	; (8004764 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	015b      	lsls	r3, r3, #5
 8004684:	0d1b      	lsrs	r3, r3, #20
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	fb02 f303 	mul.w	r3, r2, r3
 800468c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800468e:	e054      	b.n	800473a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	d050      	beq.n	800473a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004698:	f7fd fbea 	bl	8001e70 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d902      	bls.n	80046ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d13d      	bne.n	800472a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80046bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c6:	d111      	bne.n	80046ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046d0:	d004      	beq.n	80046dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d107      	bne.n	80046ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046f4:	d10f      	bne.n	8004716 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	681a      	ldr	r2, [r3, #0]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004704:	601a      	str	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004714:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2201      	movs	r2, #1
 800471a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e017      	b.n	800475a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	3b01      	subs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	4013      	ands	r3, r2
 8004744:	68ba      	ldr	r2, [r7, #8]
 8004746:	429a      	cmp	r2, r3
 8004748:	bf0c      	ite	eq
 800474a:	2301      	moveq	r3, #1
 800474c:	2300      	movne	r3, #0
 800474e:	b2db      	uxtb	r3, r3
 8004750:	461a      	mov	r2, r3
 8004752:	79fb      	ldrb	r3, [r7, #7]
 8004754:	429a      	cmp	r2, r3
 8004756:	d19b      	bne.n	8004690 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3720      	adds	r7, #32
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}
 8004762:	bf00      	nop
 8004764:	2000000c 	.word	0x2000000c

08004768 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	; 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800477a:	f7fd fb79 	bl	8001e70 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004782:	1a9b      	subs	r3, r3, r2
 8004784:	683a      	ldr	r2, [r7, #0]
 8004786:	4413      	add	r3, r2
 8004788:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800478a:	f7fd fb71 	bl	8001e70 <HAL_GetTick>
 800478e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	330c      	adds	r3, #12
 8004796:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004798:	4b3d      	ldr	r3, [pc, #244]	; (8004890 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	00da      	lsls	r2, r3, #3
 80047a4:	1ad3      	subs	r3, r2, r3
 80047a6:	0d1b      	lsrs	r3, r3, #20
 80047a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80047b0:	e060      	b.n	8004874 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80047b8:	d107      	bne.n	80047ca <SPI_WaitFifoStateUntilTimeout+0x62>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d104      	bne.n	80047ca <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80047c8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047d0:	d050      	beq.n	8004874 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80047d2:	f7fd fb4d 	bl	8001e70 <HAL_GetTick>
 80047d6:	4602      	mov	r2, r0
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	1ad3      	subs	r3, r2, r3
 80047dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047de:	429a      	cmp	r2, r3
 80047e0:	d902      	bls.n	80047e8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80047e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d13d      	bne.n	8004864 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80047f6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004800:	d111      	bne.n	8004826 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800480a:	d004      	beq.n	8004816 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004814:	d107      	bne.n	8004826 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004824:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800482a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800482e:	d10f      	bne.n	8004850 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800484e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004860:	2303      	movs	r3, #3
 8004862:	e010      	b.n	8004886 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800486a:	2300      	movs	r3, #0
 800486c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	3b01      	subs	r3, #1
 8004872:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	689a      	ldr	r2, [r3, #8]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	4013      	ands	r3, r2
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	429a      	cmp	r2, r3
 8004882:	d196      	bne.n	80047b2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	2000000c 	.word	0x2000000c

08004894 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af02      	add	r7, sp, #8
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048a8:	d111      	bne.n	80048ce <SPI_EndRxTransaction+0x3a>
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048b2:	d004      	beq.n	80048be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048bc:	d107      	bne.n	80048ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048cc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	9300      	str	r3, [sp, #0]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	2200      	movs	r2, #0
 80048d6:	2180      	movs	r1, #128	; 0x80
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff febd 	bl	8004658 <SPI_WaitFlagStateUntilTimeout>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d007      	beq.n	80048f4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048e8:	f043 0220 	orr.w	r2, r3, #32
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e023      	b.n	800493c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048fc:	d11d      	bne.n	800493a <SPI_EndRxTransaction+0xa6>
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004906:	d004      	beq.n	8004912 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004910:	d113      	bne.n	800493a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	2200      	movs	r2, #0
 800491a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800491e:	68f8      	ldr	r0, [r7, #12]
 8004920:	f7ff ff22 	bl	8004768 <SPI_WaitFifoStateUntilTimeout>
 8004924:	4603      	mov	r3, r0
 8004926:	2b00      	cmp	r3, #0
 8004928:	d007      	beq.n	800493a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800492e:	f043 0220 	orr.w	r2, r3, #32
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e000      	b.n	800493c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af02      	add	r7, sp, #8
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	9300      	str	r3, [sp, #0]
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	2200      	movs	r2, #0
 8004958:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800495c:	68f8      	ldr	r0, [r7, #12]
 800495e:	f7ff ff03 	bl	8004768 <SPI_WaitFifoStateUntilTimeout>
 8004962:	4603      	mov	r3, r0
 8004964:	2b00      	cmp	r3, #0
 8004966:	d007      	beq.n	8004978 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496c:	f043 0220 	orr.w	r2, r3, #32
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e027      	b.n	80049c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	2180      	movs	r1, #128	; 0x80
 8004982:	68f8      	ldr	r0, [r7, #12]
 8004984:	f7ff fe68 	bl	8004658 <SPI_WaitFlagStateUntilTimeout>
 8004988:	4603      	mov	r3, r0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004992:	f043 0220 	orr.w	r2, r3, #32
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	e014      	b.n	80049c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	9300      	str	r3, [sp, #0]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	2200      	movs	r2, #0
 80049a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff fedc 	bl	8004768 <SPI_WaitFifoStateUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d007      	beq.n	80049c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049ba:	f043 0220 	orr.w	r2, r3, #32
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e000      	b.n	80049c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d101      	bne.n	80049e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e049      	b.n	8004a76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7fc ffac 	bl	8001954 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2202      	movs	r2, #2
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	3304      	adds	r3, #4
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	4610      	mov	r0, r2
 8004a10:	f000 fe38 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b082      	sub	sp, #8
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e049      	b.n	8004b24 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d106      	bne.n	8004aaa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 f841 	bl	8004b2c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2202      	movs	r2, #2
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f000 fde1 	bl	8005684 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2201      	movs	r2, #1
 8004ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b22:	2300      	movs	r3, #0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b083      	sub	sp, #12
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d109      	bne.n	8004b6c <HAL_TIM_PWM_Start_DMA+0x2c>
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b02      	cmp	r3, #2
 8004b62:	bf0c      	ite	eq
 8004b64:	2301      	moveq	r3, #1
 8004b66:	2300      	movne	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e03c      	b.n	8004be6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d109      	bne.n	8004b86 <HAL_TIM_PWM_Start_DMA+0x46>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	bf0c      	ite	eq
 8004b7e:	2301      	moveq	r3, #1
 8004b80:	2300      	movne	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	e02f      	b.n	8004be6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	2b08      	cmp	r3, #8
 8004b8a:	d109      	bne.n	8004ba0 <HAL_TIM_PWM_Start_DMA+0x60>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b02      	cmp	r3, #2
 8004b96:	bf0c      	ite	eq
 8004b98:	2301      	moveq	r3, #1
 8004b9a:	2300      	movne	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e022      	b.n	8004be6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b0c      	cmp	r3, #12
 8004ba4:	d109      	bne.n	8004bba <HAL_TIM_PWM_Start_DMA+0x7a>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b02      	cmp	r3, #2
 8004bb0:	bf0c      	ite	eq
 8004bb2:	2301      	moveq	r3, #1
 8004bb4:	2300      	movne	r3, #0
 8004bb6:	b2db      	uxtb	r3, r3
 8004bb8:	e015      	b.n	8004be6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d109      	bne.n	8004bd4 <HAL_TIM_PWM_Start_DMA+0x94>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	bf0c      	ite	eq
 8004bcc:	2301      	moveq	r3, #1
 8004bce:	2300      	movne	r3, #0
 8004bd0:	b2db      	uxtb	r3, r3
 8004bd2:	e008      	b.n	8004be6 <HAL_TIM_PWM_Start_DMA+0xa6>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	bf0c      	ite	eq
 8004be0:	2301      	moveq	r3, #1
 8004be2:	2300      	movne	r3, #0
 8004be4:	b2db      	uxtb	r3, r3
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_TIM_PWM_Start_DMA+0xae>
  {
    return HAL_BUSY;
 8004bea:	2302      	movs	r3, #2
 8004bec:	e18d      	b.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d109      	bne.n	8004c08 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	bf0c      	ite	eq
 8004c00:	2301      	moveq	r3, #1
 8004c02:	2300      	movne	r3, #0
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	e03c      	b.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d109      	bne.n	8004c22 <HAL_TIM_PWM_Start_DMA+0xe2>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	bf0c      	ite	eq
 8004c1a:	2301      	moveq	r3, #1
 8004c1c:	2300      	movne	r3, #0
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	e02f      	b.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b08      	cmp	r3, #8
 8004c26:	d109      	bne.n	8004c3c <HAL_TIM_PWM_Start_DMA+0xfc>
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	bf0c      	ite	eq
 8004c34:	2301      	moveq	r3, #1
 8004c36:	2300      	movne	r3, #0
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	e022      	b.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d109      	bne.n	8004c56 <HAL_TIM_PWM_Start_DMA+0x116>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	bf0c      	ite	eq
 8004c4e:	2301      	moveq	r3, #1
 8004c50:	2300      	movne	r3, #0
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	e015      	b.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b10      	cmp	r3, #16
 8004c5a:	d109      	bne.n	8004c70 <HAL_TIM_PWM_Start_DMA+0x130>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	bf0c      	ite	eq
 8004c68:	2301      	moveq	r3, #1
 8004c6a:	2300      	movne	r3, #0
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	e008      	b.n	8004c82 <HAL_TIM_PWM_Start_DMA+0x142>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	bf0c      	ite	eq
 8004c7c:	2301      	moveq	r3, #1
 8004c7e:	2300      	movne	r3, #0
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d034      	beq.n	8004cf0 <HAL_TIM_PWM_Start_DMA+0x1b0>
  {
    if ((pData == NULL) || (Length == 0U))
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <HAL_TIM_PWM_Start_DMA+0x152>
 8004c8c:	887b      	ldrh	r3, [r7, #2]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d101      	bne.n	8004c96 <HAL_TIM_PWM_Start_DMA+0x156>
    {
      return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e139      	b.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x3ca>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d104      	bne.n	8004ca6 <HAL_TIM_PWM_Start_DMA+0x166>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ca4:	e026      	b.n	8004cf4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	d104      	bne.n	8004cb6 <HAL_TIM_PWM_Start_DMA+0x176>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cb4:	e01e      	b.n	8004cf4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	2b08      	cmp	r3, #8
 8004cba:	d104      	bne.n	8004cc6 <HAL_TIM_PWM_Start_DMA+0x186>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cc4:	e016      	b.n	8004cf4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b0c      	cmp	r3, #12
 8004cca:	d104      	bne.n	8004cd6 <HAL_TIM_PWM_Start_DMA+0x196>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2202      	movs	r2, #2
 8004cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cd4:	e00e      	b.n	8004cf4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b10      	cmp	r3, #16
 8004cda:	d104      	bne.n	8004ce6 <HAL_TIM_PWM_Start_DMA+0x1a6>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2202      	movs	r2, #2
 8004ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ce4:	e006      	b.n	8004cf4 <HAL_TIM_PWM_Start_DMA+0x1b4>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004cee:	e001      	b.n	8004cf4 <HAL_TIM_PWM_Start_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e10a      	b.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x3ca>
  }

  switch (Channel)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	f200 80ae 	bhi.w	8004e58 <HAL_TIM_PWM_Start_DMA+0x318>
 8004cfc:	a201      	add	r2, pc, #4	; (adr r2, 8004d04 <HAL_TIM_PWM_Start_DMA+0x1c4>)
 8004cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d02:	bf00      	nop
 8004d04:	08004d39 	.word	0x08004d39
 8004d08:	08004e59 	.word	0x08004e59
 8004d0c:	08004e59 	.word	0x08004e59
 8004d10:	08004e59 	.word	0x08004e59
 8004d14:	08004d81 	.word	0x08004d81
 8004d18:	08004e59 	.word	0x08004e59
 8004d1c:	08004e59 	.word	0x08004e59
 8004d20:	08004e59 	.word	0x08004e59
 8004d24:	08004dc9 	.word	0x08004dc9
 8004d28:	08004e59 	.word	0x08004e59
 8004d2c:	08004e59 	.word	0x08004e59
 8004d30:	08004e59 	.word	0x08004e59
 8004d34:	08004e11 	.word	0x08004e11
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	4a75      	ldr	r2, [pc, #468]	; (8004f14 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d44:	4a74      	ldr	r2, [pc, #464]	; (8004f18 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004d46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d4c:	4a73      	ldr	r2, [pc, #460]	; (8004f1c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004d4e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3334      	adds	r3, #52	; 0x34
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	887b      	ldrh	r3, [r7, #2]
 8004d60:	f7fd fa80 	bl	8002264 <HAL_DMA_Start_IT>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d001      	beq.n	8004d6e <HAL_TIM_PWM_Start_DMA+0x22e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e0cd      	b.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	68da      	ldr	r2, [r3, #12]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d7c:	60da      	str	r2, [r3, #12]
      break;
 8004d7e:	e06e      	b.n	8004e5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	4a63      	ldr	r2, [pc, #396]	; (8004f14 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004d86:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	4a62      	ldr	r2, [pc, #392]	; (8004f18 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d94:	4a61      	ldr	r2, [pc, #388]	; (8004f1c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004d96:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004d9c:	6879      	ldr	r1, [r7, #4]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3338      	adds	r3, #56	; 0x38
 8004da4:	461a      	mov	r2, r3
 8004da6:	887b      	ldrh	r3, [r7, #2]
 8004da8:	f7fd fa5c 	bl	8002264 <HAL_DMA_Start_IT>
 8004dac:	4603      	mov	r3, r0
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_TIM_PWM_Start_DMA+0x276>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e0a9      	b.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68da      	ldr	r2, [r3, #12]
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dc4:	60da      	str	r2, [r3, #12]
      break;
 8004dc6:	e04a      	b.n	8004e5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	4a51      	ldr	r2, [pc, #324]	; (8004f14 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004dce:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd4:	4a50      	ldr	r2, [pc, #320]	; (8004f18 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004dd6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ddc:	4a4f      	ldr	r2, [pc, #316]	; (8004f1c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004dde:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	333c      	adds	r3, #60	; 0x3c
 8004dec:	461a      	mov	r2, r3
 8004dee:	887b      	ldrh	r3, [r7, #2]
 8004df0:	f7fd fa38 	bl	8002264 <HAL_DMA_Start_IT>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d001      	beq.n	8004dfe <HAL_TIM_PWM_Start_DMA+0x2be>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	e085      	b.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e0c:	60da      	str	r2, [r3, #12]
      break;
 8004e0e:	e026      	b.n	8004e5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e14:	4a3f      	ldr	r2, [pc, #252]	; (8004f14 <HAL_TIM_PWM_Start_DMA+0x3d4>)
 8004e16:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1c:	4a3e      	ldr	r2, [pc, #248]	; (8004f18 <HAL_TIM_PWM_Start_DMA+0x3d8>)
 8004e1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e24:	4a3d      	ldr	r2, [pc, #244]	; (8004f1c <HAL_TIM_PWM_Start_DMA+0x3dc>)
 8004e26:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	3340      	adds	r3, #64	; 0x40
 8004e34:	461a      	mov	r2, r3
 8004e36:	887b      	ldrh	r3, [r7, #2]
 8004e38:	f7fd fa14 	bl	8002264 <HAL_DMA_Start_IT>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <HAL_TIM_PWM_Start_DMA+0x306>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e061      	b.n	8004f0a <HAL_TIM_PWM_Start_DMA+0x3ca>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68da      	ldr	r2, [r3, #12]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004e54:	60da      	str	r2, [r3, #12]
      break;
 8004e56:	e002      	b.n	8004e5e <HAL_TIM_PWM_Start_DMA+0x31e>
    }

    default:
      status = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e5e:	7dfb      	ldrb	r3, [r7, #23]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d151      	bne.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x3c8>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2201      	movs	r2, #1
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 ff85 	bl	8005d7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2a      	ldr	r2, [pc, #168]	; (8004f20 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d009      	beq.n	8004e90 <HAL_TIM_PWM_Start_DMA+0x350>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a28      	ldr	r2, [pc, #160]	; (8004f24 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d004      	beq.n	8004e90 <HAL_TIM_PWM_Start_DMA+0x350>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a27      	ldr	r2, [pc, #156]	; (8004f28 <HAL_TIM_PWM_Start_DMA+0x3e8>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d101      	bne.n	8004e94 <HAL_TIM_PWM_Start_DMA+0x354>
 8004e90:	2301      	movs	r3, #1
 8004e92:	e000      	b.n	8004e96 <HAL_TIM_PWM_Start_DMA+0x356>
 8004e94:	2300      	movs	r3, #0
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d007      	beq.n	8004eaa <HAL_TIM_PWM_Start_DMA+0x36a>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ea8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a1c      	ldr	r2, [pc, #112]	; (8004f20 <HAL_TIM_PWM_Start_DMA+0x3e0>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d009      	beq.n	8004ec8 <HAL_TIM_PWM_Start_DMA+0x388>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d004      	beq.n	8004ec8 <HAL_TIM_PWM_Start_DMA+0x388>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a18      	ldr	r2, [pc, #96]	; (8004f24 <HAL_TIM_PWM_Start_DMA+0x3e4>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d115      	bne.n	8004ef4 <HAL_TIM_PWM_Start_DMA+0x3b4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	4b17      	ldr	r3, [pc, #92]	; (8004f2c <HAL_TIM_PWM_Start_DMA+0x3ec>)
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	2b06      	cmp	r3, #6
 8004ed8:	d015      	beq.n	8004f06 <HAL_TIM_PWM_Start_DMA+0x3c6>
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ee0:	d011      	beq.n	8004f06 <HAL_TIM_PWM_Start_DMA+0x3c6>
      {
        __HAL_TIM_ENABLE(htim);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f042 0201 	orr.w	r2, r2, #1
 8004ef0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_PWM_Start_DMA+0x3c6>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f042 0201 	orr.w	r2, r2, #1
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	e000      	b.n	8004f08 <HAL_TIM_PWM_Start_DMA+0x3c8>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f06:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	08005575 	.word	0x08005575
 8004f18:	0800561d 	.word	0x0800561d
 8004f1c:	080054e3 	.word	0x080054e3
 8004f20:	40012c00 	.word	0x40012c00
 8004f24:	40014000 	.word	0x40014000
 8004f28:	40014400 	.word	0x40014400
 8004f2c:	00010007 	.word	0x00010007

08004f30 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	d855      	bhi.n	8004ff0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8004f44:	a201      	add	r2, pc, #4	; (adr r2, 8004f4c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8004f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f4a:	bf00      	nop
 8004f4c:	08004f81 	.word	0x08004f81
 8004f50:	08004ff1 	.word	0x08004ff1
 8004f54:	08004ff1 	.word	0x08004ff1
 8004f58:	08004ff1 	.word	0x08004ff1
 8004f5c:	08004f9d 	.word	0x08004f9d
 8004f60:	08004ff1 	.word	0x08004ff1
 8004f64:	08004ff1 	.word	0x08004ff1
 8004f68:	08004ff1 	.word	0x08004ff1
 8004f6c:	08004fb9 	.word	0x08004fb9
 8004f70:	08004ff1 	.word	0x08004ff1
 8004f74:	08004ff1 	.word	0x08004ff1
 8004f78:	08004ff1 	.word	0x08004ff1
 8004f7c:	08004fd5 	.word	0x08004fd5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004f8e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	4618      	mov	r0, r3
 8004f96:	f7fd f9c5 	bl	8002324 <HAL_DMA_Abort_IT>
      break;
 8004f9a:	e02c      	b.n	8004ff6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004faa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f7fd f9b7 	bl	8002324 <HAL_DMA_Abort_IT>
      break;
 8004fb6:	e01e      	b.n	8004ff6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fc6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f7fd f9a9 	bl	8002324 <HAL_DMA_Abort_IT>
      break;
 8004fd2:	e010      	b.n	8004ff6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68da      	ldr	r2, [r3, #12]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fe2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fd f99b 	bl	8002324 <HAL_DMA_Abort_IT>
      break;
 8004fee:	e002      	b.n	8004ff6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8004ff0:	2301      	movs	r3, #1
 8004ff2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ff4:	bf00      	nop
  }

  if (status == HAL_OK)
 8004ff6:	7bfb      	ldrb	r3, [r7, #15]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d176      	bne.n	80050ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2200      	movs	r2, #0
 8005002:	6839      	ldr	r1, [r7, #0]
 8005004:	4618      	mov	r0, r3
 8005006:	f000 feb9 	bl	8005d7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a39      	ldr	r2, [pc, #228]	; (80050f4 <HAL_TIM_PWM_Stop_DMA+0x1c4>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d009      	beq.n	8005028 <HAL_TIM_PWM_Stop_DMA+0xf8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a37      	ldr	r2, [pc, #220]	; (80050f8 <HAL_TIM_PWM_Stop_DMA+0x1c8>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d004      	beq.n	8005028 <HAL_TIM_PWM_Stop_DMA+0xf8>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a36      	ldr	r2, [pc, #216]	; (80050fc <HAL_TIM_PWM_Stop_DMA+0x1cc>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d101      	bne.n	800502c <HAL_TIM_PWM_Stop_DMA+0xfc>
 8005028:	2301      	movs	r3, #1
 800502a:	e000      	b.n	800502e <HAL_TIM_PWM_Stop_DMA+0xfe>
 800502c:	2300      	movs	r3, #0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d017      	beq.n	8005062 <HAL_TIM_PWM_Stop_DMA+0x132>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a1a      	ldr	r2, [r3, #32]
 8005038:	f241 1311 	movw	r3, #4369	; 0x1111
 800503c:	4013      	ands	r3, r2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d10f      	bne.n	8005062 <HAL_TIM_PWM_Stop_DMA+0x132>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a1a      	ldr	r2, [r3, #32]
 8005048:	f240 4344 	movw	r3, #1092	; 0x444
 800504c:	4013      	ands	r3, r2
 800504e:	2b00      	cmp	r3, #0
 8005050:	d107      	bne.n	8005062 <HAL_TIM_PWM_Stop_DMA+0x132>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	6a1a      	ldr	r2, [r3, #32]
 8005068:	f241 1311 	movw	r3, #4369	; 0x1111
 800506c:	4013      	ands	r3, r2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d10f      	bne.n	8005092 <HAL_TIM_PWM_Stop_DMA+0x162>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6a1a      	ldr	r2, [r3, #32]
 8005078:	f240 4344 	movw	r3, #1092	; 0x444
 800507c:	4013      	ands	r3, r2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d107      	bne.n	8005092 <HAL_TIM_PWM_Stop_DMA+0x162>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f022 0201 	bic.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d104      	bne.n	80050a2 <HAL_TIM_PWM_Stop_DMA+0x172>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050a0:	e023      	b.n	80050ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2b04      	cmp	r3, #4
 80050a6:	d104      	bne.n	80050b2 <HAL_TIM_PWM_Stop_DMA+0x182>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b0:	e01b      	b.n	80050ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b08      	cmp	r3, #8
 80050b6:	d104      	bne.n	80050c2 <HAL_TIM_PWM_Stop_DMA+0x192>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050c0:	e013      	b.n	80050ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	2b0c      	cmp	r3, #12
 80050c6:	d104      	bne.n	80050d2 <HAL_TIM_PWM_Stop_DMA+0x1a2>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80050d0:	e00b      	b.n	80050ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d104      	bne.n	80050e2 <HAL_TIM_PWM_Stop_DMA+0x1b2>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e0:	e003      	b.n	80050ea <HAL_TIM_PWM_Stop_DMA+0x1ba>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3710      	adds	r7, #16
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}
 80050f4:	40012c00 	.word	0x40012c00
 80050f8:	40014000 	.word	0x40014000
 80050fc:	40014400 	.word	0x40014400

08005100 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b086      	sub	sp, #24
 8005104:	af00      	add	r7, sp, #0
 8005106:	60f8      	str	r0, [r7, #12]
 8005108:	60b9      	str	r1, [r7, #8]
 800510a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800510c:	2300      	movs	r3, #0
 800510e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005116:	2b01      	cmp	r3, #1
 8005118:	d101      	bne.n	800511e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800511a:	2302      	movs	r3, #2
 800511c:	e0ff      	b.n	800531e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2201      	movs	r2, #1
 8005122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b14      	cmp	r3, #20
 800512a:	f200 80f0 	bhi.w	800530e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800512e:	a201      	add	r2, pc, #4	; (adr r2, 8005134 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005134:	08005189 	.word	0x08005189
 8005138:	0800530f 	.word	0x0800530f
 800513c:	0800530f 	.word	0x0800530f
 8005140:	0800530f 	.word	0x0800530f
 8005144:	080051c9 	.word	0x080051c9
 8005148:	0800530f 	.word	0x0800530f
 800514c:	0800530f 	.word	0x0800530f
 8005150:	0800530f 	.word	0x0800530f
 8005154:	0800520b 	.word	0x0800520b
 8005158:	0800530f 	.word	0x0800530f
 800515c:	0800530f 	.word	0x0800530f
 8005160:	0800530f 	.word	0x0800530f
 8005164:	0800524b 	.word	0x0800524b
 8005168:	0800530f 	.word	0x0800530f
 800516c:	0800530f 	.word	0x0800530f
 8005170:	0800530f 	.word	0x0800530f
 8005174:	0800528d 	.word	0x0800528d
 8005178:	0800530f 	.word	0x0800530f
 800517c:	0800530f 	.word	0x0800530f
 8005180:	0800530f 	.word	0x0800530f
 8005184:	080052cd 	.word	0x080052cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68b9      	ldr	r1, [r7, #8]
 800518e:	4618      	mov	r0, r3
 8005190:	f000 fadc 	bl	800574c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699a      	ldr	r2, [r3, #24]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f042 0208 	orr.w	r2, r2, #8
 80051a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f022 0204 	bic.w	r2, r2, #4
 80051b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6999      	ldr	r1, [r3, #24]
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	691a      	ldr	r2, [r3, #16]
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	619a      	str	r2, [r3, #24]
      break;
 80051c6:	e0a5      	b.n	8005314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68b9      	ldr	r1, [r7, #8]
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 fb38 	bl	8005844 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	699a      	ldr	r2, [r3, #24]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6999      	ldr	r1, [r3, #24]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	021a      	lsls	r2, r3, #8
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	430a      	orrs	r2, r1
 8005206:	619a      	str	r2, [r3, #24]
      break;
 8005208:	e084      	b.n	8005314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68b9      	ldr	r1, [r7, #8]
 8005210:	4618      	mov	r0, r3
 8005212:	f000 fb91 	bl	8005938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	69da      	ldr	r2, [r3, #28]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f042 0208 	orr.w	r2, r2, #8
 8005224:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	69da      	ldr	r2, [r3, #28]
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0204 	bic.w	r2, r2, #4
 8005234:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	69d9      	ldr	r1, [r3, #28]
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	691a      	ldr	r2, [r3, #16]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	61da      	str	r2, [r3, #28]
      break;
 8005248:	e064      	b.n	8005314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fbe9 	bl	8005a28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005264:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69da      	ldr	r2, [r3, #28]
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005274:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	69d9      	ldr	r1, [r3, #28]
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	021a      	lsls	r2, r3, #8
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	61da      	str	r2, [r3, #28]
      break;
 800528a:	e043      	b.n	8005314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	68b9      	ldr	r1, [r7, #8]
 8005292:	4618      	mov	r0, r3
 8005294:	f000 fc26 	bl	8005ae4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0208 	orr.w	r2, r2, #8
 80052a6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f022 0204 	bic.w	r2, r2, #4
 80052b6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052ca:	e023      	b.n	8005314 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68b9      	ldr	r1, [r7, #8]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fc5e 	bl	8005b94 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	021a      	lsls	r2, r3, #8
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	430a      	orrs	r2, r1
 800530a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800530c:	e002      	b.n	8005314 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	75fb      	strb	r3, [r7, #23]
      break;
 8005312:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2200      	movs	r2, #0
 8005318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800531c:	7dfb      	ldrb	r3, [r7, #23]
}
 800531e:	4618      	mov	r0, r3
 8005320:	3718      	adds	r7, #24
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop

08005328 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005332:	2300      	movs	r3, #0
 8005334:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800533c:	2b01      	cmp	r3, #1
 800533e:	d101      	bne.n	8005344 <HAL_TIM_ConfigClockSource+0x1c>
 8005340:	2302      	movs	r3, #2
 8005342:	e0b6      	b.n	80054b2 <HAL_TIM_ConfigClockSource+0x18a>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2201      	movs	r2, #1
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2202      	movs	r2, #2
 8005350:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005362:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005366:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800536e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68ba      	ldr	r2, [r7, #8]
 8005376:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005380:	d03e      	beq.n	8005400 <HAL_TIM_ConfigClockSource+0xd8>
 8005382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005386:	f200 8087 	bhi.w	8005498 <HAL_TIM_ConfigClockSource+0x170>
 800538a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800538e:	f000 8086 	beq.w	800549e <HAL_TIM_ConfigClockSource+0x176>
 8005392:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005396:	d87f      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x170>
 8005398:	2b70      	cmp	r3, #112	; 0x70
 800539a:	d01a      	beq.n	80053d2 <HAL_TIM_ConfigClockSource+0xaa>
 800539c:	2b70      	cmp	r3, #112	; 0x70
 800539e:	d87b      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x170>
 80053a0:	2b60      	cmp	r3, #96	; 0x60
 80053a2:	d050      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0x11e>
 80053a4:	2b60      	cmp	r3, #96	; 0x60
 80053a6:	d877      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x170>
 80053a8:	2b50      	cmp	r3, #80	; 0x50
 80053aa:	d03c      	beq.n	8005426 <HAL_TIM_ConfigClockSource+0xfe>
 80053ac:	2b50      	cmp	r3, #80	; 0x50
 80053ae:	d873      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x170>
 80053b0:	2b40      	cmp	r3, #64	; 0x40
 80053b2:	d058      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x13e>
 80053b4:	2b40      	cmp	r3, #64	; 0x40
 80053b6:	d86f      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x170>
 80053b8:	2b30      	cmp	r3, #48	; 0x30
 80053ba:	d064      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15e>
 80053bc:	2b30      	cmp	r3, #48	; 0x30
 80053be:	d86b      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x170>
 80053c0:	2b20      	cmp	r3, #32
 80053c2:	d060      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15e>
 80053c4:	2b20      	cmp	r3, #32
 80053c6:	d867      	bhi.n	8005498 <HAL_TIM_ConfigClockSource+0x170>
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d05c      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15e>
 80053cc:	2b10      	cmp	r3, #16
 80053ce:	d05a      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x15e>
 80053d0:	e062      	b.n	8005498 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6818      	ldr	r0, [r3, #0]
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	6899      	ldr	r1, [r3, #8]
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68db      	ldr	r3, [r3, #12]
 80053e2:	f000 fcab 	bl	8005d3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	609a      	str	r2, [r3, #8]
      break;
 80053fe:	e04f      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6818      	ldr	r0, [r3, #0]
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	6899      	ldr	r1, [r3, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f000 fc94 	bl	8005d3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689a      	ldr	r2, [r3, #8]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005422:	609a      	str	r2, [r3, #8]
      break;
 8005424:	e03c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	6859      	ldr	r1, [r3, #4]
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	68db      	ldr	r3, [r3, #12]
 8005432:	461a      	mov	r2, r3
 8005434:	f000 fc08 	bl	8005c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2150      	movs	r1, #80	; 0x50
 800543e:	4618      	mov	r0, r3
 8005440:	f000 fc61 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005444:	e02c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fc27 	bl	8005ca6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2160      	movs	r1, #96	; 0x60
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fc51 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005464:	e01c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	461a      	mov	r2, r3
 8005474:	f000 fbe8 	bl	8005c48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2140      	movs	r1, #64	; 0x40
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fc41 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005484:	e00c      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4619      	mov	r1, r3
 8005490:	4610      	mov	r0, r2
 8005492:	f000 fc38 	bl	8005d06 <TIM_ITRx_SetConfig>
      break;
 8005496:	e003      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	73fb      	strb	r3, [r7, #15]
      break;
 800549c:	e000      	b.n	80054a0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800549e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2201      	movs	r2, #1
 80054a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b083      	sub	sp, #12
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b083      	sub	sp, #12
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80054d6:	bf00      	nop
 80054d8:	370c      	adds	r7, #12
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr

080054e2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80054e2:	b580      	push	{r7, lr}
 80054e4:	b084      	sub	sp, #16
 80054e6:	af00      	add	r7, sp, #0
 80054e8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ee:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d107      	bne.n	800550a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2201      	movs	r2, #1
 80054fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005508:	e02a      	b.n	8005560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550e:	687a      	ldr	r2, [r7, #4]
 8005510:	429a      	cmp	r2, r3
 8005512:	d107      	bne.n	8005524 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2202      	movs	r2, #2
 8005518:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2201      	movs	r2, #1
 800551e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005522:	e01d      	b.n	8005560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	687a      	ldr	r2, [r7, #4]
 800552a:	429a      	cmp	r2, r3
 800552c:	d107      	bne.n	800553e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2204      	movs	r2, #4
 8005532:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800553c:	e010      	b.n	8005560 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	429a      	cmp	r2, r3
 8005546:	d107      	bne.n	8005558 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2208      	movs	r2, #8
 800554c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005556:	e003      	b.n	8005560 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f7ff ffb4 	bl	80054ce <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2200      	movs	r2, #0
 800556a:	771a      	strb	r2, [r3, #28]
}
 800556c:	bf00      	nop
 800556e:	3710      	adds	r7, #16
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005580:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	429a      	cmp	r2, r3
 800558a:	d10b      	bne.n	80055a4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2201      	movs	r2, #1
 8005590:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d136      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2201      	movs	r2, #1
 800559e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055a2:	e031      	b.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a8:	687a      	ldr	r2, [r7, #4]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d10b      	bne.n	80055c6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2202      	movs	r2, #2
 80055b2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d125      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c4:	e020      	b.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	429a      	cmp	r2, r3
 80055ce:	d10b      	bne.n	80055e8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2204      	movs	r2, #4
 80055d4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	69db      	ldr	r3, [r3, #28]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d114      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055e6:	e00f      	b.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d10a      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2208      	movs	r2, #8
 80055f6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	69db      	ldr	r3, [r3, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d103      	bne.n	8005608 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2201      	movs	r2, #1
 8005604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005608:	68f8      	ldr	r0, [r7, #12]
 800560a:	f7fb fcf5 	bl	8000ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2200      	movs	r2, #0
 8005612:	771a      	strb	r2, [r3, #28]
}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005628:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	429a      	cmp	r2, r3
 8005632:	d103      	bne.n	800563c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	2201      	movs	r2, #1
 8005638:	771a      	strb	r2, [r3, #28]
 800563a:	e019      	b.n	8005670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005640:	687a      	ldr	r2, [r7, #4]
 8005642:	429a      	cmp	r2, r3
 8005644:	d103      	bne.n	800564e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2202      	movs	r2, #2
 800564a:	771a      	strb	r2, [r3, #28]
 800564c:	e010      	b.n	8005670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005652:	687a      	ldr	r2, [r7, #4]
 8005654:	429a      	cmp	r2, r3
 8005656:	d103      	bne.n	8005660 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2204      	movs	r2, #4
 800565c:	771a      	strb	r2, [r3, #28]
 800565e:	e007      	b.n	8005670 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005664:	687a      	ldr	r2, [r7, #4]
 8005666:	429a      	cmp	r2, r3
 8005668:	d102      	bne.n	8005670 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2208      	movs	r2, #8
 800566e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff ff22 	bl	80054ba <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
}
 800567c:	bf00      	nop
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}

08005684 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a2a      	ldr	r2, [pc, #168]	; (8005740 <TIM_Base_SetConfig+0xbc>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0x20>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a2:	d108      	bne.n	80056b6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	4a21      	ldr	r2, [pc, #132]	; (8005740 <TIM_Base_SetConfig+0xbc>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d00b      	beq.n	80056d6 <TIM_Base_SetConfig+0x52>
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056c4:	d007      	beq.n	80056d6 <TIM_Base_SetConfig+0x52>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <TIM_Base_SetConfig+0xc0>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d003      	beq.n	80056d6 <TIM_Base_SetConfig+0x52>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <TIM_Base_SetConfig+0xc4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d108      	bne.n	80056e8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	4a0c      	ldr	r2, [pc, #48]	; (8005740 <TIM_Base_SetConfig+0xbc>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d007      	beq.n	8005724 <TIM_Base_SetConfig+0xa0>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a0b      	ldr	r2, [pc, #44]	; (8005744 <TIM_Base_SetConfig+0xc0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d003      	beq.n	8005724 <TIM_Base_SetConfig+0xa0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <TIM_Base_SetConfig+0xc4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d103      	bne.n	800572c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	615a      	str	r2, [r3, #20]
}
 8005732:	bf00      	nop
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
 800573e:	bf00      	nop
 8005740:	40012c00 	.word	0x40012c00
 8005744:	40014000 	.word	0x40014000
 8005748:	40014400 	.word	0x40014400

0800574c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	f023 0201 	bic.w	r2, r3, #1
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800577a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f023 0303 	bic.w	r3, r3, #3
 8005786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 0302 	bic.w	r3, r3, #2
 8005798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a24      	ldr	r2, [pc, #144]	; (8005838 <TIM_OC1_SetConfig+0xec>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_OC1_SetConfig+0x70>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a23      	ldr	r2, [pc, #140]	; (800583c <TIM_OC1_SetConfig+0xf0>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_OC1_SetConfig+0x70>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a22      	ldr	r2, [pc, #136]	; (8005840 <TIM_OC1_SetConfig+0xf4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d10c      	bne.n	80057d6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0308 	bic.w	r3, r3, #8
 80057c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	f023 0304 	bic.w	r3, r3, #4
 80057d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a17      	ldr	r2, [pc, #92]	; (8005838 <TIM_OC1_SetConfig+0xec>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <TIM_OC1_SetConfig+0xa2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a16      	ldr	r2, [pc, #88]	; (800583c <TIM_OC1_SetConfig+0xf0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_OC1_SetConfig+0xa2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a15      	ldr	r2, [pc, #84]	; (8005840 <TIM_OC1_SetConfig+0xf4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80057f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	695b      	ldr	r3, [r3, #20]
 8005802:	693a      	ldr	r2, [r7, #16]
 8005804:	4313      	orrs	r3, r2
 8005806:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	4313      	orrs	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	693a      	ldr	r2, [r7, #16]
 8005816:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	68fa      	ldr	r2, [r7, #12]
 800581c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685a      	ldr	r2, [r3, #4]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	697a      	ldr	r2, [r7, #20]
 800582a:	621a      	str	r2, [r3, #32]
}
 800582c:	bf00      	nop
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40014000 	.word	0x40014000
 8005840:	40014400 	.word	0x40014400

08005844 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005844:	b480      	push	{r7}
 8005846:	b087      	sub	sp, #28
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
 800584c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a1b      	ldr	r3, [r3, #32]
 8005852:	f023 0210 	bic.w	r2, r3, #16
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005872:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800587e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	021b      	lsls	r3, r3, #8
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	f023 0320 	bic.w	r3, r3, #32
 8005892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	689b      	ldr	r3, [r3, #8]
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a22      	ldr	r2, [pc, #136]	; (800592c <TIM_OC2_SetConfig+0xe8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d10d      	bne.n	80058c4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	011b      	lsls	r3, r3, #4
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80058bc:	697b      	ldr	r3, [r7, #20]
 80058be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	4a19      	ldr	r2, [pc, #100]	; (800592c <TIM_OC2_SetConfig+0xe8>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d007      	beq.n	80058dc <TIM_OC2_SetConfig+0x98>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4a18      	ldr	r2, [pc, #96]	; (8005930 <TIM_OC2_SetConfig+0xec>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d003      	beq.n	80058dc <TIM_OC2_SetConfig+0x98>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a17      	ldr	r2, [pc, #92]	; (8005934 <TIM_OC2_SetConfig+0xf0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d113      	bne.n	8005904 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	695b      	ldr	r3, [r3, #20]
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	699b      	ldr	r3, [r3, #24]
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	621a      	str	r2, [r3, #32]
}
 800591e:	bf00      	nop
 8005920:	371c      	adds	r7, #28
 8005922:	46bd      	mov	sp, r7
 8005924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005928:	4770      	bx	lr
 800592a:	bf00      	nop
 800592c:	40012c00 	.word	0x40012c00
 8005930:	40014000 	.word	0x40014000
 8005934:	40014400 	.word	0x40014400

08005938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005938:	b480      	push	{r7}
 800593a:	b087      	sub	sp, #28
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a1b      	ldr	r3, [r3, #32]
 8005946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
 8005952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	685b      	ldr	r3, [r3, #4]
 8005958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	69db      	ldr	r3, [r3, #28]
 800595e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0303 	bic.w	r3, r3, #3
 8005972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	689b      	ldr	r3, [r3, #8]
 800598a:	021b      	lsls	r3, r3, #8
 800598c:	697a      	ldr	r2, [r7, #20]
 800598e:	4313      	orrs	r3, r2
 8005990:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a21      	ldr	r2, [pc, #132]	; (8005a1c <TIM_OC3_SetConfig+0xe4>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d10d      	bne.n	80059b6 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	68db      	ldr	r3, [r3, #12]
 80059a6:	021b      	lsls	r3, r3, #8
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	4313      	orrs	r3, r2
 80059ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a18      	ldr	r2, [pc, #96]	; (8005a1c <TIM_OC3_SetConfig+0xe4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d007      	beq.n	80059ce <TIM_OC3_SetConfig+0x96>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a17      	ldr	r2, [pc, #92]	; (8005a20 <TIM_OC3_SetConfig+0xe8>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d003      	beq.n	80059ce <TIM_OC3_SetConfig+0x96>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a16      	ldr	r2, [pc, #88]	; (8005a24 <TIM_OC3_SetConfig+0xec>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d113      	bne.n	80059f6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80059d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	011b      	lsls	r3, r3, #4
 80059e4:	693a      	ldr	r2, [r7, #16]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	693a      	ldr	r2, [r7, #16]
 80059fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685a      	ldr	r2, [r3, #4]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	621a      	str	r2, [r3, #32]
}
 8005a10:	bf00      	nop
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	40012c00 	.word	0x40012c00
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400

08005a28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b087      	sub	sp, #28
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6a1b      	ldr	r3, [r3, #32]
 8005a42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	69db      	ldr	r3, [r3, #28]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	021b      	lsls	r3, r3, #8
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a76:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	031b      	lsls	r3, r3, #12
 8005a7e:	693a      	ldr	r2, [r7, #16]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	4a14      	ldr	r2, [pc, #80]	; (8005ad8 <TIM_OC4_SetConfig+0xb0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d007      	beq.n	8005a9c <TIM_OC4_SetConfig+0x74>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a13      	ldr	r2, [pc, #76]	; (8005adc <TIM_OC4_SetConfig+0xb4>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_OC4_SetConfig+0x74>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a12      	ldr	r2, [pc, #72]	; (8005ae0 <TIM_OC4_SetConfig+0xb8>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d109      	bne.n	8005ab0 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005aa2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	019b      	lsls	r3, r3, #6
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	685a      	ldr	r2, [r3, #4]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	621a      	str	r2, [r3, #32]
}
 8005aca:	bf00      	nop
 8005acc:	371c      	adds	r7, #28
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	40012c00 	.word	0x40012c00
 8005adc:	40014000 	.word	0x40014000
 8005ae0:	40014400 	.word	0x40014400

08005ae4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae4:	b480      	push	{r7}
 8005ae6:	b087      	sub	sp, #28
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6a1b      	ldr	r3, [r3, #32]
 8005af2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b28:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	041b      	lsls	r3, r3, #16
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	4313      	orrs	r3, r2
 8005b34:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a13      	ldr	r2, [pc, #76]	; (8005b88 <TIM_OC5_SetConfig+0xa4>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <TIM_OC5_SetConfig+0x6a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <TIM_OC5_SetConfig+0xa8>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_OC5_SetConfig+0x6a>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a11      	ldr	r2, [pc, #68]	; (8005b90 <TIM_OC5_SetConfig+0xac>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d109      	bne.n	8005b62 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	021b      	lsls	r3, r3, #8
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	68fa      	ldr	r2, [r7, #12]
 8005b6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	693a      	ldr	r2, [r7, #16]
 8005b7a:	621a      	str	r2, [r3, #32]
}
 8005b7c:	bf00      	nop
 8005b7e:	371c      	adds	r7, #28
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr
 8005b88:	40012c00 	.word	0x40012c00
 8005b8c:	40014000 	.word	0x40014000
 8005b90:	40014400 	.word	0x40014400

08005b94 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b087      	sub	sp, #28
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005bc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	021b      	lsls	r3, r3, #8
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005bda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	051b      	lsls	r3, r3, #20
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	4a14      	ldr	r2, [pc, #80]	; (8005c3c <TIM_OC6_SetConfig+0xa8>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d007      	beq.n	8005c00 <TIM_OC6_SetConfig+0x6c>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	4a13      	ldr	r2, [pc, #76]	; (8005c40 <TIM_OC6_SetConfig+0xac>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d003      	beq.n	8005c00 <TIM_OC6_SetConfig+0x6c>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	4a12      	ldr	r2, [pc, #72]	; (8005c44 <TIM_OC6_SetConfig+0xb0>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d109      	bne.n	8005c14 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	029b      	lsls	r3, r3, #10
 8005c0e:	697a      	ldr	r2, [r7, #20]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	685a      	ldr	r2, [r3, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	693a      	ldr	r2, [r7, #16]
 8005c2c:	621a      	str	r2, [r3, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr
 8005c3a:	bf00      	nop
 8005c3c:	40012c00 	.word	0x40012c00
 8005c40:	40014000 	.word	0x40014000
 8005c44:	40014400 	.word	0x40014400

08005c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	b087      	sub	sp, #28
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	6a1b      	ldr	r3, [r3, #32]
 8005c5e:	f023 0201 	bic.w	r2, r3, #1
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f023 030a 	bic.w	r3, r3, #10
 8005c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	68bb      	ldr	r3, [r7, #8]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	693a      	ldr	r2, [r7, #16]
 8005c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	371c      	adds	r7, #28
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b087      	sub	sp, #28
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0210 	bic.w	r2, r3, #16
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cd0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ce2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	693a      	ldr	r2, [r7, #16]
 8005cea:	4313      	orrs	r3, r2
 8005cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d06:	b480      	push	{r7}
 8005d08:	b085      	sub	sp, #20
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f043 0307 	orr.w	r3, r3, #7
 8005d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	609a      	str	r2, [r3, #8]
}
 8005d30:	bf00      	nop
 8005d32:	3714      	adds	r7, #20
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	607a      	str	r2, [r7, #4]
 8005d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	021a      	lsls	r2, r3, #8
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	431a      	orrs	r2, r3
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	697a      	ldr	r2, [r7, #20]
 8005d66:	4313      	orrs	r3, r2
 8005d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	697a      	ldr	r2, [r7, #20]
 8005d6e:	609a      	str	r2, [r3, #8]
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	f003 031f 	and.w	r3, r3, #31
 8005d8e:	2201      	movs	r2, #1
 8005d90:	fa02 f303 	lsl.w	r3, r2, r3
 8005d94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6a1a      	ldr	r2, [r3, #32]
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	43db      	mvns	r3, r3
 8005d9e:	401a      	ands	r2, r3
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1a      	ldr	r2, [r3, #32]
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f003 031f 	and.w	r3, r3, #31
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	fa01 f303 	lsl.w	r3, r1, r3
 8005db4:	431a      	orrs	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	621a      	str	r2, [r3, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	371c      	adds	r7, #28
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc4:	4770      	bx	lr
	...

08005dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
 8005dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e04f      	b.n	8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2202      	movs	r2, #2
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a21      	ldr	r2, [pc, #132]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d108      	bne.n	8005e1c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e10:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a14      	ldr	r2, [pc, #80]	; (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d009      	beq.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d004      	beq.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a10      	ldr	r2, [pc, #64]	; (8005e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d10c      	bne.n	8005e6e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e5a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2201      	movs	r2, #1
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	40012c00 	.word	0x40012c00
 8005e90:	40014000 	.word	0x40014000

08005e94 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea8:	2b01      	cmp	r3, #1
 8005eaa:	d101      	bne.n	8005eb0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005eac:	2302      	movs	r3, #2
 8005eae:	e060      	b.n	8005f72 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2201      	movs	r2, #1
 8005eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	689b      	ldr	r3, [r3, #8]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	685b      	ldr	r3, [r3, #4]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	041b      	lsls	r3, r3, #16
 8005f26:	4313      	orrs	r3, r2
 8005f28:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a14      	ldr	r2, [pc, #80]	; (8005f80 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d115      	bne.n	8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3e:	051b      	lsls	r3, r3, #20
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	69db      	ldr	r3, [r3, #28]
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	6a1b      	ldr	r3, [r3, #32]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	40012c00 	.word	0x40012c00

08005f84 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e040      	b.n	8006018 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d106      	bne.n	8005fac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f7fb fd5a 	bl	8001a60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2224      	movs	r2, #36	; 0x24
 8005fb0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 0201 	bic.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8c0 	bl	8006148 <UART_SetConfig>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d101      	bne.n	8005fd2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e022      	b.n	8006018 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d002      	beq.n	8005fe0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 fae0 	bl	80065a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	685a      	ldr	r2, [r3, #4]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689a      	ldr	r2, [r3, #8]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ffe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f042 0201 	orr.w	r2, r2, #1
 800600e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 fb67 	bl	80066e4 <UART_CheckIdleState>
 8006016:	4603      	mov	r3, r0
}
 8006018:	4618      	mov	r0, r3
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b08a      	sub	sp, #40	; 0x28
 8006024:	af02      	add	r7, sp, #8
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	603b      	str	r3, [r7, #0]
 800602c:	4613      	mov	r3, r2
 800602e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006034:	2b20      	cmp	r3, #32
 8006036:	f040 8082 	bne.w	800613e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d002      	beq.n	8006046 <HAL_UART_Transmit+0x26>
 8006040:	88fb      	ldrh	r3, [r7, #6]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e07a      	b.n	8006140 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006050:	2b01      	cmp	r3, #1
 8006052:	d101      	bne.n	8006058 <HAL_UART_Transmit+0x38>
 8006054:	2302      	movs	r3, #2
 8006056:	e073      	b.n	8006140 <HAL_UART_Transmit+0x120>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2221      	movs	r2, #33	; 0x21
 800606c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800606e:	f7fb feff 	bl	8001e70 <HAL_GetTick>
 8006072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	88fa      	ldrh	r2, [r7, #6]
 8006078:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	88fa      	ldrh	r2, [r7, #6]
 8006080:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800608c:	d108      	bne.n	80060a0 <HAL_UART_Transmit+0x80>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d104      	bne.n	80060a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	61bb      	str	r3, [r7, #24]
 800609e:	e003      	b.n	80060a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80060b0:	e02d      	b.n	800610e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	9300      	str	r3, [sp, #0]
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2200      	movs	r2, #0
 80060ba:	2180      	movs	r1, #128	; 0x80
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f000 fb5a 	bl	8006776 <UART_WaitOnFlagUntilTimeout>
 80060c2:	4603      	mov	r3, r0
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d001      	beq.n	80060cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e039      	b.n	8006140 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10b      	bne.n	80060ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80060d2:	69bb      	ldr	r3, [r7, #24]
 80060d4:	881a      	ldrh	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060de:	b292      	uxth	r2, r2
 80060e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	3302      	adds	r3, #2
 80060e6:	61bb      	str	r3, [r7, #24]
 80060e8:	e008      	b.n	80060fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ea:	69fb      	ldr	r3, [r7, #28]
 80060ec:	781a      	ldrb	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	b292      	uxth	r2, r2
 80060f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060f6:	69fb      	ldr	r3, [r7, #28]
 80060f8:	3301      	adds	r3, #1
 80060fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b01      	subs	r3, #1
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006114:	b29b      	uxth	r3, r3
 8006116:	2b00      	cmp	r3, #0
 8006118:	d1cb      	bne.n	80060b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	697b      	ldr	r3, [r7, #20]
 8006120:	2200      	movs	r2, #0
 8006122:	2140      	movs	r1, #64	; 0x40
 8006124:	68f8      	ldr	r0, [r7, #12]
 8006126:	f000 fb26 	bl	8006776 <UART_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e005      	b.n	8006140 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2220      	movs	r2, #32
 8006138:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800613a:	2300      	movs	r3, #0
 800613c:	e000      	b.n	8006140 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800613e:	2302      	movs	r3, #2
  }
}
 8006140:	4618      	mov	r0, r3
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}

08006148 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006148:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800614c:	b08a      	sub	sp, #40	; 0x28
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006152:	2300      	movs	r3, #0
 8006154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	689a      	ldr	r2, [r3, #8]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	691b      	ldr	r3, [r3, #16]
 8006160:	431a      	orrs	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	695b      	ldr	r3, [r3, #20]
 8006166:	431a      	orrs	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	69db      	ldr	r3, [r3, #28]
 800616c:	4313      	orrs	r3, r2
 800616e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4bb4      	ldr	r3, [pc, #720]	; (8006448 <UART_SetConfig+0x300>)
 8006178:	4013      	ands	r3, r2
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	6812      	ldr	r2, [r2, #0]
 800617e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006180:	430b      	orrs	r3, r1
 8006182:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	68da      	ldr	r2, [r3, #12]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	699b      	ldr	r3, [r3, #24]
 800619e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4aa9      	ldr	r2, [pc, #676]	; (800644c <UART_SetConfig+0x304>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b0:	4313      	orrs	r3, r2
 80061b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c4:	430a      	orrs	r2, r1
 80061c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4aa0      	ldr	r2, [pc, #640]	; (8006450 <UART_SetConfig+0x308>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d126      	bne.n	8006220 <UART_SetConfig+0xd8>
 80061d2:	4ba0      	ldr	r3, [pc, #640]	; (8006454 <UART_SetConfig+0x30c>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	2b03      	cmp	r3, #3
 80061de:	d81b      	bhi.n	8006218 <UART_SetConfig+0xd0>
 80061e0:	a201      	add	r2, pc, #4	; (adr r2, 80061e8 <UART_SetConfig+0xa0>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	080061f9 	.word	0x080061f9
 80061ec:	08006209 	.word	0x08006209
 80061f0:	08006201 	.word	0x08006201
 80061f4:	08006211 	.word	0x08006211
 80061f8:	2301      	movs	r3, #1
 80061fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80061fe:	e080      	b.n	8006302 <UART_SetConfig+0x1ba>
 8006200:	2302      	movs	r3, #2
 8006202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006206:	e07c      	b.n	8006302 <UART_SetConfig+0x1ba>
 8006208:	2304      	movs	r3, #4
 800620a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800620e:	e078      	b.n	8006302 <UART_SetConfig+0x1ba>
 8006210:	2308      	movs	r3, #8
 8006212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006216:	e074      	b.n	8006302 <UART_SetConfig+0x1ba>
 8006218:	2310      	movs	r3, #16
 800621a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800621e:	e070      	b.n	8006302 <UART_SetConfig+0x1ba>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a8c      	ldr	r2, [pc, #560]	; (8006458 <UART_SetConfig+0x310>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d138      	bne.n	800629c <UART_SetConfig+0x154>
 800622a:	4b8a      	ldr	r3, [pc, #552]	; (8006454 <UART_SetConfig+0x30c>)
 800622c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006230:	f003 030c 	and.w	r3, r3, #12
 8006234:	2b0c      	cmp	r3, #12
 8006236:	d82d      	bhi.n	8006294 <UART_SetConfig+0x14c>
 8006238:	a201      	add	r2, pc, #4	; (adr r2, 8006240 <UART_SetConfig+0xf8>)
 800623a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800623e:	bf00      	nop
 8006240:	08006275 	.word	0x08006275
 8006244:	08006295 	.word	0x08006295
 8006248:	08006295 	.word	0x08006295
 800624c:	08006295 	.word	0x08006295
 8006250:	08006285 	.word	0x08006285
 8006254:	08006295 	.word	0x08006295
 8006258:	08006295 	.word	0x08006295
 800625c:	08006295 	.word	0x08006295
 8006260:	0800627d 	.word	0x0800627d
 8006264:	08006295 	.word	0x08006295
 8006268:	08006295 	.word	0x08006295
 800626c:	08006295 	.word	0x08006295
 8006270:	0800628d 	.word	0x0800628d
 8006274:	2300      	movs	r3, #0
 8006276:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800627a:	e042      	b.n	8006302 <UART_SetConfig+0x1ba>
 800627c:	2302      	movs	r3, #2
 800627e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006282:	e03e      	b.n	8006302 <UART_SetConfig+0x1ba>
 8006284:	2304      	movs	r3, #4
 8006286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800628a:	e03a      	b.n	8006302 <UART_SetConfig+0x1ba>
 800628c:	2308      	movs	r3, #8
 800628e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006292:	e036      	b.n	8006302 <UART_SetConfig+0x1ba>
 8006294:	2310      	movs	r3, #16
 8006296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800629a:	e032      	b.n	8006302 <UART_SetConfig+0x1ba>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a6a      	ldr	r2, [pc, #424]	; (800644c <UART_SetConfig+0x304>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d12a      	bne.n	80062fc <UART_SetConfig+0x1b4>
 80062a6:	4b6b      	ldr	r3, [pc, #428]	; (8006454 <UART_SetConfig+0x30c>)
 80062a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062b4:	d01a      	beq.n	80062ec <UART_SetConfig+0x1a4>
 80062b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062ba:	d81b      	bhi.n	80062f4 <UART_SetConfig+0x1ac>
 80062bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c0:	d00c      	beq.n	80062dc <UART_SetConfig+0x194>
 80062c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062c6:	d815      	bhi.n	80062f4 <UART_SetConfig+0x1ac>
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d003      	beq.n	80062d4 <UART_SetConfig+0x18c>
 80062cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062d0:	d008      	beq.n	80062e4 <UART_SetConfig+0x19c>
 80062d2:	e00f      	b.n	80062f4 <UART_SetConfig+0x1ac>
 80062d4:	2300      	movs	r3, #0
 80062d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062da:	e012      	b.n	8006302 <UART_SetConfig+0x1ba>
 80062dc:	2302      	movs	r3, #2
 80062de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062e2:	e00e      	b.n	8006302 <UART_SetConfig+0x1ba>
 80062e4:	2304      	movs	r3, #4
 80062e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062ea:	e00a      	b.n	8006302 <UART_SetConfig+0x1ba>
 80062ec:	2308      	movs	r3, #8
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062f2:	e006      	b.n	8006302 <UART_SetConfig+0x1ba>
 80062f4:	2310      	movs	r3, #16
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062fa:	e002      	b.n	8006302 <UART_SetConfig+0x1ba>
 80062fc:	2310      	movs	r3, #16
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a51      	ldr	r2, [pc, #324]	; (800644c <UART_SetConfig+0x304>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d17a      	bne.n	8006402 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800630c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006310:	2b08      	cmp	r3, #8
 8006312:	d824      	bhi.n	800635e <UART_SetConfig+0x216>
 8006314:	a201      	add	r2, pc, #4	; (adr r2, 800631c <UART_SetConfig+0x1d4>)
 8006316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631a:	bf00      	nop
 800631c:	08006341 	.word	0x08006341
 8006320:	0800635f 	.word	0x0800635f
 8006324:	08006349 	.word	0x08006349
 8006328:	0800635f 	.word	0x0800635f
 800632c:	0800634f 	.word	0x0800634f
 8006330:	0800635f 	.word	0x0800635f
 8006334:	0800635f 	.word	0x0800635f
 8006338:	0800635f 	.word	0x0800635f
 800633c:	08006357 	.word	0x08006357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006340:	f7fd f8b2 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8006344:	61f8      	str	r0, [r7, #28]
        break;
 8006346:	e010      	b.n	800636a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006348:	4b44      	ldr	r3, [pc, #272]	; (800645c <UART_SetConfig+0x314>)
 800634a:	61fb      	str	r3, [r7, #28]
        break;
 800634c:	e00d      	b.n	800636a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800634e:	f7fd f813 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8006352:	61f8      	str	r0, [r7, #28]
        break;
 8006354:	e009      	b.n	800636a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635a:	61fb      	str	r3, [r7, #28]
        break;
 800635c:	e005      	b.n	800636a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006368:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 8107 	beq.w	8006580 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	4613      	mov	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4413      	add	r3, r2
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	429a      	cmp	r2, r3
 8006380:	d305      	bcc.n	800638e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	429a      	cmp	r2, r3
 800638c:	d903      	bls.n	8006396 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006394:	e0f4      	b.n	8006580 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006396:	69fb      	ldr	r3, [r7, #28]
 8006398:	2200      	movs	r2, #0
 800639a:	461c      	mov	r4, r3
 800639c:	4615      	mov	r5, r2
 800639e:	f04f 0200 	mov.w	r2, #0
 80063a2:	f04f 0300 	mov.w	r3, #0
 80063a6:	022b      	lsls	r3, r5, #8
 80063a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80063ac:	0222      	lsls	r2, r4, #8
 80063ae:	68f9      	ldr	r1, [r7, #12]
 80063b0:	6849      	ldr	r1, [r1, #4]
 80063b2:	0849      	lsrs	r1, r1, #1
 80063b4:	2000      	movs	r0, #0
 80063b6:	4688      	mov	r8, r1
 80063b8:	4681      	mov	r9, r0
 80063ba:	eb12 0a08 	adds.w	sl, r2, r8
 80063be:	eb43 0b09 	adc.w	fp, r3, r9
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	603b      	str	r3, [r7, #0]
 80063ca:	607a      	str	r2, [r7, #4]
 80063cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063d0:	4650      	mov	r0, sl
 80063d2:	4659      	mov	r1, fp
 80063d4:	f7fa fc58 	bl	8000c88 <__aeabi_uldivmod>
 80063d8:	4602      	mov	r2, r0
 80063da:	460b      	mov	r3, r1
 80063dc:	4613      	mov	r3, r2
 80063de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80063e6:	d308      	bcc.n	80063fa <UART_SetConfig+0x2b2>
 80063e8:	69bb      	ldr	r3, [r7, #24]
 80063ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063ee:	d204      	bcs.n	80063fa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	69ba      	ldr	r2, [r7, #24]
 80063f6:	60da      	str	r2, [r3, #12]
 80063f8:	e0c2      	b.n	8006580 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006400:	e0be      	b.n	8006580 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640a:	d16a      	bne.n	80064e2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800640c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006410:	2b08      	cmp	r3, #8
 8006412:	d834      	bhi.n	800647e <UART_SetConfig+0x336>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x2d4>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006441 	.word	0x08006441
 8006420:	08006461 	.word	0x08006461
 8006424:	08006469 	.word	0x08006469
 8006428:	0800647f 	.word	0x0800647f
 800642c:	0800646f 	.word	0x0800646f
 8006430:	0800647f 	.word	0x0800647f
 8006434:	0800647f 	.word	0x0800647f
 8006438:	0800647f 	.word	0x0800647f
 800643c:	08006477 	.word	0x08006477
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006440:	f7fd f832 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8006444:	61f8      	str	r0, [r7, #28]
        break;
 8006446:	e020      	b.n	800648a <UART_SetConfig+0x342>
 8006448:	efff69f3 	.word	0xefff69f3
 800644c:	40008000 	.word	0x40008000
 8006450:	40013800 	.word	0x40013800
 8006454:	40021000 	.word	0x40021000
 8006458:	40004400 	.word	0x40004400
 800645c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006460:	f7fd f838 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8006464:	61f8      	str	r0, [r7, #28]
        break;
 8006466:	e010      	b.n	800648a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006468:	4b4c      	ldr	r3, [pc, #304]	; (800659c <UART_SetConfig+0x454>)
 800646a:	61fb      	str	r3, [r7, #28]
        break;
 800646c:	e00d      	b.n	800648a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800646e:	f7fc ff83 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 8006472:	61f8      	str	r0, [r7, #28]
        break;
 8006474:	e009      	b.n	800648a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006476:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800647a:	61fb      	str	r3, [r7, #28]
        break;
 800647c:	e005      	b.n	800648a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800647e:	2300      	movs	r3, #0
 8006480:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006488:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d077      	beq.n	8006580 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006490:	69fb      	ldr	r3, [r7, #28]
 8006492:	005a      	lsls	r2, r3, #1
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	085b      	lsrs	r3, r3, #1
 800649a:	441a      	add	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a6:	69bb      	ldr	r3, [r7, #24]
 80064a8:	2b0f      	cmp	r3, #15
 80064aa:	d916      	bls.n	80064da <UART_SetConfig+0x392>
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b2:	d212      	bcs.n	80064da <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	f023 030f 	bic.w	r3, r3, #15
 80064bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	085b      	lsrs	r3, r3, #1
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	f003 0307 	and.w	r3, r3, #7
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	8afb      	ldrh	r3, [r7, #22]
 80064cc:	4313      	orrs	r3, r2
 80064ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	8afa      	ldrh	r2, [r7, #22]
 80064d6:	60da      	str	r2, [r3, #12]
 80064d8:	e052      	b.n	8006580 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80064e0:	e04e      	b.n	8006580 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80064e6:	2b08      	cmp	r3, #8
 80064e8:	d827      	bhi.n	800653a <UART_SetConfig+0x3f2>
 80064ea:	a201      	add	r2, pc, #4	; (adr r2, 80064f0 <UART_SetConfig+0x3a8>)
 80064ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064f0:	08006515 	.word	0x08006515
 80064f4:	0800651d 	.word	0x0800651d
 80064f8:	08006525 	.word	0x08006525
 80064fc:	0800653b 	.word	0x0800653b
 8006500:	0800652b 	.word	0x0800652b
 8006504:	0800653b 	.word	0x0800653b
 8006508:	0800653b 	.word	0x0800653b
 800650c:	0800653b 	.word	0x0800653b
 8006510:	08006533 	.word	0x08006533
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006514:	f7fc ffc8 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8006518:	61f8      	str	r0, [r7, #28]
        break;
 800651a:	e014      	b.n	8006546 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800651c:	f7fc ffda 	bl	80034d4 <HAL_RCC_GetPCLK2Freq>
 8006520:	61f8      	str	r0, [r7, #28]
        break;
 8006522:	e010      	b.n	8006546 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006524:	4b1d      	ldr	r3, [pc, #116]	; (800659c <UART_SetConfig+0x454>)
 8006526:	61fb      	str	r3, [r7, #28]
        break;
 8006528:	e00d      	b.n	8006546 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800652a:	f7fc ff25 	bl	8003378 <HAL_RCC_GetSysClockFreq>
 800652e:	61f8      	str	r0, [r7, #28]
        break;
 8006530:	e009      	b.n	8006546 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006532:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006536:	61fb      	str	r3, [r7, #28]
        break;
 8006538:	e005      	b.n	8006546 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006544:	bf00      	nop
    }

    if (pclk != 0U)
 8006546:	69fb      	ldr	r3, [r7, #28]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d019      	beq.n	8006580 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	085a      	lsrs	r2, r3, #1
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	441a      	add	r2, r3
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	fbb2 f3f3 	udiv	r3, r2, r3
 800655e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	2b0f      	cmp	r3, #15
 8006564:	d909      	bls.n	800657a <UART_SetConfig+0x432>
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656c:	d205      	bcs.n	800657a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800656e:	69bb      	ldr	r3, [r7, #24]
 8006570:	b29a      	uxth	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60da      	str	r2, [r3, #12]
 8006578:	e002      	b.n	8006580 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800658c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006590:	4618      	mov	r0, r3
 8006592:	3728      	adds	r7, #40	; 0x28
 8006594:	46bd      	mov	sp, r7
 8006596:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800659a:	bf00      	nop
 800659c:	00f42400 	.word	0x00f42400

080065a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	685b      	ldr	r3, [r3, #4]
 80065ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ce:	f003 0302 	and.w	r3, r3, #2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d00a      	beq.n	800660e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006612:	f003 0308 	and.w	r3, r3, #8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d00a      	beq.n	8006630 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	430a      	orrs	r2, r1
 800662e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006634:	f003 0310 	and.w	r3, r3, #16
 8006638:	2b00      	cmp	r3, #0
 800663a:	d00a      	beq.n	8006652 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00a      	beq.n	8006674 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	430a      	orrs	r2, r1
 8006672:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800667c:	2b00      	cmp	r3, #0
 800667e:	d01a      	beq.n	80066b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685b      	ldr	r3, [r3, #4]
 8006686:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800669a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800669e:	d10a      	bne.n	80066b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	430a      	orrs	r2, r1
 80066b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	430a      	orrs	r2, r1
 80066d6:	605a      	str	r2, [r3, #4]
  }
}
 80066d8:	bf00      	nop
 80066da:	370c      	adds	r7, #12
 80066dc:	46bd      	mov	sp, r7
 80066de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e2:	4770      	bx	lr

080066e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b086      	sub	sp, #24
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066f4:	f7fb fbbc 	bl	8001e70 <HAL_GetTick>
 80066f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0308 	and.w	r3, r3, #8
 8006704:	2b08      	cmp	r3, #8
 8006706:	d10e      	bne.n	8006726 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f82d 	bl	8006776 <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e023      	b.n	800676e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f003 0304 	and.w	r3, r3, #4
 8006730:	2b04      	cmp	r3, #4
 8006732:	d10e      	bne.n	8006752 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006734:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006738:	9300      	str	r3, [sp, #0]
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2200      	movs	r2, #0
 800673e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f000 f817 	bl	8006776 <UART_WaitOnFlagUntilTimeout>
 8006748:	4603      	mov	r3, r0
 800674a:	2b00      	cmp	r3, #0
 800674c:	d001      	beq.n	8006752 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800674e:	2303      	movs	r3, #3
 8006750:	e00d      	b.n	800676e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2220      	movs	r2, #32
 8006756:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2220      	movs	r2, #32
 800675c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800676c:	2300      	movs	r3, #0
}
 800676e:	4618      	mov	r0, r3
 8006770:	3710      	adds	r7, #16
 8006772:	46bd      	mov	sp, r7
 8006774:	bd80      	pop	{r7, pc}

08006776 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006776:	b580      	push	{r7, lr}
 8006778:	b09c      	sub	sp, #112	; 0x70
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	603b      	str	r3, [r7, #0]
 8006782:	4613      	mov	r3, r2
 8006784:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006786:	e0a5      	b.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006788:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800678a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800678e:	f000 80a1 	beq.w	80068d4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006792:	f7fb fb6d 	bl	8001e70 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x32>
 80067a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d13e      	bne.n	8006826 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067b0:	e853 3f00 	ldrex	r3, [r3]
 80067b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067b8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067bc:	667b      	str	r3, [r7, #100]	; 0x64
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067c8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e6      	bne.n	80067a8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067ec:	f023 0301 	bic.w	r3, r3, #1
 80067f0:	663b      	str	r3, [r7, #96]	; 0x60
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	3308      	adds	r3, #8
 80067f8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80067fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006800:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006802:	e841 2300 	strex	r3, r2, [r1]
 8006806:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e5      	bne.n	80067da <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	2220      	movs	r2, #32
 8006818:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e067      	b.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b00      	cmp	r3, #0
 8006832:	d04f      	beq.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800683e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006842:	d147      	bne.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800684c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006862:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	461a      	mov	r2, r3
 800686a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800686c:	637b      	str	r3, [r7, #52]	; 0x34
 800686e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006870:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006874:	e841 2300 	strex	r3, r2, [r1]
 8006878:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800687a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800687c:	2b00      	cmp	r3, #0
 800687e:	d1e6      	bne.n	800684e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	3308      	adds	r3, #8
 8006886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	e853 3f00 	ldrex	r3, [r3]
 800688e:	613b      	str	r3, [r7, #16]
   return(result);
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f023 0301 	bic.w	r3, r3, #1
 8006896:	66bb      	str	r3, [r7, #104]	; 0x68
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3308      	adds	r3, #8
 800689e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068a0:	623a      	str	r2, [r7, #32]
 80068a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a4:	69f9      	ldr	r1, [r7, #28]
 80068a6:	6a3a      	ldr	r2, [r7, #32]
 80068a8:	e841 2300 	strex	r3, r2, [r1]
 80068ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1e5      	bne.n	8006880 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2220      	movs	r2, #32
 80068b8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2220      	movs	r2, #32
 80068be:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2220      	movs	r2, #32
 80068c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e010      	b.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	69da      	ldr	r2, [r3, #28]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	4013      	ands	r3, r2
 80068de:	68ba      	ldr	r2, [r7, #8]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	bf0c      	ite	eq
 80068e4:	2301      	moveq	r3, #1
 80068e6:	2300      	movne	r3, #0
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	461a      	mov	r2, r3
 80068ec:	79fb      	ldrb	r3, [r7, #7]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	f43f af4a 	beq.w	8006788 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3770      	adds	r7, #112	; 0x70
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <PMW3901_RegWrite>:

PMW3901_Descriptor_t *Descriptor; // Initialise notre port SPI


PMW3901_Status_t PMW3901_RegWrite(uint8_t reg, uint8_t val) // Méthode permettant d'écrire dans des registres en SPI
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	460a      	mov	r2, r1
 800690a:	71fb      	strb	r3, [r7, #7]
 800690c:	4613      	mov	r3, r2
 800690e:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef SPI_status;

	reg |= 0x80;
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006916:	71fb      	strb	r3, [r7, #7]
	uint8_t send[2]={reg,val};
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	733b      	strb	r3, [r7, #12]
 800691c:	79bb      	ldrb	r3, [r7, #6]
 800691e:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8006920:	4b14      	ldr	r3, [pc, #80]	; (8006974 <PMW3901_RegWrite+0x74>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6858      	ldr	r0, [r3, #4]
 8006926:	4b13      	ldr	r3, [pc, #76]	; (8006974 <PMW3901_RegWrite+0x74>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	891b      	ldrh	r3, [r3, #8]
 800692c:	2200      	movs	r2, #0
 800692e:	4619      	mov	r1, r3
 8006930:	f7fb ff82 	bl	8002838 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, send, 2, 1000);
 8006934:	4b0f      	ldr	r3, [pc, #60]	; (8006974 <PMW3901_RegWrite+0x74>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	6818      	ldr	r0, [r3, #0]
 800693a:	f107 010c 	add.w	r1, r7, #12
 800693e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006942:	2202      	movs	r2, #2
 8006944:	f7fd f9d7 	bl	8003cf6 <HAL_SPI_Transmit>
 8006948:	4603      	mov	r3, r0
 800694a:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <PMW3901_RegWrite+0x56>
 8006952:	2302      	movs	r3, #2
 8006954:	e00a      	b.n	800696c <PMW3901_RegWrite+0x6c>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 8006956:	4b07      	ldr	r3, [pc, #28]	; (8006974 <PMW3901_RegWrite+0x74>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	6858      	ldr	r0, [r3, #4]
 800695c:	4b05      	ldr	r3, [pc, #20]	; (8006974 <PMW3901_RegWrite+0x74>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	891b      	ldrh	r3, [r3, #8]
 8006962:	2201      	movs	r2, #1
 8006964:	4619      	mov	r1, r3
 8006966:	f7fb ff67 	bl	8002838 <HAL_GPIO_WritePin>

	return PMW3901_SUCCESS;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3710      	adds	r7, #16
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}
 8006974:	200007a4 	.word	0x200007a4

08006978 <PMW3901_RegRead>:

PMW3901_Status_t PMW3901_RegRead(uint8_t reg, uint8_t *dest) // Méthode permettant de lire des registres en SPI
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
 800697e:	4603      	mov	r3, r0
 8006980:	6039      	str	r1, [r7, #0]
 8006982:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef SPI_status;

	uint8_t value;

	reg &= ~0x80;
 8006984:	79fb      	ldrb	r3, [r7, #7]
 8006986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698a:	b2db      	uxtb	r3, r3
 800698c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 800698e:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <PMW3901_RegRead+0x90>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6858      	ldr	r0, [r3, #4]
 8006994:	4b1c      	ldr	r3, [pc, #112]	; (8006a08 <PMW3901_RegRead+0x90>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	891b      	ldrh	r3, [r3, #8]
 800699a:	2200      	movs	r2, #0
 800699c:	4619      	mov	r1, r3
 800699e:	f7fb ff4b 	bl	8002838 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, &reg, 1, 1000);
 80069a2:	4b19      	ldr	r3, [pc, #100]	; (8006a08 <PMW3901_RegRead+0x90>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	6818      	ldr	r0, [r3, #0]
 80069a8:	1df9      	adds	r1, r7, #7
 80069aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ae:	2201      	movs	r2, #1
 80069b0:	f7fd f9a1 	bl	8003cf6 <HAL_SPI_Transmit>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <PMW3901_RegRead+0x4a>
 80069be:	2302      	movs	r3, #2
 80069c0:	e01e      	b.n	8006a00 <PMW3901_RegRead+0x88>

	SPI_status = HAL_SPI_Receive(HSPI, &value, 1, 1000);
 80069c2:	4b11      	ldr	r3, [pc, #68]	; (8006a08 <PMW3901_RegRead+0x90>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	6818      	ldr	r0, [r3, #0]
 80069c8:	f107 010e 	add.w	r1, r7, #14
 80069cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069d0:	2201      	movs	r2, #1
 80069d2:	f7fd fafe 	bl	8003fd2 <HAL_SPI_Receive>
 80069d6:	4603      	mov	r3, r0
 80069d8:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <PMW3901_RegRead+0x6c>
 80069e0:	2302      	movs	r3, #2
 80069e2:	e00d      	b.n	8006a00 <PMW3901_RegRead+0x88>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80069e4:	4b08      	ldr	r3, [pc, #32]	; (8006a08 <PMW3901_RegRead+0x90>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	6858      	ldr	r0, [r3, #4]
 80069ea:	4b07      	ldr	r3, [pc, #28]	; (8006a08 <PMW3901_RegRead+0x90>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	891b      	ldrh	r3, [r3, #8]
 80069f0:	2201      	movs	r2, #1
 80069f2:	4619      	mov	r1, r3
 80069f4:	f7fb ff20 	bl	8002838 <HAL_GPIO_WritePin>

	*dest = value;
 80069f8:	7bba      	ldrb	r2, [r7, #14]
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	701a      	strb	r2, [r3, #0]

	return PMW3901_SUCCESS;
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	200007a4 	.word	0x200007a4

08006a0c <PMW3901_SetLed>:

PMW3901_Status_t PMW3901_SetLed() // Fonction permettant d'allumer les leds du capteurs
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b082      	sub	sp, #8
 8006a10:	af00      	add	r7, sp, #0
	PMW3901_Status_t status;

	status = PMW3901_RegWrite(0x7f, 0x14);
 8006a12:	2114      	movs	r1, #20
 8006a14:	207f      	movs	r0, #127	; 0x7f
 8006a16:	f7ff ff73 	bl	8006900 <PMW3901_RegWrite>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 8006a1e:	79fb      	ldrb	r3, [r7, #7]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d001      	beq.n	8006a28 <PMW3901_SetLed+0x1c>
 8006a24:	79fb      	ldrb	r3, [r7, #7]
 8006a26:	e011      	b.n	8006a4c <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x6f, 0x1c);
 8006a28:	211c      	movs	r1, #28
 8006a2a:	206f      	movs	r0, #111	; 0x6f
 8006a2c:	f7ff ff68 	bl	8006900 <PMW3901_RegWrite>
 8006a30:	4603      	mov	r3, r0
 8006a32:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <PMW3901_SetLed+0x32>
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	e006      	b.n	8006a4c <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x7f, 0x00);
 8006a3e:	2100      	movs	r1, #0
 8006a40:	207f      	movs	r0, #127	; 0x7f
 8006a42:	f7ff ff5d 	bl	8006900 <PMW3901_RegWrite>
 8006a46:	4603      	mov	r3, r0
 8006a48:	71fb      	strb	r3, [r7, #7]
	return status;
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <PMW3901_Init>:

PMW3901_Status_t PMW3901_Init(PMW3901_Descriptor_t *_Descriptor) // Permet d'initialiser le capteur
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
	PMW3901_Status_t status;

	uint8_t Product_ID;
	uint8_t Inverse_Product_ID;

	Descriptor = _Descriptor;
 8006a5c:	4aad      	ldr	r2, [pc, #692]	; (8006d14 <PMW3901_Init+0x2c0>)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6013      	str	r3, [r2, #0]

	status = PMW3901_RegRead(0x00, &Product_ID);
 8006a62:	f107 030e 	add.w	r3, r7, #14
 8006a66:	4619      	mov	r1, r3
 8006a68:	2000      	movs	r0, #0
 8006a6a:	f7ff ff85 	bl	8006978 <PMW3901_RegRead>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d001      	beq.n	8006a7c <PMW3901_Init+0x28>
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
 8006a7a:	e34c      	b.n	8007116 <PMW3901_Init+0x6c2>

	if(Product_ID != PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 8006a7c:	7bbb      	ldrb	r3, [r7, #14]
 8006a7e:	2b49      	cmp	r3, #73	; 0x49
 8006a80:	d001      	beq.n	8006a86 <PMW3901_Init+0x32>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e347      	b.n	8007116 <PMW3901_Init+0x6c2>

	status = PMW3901_RegRead(0x5F, &Inverse_Product_ID);
 8006a86:	f107 030d 	add.w	r3, r7, #13
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	205f      	movs	r0, #95	; 0x5f
 8006a8e:	f7ff ff73 	bl	8006978 <PMW3901_RegRead>
 8006a92:	4603      	mov	r3, r0
 8006a94:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8006a96:	7bfb      	ldrb	r3, [r7, #15]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d001      	beq.n	8006aa0 <PMW3901_Init+0x4c>
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	e33a      	b.n	8007116 <PMW3901_Init+0x6c2>

	if(Inverse_Product_ID != INVERSE_PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 8006aa0:	7b7b      	ldrb	r3, [r7, #13]
 8006aa2:	2bb6      	cmp	r3, #182	; 0xb6
 8006aa4:	d001      	beq.n	8006aaa <PMW3901_Init+0x56>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	e335      	b.n	8007116 <PMW3901_Init+0x6c2>

	// Tout ça permet initialiser certains registres du capteur apparaissant dans la datasheet (on se sait pas à quoi ça correspond)
	status = PMW3901_RegWrite(0x3A, 0x00); if(status) return status; // Les if et return permettent de renvoyer un status afin de savoir si tout se passe bien, si status = 0 => tout est bon, si status = 1 => quelque chose fonctionne mal
 8006aaa:	2100      	movs	r1, #0
 8006aac:	203a      	movs	r0, #58	; 0x3a
 8006aae:	f7ff ff27 	bl	8006900 <PMW3901_RegWrite>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	73fb      	strb	r3, [r7, #15]
 8006ab6:	7bfb      	ldrb	r3, [r7, #15]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d001      	beq.n	8006ac0 <PMW3901_Init+0x6c>
 8006abc:	7bfb      	ldrb	r3, [r7, #15]
 8006abe:	e32a      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	207f      	movs	r0, #127	; 0x7f
 8006ac4:	f7ff ff1c 	bl	8006900 <PMW3901_RegWrite>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	73fb      	strb	r3, [r7, #15]
 8006acc:	7bfb      	ldrb	r3, [r7, #15]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d001      	beq.n	8006ad6 <PMW3901_Init+0x82>
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	e31f      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0xAD); if(status) return status;
 8006ad6:	21ad      	movs	r1, #173	; 0xad
 8006ad8:	2061      	movs	r0, #97	; 0x61
 8006ada:	f7ff ff11 	bl	8006900 <PMW3901_RegWrite>
 8006ade:	4603      	mov	r3, r0
 8006ae0:	73fb      	strb	r3, [r7, #15]
 8006ae2:	7bfb      	ldrb	r3, [r7, #15]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <PMW3901_Init+0x98>
 8006ae8:	7bfb      	ldrb	r3, [r7, #15]
 8006aea:	e314      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x03); if(status) return status;
 8006aec:	2103      	movs	r1, #3
 8006aee:	207f      	movs	r0, #127	; 0x7f
 8006af0:	f7ff ff06 	bl	8006900 <PMW3901_RegWrite>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d001      	beq.n	8006b02 <PMW3901_Init+0xae>
 8006afe:	7bfb      	ldrb	r3, [r7, #15]
 8006b00:	e309      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x00); if(status) return status;
 8006b02:	2100      	movs	r1, #0
 8006b04:	2040      	movs	r0, #64	; 0x40
 8006b06:	f7ff fefb 	bl	8006900 <PMW3901_RegWrite>
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
 8006b0e:	7bfb      	ldrb	r3, [r7, #15]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d001      	beq.n	8006b18 <PMW3901_Init+0xc4>
 8006b14:	7bfb      	ldrb	r3, [r7, #15]
 8006b16:	e2fe      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x05); if(status) return status;
 8006b18:	2105      	movs	r1, #5
 8006b1a:	207f      	movs	r0, #127	; 0x7f
 8006b1c:	f7ff fef0 	bl	8006900 <PMW3901_RegWrite>
 8006b20:	4603      	mov	r3, r0
 8006b22:	73fb      	strb	r3, [r7, #15]
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d001      	beq.n	8006b2e <PMW3901_Init+0xda>
 8006b2a:	7bfb      	ldrb	r3, [r7, #15]
 8006b2c:	e2f3      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0xB3); if(status) return status;
 8006b2e:	21b3      	movs	r1, #179	; 0xb3
 8006b30:	2041      	movs	r0, #65	; 0x41
 8006b32:	f7ff fee5 	bl	8006900 <PMW3901_RegWrite>
 8006b36:	4603      	mov	r3, r0
 8006b38:	73fb      	strb	r3, [r7, #15]
 8006b3a:	7bfb      	ldrb	r3, [r7, #15]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d001      	beq.n	8006b44 <PMW3901_Init+0xf0>
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	e2e8      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0xF1); if(status) return status;
 8006b44:	21f1      	movs	r1, #241	; 0xf1
 8006b46:	2043      	movs	r0, #67	; 0x43
 8006b48:	f7ff feda 	bl	8006900 <PMW3901_RegWrite>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	73fb      	strb	r3, [r7, #15]
 8006b50:	7bfb      	ldrb	r3, [r7, #15]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <PMW3901_Init+0x106>
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	e2dd      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x14); if(status) return status;
 8006b5a:	2114      	movs	r1, #20
 8006b5c:	2045      	movs	r0, #69	; 0x45
 8006b5e:	f7ff fecf 	bl	8006900 <PMW3901_RegWrite>
 8006b62:	4603      	mov	r3, r0
 8006b64:	73fb      	strb	r3, [r7, #15]
 8006b66:	7bfb      	ldrb	r3, [r7, #15]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d001      	beq.n	8006b70 <PMW3901_Init+0x11c>
 8006b6c:	7bfb      	ldrb	r3, [r7, #15]
 8006b6e:	e2d2      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x32); if(status) return status;
 8006b70:	2132      	movs	r1, #50	; 0x32
 8006b72:	205b      	movs	r0, #91	; 0x5b
 8006b74:	f7ff fec4 	bl	8006900 <PMW3901_RegWrite>
 8006b78:	4603      	mov	r3, r0
 8006b7a:	73fb      	strb	r3, [r7, #15]
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d001      	beq.n	8006b86 <PMW3901_Init+0x132>
 8006b82:	7bfb      	ldrb	r3, [r7, #15]
 8006b84:	e2c7      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x34); if(status) return status;
 8006b86:	2134      	movs	r1, #52	; 0x34
 8006b88:	205f      	movs	r0, #95	; 0x5f
 8006b8a:	f7ff feb9 	bl	8006900 <PMW3901_RegWrite>
 8006b8e:	4603      	mov	r3, r0
 8006b90:	73fb      	strb	r3, [r7, #15]
 8006b92:	7bfb      	ldrb	r3, [r7, #15]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <PMW3901_Init+0x148>
 8006b98:	7bfb      	ldrb	r3, [r7, #15]
 8006b9a:	e2bc      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7B, 0x08); if(status) return status;
 8006b9c:	2108      	movs	r1, #8
 8006b9e:	207b      	movs	r0, #123	; 0x7b
 8006ba0:	f7ff feae 	bl	8006900 <PMW3901_RegWrite>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	73fb      	strb	r3, [r7, #15]
 8006ba8:	7bfb      	ldrb	r3, [r7, #15]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d001      	beq.n	8006bb2 <PMW3901_Init+0x15e>
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	e2b1      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 8006bb2:	2106      	movs	r1, #6
 8006bb4:	207f      	movs	r0, #127	; 0x7f
 8006bb6:	f7ff fea3 	bl	8006900 <PMW3901_RegWrite>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	73fb      	strb	r3, [r7, #15]
 8006bbe:	7bfb      	ldrb	r3, [r7, #15]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <PMW3901_Init+0x174>
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	e2a6      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x1B); if(status) return status;
 8006bc8:	211b      	movs	r1, #27
 8006bca:	2044      	movs	r0, #68	; 0x44
 8006bcc:	f7ff fe98 	bl	8006900 <PMW3901_RegWrite>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d001      	beq.n	8006bde <PMW3901_Init+0x18a>
 8006bda:	7bfb      	ldrb	r3, [r7, #15]
 8006bdc:	e29b      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0xBF); if(status) return status;
 8006bde:	21bf      	movs	r1, #191	; 0xbf
 8006be0:	2040      	movs	r0, #64	; 0x40
 8006be2:	f7ff fe8d 	bl	8006900 <PMW3901_RegWrite>
 8006be6:	4603      	mov	r3, r0
 8006be8:	73fb      	strb	r3, [r7, #15]
 8006bea:	7bfb      	ldrb	r3, [r7, #15]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <PMW3901_Init+0x1a0>
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	e290      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0x3F); if(status) return status;
 8006bf4:	213f      	movs	r1, #63	; 0x3f
 8006bf6:	204e      	movs	r0, #78	; 0x4e
 8006bf8:	f7ff fe82 	bl	8006900 <PMW3901_RegWrite>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	73fb      	strb	r3, [r7, #15]
 8006c00:	7bfb      	ldrb	r3, [r7, #15]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <PMW3901_Init+0x1b6>
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	e285      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x08); if(status) return status;
 8006c0a:	2108      	movs	r1, #8
 8006c0c:	207f      	movs	r0, #127	; 0x7f
 8006c0e:	f7ff fe77 	bl	8006900 <PMW3901_RegWrite>
 8006c12:	4603      	mov	r3, r0
 8006c14:	73fb      	strb	r3, [r7, #15]
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <PMW3901_Init+0x1cc>
 8006c1c:	7bfb      	ldrb	r3, [r7, #15]
 8006c1e:	e27a      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x20); if(status) return status;
 8006c20:	2120      	movs	r1, #32
 8006c22:	2065      	movs	r0, #101	; 0x65
 8006c24:	f7ff fe6c 	bl	8006900 <PMW3901_RegWrite>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	73fb      	strb	r3, [r7, #15]
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <PMW3901_Init+0x1e2>
 8006c32:	7bfb      	ldrb	r3, [r7, #15]
 8006c34:	e26f      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6A, 0x18); if(status) return status;
 8006c36:	2118      	movs	r1, #24
 8006c38:	206a      	movs	r0, #106	; 0x6a
 8006c3a:	f7ff fe61 	bl	8006900 <PMW3901_RegWrite>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	73fb      	strb	r3, [r7, #15]
 8006c42:	7bfb      	ldrb	r3, [r7, #15]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <PMW3901_Init+0x1f8>
 8006c48:	7bfb      	ldrb	r3, [r7, #15]
 8006c4a:	e264      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x09); if(status) return status;
 8006c4c:	2109      	movs	r1, #9
 8006c4e:	207f      	movs	r0, #127	; 0x7f
 8006c50:	f7ff fe56 	bl	8006900 <PMW3901_RegWrite>
 8006c54:	4603      	mov	r3, r0
 8006c56:	73fb      	strb	r3, [r7, #15]
 8006c58:	7bfb      	ldrb	r3, [r7, #15]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <PMW3901_Init+0x20e>
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
 8006c60:	e259      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4F, 0xAF); if(status) return status;
 8006c62:	21af      	movs	r1, #175	; 0xaf
 8006c64:	204f      	movs	r0, #79	; 0x4f
 8006c66:	f7ff fe4b 	bl	8006900 <PMW3901_RegWrite>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	73fb      	strb	r3, [r7, #15]
 8006c6e:	7bfb      	ldrb	r3, [r7, #15]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d001      	beq.n	8006c78 <PMW3901_Init+0x224>
 8006c74:	7bfb      	ldrb	r3, [r7, #15]
 8006c76:	e24e      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x40); if(status) return status;
 8006c78:	2140      	movs	r1, #64	; 0x40
 8006c7a:	205f      	movs	r0, #95	; 0x5f
 8006c7c:	f7ff fe40 	bl	8006900 <PMW3901_RegWrite>
 8006c80:	4603      	mov	r3, r0
 8006c82:	73fb      	strb	r3, [r7, #15]
 8006c84:	7bfb      	ldrb	r3, [r7, #15]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d001      	beq.n	8006c8e <PMW3901_Init+0x23a>
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	e243      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x80); if(status) return status;
 8006c8e:	2180      	movs	r1, #128	; 0x80
 8006c90:	2048      	movs	r0, #72	; 0x48
 8006c92:	f7ff fe35 	bl	8006900 <PMW3901_RegWrite>
 8006c96:	4603      	mov	r3, r0
 8006c98:	73fb      	strb	r3, [r7, #15]
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d001      	beq.n	8006ca4 <PMW3901_Init+0x250>
 8006ca0:	7bfb      	ldrb	r3, [r7, #15]
 8006ca2:	e238      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x49, 0x80); if(status) return status;
 8006ca4:	2180      	movs	r1, #128	; 0x80
 8006ca6:	2049      	movs	r0, #73	; 0x49
 8006ca8:	f7ff fe2a 	bl	8006900 <PMW3901_RegWrite>
 8006cac:	4603      	mov	r3, r0
 8006cae:	73fb      	strb	r3, [r7, #15]
 8006cb0:	7bfb      	ldrb	r3, [r7, #15]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <PMW3901_Init+0x266>
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	e22d      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x57, 0x77); if(status) return status;
 8006cba:	2177      	movs	r1, #119	; 0x77
 8006cbc:	2057      	movs	r0, #87	; 0x57
 8006cbe:	f7ff fe1f 	bl	8006900 <PMW3901_RegWrite>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	73fb      	strb	r3, [r7, #15]
 8006cc6:	7bfb      	ldrb	r3, [r7, #15]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d001      	beq.n	8006cd0 <PMW3901_Init+0x27c>
 8006ccc:	7bfb      	ldrb	r3, [r7, #15]
 8006cce:	e222      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x60, 0x78); if(status) return status;
 8006cd0:	2178      	movs	r1, #120	; 0x78
 8006cd2:	2060      	movs	r0, #96	; 0x60
 8006cd4:	f7ff fe14 	bl	8006900 <PMW3901_RegWrite>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	73fb      	strb	r3, [r7, #15]
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d001      	beq.n	8006ce6 <PMW3901_Init+0x292>
 8006ce2:	7bfb      	ldrb	r3, [r7, #15]
 8006ce4:	e217      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0x78); if(status) return status;
 8006ce6:	2178      	movs	r1, #120	; 0x78
 8006ce8:	2061      	movs	r0, #97	; 0x61
 8006cea:	f7ff fe09 	bl	8006900 <PMW3901_RegWrite>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	73fb      	strb	r3, [r7, #15]
 8006cf2:	7bfb      	ldrb	r3, [r7, #15]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d001      	beq.n	8006cfc <PMW3901_Init+0x2a8>
 8006cf8:	7bfb      	ldrb	r3, [r7, #15]
 8006cfa:	e20c      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0x08); if(status) return status;
 8006cfc:	2108      	movs	r1, #8
 8006cfe:	2062      	movs	r0, #98	; 0x62
 8006d00:	f7ff fdfe 	bl	8006900 <PMW3901_RegWrite>
 8006d04:	4603      	mov	r3, r0
 8006d06:	73fb      	strb	r3, [r7, #15]
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d004      	beq.n	8006d18 <PMW3901_Init+0x2c4>
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	e201      	b.n	8007116 <PMW3901_Init+0x6c2>
 8006d12:	bf00      	nop
 8006d14:	200007a4 	.word	0x200007a4
	status = PMW3901_RegWrite(0x63, 0x50); if(status) return status;
 8006d18:	2150      	movs	r1, #80	; 0x50
 8006d1a:	2063      	movs	r0, #99	; 0x63
 8006d1c:	f7ff fdf0 	bl	8006900 <PMW3901_RegWrite>
 8006d20:	4603      	mov	r3, r0
 8006d22:	73fb      	strb	r3, [r7, #15]
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <PMW3901_Init+0x2da>
 8006d2a:	7bfb      	ldrb	r3, [r7, #15]
 8006d2c:	e1f3      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0A); if(status) return status;
 8006d2e:	210a      	movs	r1, #10
 8006d30:	207f      	movs	r0, #127	; 0x7f
 8006d32:	f7ff fde5 	bl	8006900 <PMW3901_RegWrite>
 8006d36:	4603      	mov	r3, r0
 8006d38:	73fb      	strb	r3, [r7, #15]
 8006d3a:	7bfb      	ldrb	r3, [r7, #15]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d001      	beq.n	8006d44 <PMW3901_Init+0x2f0>
 8006d40:	7bfb      	ldrb	r3, [r7, #15]
 8006d42:	e1e8      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x60); if(status) return status;
 8006d44:	2160      	movs	r1, #96	; 0x60
 8006d46:	2045      	movs	r0, #69	; 0x45
 8006d48:	f7ff fdda 	bl	8006900 <PMW3901_RegWrite>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	73fb      	strb	r3, [r7, #15]
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <PMW3901_Init+0x306>
 8006d56:	7bfb      	ldrb	r3, [r7, #15]
 8006d58:	e1dd      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8006d5a:	2100      	movs	r1, #0
 8006d5c:	207f      	movs	r0, #127	; 0x7f
 8006d5e:	f7ff fdcf 	bl	8006900 <PMW3901_RegWrite>
 8006d62:	4603      	mov	r3, r0
 8006d64:	73fb      	strb	r3, [r7, #15]
 8006d66:	7bfb      	ldrb	r3, [r7, #15]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d001      	beq.n	8006d70 <PMW3901_Init+0x31c>
 8006d6c:	7bfb      	ldrb	r3, [r7, #15]
 8006d6e:	e1d2      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4D, 0x11); if(status) return status;
 8006d70:	2111      	movs	r1, #17
 8006d72:	204d      	movs	r0, #77	; 0x4d
 8006d74:	f7ff fdc4 	bl	8006900 <PMW3901_RegWrite>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	73fb      	strb	r3, [r7, #15]
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d001      	beq.n	8006d86 <PMW3901_Init+0x332>
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
 8006d84:	e1c7      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x55, 0x80); if(status) return status;
 8006d86:	2180      	movs	r1, #128	; 0x80
 8006d88:	2055      	movs	r0, #85	; 0x55
 8006d8a:	f7ff fdb9 	bl	8006900 <PMW3901_RegWrite>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	73fb      	strb	r3, [r7, #15]
 8006d92:	7bfb      	ldrb	r3, [r7, #15]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d001      	beq.n	8006d9c <PMW3901_Init+0x348>
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	e1bc      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x74, 0x1F); if(status) return status;
 8006d9c:	211f      	movs	r1, #31
 8006d9e:	2074      	movs	r0, #116	; 0x74
 8006da0:	f7ff fdae 	bl	8006900 <PMW3901_RegWrite>
 8006da4:	4603      	mov	r3, r0
 8006da6:	73fb      	strb	r3, [r7, #15]
 8006da8:	7bfb      	ldrb	r3, [r7, #15]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <PMW3901_Init+0x35e>
 8006dae:	7bfb      	ldrb	r3, [r7, #15]
 8006db0:	e1b1      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x75, 0x1F); if(status) return status;
 8006db2:	211f      	movs	r1, #31
 8006db4:	2075      	movs	r0, #117	; 0x75
 8006db6:	f7ff fda3 	bl	8006900 <PMW3901_RegWrite>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	73fb      	strb	r3, [r7, #15]
 8006dbe:	7bfb      	ldrb	r3, [r7, #15]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d001      	beq.n	8006dc8 <PMW3901_Init+0x374>
 8006dc4:	7bfb      	ldrb	r3, [r7, #15]
 8006dc6:	e1a6      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4A, 0x78); if(status) return status;
 8006dc8:	2178      	movs	r1, #120	; 0x78
 8006dca:	204a      	movs	r0, #74	; 0x4a
 8006dcc:	f7ff fd98 	bl	8006900 <PMW3901_RegWrite>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	73fb      	strb	r3, [r7, #15]
 8006dd4:	7bfb      	ldrb	r3, [r7, #15]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d001      	beq.n	8006dde <PMW3901_Init+0x38a>
 8006dda:	7bfb      	ldrb	r3, [r7, #15]
 8006ddc:	e19b      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x78); if(status) return status;
 8006dde:	2178      	movs	r1, #120	; 0x78
 8006de0:	204b      	movs	r0, #75	; 0x4b
 8006de2:	f7ff fd8d 	bl	8006900 <PMW3901_RegWrite>
 8006de6:	4603      	mov	r3, r0
 8006de8:	73fb      	strb	r3, [r7, #15]
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <PMW3901_Init+0x3a0>
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	e190      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x08); if(status) return status;
 8006df4:	2108      	movs	r1, #8
 8006df6:	2044      	movs	r0, #68	; 0x44
 8006df8:	f7ff fd82 	bl	8006900 <PMW3901_RegWrite>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	73fb      	strb	r3, [r7, #15]
 8006e00:	7bfb      	ldrb	r3, [r7, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <PMW3901_Init+0x3b6>
 8006e06:	7bfb      	ldrb	r3, [r7, #15]
 8006e08:	e185      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x50); if(status) return status;
 8006e0a:	2150      	movs	r1, #80	; 0x50
 8006e0c:	2045      	movs	r0, #69	; 0x45
 8006e0e:	f7ff fd77 	bl	8006900 <PMW3901_RegWrite>
 8006e12:	4603      	mov	r3, r0
 8006e14:	73fb      	strb	r3, [r7, #15]
 8006e16:	7bfb      	ldrb	r3, [r7, #15]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <PMW3901_Init+0x3cc>
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	e17a      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x64, 0xFF); if(status) return status;
 8006e20:	21ff      	movs	r1, #255	; 0xff
 8006e22:	2064      	movs	r0, #100	; 0x64
 8006e24:	f7ff fd6c 	bl	8006900 <PMW3901_RegWrite>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73fb      	strb	r3, [r7, #15]
 8006e2c:	7bfb      	ldrb	r3, [r7, #15]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <PMW3901_Init+0x3e2>
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
 8006e34:	e16f      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x1F); if(status) return status;
 8006e36:	211f      	movs	r1, #31
 8006e38:	2065      	movs	r0, #101	; 0x65
 8006e3a:	f7ff fd61 	bl	8006900 <PMW3901_RegWrite>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	73fb      	strb	r3, [r7, #15]
 8006e42:	7bfb      	ldrb	r3, [r7, #15]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <PMW3901_Init+0x3f8>
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	e164      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x14); if(status) return status;
 8006e4c:	2114      	movs	r1, #20
 8006e4e:	207f      	movs	r0, #127	; 0x7f
 8006e50:	f7ff fd56 	bl	8006900 <PMW3901_RegWrite>
 8006e54:	4603      	mov	r3, r0
 8006e56:	73fb      	strb	r3, [r7, #15]
 8006e58:	7bfb      	ldrb	r3, [r7, #15]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <PMW3901_Init+0x40e>
 8006e5e:	7bfb      	ldrb	r3, [r7, #15]
 8006e60:	e159      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x60); if(status) return status;
 8006e62:	2160      	movs	r1, #96	; 0x60
 8006e64:	2065      	movs	r0, #101	; 0x65
 8006e66:	f7ff fd4b 	bl	8006900 <PMW3901_RegWrite>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	73fb      	strb	r3, [r7, #15]
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <PMW3901_Init+0x424>
 8006e74:	7bfb      	ldrb	r3, [r7, #15]
 8006e76:	e14e      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x66, 0x08); if(status) return status;
 8006e78:	2108      	movs	r1, #8
 8006e7a:	2066      	movs	r0, #102	; 0x66
 8006e7c:	f7ff fd40 	bl	8006900 <PMW3901_RegWrite>
 8006e80:	4603      	mov	r3, r0
 8006e82:	73fb      	strb	r3, [r7, #15]
 8006e84:	7bfb      	ldrb	r3, [r7, #15]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <PMW3901_Init+0x43a>
 8006e8a:	7bfb      	ldrb	r3, [r7, #15]
 8006e8c:	e143      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x78); if(status) return status;
 8006e8e:	2178      	movs	r1, #120	; 0x78
 8006e90:	2063      	movs	r0, #99	; 0x63
 8006e92:	f7ff fd35 	bl	8006900 <PMW3901_RegWrite>
 8006e96:	4603      	mov	r3, r0
 8006e98:	73fb      	strb	r3, [r7, #15]
 8006e9a:	7bfb      	ldrb	r3, [r7, #15]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d001      	beq.n	8006ea4 <PMW3901_Init+0x450>
 8006ea0:	7bfb      	ldrb	r3, [r7, #15]
 8006ea2:	e138      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x15); if(status) return status;
 8006ea4:	2115      	movs	r1, #21
 8006ea6:	207f      	movs	r0, #127	; 0x7f
 8006ea8:	f7ff fd2a 	bl	8006900 <PMW3901_RegWrite>
 8006eac:	4603      	mov	r3, r0
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	7bfb      	ldrb	r3, [r7, #15]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d001      	beq.n	8006eba <PMW3901_Init+0x466>
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	e12d      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x58); if(status) return status;
 8006eba:	2158      	movs	r1, #88	; 0x58
 8006ebc:	2048      	movs	r0, #72	; 0x48
 8006ebe:	f7ff fd1f 	bl	8006900 <PMW3901_RegWrite>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73fb      	strb	r3, [r7, #15]
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <PMW3901_Init+0x47c>
 8006ecc:	7bfb      	ldrb	r3, [r7, #15]
 8006ece:	e122      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8006ed0:	2107      	movs	r1, #7
 8006ed2:	207f      	movs	r0, #127	; 0x7f
 8006ed4:	f7ff fd14 	bl	8006900 <PMW3901_RegWrite>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	73fb      	strb	r3, [r7, #15]
 8006edc:	7bfb      	ldrb	r3, [r7, #15]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <PMW3901_Init+0x492>
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	e117      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0x0D); if(status) return status;
 8006ee6:	210d      	movs	r1, #13
 8006ee8:	2041      	movs	r0, #65	; 0x41
 8006eea:	f7ff fd09 	bl	8006900 <PMW3901_RegWrite>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73fb      	strb	r3, [r7, #15]
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d001      	beq.n	8006efc <PMW3901_Init+0x4a8>
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	e10c      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0x14); if(status) return status;
 8006efc:	2114      	movs	r1, #20
 8006efe:	2043      	movs	r0, #67	; 0x43
 8006f00:	f7ff fcfe 	bl	8006900 <PMW3901_RegWrite>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73fb      	strb	r3, [r7, #15]
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <PMW3901_Init+0x4be>
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	e101      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x0E); if(status) return status;
 8006f12:	210e      	movs	r1, #14
 8006f14:	204b      	movs	r0, #75	; 0x4b
 8006f16:	f7ff fcf3 	bl	8006900 <PMW3901_RegWrite>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	73fb      	strb	r3, [r7, #15]
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <PMW3901_Init+0x4d4>
 8006f24:	7bfb      	ldrb	r3, [r7, #15]
 8006f26:	e0f6      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x0F); if(status) return status;
 8006f28:	210f      	movs	r1, #15
 8006f2a:	2045      	movs	r0, #69	; 0x45
 8006f2c:	f7ff fce8 	bl	8006900 <PMW3901_RegWrite>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73fb      	strb	r3, [r7, #15]
 8006f34:	7bfb      	ldrb	r3, [r7, #15]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d001      	beq.n	8006f3e <PMW3901_Init+0x4ea>
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	e0eb      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x42); if(status) return status;
 8006f3e:	2142      	movs	r1, #66	; 0x42
 8006f40:	2044      	movs	r0, #68	; 0x44
 8006f42:	f7ff fcdd 	bl	8006900 <PMW3901_RegWrite>
 8006f46:	4603      	mov	r3, r0
 8006f48:	73fb      	strb	r3, [r7, #15]
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d001      	beq.n	8006f54 <PMW3901_Init+0x500>
 8006f50:	7bfb      	ldrb	r3, [r7, #15]
 8006f52:	e0e0      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4C, 0x80); if(status) return status;
 8006f54:	2180      	movs	r1, #128	; 0x80
 8006f56:	204c      	movs	r0, #76	; 0x4c
 8006f58:	f7ff fcd2 	bl	8006900 <PMW3901_RegWrite>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	73fb      	strb	r3, [r7, #15]
 8006f60:	7bfb      	ldrb	r3, [r7, #15]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d001      	beq.n	8006f6a <PMW3901_Init+0x516>
 8006f66:	7bfb      	ldrb	r3, [r7, #15]
 8006f68:	e0d5      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x10); if(status) return status;
 8006f6a:	2110      	movs	r1, #16
 8006f6c:	207f      	movs	r0, #127	; 0x7f
 8006f6e:	f7ff fcc7 	bl	8006900 <PMW3901_RegWrite>
 8006f72:	4603      	mov	r3, r0
 8006f74:	73fb      	strb	r3, [r7, #15]
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d001      	beq.n	8006f80 <PMW3901_Init+0x52c>
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	e0ca      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x02); if(status) return status;
 8006f80:	2102      	movs	r1, #2
 8006f82:	205b      	movs	r0, #91	; 0x5b
 8006f84:	f7ff fcbc 	bl	8006900 <PMW3901_RegWrite>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	73fb      	strb	r3, [r7, #15]
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <PMW3901_Init+0x542>
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
 8006f94:	e0bf      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8006f96:	2107      	movs	r1, #7
 8006f98:	207f      	movs	r0, #127	; 0x7f
 8006f9a:	f7ff fcb1 	bl	8006900 <PMW3901_RegWrite>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	73fb      	strb	r3, [r7, #15]
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <PMW3901_Init+0x558>
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	e0b4      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x41); if(status) return status;
 8006fac:	2141      	movs	r1, #65	; 0x41
 8006fae:	2040      	movs	r0, #64	; 0x40
 8006fb0:	f7ff fca6 	bl	8006900 <PMW3901_RegWrite>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d001      	beq.n	8006fc2 <PMW3901_Init+0x56e>
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	e0a9      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x70, 0x00); if(status) return status;
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	2070      	movs	r0, #112	; 0x70
 8006fc6:	f7ff fc9b 	bl	8006900 <PMW3901_RegWrite>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	73fb      	strb	r3, [r7, #15]
 8006fce:	7bfb      	ldrb	r3, [r7, #15]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d001      	beq.n	8006fd8 <PMW3901_Init+0x584>
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	e09e      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x32, 0x44); if(status) return status;
 8006fd8:	2144      	movs	r1, #68	; 0x44
 8006fda:	2032      	movs	r0, #50	; 0x32
 8006fdc:	f7ff fc90 	bl	8006900 <PMW3901_RegWrite>
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	73fb      	strb	r3, [r7, #15]
 8006fe4:	7bfb      	ldrb	r3, [r7, #15]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d001      	beq.n	8006fee <PMW3901_Init+0x59a>
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	e093      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8006fee:	2107      	movs	r1, #7
 8006ff0:	207f      	movs	r0, #127	; 0x7f
 8006ff2:	f7ff fc85 	bl	8006900 <PMW3901_RegWrite>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	73fb      	strb	r3, [r7, #15]
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d001      	beq.n	8007004 <PMW3901_Init+0x5b0>
 8007000:	7bfb      	ldrb	r3, [r7, #15]
 8007002:	e088      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x40); if(status) return status;
 8007004:	2140      	movs	r1, #64	; 0x40
 8007006:	2040      	movs	r0, #64	; 0x40
 8007008:	f7ff fc7a 	bl	8006900 <PMW3901_RegWrite>
 800700c:	4603      	mov	r3, r0
 800700e:	73fb      	strb	r3, [r7, #15]
 8007010:	7bfb      	ldrb	r3, [r7, #15]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d001      	beq.n	800701a <PMW3901_Init+0x5c6>
 8007016:	7bfb      	ldrb	r3, [r7, #15]
 8007018:	e07d      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 800701a:	2106      	movs	r1, #6
 800701c:	207f      	movs	r0, #127	; 0x7f
 800701e:	f7ff fc6f 	bl	8006900 <PMW3901_RegWrite>
 8007022:	4603      	mov	r3, r0
 8007024:	73fb      	strb	r3, [r7, #15]
 8007026:	7bfb      	ldrb	r3, [r7, #15]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <PMW3901_Init+0x5dc>
 800702c:	7bfb      	ldrb	r3, [r7, #15]
 800702e:	e072      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0xf0); if(status) return status;
 8007030:	21f0      	movs	r1, #240	; 0xf0
 8007032:	2062      	movs	r0, #98	; 0x62
 8007034:	f7ff fc64 	bl	8006900 <PMW3901_RegWrite>
 8007038:	4603      	mov	r3, r0
 800703a:	73fb      	strb	r3, [r7, #15]
 800703c:	7bfb      	ldrb	r3, [r7, #15]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d001      	beq.n	8007046 <PMW3901_Init+0x5f2>
 8007042:	7bfb      	ldrb	r3, [r7, #15]
 8007044:	e067      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x00); if(status) return status;
 8007046:	2100      	movs	r1, #0
 8007048:	2063      	movs	r0, #99	; 0x63
 800704a:	f7ff fc59 	bl	8006900 <PMW3901_RegWrite>
 800704e:	4603      	mov	r3, r0
 8007050:	73fb      	strb	r3, [r7, #15]
 8007052:	7bfb      	ldrb	r3, [r7, #15]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d001      	beq.n	800705c <PMW3901_Init+0x608>
 8007058:	7bfb      	ldrb	r3, [r7, #15]
 800705a:	e05c      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0D); if(status) return status;
 800705c:	210d      	movs	r1, #13
 800705e:	207f      	movs	r0, #127	; 0x7f
 8007060:	f7ff fc4e 	bl	8006900 <PMW3901_RegWrite>
 8007064:	4603      	mov	r3, r0
 8007066:	73fb      	strb	r3, [r7, #15]
 8007068:	7bfb      	ldrb	r3, [r7, #15]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <PMW3901_Init+0x61e>
 800706e:	7bfb      	ldrb	r3, [r7, #15]
 8007070:	e051      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0xC0); if(status) return status;
 8007072:	21c0      	movs	r1, #192	; 0xc0
 8007074:	2048      	movs	r0, #72	; 0x48
 8007076:	f7ff fc43 	bl	8006900 <PMW3901_RegWrite>
 800707a:	4603      	mov	r3, r0
 800707c:	73fb      	strb	r3, [r7, #15]
 800707e:	7bfb      	ldrb	r3, [r7, #15]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d001      	beq.n	8007088 <PMW3901_Init+0x634>
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	e046      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6F, 0xd5); if(status) return status;
 8007088:	21d5      	movs	r1, #213	; 0xd5
 800708a:	206f      	movs	r0, #111	; 0x6f
 800708c:	f7ff fc38 	bl	8006900 <PMW3901_RegWrite>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d001      	beq.n	800709e <PMW3901_Init+0x64a>
 800709a:	7bfb      	ldrb	r3, [r7, #15]
 800709c:	e03b      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 800709e:	2100      	movs	r1, #0
 80070a0:	207f      	movs	r0, #127	; 0x7f
 80070a2:	f7ff fc2d 	bl	8006900 <PMW3901_RegWrite>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d001      	beq.n	80070b4 <PMW3901_Init+0x660>
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
 80070b2:	e030      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0xa0); if(status) return status;
 80070b4:	21a0      	movs	r1, #160	; 0xa0
 80070b6:	205b      	movs	r0, #91	; 0x5b
 80070b8:	f7ff fc22 	bl	8006900 <PMW3901_RegWrite>
 80070bc:	4603      	mov	r3, r0
 80070be:	73fb      	strb	r3, [r7, #15]
 80070c0:	7bfb      	ldrb	r3, [r7, #15]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d001      	beq.n	80070ca <PMW3901_Init+0x676>
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	e025      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0xA8); if(status) return status;
 80070ca:	21a8      	movs	r1, #168	; 0xa8
 80070cc:	204e      	movs	r0, #78	; 0x4e
 80070ce:	f7ff fc17 	bl	8006900 <PMW3901_RegWrite>
 80070d2:	4603      	mov	r3, r0
 80070d4:	73fb      	strb	r3, [r7, #15]
 80070d6:	7bfb      	ldrb	r3, [r7, #15]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d001      	beq.n	80070e0 <PMW3901_Init+0x68c>
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
 80070de:	e01a      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5A, 0x50); if(status) return status;
 80070e0:	2150      	movs	r1, #80	; 0x50
 80070e2:	205a      	movs	r0, #90	; 0x5a
 80070e4:	f7ff fc0c 	bl	8006900 <PMW3901_RegWrite>
 80070e8:	4603      	mov	r3, r0
 80070ea:	73fb      	strb	r3, [r7, #15]
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <PMW3901_Init+0x6a2>
 80070f2:	7bfb      	ldrb	r3, [r7, #15]
 80070f4:	e00f      	b.n	8007116 <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x80); if(status) return status;
 80070f6:	2180      	movs	r1, #128	; 0x80
 80070f8:	2040      	movs	r0, #64	; 0x40
 80070fa:	f7ff fc01 	bl	8006900 <PMW3901_RegWrite>
 80070fe:	4603      	mov	r3, r0
 8007100:	73fb      	strb	r3, [r7, #15]
 8007102:	7bfb      	ldrb	r3, [r7, #15]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d001      	beq.n	800710c <PMW3901_Init+0x6b8>
 8007108:	7bfb      	ldrb	r3, [r7, #15]
 800710a:	e004      	b.n	8007116 <PMW3901_Init+0x6c2>

	status = PMW3901_SetLed();
 800710c:	f7ff fc7e 	bl	8006a0c <PMW3901_SetLed>
 8007110:	4603      	mov	r3, r0
 8007112:	73fb      	strb	r3, [r7, #15]

	return status;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop

08007120 <PMW3901_Read_Variation>:

PMW3901_Status_t PMW3901_Read_Variation(int16_t *var_x, int16_t *var_y) // Fonction permettant de lire la valeur de la variation
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]

	PMW3901_Status_t status;
	PMW3901_Unify_2x8_to_16_t data;
	uint8_t Motion;

	status = PMW3901_RegRead(0x02, &Motion);
 800712a:	f107 030b 	add.w	r3, r7, #11
 800712e:	4619      	mov	r1, r3
 8007130:	2002      	movs	r0, #2
 8007132:	f7ff fc21 	bl	8006978 <PMW3901_RegRead>
 8007136:	4603      	mov	r3, r0
 8007138:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d001      	beq.n	8007144 <PMW3901_Read_Variation+0x24>
 8007140:	7bfb      	ldrb	r3, [r7, #15]
 8007142:	e03e      	b.n	80071c2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_H, &data.raw[1]);
 8007144:	f107 030c 	add.w	r3, r7, #12
 8007148:	3301      	adds	r3, #1
 800714a:	4619      	mov	r1, r3
 800714c:	2004      	movs	r0, #4
 800714e:	f7ff fc13 	bl	8006978 <PMW3901_RegRead>
 8007152:	4603      	mov	r3, r0
 8007154:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8007156:	7bfb      	ldrb	r3, [r7, #15]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <PMW3901_Read_Variation+0x40>
 800715c:	7bfb      	ldrb	r3, [r7, #15]
 800715e:	e030      	b.n	80071c2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_L, &data.raw[0]);
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	4619      	mov	r1, r3
 8007166:	2003      	movs	r0, #3
 8007168:	f7ff fc06 	bl	8006978 <PMW3901_RegRead>
 800716c:	4603      	mov	r3, r0
 800716e:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d001      	beq.n	800717a <PMW3901_Read_Variation+0x5a>
 8007176:	7bfb      	ldrb	r3, [r7, #15]
 8007178:	e023      	b.n	80071c2 <PMW3901_Read_Variation+0xa2>

	*var_x = data.unified;
 800717a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	801a      	strh	r2, [r3, #0]

	status = PMW3901_RegRead(DELTA_Y_H, &data.raw[1]);
 8007182:	f107 030c 	add.w	r3, r7, #12
 8007186:	3301      	adds	r3, #1
 8007188:	4619      	mov	r1, r3
 800718a:	2006      	movs	r0, #6
 800718c:	f7ff fbf4 	bl	8006978 <PMW3901_RegRead>
 8007190:	4603      	mov	r3, r0
 8007192:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <PMW3901_Read_Variation+0x7e>
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	e011      	b.n	80071c2 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_Y_L, &data.raw[0]);
 800719e:	f107 030c 	add.w	r3, r7, #12
 80071a2:	4619      	mov	r1, r3
 80071a4:	2005      	movs	r0, #5
 80071a6:	f7ff fbe7 	bl	8006978 <PMW3901_RegRead>
 80071aa:	4603      	mov	r3, r0
 80071ac:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80071ae:	7bfb      	ldrb	r3, [r7, #15]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <PMW3901_Read_Variation+0x98>
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	e004      	b.n	80071c2 <PMW3901_Read_Variation+0xa2>

	*var_y = data.unified;
 80071b8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	801a      	strh	r2, [r3, #0]

	return status;
 80071c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
	...

080071cc <__errno>:
 80071cc:	4b01      	ldr	r3, [pc, #4]	; (80071d4 <__errno+0x8>)
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	20000018 	.word	0x20000018

080071d8 <__libc_init_array>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	4d0d      	ldr	r5, [pc, #52]	; (8007210 <__libc_init_array+0x38>)
 80071dc:	4c0d      	ldr	r4, [pc, #52]	; (8007214 <__libc_init_array+0x3c>)
 80071de:	1b64      	subs	r4, r4, r5
 80071e0:	10a4      	asrs	r4, r4, #2
 80071e2:	2600      	movs	r6, #0
 80071e4:	42a6      	cmp	r6, r4
 80071e6:	d109      	bne.n	80071fc <__libc_init_array+0x24>
 80071e8:	4d0b      	ldr	r5, [pc, #44]	; (8007218 <__libc_init_array+0x40>)
 80071ea:	4c0c      	ldr	r4, [pc, #48]	; (800721c <__libc_init_array+0x44>)
 80071ec:	f004 fc90 	bl	800bb10 <_init>
 80071f0:	1b64      	subs	r4, r4, r5
 80071f2:	10a4      	asrs	r4, r4, #2
 80071f4:	2600      	movs	r6, #0
 80071f6:	42a6      	cmp	r6, r4
 80071f8:	d105      	bne.n	8007206 <__libc_init_array+0x2e>
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007200:	4798      	blx	r3
 8007202:	3601      	adds	r6, #1
 8007204:	e7ee      	b.n	80071e4 <__libc_init_array+0xc>
 8007206:	f855 3b04 	ldr.w	r3, [r5], #4
 800720a:	4798      	blx	r3
 800720c:	3601      	adds	r6, #1
 800720e:	e7f2      	b.n	80071f6 <__libc_init_array+0x1e>
 8007210:	0800c084 	.word	0x0800c084
 8007214:	0800c084 	.word	0x0800c084
 8007218:	0800c084 	.word	0x0800c084
 800721c:	0800c088 	.word	0x0800c088

08007220 <memset>:
 8007220:	4402      	add	r2, r0
 8007222:	4603      	mov	r3, r0
 8007224:	4293      	cmp	r3, r2
 8007226:	d100      	bne.n	800722a <memset+0xa>
 8007228:	4770      	bx	lr
 800722a:	f803 1b01 	strb.w	r1, [r3], #1
 800722e:	e7f9      	b.n	8007224 <memset+0x4>

08007230 <__cvt>:
 8007230:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	ec55 4b10 	vmov	r4, r5, d0
 8007238:	2d00      	cmp	r5, #0
 800723a:	460e      	mov	r6, r1
 800723c:	4619      	mov	r1, r3
 800723e:	462b      	mov	r3, r5
 8007240:	bfbb      	ittet	lt
 8007242:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007246:	461d      	movlt	r5, r3
 8007248:	2300      	movge	r3, #0
 800724a:	232d      	movlt	r3, #45	; 0x2d
 800724c:	700b      	strb	r3, [r1, #0]
 800724e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007250:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007254:	4691      	mov	r9, r2
 8007256:	f023 0820 	bic.w	r8, r3, #32
 800725a:	bfbc      	itt	lt
 800725c:	4622      	movlt	r2, r4
 800725e:	4614      	movlt	r4, r2
 8007260:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007264:	d005      	beq.n	8007272 <__cvt+0x42>
 8007266:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800726a:	d100      	bne.n	800726e <__cvt+0x3e>
 800726c:	3601      	adds	r6, #1
 800726e:	2102      	movs	r1, #2
 8007270:	e000      	b.n	8007274 <__cvt+0x44>
 8007272:	2103      	movs	r1, #3
 8007274:	ab03      	add	r3, sp, #12
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	ab02      	add	r3, sp, #8
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	ec45 4b10 	vmov	d0, r4, r5
 8007280:	4653      	mov	r3, sl
 8007282:	4632      	mov	r2, r6
 8007284:	f001 fdac 	bl	8008de0 <_dtoa_r>
 8007288:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800728c:	4607      	mov	r7, r0
 800728e:	d102      	bne.n	8007296 <__cvt+0x66>
 8007290:	f019 0f01 	tst.w	r9, #1
 8007294:	d022      	beq.n	80072dc <__cvt+0xac>
 8007296:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800729a:	eb07 0906 	add.w	r9, r7, r6
 800729e:	d110      	bne.n	80072c2 <__cvt+0x92>
 80072a0:	783b      	ldrb	r3, [r7, #0]
 80072a2:	2b30      	cmp	r3, #48	; 0x30
 80072a4:	d10a      	bne.n	80072bc <__cvt+0x8c>
 80072a6:	2200      	movs	r2, #0
 80072a8:	2300      	movs	r3, #0
 80072aa:	4620      	mov	r0, r4
 80072ac:	4629      	mov	r1, r5
 80072ae:	f7f9 fc0b 	bl	8000ac8 <__aeabi_dcmpeq>
 80072b2:	b918      	cbnz	r0, 80072bc <__cvt+0x8c>
 80072b4:	f1c6 0601 	rsb	r6, r6, #1
 80072b8:	f8ca 6000 	str.w	r6, [sl]
 80072bc:	f8da 3000 	ldr.w	r3, [sl]
 80072c0:	4499      	add	r9, r3
 80072c2:	2200      	movs	r2, #0
 80072c4:	2300      	movs	r3, #0
 80072c6:	4620      	mov	r0, r4
 80072c8:	4629      	mov	r1, r5
 80072ca:	f7f9 fbfd 	bl	8000ac8 <__aeabi_dcmpeq>
 80072ce:	b108      	cbz	r0, 80072d4 <__cvt+0xa4>
 80072d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80072d4:	2230      	movs	r2, #48	; 0x30
 80072d6:	9b03      	ldr	r3, [sp, #12]
 80072d8:	454b      	cmp	r3, r9
 80072da:	d307      	bcc.n	80072ec <__cvt+0xbc>
 80072dc:	9b03      	ldr	r3, [sp, #12]
 80072de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072e0:	1bdb      	subs	r3, r3, r7
 80072e2:	4638      	mov	r0, r7
 80072e4:	6013      	str	r3, [r2, #0]
 80072e6:	b004      	add	sp, #16
 80072e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072ec:	1c59      	adds	r1, r3, #1
 80072ee:	9103      	str	r1, [sp, #12]
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e7f0      	b.n	80072d6 <__cvt+0xa6>

080072f4 <__exponent>:
 80072f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80072f6:	4603      	mov	r3, r0
 80072f8:	2900      	cmp	r1, #0
 80072fa:	bfb8      	it	lt
 80072fc:	4249      	neglt	r1, r1
 80072fe:	f803 2b02 	strb.w	r2, [r3], #2
 8007302:	bfb4      	ite	lt
 8007304:	222d      	movlt	r2, #45	; 0x2d
 8007306:	222b      	movge	r2, #43	; 0x2b
 8007308:	2909      	cmp	r1, #9
 800730a:	7042      	strb	r2, [r0, #1]
 800730c:	dd2a      	ble.n	8007364 <__exponent+0x70>
 800730e:	f10d 0407 	add.w	r4, sp, #7
 8007312:	46a4      	mov	ip, r4
 8007314:	270a      	movs	r7, #10
 8007316:	46a6      	mov	lr, r4
 8007318:	460a      	mov	r2, r1
 800731a:	fb91 f6f7 	sdiv	r6, r1, r7
 800731e:	fb07 1516 	mls	r5, r7, r6, r1
 8007322:	3530      	adds	r5, #48	; 0x30
 8007324:	2a63      	cmp	r2, #99	; 0x63
 8007326:	f104 34ff 	add.w	r4, r4, #4294967295
 800732a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800732e:	4631      	mov	r1, r6
 8007330:	dcf1      	bgt.n	8007316 <__exponent+0x22>
 8007332:	3130      	adds	r1, #48	; 0x30
 8007334:	f1ae 0502 	sub.w	r5, lr, #2
 8007338:	f804 1c01 	strb.w	r1, [r4, #-1]
 800733c:	1c44      	adds	r4, r0, #1
 800733e:	4629      	mov	r1, r5
 8007340:	4561      	cmp	r1, ip
 8007342:	d30a      	bcc.n	800735a <__exponent+0x66>
 8007344:	f10d 0209 	add.w	r2, sp, #9
 8007348:	eba2 020e 	sub.w	r2, r2, lr
 800734c:	4565      	cmp	r5, ip
 800734e:	bf88      	it	hi
 8007350:	2200      	movhi	r2, #0
 8007352:	4413      	add	r3, r2
 8007354:	1a18      	subs	r0, r3, r0
 8007356:	b003      	add	sp, #12
 8007358:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800735a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800735e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007362:	e7ed      	b.n	8007340 <__exponent+0x4c>
 8007364:	2330      	movs	r3, #48	; 0x30
 8007366:	3130      	adds	r1, #48	; 0x30
 8007368:	7083      	strb	r3, [r0, #2]
 800736a:	70c1      	strb	r1, [r0, #3]
 800736c:	1d03      	adds	r3, r0, #4
 800736e:	e7f1      	b.n	8007354 <__exponent+0x60>

08007370 <_printf_float>:
 8007370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007374:	ed2d 8b02 	vpush	{d8}
 8007378:	b08d      	sub	sp, #52	; 0x34
 800737a:	460c      	mov	r4, r1
 800737c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007380:	4616      	mov	r6, r2
 8007382:	461f      	mov	r7, r3
 8007384:	4605      	mov	r5, r0
 8007386:	f002 fe89 	bl	800a09c <_localeconv_r>
 800738a:	f8d0 a000 	ldr.w	sl, [r0]
 800738e:	4650      	mov	r0, sl
 8007390:	f7f8 ff1e 	bl	80001d0 <strlen>
 8007394:	2300      	movs	r3, #0
 8007396:	930a      	str	r3, [sp, #40]	; 0x28
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	9305      	str	r3, [sp, #20]
 800739c:	f8d8 3000 	ldr.w	r3, [r8]
 80073a0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80073a4:	3307      	adds	r3, #7
 80073a6:	f023 0307 	bic.w	r3, r3, #7
 80073aa:	f103 0208 	add.w	r2, r3, #8
 80073ae:	f8c8 2000 	str.w	r2, [r8]
 80073b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80073ba:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80073be:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80073c2:	9307      	str	r3, [sp, #28]
 80073c4:	f8cd 8018 	str.w	r8, [sp, #24]
 80073c8:	ee08 0a10 	vmov	s16, r0
 80073cc:	4b9f      	ldr	r3, [pc, #636]	; (800764c <_printf_float+0x2dc>)
 80073ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073d2:	f04f 32ff 	mov.w	r2, #4294967295
 80073d6:	f7f9 fba9 	bl	8000b2c <__aeabi_dcmpun>
 80073da:	bb88      	cbnz	r0, 8007440 <_printf_float+0xd0>
 80073dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80073e0:	4b9a      	ldr	r3, [pc, #616]	; (800764c <_printf_float+0x2dc>)
 80073e2:	f04f 32ff 	mov.w	r2, #4294967295
 80073e6:	f7f9 fb83 	bl	8000af0 <__aeabi_dcmple>
 80073ea:	bb48      	cbnz	r0, 8007440 <_printf_float+0xd0>
 80073ec:	2200      	movs	r2, #0
 80073ee:	2300      	movs	r3, #0
 80073f0:	4640      	mov	r0, r8
 80073f2:	4649      	mov	r1, r9
 80073f4:	f7f9 fb72 	bl	8000adc <__aeabi_dcmplt>
 80073f8:	b110      	cbz	r0, 8007400 <_printf_float+0x90>
 80073fa:	232d      	movs	r3, #45	; 0x2d
 80073fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007400:	4b93      	ldr	r3, [pc, #588]	; (8007650 <_printf_float+0x2e0>)
 8007402:	4894      	ldr	r0, [pc, #592]	; (8007654 <_printf_float+0x2e4>)
 8007404:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007408:	bf94      	ite	ls
 800740a:	4698      	movls	r8, r3
 800740c:	4680      	movhi	r8, r0
 800740e:	2303      	movs	r3, #3
 8007410:	6123      	str	r3, [r4, #16]
 8007412:	9b05      	ldr	r3, [sp, #20]
 8007414:	f023 0204 	bic.w	r2, r3, #4
 8007418:	6022      	str	r2, [r4, #0]
 800741a:	f04f 0900 	mov.w	r9, #0
 800741e:	9700      	str	r7, [sp, #0]
 8007420:	4633      	mov	r3, r6
 8007422:	aa0b      	add	r2, sp, #44	; 0x2c
 8007424:	4621      	mov	r1, r4
 8007426:	4628      	mov	r0, r5
 8007428:	f000 f9d8 	bl	80077dc <_printf_common>
 800742c:	3001      	adds	r0, #1
 800742e:	f040 8090 	bne.w	8007552 <_printf_float+0x1e2>
 8007432:	f04f 30ff 	mov.w	r0, #4294967295
 8007436:	b00d      	add	sp, #52	; 0x34
 8007438:	ecbd 8b02 	vpop	{d8}
 800743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007440:	4642      	mov	r2, r8
 8007442:	464b      	mov	r3, r9
 8007444:	4640      	mov	r0, r8
 8007446:	4649      	mov	r1, r9
 8007448:	f7f9 fb70 	bl	8000b2c <__aeabi_dcmpun>
 800744c:	b140      	cbz	r0, 8007460 <_printf_float+0xf0>
 800744e:	464b      	mov	r3, r9
 8007450:	2b00      	cmp	r3, #0
 8007452:	bfbc      	itt	lt
 8007454:	232d      	movlt	r3, #45	; 0x2d
 8007456:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800745a:	487f      	ldr	r0, [pc, #508]	; (8007658 <_printf_float+0x2e8>)
 800745c:	4b7f      	ldr	r3, [pc, #508]	; (800765c <_printf_float+0x2ec>)
 800745e:	e7d1      	b.n	8007404 <_printf_float+0x94>
 8007460:	6863      	ldr	r3, [r4, #4]
 8007462:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007466:	9206      	str	r2, [sp, #24]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	d13f      	bne.n	80074ec <_printf_float+0x17c>
 800746c:	2306      	movs	r3, #6
 800746e:	6063      	str	r3, [r4, #4]
 8007470:	9b05      	ldr	r3, [sp, #20]
 8007472:	6861      	ldr	r1, [r4, #4]
 8007474:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007478:	2300      	movs	r3, #0
 800747a:	9303      	str	r3, [sp, #12]
 800747c:	ab0a      	add	r3, sp, #40	; 0x28
 800747e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007482:	ab09      	add	r3, sp, #36	; 0x24
 8007484:	ec49 8b10 	vmov	d0, r8, r9
 8007488:	9300      	str	r3, [sp, #0]
 800748a:	6022      	str	r2, [r4, #0]
 800748c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007490:	4628      	mov	r0, r5
 8007492:	f7ff fecd 	bl	8007230 <__cvt>
 8007496:	9b06      	ldr	r3, [sp, #24]
 8007498:	9909      	ldr	r1, [sp, #36]	; 0x24
 800749a:	2b47      	cmp	r3, #71	; 0x47
 800749c:	4680      	mov	r8, r0
 800749e:	d108      	bne.n	80074b2 <_printf_float+0x142>
 80074a0:	1cc8      	adds	r0, r1, #3
 80074a2:	db02      	blt.n	80074aa <_printf_float+0x13a>
 80074a4:	6863      	ldr	r3, [r4, #4]
 80074a6:	4299      	cmp	r1, r3
 80074a8:	dd41      	ble.n	800752e <_printf_float+0x1be>
 80074aa:	f1ab 0b02 	sub.w	fp, fp, #2
 80074ae:	fa5f fb8b 	uxtb.w	fp, fp
 80074b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80074b6:	d820      	bhi.n	80074fa <_printf_float+0x18a>
 80074b8:	3901      	subs	r1, #1
 80074ba:	465a      	mov	r2, fp
 80074bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80074c0:	9109      	str	r1, [sp, #36]	; 0x24
 80074c2:	f7ff ff17 	bl	80072f4 <__exponent>
 80074c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074c8:	1813      	adds	r3, r2, r0
 80074ca:	2a01      	cmp	r2, #1
 80074cc:	4681      	mov	r9, r0
 80074ce:	6123      	str	r3, [r4, #16]
 80074d0:	dc02      	bgt.n	80074d8 <_printf_float+0x168>
 80074d2:	6822      	ldr	r2, [r4, #0]
 80074d4:	07d2      	lsls	r2, r2, #31
 80074d6:	d501      	bpl.n	80074dc <_printf_float+0x16c>
 80074d8:	3301      	adds	r3, #1
 80074da:	6123      	str	r3, [r4, #16]
 80074dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d09c      	beq.n	800741e <_printf_float+0xae>
 80074e4:	232d      	movs	r3, #45	; 0x2d
 80074e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074ea:	e798      	b.n	800741e <_printf_float+0xae>
 80074ec:	9a06      	ldr	r2, [sp, #24]
 80074ee:	2a47      	cmp	r2, #71	; 0x47
 80074f0:	d1be      	bne.n	8007470 <_printf_float+0x100>
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d1bc      	bne.n	8007470 <_printf_float+0x100>
 80074f6:	2301      	movs	r3, #1
 80074f8:	e7b9      	b.n	800746e <_printf_float+0xfe>
 80074fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80074fe:	d118      	bne.n	8007532 <_printf_float+0x1c2>
 8007500:	2900      	cmp	r1, #0
 8007502:	6863      	ldr	r3, [r4, #4]
 8007504:	dd0b      	ble.n	800751e <_printf_float+0x1ae>
 8007506:	6121      	str	r1, [r4, #16]
 8007508:	b913      	cbnz	r3, 8007510 <_printf_float+0x1a0>
 800750a:	6822      	ldr	r2, [r4, #0]
 800750c:	07d0      	lsls	r0, r2, #31
 800750e:	d502      	bpl.n	8007516 <_printf_float+0x1a6>
 8007510:	3301      	adds	r3, #1
 8007512:	440b      	add	r3, r1
 8007514:	6123      	str	r3, [r4, #16]
 8007516:	65a1      	str	r1, [r4, #88]	; 0x58
 8007518:	f04f 0900 	mov.w	r9, #0
 800751c:	e7de      	b.n	80074dc <_printf_float+0x16c>
 800751e:	b913      	cbnz	r3, 8007526 <_printf_float+0x1b6>
 8007520:	6822      	ldr	r2, [r4, #0]
 8007522:	07d2      	lsls	r2, r2, #31
 8007524:	d501      	bpl.n	800752a <_printf_float+0x1ba>
 8007526:	3302      	adds	r3, #2
 8007528:	e7f4      	b.n	8007514 <_printf_float+0x1a4>
 800752a:	2301      	movs	r3, #1
 800752c:	e7f2      	b.n	8007514 <_printf_float+0x1a4>
 800752e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007532:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007534:	4299      	cmp	r1, r3
 8007536:	db05      	blt.n	8007544 <_printf_float+0x1d4>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	6121      	str	r1, [r4, #16]
 800753c:	07d8      	lsls	r0, r3, #31
 800753e:	d5ea      	bpl.n	8007516 <_printf_float+0x1a6>
 8007540:	1c4b      	adds	r3, r1, #1
 8007542:	e7e7      	b.n	8007514 <_printf_float+0x1a4>
 8007544:	2900      	cmp	r1, #0
 8007546:	bfd4      	ite	le
 8007548:	f1c1 0202 	rsble	r2, r1, #2
 800754c:	2201      	movgt	r2, #1
 800754e:	4413      	add	r3, r2
 8007550:	e7e0      	b.n	8007514 <_printf_float+0x1a4>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	055a      	lsls	r2, r3, #21
 8007556:	d407      	bmi.n	8007568 <_printf_float+0x1f8>
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	4642      	mov	r2, r8
 800755c:	4631      	mov	r1, r6
 800755e:	4628      	mov	r0, r5
 8007560:	47b8      	blx	r7
 8007562:	3001      	adds	r0, #1
 8007564:	d12c      	bne.n	80075c0 <_printf_float+0x250>
 8007566:	e764      	b.n	8007432 <_printf_float+0xc2>
 8007568:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800756c:	f240 80e0 	bls.w	8007730 <_printf_float+0x3c0>
 8007570:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007574:	2200      	movs	r2, #0
 8007576:	2300      	movs	r3, #0
 8007578:	f7f9 faa6 	bl	8000ac8 <__aeabi_dcmpeq>
 800757c:	2800      	cmp	r0, #0
 800757e:	d034      	beq.n	80075ea <_printf_float+0x27a>
 8007580:	4a37      	ldr	r2, [pc, #220]	; (8007660 <_printf_float+0x2f0>)
 8007582:	2301      	movs	r3, #1
 8007584:	4631      	mov	r1, r6
 8007586:	4628      	mov	r0, r5
 8007588:	47b8      	blx	r7
 800758a:	3001      	adds	r0, #1
 800758c:	f43f af51 	beq.w	8007432 <_printf_float+0xc2>
 8007590:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007594:	429a      	cmp	r2, r3
 8007596:	db02      	blt.n	800759e <_printf_float+0x22e>
 8007598:	6823      	ldr	r3, [r4, #0]
 800759a:	07d8      	lsls	r0, r3, #31
 800759c:	d510      	bpl.n	80075c0 <_printf_float+0x250>
 800759e:	ee18 3a10 	vmov	r3, s16
 80075a2:	4652      	mov	r2, sl
 80075a4:	4631      	mov	r1, r6
 80075a6:	4628      	mov	r0, r5
 80075a8:	47b8      	blx	r7
 80075aa:	3001      	adds	r0, #1
 80075ac:	f43f af41 	beq.w	8007432 <_printf_float+0xc2>
 80075b0:	f04f 0800 	mov.w	r8, #0
 80075b4:	f104 091a 	add.w	r9, r4, #26
 80075b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4543      	cmp	r3, r8
 80075be:	dc09      	bgt.n	80075d4 <_printf_float+0x264>
 80075c0:	6823      	ldr	r3, [r4, #0]
 80075c2:	079b      	lsls	r3, r3, #30
 80075c4:	f100 8105 	bmi.w	80077d2 <_printf_float+0x462>
 80075c8:	68e0      	ldr	r0, [r4, #12]
 80075ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075cc:	4298      	cmp	r0, r3
 80075ce:	bfb8      	it	lt
 80075d0:	4618      	movlt	r0, r3
 80075d2:	e730      	b.n	8007436 <_printf_float+0xc6>
 80075d4:	2301      	movs	r3, #1
 80075d6:	464a      	mov	r2, r9
 80075d8:	4631      	mov	r1, r6
 80075da:	4628      	mov	r0, r5
 80075dc:	47b8      	blx	r7
 80075de:	3001      	adds	r0, #1
 80075e0:	f43f af27 	beq.w	8007432 <_printf_float+0xc2>
 80075e4:	f108 0801 	add.w	r8, r8, #1
 80075e8:	e7e6      	b.n	80075b8 <_printf_float+0x248>
 80075ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	dc39      	bgt.n	8007664 <_printf_float+0x2f4>
 80075f0:	4a1b      	ldr	r2, [pc, #108]	; (8007660 <_printf_float+0x2f0>)
 80075f2:	2301      	movs	r3, #1
 80075f4:	4631      	mov	r1, r6
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	f43f af19 	beq.w	8007432 <_printf_float+0xc2>
 8007600:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007604:	4313      	orrs	r3, r2
 8007606:	d102      	bne.n	800760e <_printf_float+0x29e>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	07d9      	lsls	r1, r3, #31
 800760c:	d5d8      	bpl.n	80075c0 <_printf_float+0x250>
 800760e:	ee18 3a10 	vmov	r3, s16
 8007612:	4652      	mov	r2, sl
 8007614:	4631      	mov	r1, r6
 8007616:	4628      	mov	r0, r5
 8007618:	47b8      	blx	r7
 800761a:	3001      	adds	r0, #1
 800761c:	f43f af09 	beq.w	8007432 <_printf_float+0xc2>
 8007620:	f04f 0900 	mov.w	r9, #0
 8007624:	f104 0a1a 	add.w	sl, r4, #26
 8007628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800762a:	425b      	negs	r3, r3
 800762c:	454b      	cmp	r3, r9
 800762e:	dc01      	bgt.n	8007634 <_printf_float+0x2c4>
 8007630:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007632:	e792      	b.n	800755a <_printf_float+0x1ea>
 8007634:	2301      	movs	r3, #1
 8007636:	4652      	mov	r2, sl
 8007638:	4631      	mov	r1, r6
 800763a:	4628      	mov	r0, r5
 800763c:	47b8      	blx	r7
 800763e:	3001      	adds	r0, #1
 8007640:	f43f aef7 	beq.w	8007432 <_printf_float+0xc2>
 8007644:	f109 0901 	add.w	r9, r9, #1
 8007648:	e7ee      	b.n	8007628 <_printf_float+0x2b8>
 800764a:	bf00      	nop
 800764c:	7fefffff 	.word	0x7fefffff
 8007650:	0800bbd8 	.word	0x0800bbd8
 8007654:	0800bbdc 	.word	0x0800bbdc
 8007658:	0800bbe4 	.word	0x0800bbe4
 800765c:	0800bbe0 	.word	0x0800bbe0
 8007660:	0800bbe8 	.word	0x0800bbe8
 8007664:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007666:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007668:	429a      	cmp	r2, r3
 800766a:	bfa8      	it	ge
 800766c:	461a      	movge	r2, r3
 800766e:	2a00      	cmp	r2, #0
 8007670:	4691      	mov	r9, r2
 8007672:	dc37      	bgt.n	80076e4 <_printf_float+0x374>
 8007674:	f04f 0b00 	mov.w	fp, #0
 8007678:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800767c:	f104 021a 	add.w	r2, r4, #26
 8007680:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007682:	9305      	str	r3, [sp, #20]
 8007684:	eba3 0309 	sub.w	r3, r3, r9
 8007688:	455b      	cmp	r3, fp
 800768a:	dc33      	bgt.n	80076f4 <_printf_float+0x384>
 800768c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007690:	429a      	cmp	r2, r3
 8007692:	db3b      	blt.n	800770c <_printf_float+0x39c>
 8007694:	6823      	ldr	r3, [r4, #0]
 8007696:	07da      	lsls	r2, r3, #31
 8007698:	d438      	bmi.n	800770c <_printf_float+0x39c>
 800769a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800769c:	9a05      	ldr	r2, [sp, #20]
 800769e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80076a0:	1a9a      	subs	r2, r3, r2
 80076a2:	eba3 0901 	sub.w	r9, r3, r1
 80076a6:	4591      	cmp	r9, r2
 80076a8:	bfa8      	it	ge
 80076aa:	4691      	movge	r9, r2
 80076ac:	f1b9 0f00 	cmp.w	r9, #0
 80076b0:	dc35      	bgt.n	800771e <_printf_float+0x3ae>
 80076b2:	f04f 0800 	mov.w	r8, #0
 80076b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80076ba:	f104 0a1a 	add.w	sl, r4, #26
 80076be:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076c2:	1a9b      	subs	r3, r3, r2
 80076c4:	eba3 0309 	sub.w	r3, r3, r9
 80076c8:	4543      	cmp	r3, r8
 80076ca:	f77f af79 	ble.w	80075c0 <_printf_float+0x250>
 80076ce:	2301      	movs	r3, #1
 80076d0:	4652      	mov	r2, sl
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f aeaa 	beq.w	8007432 <_printf_float+0xc2>
 80076de:	f108 0801 	add.w	r8, r8, #1
 80076e2:	e7ec      	b.n	80076be <_printf_float+0x34e>
 80076e4:	4613      	mov	r3, r2
 80076e6:	4631      	mov	r1, r6
 80076e8:	4642      	mov	r2, r8
 80076ea:	4628      	mov	r0, r5
 80076ec:	47b8      	blx	r7
 80076ee:	3001      	adds	r0, #1
 80076f0:	d1c0      	bne.n	8007674 <_printf_float+0x304>
 80076f2:	e69e      	b.n	8007432 <_printf_float+0xc2>
 80076f4:	2301      	movs	r3, #1
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	9205      	str	r2, [sp, #20]
 80076fc:	47b8      	blx	r7
 80076fe:	3001      	adds	r0, #1
 8007700:	f43f ae97 	beq.w	8007432 <_printf_float+0xc2>
 8007704:	9a05      	ldr	r2, [sp, #20]
 8007706:	f10b 0b01 	add.w	fp, fp, #1
 800770a:	e7b9      	b.n	8007680 <_printf_float+0x310>
 800770c:	ee18 3a10 	vmov	r3, s16
 8007710:	4652      	mov	r2, sl
 8007712:	4631      	mov	r1, r6
 8007714:	4628      	mov	r0, r5
 8007716:	47b8      	blx	r7
 8007718:	3001      	adds	r0, #1
 800771a:	d1be      	bne.n	800769a <_printf_float+0x32a>
 800771c:	e689      	b.n	8007432 <_printf_float+0xc2>
 800771e:	9a05      	ldr	r2, [sp, #20]
 8007720:	464b      	mov	r3, r9
 8007722:	4442      	add	r2, r8
 8007724:	4631      	mov	r1, r6
 8007726:	4628      	mov	r0, r5
 8007728:	47b8      	blx	r7
 800772a:	3001      	adds	r0, #1
 800772c:	d1c1      	bne.n	80076b2 <_printf_float+0x342>
 800772e:	e680      	b.n	8007432 <_printf_float+0xc2>
 8007730:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007732:	2a01      	cmp	r2, #1
 8007734:	dc01      	bgt.n	800773a <_printf_float+0x3ca>
 8007736:	07db      	lsls	r3, r3, #31
 8007738:	d538      	bpl.n	80077ac <_printf_float+0x43c>
 800773a:	2301      	movs	r3, #1
 800773c:	4642      	mov	r2, r8
 800773e:	4631      	mov	r1, r6
 8007740:	4628      	mov	r0, r5
 8007742:	47b8      	blx	r7
 8007744:	3001      	adds	r0, #1
 8007746:	f43f ae74 	beq.w	8007432 <_printf_float+0xc2>
 800774a:	ee18 3a10 	vmov	r3, s16
 800774e:	4652      	mov	r2, sl
 8007750:	4631      	mov	r1, r6
 8007752:	4628      	mov	r0, r5
 8007754:	47b8      	blx	r7
 8007756:	3001      	adds	r0, #1
 8007758:	f43f ae6b 	beq.w	8007432 <_printf_float+0xc2>
 800775c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007760:	2200      	movs	r2, #0
 8007762:	2300      	movs	r3, #0
 8007764:	f7f9 f9b0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007768:	b9d8      	cbnz	r0, 80077a2 <_printf_float+0x432>
 800776a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800776c:	f108 0201 	add.w	r2, r8, #1
 8007770:	3b01      	subs	r3, #1
 8007772:	4631      	mov	r1, r6
 8007774:	4628      	mov	r0, r5
 8007776:	47b8      	blx	r7
 8007778:	3001      	adds	r0, #1
 800777a:	d10e      	bne.n	800779a <_printf_float+0x42a>
 800777c:	e659      	b.n	8007432 <_printf_float+0xc2>
 800777e:	2301      	movs	r3, #1
 8007780:	4652      	mov	r2, sl
 8007782:	4631      	mov	r1, r6
 8007784:	4628      	mov	r0, r5
 8007786:	47b8      	blx	r7
 8007788:	3001      	adds	r0, #1
 800778a:	f43f ae52 	beq.w	8007432 <_printf_float+0xc2>
 800778e:	f108 0801 	add.w	r8, r8, #1
 8007792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007794:	3b01      	subs	r3, #1
 8007796:	4543      	cmp	r3, r8
 8007798:	dcf1      	bgt.n	800777e <_printf_float+0x40e>
 800779a:	464b      	mov	r3, r9
 800779c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80077a0:	e6dc      	b.n	800755c <_printf_float+0x1ec>
 80077a2:	f04f 0800 	mov.w	r8, #0
 80077a6:	f104 0a1a 	add.w	sl, r4, #26
 80077aa:	e7f2      	b.n	8007792 <_printf_float+0x422>
 80077ac:	2301      	movs	r3, #1
 80077ae:	4642      	mov	r2, r8
 80077b0:	e7df      	b.n	8007772 <_printf_float+0x402>
 80077b2:	2301      	movs	r3, #1
 80077b4:	464a      	mov	r2, r9
 80077b6:	4631      	mov	r1, r6
 80077b8:	4628      	mov	r0, r5
 80077ba:	47b8      	blx	r7
 80077bc:	3001      	adds	r0, #1
 80077be:	f43f ae38 	beq.w	8007432 <_printf_float+0xc2>
 80077c2:	f108 0801 	add.w	r8, r8, #1
 80077c6:	68e3      	ldr	r3, [r4, #12]
 80077c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80077ca:	1a5b      	subs	r3, r3, r1
 80077cc:	4543      	cmp	r3, r8
 80077ce:	dcf0      	bgt.n	80077b2 <_printf_float+0x442>
 80077d0:	e6fa      	b.n	80075c8 <_printf_float+0x258>
 80077d2:	f04f 0800 	mov.w	r8, #0
 80077d6:	f104 0919 	add.w	r9, r4, #25
 80077da:	e7f4      	b.n	80077c6 <_printf_float+0x456>

080077dc <_printf_common>:
 80077dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e0:	4616      	mov	r6, r2
 80077e2:	4699      	mov	r9, r3
 80077e4:	688a      	ldr	r2, [r1, #8]
 80077e6:	690b      	ldr	r3, [r1, #16]
 80077e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077ec:	4293      	cmp	r3, r2
 80077ee:	bfb8      	it	lt
 80077f0:	4613      	movlt	r3, r2
 80077f2:	6033      	str	r3, [r6, #0]
 80077f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077f8:	4607      	mov	r7, r0
 80077fa:	460c      	mov	r4, r1
 80077fc:	b10a      	cbz	r2, 8007802 <_printf_common+0x26>
 80077fe:	3301      	adds	r3, #1
 8007800:	6033      	str	r3, [r6, #0]
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	0699      	lsls	r1, r3, #26
 8007806:	bf42      	ittt	mi
 8007808:	6833      	ldrmi	r3, [r6, #0]
 800780a:	3302      	addmi	r3, #2
 800780c:	6033      	strmi	r3, [r6, #0]
 800780e:	6825      	ldr	r5, [r4, #0]
 8007810:	f015 0506 	ands.w	r5, r5, #6
 8007814:	d106      	bne.n	8007824 <_printf_common+0x48>
 8007816:	f104 0a19 	add.w	sl, r4, #25
 800781a:	68e3      	ldr	r3, [r4, #12]
 800781c:	6832      	ldr	r2, [r6, #0]
 800781e:	1a9b      	subs	r3, r3, r2
 8007820:	42ab      	cmp	r3, r5
 8007822:	dc26      	bgt.n	8007872 <_printf_common+0x96>
 8007824:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007828:	1e13      	subs	r3, r2, #0
 800782a:	6822      	ldr	r2, [r4, #0]
 800782c:	bf18      	it	ne
 800782e:	2301      	movne	r3, #1
 8007830:	0692      	lsls	r2, r2, #26
 8007832:	d42b      	bmi.n	800788c <_printf_common+0xb0>
 8007834:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007838:	4649      	mov	r1, r9
 800783a:	4638      	mov	r0, r7
 800783c:	47c0      	blx	r8
 800783e:	3001      	adds	r0, #1
 8007840:	d01e      	beq.n	8007880 <_printf_common+0xa4>
 8007842:	6823      	ldr	r3, [r4, #0]
 8007844:	68e5      	ldr	r5, [r4, #12]
 8007846:	6832      	ldr	r2, [r6, #0]
 8007848:	f003 0306 	and.w	r3, r3, #6
 800784c:	2b04      	cmp	r3, #4
 800784e:	bf08      	it	eq
 8007850:	1aad      	subeq	r5, r5, r2
 8007852:	68a3      	ldr	r3, [r4, #8]
 8007854:	6922      	ldr	r2, [r4, #16]
 8007856:	bf0c      	ite	eq
 8007858:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800785c:	2500      	movne	r5, #0
 800785e:	4293      	cmp	r3, r2
 8007860:	bfc4      	itt	gt
 8007862:	1a9b      	subgt	r3, r3, r2
 8007864:	18ed      	addgt	r5, r5, r3
 8007866:	2600      	movs	r6, #0
 8007868:	341a      	adds	r4, #26
 800786a:	42b5      	cmp	r5, r6
 800786c:	d11a      	bne.n	80078a4 <_printf_common+0xc8>
 800786e:	2000      	movs	r0, #0
 8007870:	e008      	b.n	8007884 <_printf_common+0xa8>
 8007872:	2301      	movs	r3, #1
 8007874:	4652      	mov	r2, sl
 8007876:	4649      	mov	r1, r9
 8007878:	4638      	mov	r0, r7
 800787a:	47c0      	blx	r8
 800787c:	3001      	adds	r0, #1
 800787e:	d103      	bne.n	8007888 <_printf_common+0xac>
 8007880:	f04f 30ff 	mov.w	r0, #4294967295
 8007884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007888:	3501      	adds	r5, #1
 800788a:	e7c6      	b.n	800781a <_printf_common+0x3e>
 800788c:	18e1      	adds	r1, r4, r3
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	2030      	movs	r0, #48	; 0x30
 8007892:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007896:	4422      	add	r2, r4
 8007898:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800789c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80078a0:	3302      	adds	r3, #2
 80078a2:	e7c7      	b.n	8007834 <_printf_common+0x58>
 80078a4:	2301      	movs	r3, #1
 80078a6:	4622      	mov	r2, r4
 80078a8:	4649      	mov	r1, r9
 80078aa:	4638      	mov	r0, r7
 80078ac:	47c0      	blx	r8
 80078ae:	3001      	adds	r0, #1
 80078b0:	d0e6      	beq.n	8007880 <_printf_common+0xa4>
 80078b2:	3601      	adds	r6, #1
 80078b4:	e7d9      	b.n	800786a <_printf_common+0x8e>
	...

080078b8 <_printf_i>:
 80078b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	7e0f      	ldrb	r7, [r1, #24]
 80078be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078c0:	2f78      	cmp	r7, #120	; 0x78
 80078c2:	4691      	mov	r9, r2
 80078c4:	4680      	mov	r8, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	469a      	mov	sl, r3
 80078ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80078ce:	d807      	bhi.n	80078e0 <_printf_i+0x28>
 80078d0:	2f62      	cmp	r7, #98	; 0x62
 80078d2:	d80a      	bhi.n	80078ea <_printf_i+0x32>
 80078d4:	2f00      	cmp	r7, #0
 80078d6:	f000 80d8 	beq.w	8007a8a <_printf_i+0x1d2>
 80078da:	2f58      	cmp	r7, #88	; 0x58
 80078dc:	f000 80a3 	beq.w	8007a26 <_printf_i+0x16e>
 80078e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078e8:	e03a      	b.n	8007960 <_printf_i+0xa8>
 80078ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ee:	2b15      	cmp	r3, #21
 80078f0:	d8f6      	bhi.n	80078e0 <_printf_i+0x28>
 80078f2:	a101      	add	r1, pc, #4	; (adr r1, 80078f8 <_printf_i+0x40>)
 80078f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078f8:	08007951 	.word	0x08007951
 80078fc:	08007965 	.word	0x08007965
 8007900:	080078e1 	.word	0x080078e1
 8007904:	080078e1 	.word	0x080078e1
 8007908:	080078e1 	.word	0x080078e1
 800790c:	080078e1 	.word	0x080078e1
 8007910:	08007965 	.word	0x08007965
 8007914:	080078e1 	.word	0x080078e1
 8007918:	080078e1 	.word	0x080078e1
 800791c:	080078e1 	.word	0x080078e1
 8007920:	080078e1 	.word	0x080078e1
 8007924:	08007a71 	.word	0x08007a71
 8007928:	08007995 	.word	0x08007995
 800792c:	08007a53 	.word	0x08007a53
 8007930:	080078e1 	.word	0x080078e1
 8007934:	080078e1 	.word	0x080078e1
 8007938:	08007a93 	.word	0x08007a93
 800793c:	080078e1 	.word	0x080078e1
 8007940:	08007995 	.word	0x08007995
 8007944:	080078e1 	.word	0x080078e1
 8007948:	080078e1 	.word	0x080078e1
 800794c:	08007a5b 	.word	0x08007a5b
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	1d1a      	adds	r2, r3, #4
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	602a      	str	r2, [r5, #0]
 8007958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800795c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007960:	2301      	movs	r3, #1
 8007962:	e0a3      	b.n	8007aac <_printf_i+0x1f4>
 8007964:	6820      	ldr	r0, [r4, #0]
 8007966:	6829      	ldr	r1, [r5, #0]
 8007968:	0606      	lsls	r6, r0, #24
 800796a:	f101 0304 	add.w	r3, r1, #4
 800796e:	d50a      	bpl.n	8007986 <_printf_i+0xce>
 8007970:	680e      	ldr	r6, [r1, #0]
 8007972:	602b      	str	r3, [r5, #0]
 8007974:	2e00      	cmp	r6, #0
 8007976:	da03      	bge.n	8007980 <_printf_i+0xc8>
 8007978:	232d      	movs	r3, #45	; 0x2d
 800797a:	4276      	negs	r6, r6
 800797c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007980:	485e      	ldr	r0, [pc, #376]	; (8007afc <_printf_i+0x244>)
 8007982:	230a      	movs	r3, #10
 8007984:	e019      	b.n	80079ba <_printf_i+0x102>
 8007986:	680e      	ldr	r6, [r1, #0]
 8007988:	602b      	str	r3, [r5, #0]
 800798a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800798e:	bf18      	it	ne
 8007990:	b236      	sxthne	r6, r6
 8007992:	e7ef      	b.n	8007974 <_printf_i+0xbc>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	6820      	ldr	r0, [r4, #0]
 8007998:	1d19      	adds	r1, r3, #4
 800799a:	6029      	str	r1, [r5, #0]
 800799c:	0601      	lsls	r1, r0, #24
 800799e:	d501      	bpl.n	80079a4 <_printf_i+0xec>
 80079a0:	681e      	ldr	r6, [r3, #0]
 80079a2:	e002      	b.n	80079aa <_printf_i+0xf2>
 80079a4:	0646      	lsls	r6, r0, #25
 80079a6:	d5fb      	bpl.n	80079a0 <_printf_i+0xe8>
 80079a8:	881e      	ldrh	r6, [r3, #0]
 80079aa:	4854      	ldr	r0, [pc, #336]	; (8007afc <_printf_i+0x244>)
 80079ac:	2f6f      	cmp	r7, #111	; 0x6f
 80079ae:	bf0c      	ite	eq
 80079b0:	2308      	moveq	r3, #8
 80079b2:	230a      	movne	r3, #10
 80079b4:	2100      	movs	r1, #0
 80079b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80079ba:	6865      	ldr	r5, [r4, #4]
 80079bc:	60a5      	str	r5, [r4, #8]
 80079be:	2d00      	cmp	r5, #0
 80079c0:	bfa2      	ittt	ge
 80079c2:	6821      	ldrge	r1, [r4, #0]
 80079c4:	f021 0104 	bicge.w	r1, r1, #4
 80079c8:	6021      	strge	r1, [r4, #0]
 80079ca:	b90e      	cbnz	r6, 80079d0 <_printf_i+0x118>
 80079cc:	2d00      	cmp	r5, #0
 80079ce:	d04d      	beq.n	8007a6c <_printf_i+0x1b4>
 80079d0:	4615      	mov	r5, r2
 80079d2:	fbb6 f1f3 	udiv	r1, r6, r3
 80079d6:	fb03 6711 	mls	r7, r3, r1, r6
 80079da:	5dc7      	ldrb	r7, [r0, r7]
 80079dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079e0:	4637      	mov	r7, r6
 80079e2:	42bb      	cmp	r3, r7
 80079e4:	460e      	mov	r6, r1
 80079e6:	d9f4      	bls.n	80079d2 <_printf_i+0x11a>
 80079e8:	2b08      	cmp	r3, #8
 80079ea:	d10b      	bne.n	8007a04 <_printf_i+0x14c>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	07de      	lsls	r6, r3, #31
 80079f0:	d508      	bpl.n	8007a04 <_printf_i+0x14c>
 80079f2:	6923      	ldr	r3, [r4, #16]
 80079f4:	6861      	ldr	r1, [r4, #4]
 80079f6:	4299      	cmp	r1, r3
 80079f8:	bfde      	ittt	le
 80079fa:	2330      	movle	r3, #48	; 0x30
 80079fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007a00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007a04:	1b52      	subs	r2, r2, r5
 8007a06:	6122      	str	r2, [r4, #16]
 8007a08:	f8cd a000 	str.w	sl, [sp]
 8007a0c:	464b      	mov	r3, r9
 8007a0e:	aa03      	add	r2, sp, #12
 8007a10:	4621      	mov	r1, r4
 8007a12:	4640      	mov	r0, r8
 8007a14:	f7ff fee2 	bl	80077dc <_printf_common>
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d14c      	bne.n	8007ab6 <_printf_i+0x1fe>
 8007a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a20:	b004      	add	sp, #16
 8007a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a26:	4835      	ldr	r0, [pc, #212]	; (8007afc <_printf_i+0x244>)
 8007a28:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007a2c:	6829      	ldr	r1, [r5, #0]
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	f851 6b04 	ldr.w	r6, [r1], #4
 8007a34:	6029      	str	r1, [r5, #0]
 8007a36:	061d      	lsls	r5, r3, #24
 8007a38:	d514      	bpl.n	8007a64 <_printf_i+0x1ac>
 8007a3a:	07df      	lsls	r7, r3, #31
 8007a3c:	bf44      	itt	mi
 8007a3e:	f043 0320 	orrmi.w	r3, r3, #32
 8007a42:	6023      	strmi	r3, [r4, #0]
 8007a44:	b91e      	cbnz	r6, 8007a4e <_printf_i+0x196>
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	f023 0320 	bic.w	r3, r3, #32
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	2310      	movs	r3, #16
 8007a50:	e7b0      	b.n	80079b4 <_printf_i+0xfc>
 8007a52:	6823      	ldr	r3, [r4, #0]
 8007a54:	f043 0320 	orr.w	r3, r3, #32
 8007a58:	6023      	str	r3, [r4, #0]
 8007a5a:	2378      	movs	r3, #120	; 0x78
 8007a5c:	4828      	ldr	r0, [pc, #160]	; (8007b00 <_printf_i+0x248>)
 8007a5e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a62:	e7e3      	b.n	8007a2c <_printf_i+0x174>
 8007a64:	0659      	lsls	r1, r3, #25
 8007a66:	bf48      	it	mi
 8007a68:	b2b6      	uxthmi	r6, r6
 8007a6a:	e7e6      	b.n	8007a3a <_printf_i+0x182>
 8007a6c:	4615      	mov	r5, r2
 8007a6e:	e7bb      	b.n	80079e8 <_printf_i+0x130>
 8007a70:	682b      	ldr	r3, [r5, #0]
 8007a72:	6826      	ldr	r6, [r4, #0]
 8007a74:	6961      	ldr	r1, [r4, #20]
 8007a76:	1d18      	adds	r0, r3, #4
 8007a78:	6028      	str	r0, [r5, #0]
 8007a7a:	0635      	lsls	r5, r6, #24
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	d501      	bpl.n	8007a84 <_printf_i+0x1cc>
 8007a80:	6019      	str	r1, [r3, #0]
 8007a82:	e002      	b.n	8007a8a <_printf_i+0x1d2>
 8007a84:	0670      	lsls	r0, r6, #25
 8007a86:	d5fb      	bpl.n	8007a80 <_printf_i+0x1c8>
 8007a88:	8019      	strh	r1, [r3, #0]
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	6123      	str	r3, [r4, #16]
 8007a8e:	4615      	mov	r5, r2
 8007a90:	e7ba      	b.n	8007a08 <_printf_i+0x150>
 8007a92:	682b      	ldr	r3, [r5, #0]
 8007a94:	1d1a      	adds	r2, r3, #4
 8007a96:	602a      	str	r2, [r5, #0]
 8007a98:	681d      	ldr	r5, [r3, #0]
 8007a9a:	6862      	ldr	r2, [r4, #4]
 8007a9c:	2100      	movs	r1, #0
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f7f8 fb9e 	bl	80001e0 <memchr>
 8007aa4:	b108      	cbz	r0, 8007aaa <_printf_i+0x1f2>
 8007aa6:	1b40      	subs	r0, r0, r5
 8007aa8:	6060      	str	r0, [r4, #4]
 8007aaa:	6863      	ldr	r3, [r4, #4]
 8007aac:	6123      	str	r3, [r4, #16]
 8007aae:	2300      	movs	r3, #0
 8007ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ab4:	e7a8      	b.n	8007a08 <_printf_i+0x150>
 8007ab6:	6923      	ldr	r3, [r4, #16]
 8007ab8:	462a      	mov	r2, r5
 8007aba:	4649      	mov	r1, r9
 8007abc:	4640      	mov	r0, r8
 8007abe:	47d0      	blx	sl
 8007ac0:	3001      	adds	r0, #1
 8007ac2:	d0ab      	beq.n	8007a1c <_printf_i+0x164>
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	079b      	lsls	r3, r3, #30
 8007ac8:	d413      	bmi.n	8007af2 <_printf_i+0x23a>
 8007aca:	68e0      	ldr	r0, [r4, #12]
 8007acc:	9b03      	ldr	r3, [sp, #12]
 8007ace:	4298      	cmp	r0, r3
 8007ad0:	bfb8      	it	lt
 8007ad2:	4618      	movlt	r0, r3
 8007ad4:	e7a4      	b.n	8007a20 <_printf_i+0x168>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	4632      	mov	r2, r6
 8007ada:	4649      	mov	r1, r9
 8007adc:	4640      	mov	r0, r8
 8007ade:	47d0      	blx	sl
 8007ae0:	3001      	adds	r0, #1
 8007ae2:	d09b      	beq.n	8007a1c <_printf_i+0x164>
 8007ae4:	3501      	adds	r5, #1
 8007ae6:	68e3      	ldr	r3, [r4, #12]
 8007ae8:	9903      	ldr	r1, [sp, #12]
 8007aea:	1a5b      	subs	r3, r3, r1
 8007aec:	42ab      	cmp	r3, r5
 8007aee:	dcf2      	bgt.n	8007ad6 <_printf_i+0x21e>
 8007af0:	e7eb      	b.n	8007aca <_printf_i+0x212>
 8007af2:	2500      	movs	r5, #0
 8007af4:	f104 0619 	add.w	r6, r4, #25
 8007af8:	e7f5      	b.n	8007ae6 <_printf_i+0x22e>
 8007afa:	bf00      	nop
 8007afc:	0800bbea 	.word	0x0800bbea
 8007b00:	0800bbfb 	.word	0x0800bbfb

08007b04 <_scanf_float>:
 8007b04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b08:	b087      	sub	sp, #28
 8007b0a:	4617      	mov	r7, r2
 8007b0c:	9303      	str	r3, [sp, #12]
 8007b0e:	688b      	ldr	r3, [r1, #8]
 8007b10:	1e5a      	subs	r2, r3, #1
 8007b12:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007b16:	bf83      	ittte	hi
 8007b18:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007b1c:	195b      	addhi	r3, r3, r5
 8007b1e:	9302      	strhi	r3, [sp, #8]
 8007b20:	2300      	movls	r3, #0
 8007b22:	bf86      	itte	hi
 8007b24:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007b28:	608b      	strhi	r3, [r1, #8]
 8007b2a:	9302      	strls	r3, [sp, #8]
 8007b2c:	680b      	ldr	r3, [r1, #0]
 8007b2e:	468b      	mov	fp, r1
 8007b30:	2500      	movs	r5, #0
 8007b32:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007b36:	f84b 3b1c 	str.w	r3, [fp], #28
 8007b3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007b3e:	4680      	mov	r8, r0
 8007b40:	460c      	mov	r4, r1
 8007b42:	465e      	mov	r6, fp
 8007b44:	46aa      	mov	sl, r5
 8007b46:	46a9      	mov	r9, r5
 8007b48:	9501      	str	r5, [sp, #4]
 8007b4a:	68a2      	ldr	r2, [r4, #8]
 8007b4c:	b152      	cbz	r2, 8007b64 <_scanf_float+0x60>
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	781b      	ldrb	r3, [r3, #0]
 8007b52:	2b4e      	cmp	r3, #78	; 0x4e
 8007b54:	d864      	bhi.n	8007c20 <_scanf_float+0x11c>
 8007b56:	2b40      	cmp	r3, #64	; 0x40
 8007b58:	d83c      	bhi.n	8007bd4 <_scanf_float+0xd0>
 8007b5a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007b5e:	b2c8      	uxtb	r0, r1
 8007b60:	280e      	cmp	r0, #14
 8007b62:	d93a      	bls.n	8007bda <_scanf_float+0xd6>
 8007b64:	f1b9 0f00 	cmp.w	r9, #0
 8007b68:	d003      	beq.n	8007b72 <_scanf_float+0x6e>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b70:	6023      	str	r3, [r4, #0]
 8007b72:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b76:	f1ba 0f01 	cmp.w	sl, #1
 8007b7a:	f200 8113 	bhi.w	8007da4 <_scanf_float+0x2a0>
 8007b7e:	455e      	cmp	r6, fp
 8007b80:	f200 8105 	bhi.w	8007d8e <_scanf_float+0x28a>
 8007b84:	2501      	movs	r5, #1
 8007b86:	4628      	mov	r0, r5
 8007b88:	b007      	add	sp, #28
 8007b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007b92:	2a0d      	cmp	r2, #13
 8007b94:	d8e6      	bhi.n	8007b64 <_scanf_float+0x60>
 8007b96:	a101      	add	r1, pc, #4	; (adr r1, 8007b9c <_scanf_float+0x98>)
 8007b98:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007b9c:	08007cdb 	.word	0x08007cdb
 8007ba0:	08007b65 	.word	0x08007b65
 8007ba4:	08007b65 	.word	0x08007b65
 8007ba8:	08007b65 	.word	0x08007b65
 8007bac:	08007d3b 	.word	0x08007d3b
 8007bb0:	08007d13 	.word	0x08007d13
 8007bb4:	08007b65 	.word	0x08007b65
 8007bb8:	08007b65 	.word	0x08007b65
 8007bbc:	08007ce9 	.word	0x08007ce9
 8007bc0:	08007b65 	.word	0x08007b65
 8007bc4:	08007b65 	.word	0x08007b65
 8007bc8:	08007b65 	.word	0x08007b65
 8007bcc:	08007b65 	.word	0x08007b65
 8007bd0:	08007ca1 	.word	0x08007ca1
 8007bd4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007bd8:	e7db      	b.n	8007b92 <_scanf_float+0x8e>
 8007bda:	290e      	cmp	r1, #14
 8007bdc:	d8c2      	bhi.n	8007b64 <_scanf_float+0x60>
 8007bde:	a001      	add	r0, pc, #4	; (adr r0, 8007be4 <_scanf_float+0xe0>)
 8007be0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007be4:	08007c93 	.word	0x08007c93
 8007be8:	08007b65 	.word	0x08007b65
 8007bec:	08007c93 	.word	0x08007c93
 8007bf0:	08007d27 	.word	0x08007d27
 8007bf4:	08007b65 	.word	0x08007b65
 8007bf8:	08007c41 	.word	0x08007c41
 8007bfc:	08007c7d 	.word	0x08007c7d
 8007c00:	08007c7d 	.word	0x08007c7d
 8007c04:	08007c7d 	.word	0x08007c7d
 8007c08:	08007c7d 	.word	0x08007c7d
 8007c0c:	08007c7d 	.word	0x08007c7d
 8007c10:	08007c7d 	.word	0x08007c7d
 8007c14:	08007c7d 	.word	0x08007c7d
 8007c18:	08007c7d 	.word	0x08007c7d
 8007c1c:	08007c7d 	.word	0x08007c7d
 8007c20:	2b6e      	cmp	r3, #110	; 0x6e
 8007c22:	d809      	bhi.n	8007c38 <_scanf_float+0x134>
 8007c24:	2b60      	cmp	r3, #96	; 0x60
 8007c26:	d8b2      	bhi.n	8007b8e <_scanf_float+0x8a>
 8007c28:	2b54      	cmp	r3, #84	; 0x54
 8007c2a:	d077      	beq.n	8007d1c <_scanf_float+0x218>
 8007c2c:	2b59      	cmp	r3, #89	; 0x59
 8007c2e:	d199      	bne.n	8007b64 <_scanf_float+0x60>
 8007c30:	2d07      	cmp	r5, #7
 8007c32:	d197      	bne.n	8007b64 <_scanf_float+0x60>
 8007c34:	2508      	movs	r5, #8
 8007c36:	e029      	b.n	8007c8c <_scanf_float+0x188>
 8007c38:	2b74      	cmp	r3, #116	; 0x74
 8007c3a:	d06f      	beq.n	8007d1c <_scanf_float+0x218>
 8007c3c:	2b79      	cmp	r3, #121	; 0x79
 8007c3e:	e7f6      	b.n	8007c2e <_scanf_float+0x12a>
 8007c40:	6821      	ldr	r1, [r4, #0]
 8007c42:	05c8      	lsls	r0, r1, #23
 8007c44:	d51a      	bpl.n	8007c7c <_scanf_float+0x178>
 8007c46:	9b02      	ldr	r3, [sp, #8]
 8007c48:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007c4c:	6021      	str	r1, [r4, #0]
 8007c4e:	f109 0901 	add.w	r9, r9, #1
 8007c52:	b11b      	cbz	r3, 8007c5c <_scanf_float+0x158>
 8007c54:	3b01      	subs	r3, #1
 8007c56:	3201      	adds	r2, #1
 8007c58:	9302      	str	r3, [sp, #8]
 8007c5a:	60a2      	str	r2, [r4, #8]
 8007c5c:	68a3      	ldr	r3, [r4, #8]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	60a3      	str	r3, [r4, #8]
 8007c62:	6923      	ldr	r3, [r4, #16]
 8007c64:	3301      	adds	r3, #1
 8007c66:	6123      	str	r3, [r4, #16]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	607b      	str	r3, [r7, #4]
 8007c70:	f340 8084 	ble.w	8007d7c <_scanf_float+0x278>
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	3301      	adds	r3, #1
 8007c78:	603b      	str	r3, [r7, #0]
 8007c7a:	e766      	b.n	8007b4a <_scanf_float+0x46>
 8007c7c:	eb1a 0f05 	cmn.w	sl, r5
 8007c80:	f47f af70 	bne.w	8007b64 <_scanf_float+0x60>
 8007c84:	6822      	ldr	r2, [r4, #0]
 8007c86:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007c8a:	6022      	str	r2, [r4, #0]
 8007c8c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c90:	e7e4      	b.n	8007c5c <_scanf_float+0x158>
 8007c92:	6822      	ldr	r2, [r4, #0]
 8007c94:	0610      	lsls	r0, r2, #24
 8007c96:	f57f af65 	bpl.w	8007b64 <_scanf_float+0x60>
 8007c9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c9e:	e7f4      	b.n	8007c8a <_scanf_float+0x186>
 8007ca0:	f1ba 0f00 	cmp.w	sl, #0
 8007ca4:	d10e      	bne.n	8007cc4 <_scanf_float+0x1c0>
 8007ca6:	f1b9 0f00 	cmp.w	r9, #0
 8007caa:	d10e      	bne.n	8007cca <_scanf_float+0x1c6>
 8007cac:	6822      	ldr	r2, [r4, #0]
 8007cae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007cb2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007cb6:	d108      	bne.n	8007cca <_scanf_float+0x1c6>
 8007cb8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007cbc:	6022      	str	r2, [r4, #0]
 8007cbe:	f04f 0a01 	mov.w	sl, #1
 8007cc2:	e7e3      	b.n	8007c8c <_scanf_float+0x188>
 8007cc4:	f1ba 0f02 	cmp.w	sl, #2
 8007cc8:	d055      	beq.n	8007d76 <_scanf_float+0x272>
 8007cca:	2d01      	cmp	r5, #1
 8007ccc:	d002      	beq.n	8007cd4 <_scanf_float+0x1d0>
 8007cce:	2d04      	cmp	r5, #4
 8007cd0:	f47f af48 	bne.w	8007b64 <_scanf_float+0x60>
 8007cd4:	3501      	adds	r5, #1
 8007cd6:	b2ed      	uxtb	r5, r5
 8007cd8:	e7d8      	b.n	8007c8c <_scanf_float+0x188>
 8007cda:	f1ba 0f01 	cmp.w	sl, #1
 8007cde:	f47f af41 	bne.w	8007b64 <_scanf_float+0x60>
 8007ce2:	f04f 0a02 	mov.w	sl, #2
 8007ce6:	e7d1      	b.n	8007c8c <_scanf_float+0x188>
 8007ce8:	b97d      	cbnz	r5, 8007d0a <_scanf_float+0x206>
 8007cea:	f1b9 0f00 	cmp.w	r9, #0
 8007cee:	f47f af3c 	bne.w	8007b6a <_scanf_float+0x66>
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007cf8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007cfc:	f47f af39 	bne.w	8007b72 <_scanf_float+0x6e>
 8007d00:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d04:	6022      	str	r2, [r4, #0]
 8007d06:	2501      	movs	r5, #1
 8007d08:	e7c0      	b.n	8007c8c <_scanf_float+0x188>
 8007d0a:	2d03      	cmp	r5, #3
 8007d0c:	d0e2      	beq.n	8007cd4 <_scanf_float+0x1d0>
 8007d0e:	2d05      	cmp	r5, #5
 8007d10:	e7de      	b.n	8007cd0 <_scanf_float+0x1cc>
 8007d12:	2d02      	cmp	r5, #2
 8007d14:	f47f af26 	bne.w	8007b64 <_scanf_float+0x60>
 8007d18:	2503      	movs	r5, #3
 8007d1a:	e7b7      	b.n	8007c8c <_scanf_float+0x188>
 8007d1c:	2d06      	cmp	r5, #6
 8007d1e:	f47f af21 	bne.w	8007b64 <_scanf_float+0x60>
 8007d22:	2507      	movs	r5, #7
 8007d24:	e7b2      	b.n	8007c8c <_scanf_float+0x188>
 8007d26:	6822      	ldr	r2, [r4, #0]
 8007d28:	0591      	lsls	r1, r2, #22
 8007d2a:	f57f af1b 	bpl.w	8007b64 <_scanf_float+0x60>
 8007d2e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007d32:	6022      	str	r2, [r4, #0]
 8007d34:	f8cd 9004 	str.w	r9, [sp, #4]
 8007d38:	e7a8      	b.n	8007c8c <_scanf_float+0x188>
 8007d3a:	6822      	ldr	r2, [r4, #0]
 8007d3c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007d40:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007d44:	d006      	beq.n	8007d54 <_scanf_float+0x250>
 8007d46:	0550      	lsls	r0, r2, #21
 8007d48:	f57f af0c 	bpl.w	8007b64 <_scanf_float+0x60>
 8007d4c:	f1b9 0f00 	cmp.w	r9, #0
 8007d50:	f43f af0f 	beq.w	8007b72 <_scanf_float+0x6e>
 8007d54:	0591      	lsls	r1, r2, #22
 8007d56:	bf58      	it	pl
 8007d58:	9901      	ldrpl	r1, [sp, #4]
 8007d5a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007d5e:	bf58      	it	pl
 8007d60:	eba9 0101 	subpl.w	r1, r9, r1
 8007d64:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007d68:	bf58      	it	pl
 8007d6a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007d6e:	6022      	str	r2, [r4, #0]
 8007d70:	f04f 0900 	mov.w	r9, #0
 8007d74:	e78a      	b.n	8007c8c <_scanf_float+0x188>
 8007d76:	f04f 0a03 	mov.w	sl, #3
 8007d7a:	e787      	b.n	8007c8c <_scanf_float+0x188>
 8007d7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007d80:	4639      	mov	r1, r7
 8007d82:	4640      	mov	r0, r8
 8007d84:	4798      	blx	r3
 8007d86:	2800      	cmp	r0, #0
 8007d88:	f43f aedf 	beq.w	8007b4a <_scanf_float+0x46>
 8007d8c:	e6ea      	b.n	8007b64 <_scanf_float+0x60>
 8007d8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d96:	463a      	mov	r2, r7
 8007d98:	4640      	mov	r0, r8
 8007d9a:	4798      	blx	r3
 8007d9c:	6923      	ldr	r3, [r4, #16]
 8007d9e:	3b01      	subs	r3, #1
 8007da0:	6123      	str	r3, [r4, #16]
 8007da2:	e6ec      	b.n	8007b7e <_scanf_float+0x7a>
 8007da4:	1e6b      	subs	r3, r5, #1
 8007da6:	2b06      	cmp	r3, #6
 8007da8:	d825      	bhi.n	8007df6 <_scanf_float+0x2f2>
 8007daa:	2d02      	cmp	r5, #2
 8007dac:	d836      	bhi.n	8007e1c <_scanf_float+0x318>
 8007dae:	455e      	cmp	r6, fp
 8007db0:	f67f aee8 	bls.w	8007b84 <_scanf_float+0x80>
 8007db4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007db8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007dbc:	463a      	mov	r2, r7
 8007dbe:	4640      	mov	r0, r8
 8007dc0:	4798      	blx	r3
 8007dc2:	6923      	ldr	r3, [r4, #16]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	6123      	str	r3, [r4, #16]
 8007dc8:	e7f1      	b.n	8007dae <_scanf_float+0x2aa>
 8007dca:	9802      	ldr	r0, [sp, #8]
 8007dcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007dd0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007dd4:	9002      	str	r0, [sp, #8]
 8007dd6:	463a      	mov	r2, r7
 8007dd8:	4640      	mov	r0, r8
 8007dda:	4798      	blx	r3
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	3b01      	subs	r3, #1
 8007de0:	6123      	str	r3, [r4, #16]
 8007de2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007de6:	fa5f fa8a 	uxtb.w	sl, sl
 8007dea:	f1ba 0f02 	cmp.w	sl, #2
 8007dee:	d1ec      	bne.n	8007dca <_scanf_float+0x2c6>
 8007df0:	3d03      	subs	r5, #3
 8007df2:	b2ed      	uxtb	r5, r5
 8007df4:	1b76      	subs	r6, r6, r5
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	05da      	lsls	r2, r3, #23
 8007dfa:	d52f      	bpl.n	8007e5c <_scanf_float+0x358>
 8007dfc:	055b      	lsls	r3, r3, #21
 8007dfe:	d510      	bpl.n	8007e22 <_scanf_float+0x31e>
 8007e00:	455e      	cmp	r6, fp
 8007e02:	f67f aebf 	bls.w	8007b84 <_scanf_float+0x80>
 8007e06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007e0e:	463a      	mov	r2, r7
 8007e10:	4640      	mov	r0, r8
 8007e12:	4798      	blx	r3
 8007e14:	6923      	ldr	r3, [r4, #16]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	6123      	str	r3, [r4, #16]
 8007e1a:	e7f1      	b.n	8007e00 <_scanf_float+0x2fc>
 8007e1c:	46aa      	mov	sl, r5
 8007e1e:	9602      	str	r6, [sp, #8]
 8007e20:	e7df      	b.n	8007de2 <_scanf_float+0x2de>
 8007e22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007e26:	6923      	ldr	r3, [r4, #16]
 8007e28:	2965      	cmp	r1, #101	; 0x65
 8007e2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8007e2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007e32:	6123      	str	r3, [r4, #16]
 8007e34:	d00c      	beq.n	8007e50 <_scanf_float+0x34c>
 8007e36:	2945      	cmp	r1, #69	; 0x45
 8007e38:	d00a      	beq.n	8007e50 <_scanf_float+0x34c>
 8007e3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e3e:	463a      	mov	r2, r7
 8007e40:	4640      	mov	r0, r8
 8007e42:	4798      	blx	r3
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	1eb5      	subs	r5, r6, #2
 8007e4e:	6123      	str	r3, [r4, #16]
 8007e50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007e54:	463a      	mov	r2, r7
 8007e56:	4640      	mov	r0, r8
 8007e58:	4798      	blx	r3
 8007e5a:	462e      	mov	r6, r5
 8007e5c:	6825      	ldr	r5, [r4, #0]
 8007e5e:	f015 0510 	ands.w	r5, r5, #16
 8007e62:	d159      	bne.n	8007f18 <_scanf_float+0x414>
 8007e64:	7035      	strb	r5, [r6, #0]
 8007e66:	6823      	ldr	r3, [r4, #0]
 8007e68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e70:	d11b      	bne.n	8007eaa <_scanf_float+0x3a6>
 8007e72:	9b01      	ldr	r3, [sp, #4]
 8007e74:	454b      	cmp	r3, r9
 8007e76:	eba3 0209 	sub.w	r2, r3, r9
 8007e7a:	d123      	bne.n	8007ec4 <_scanf_float+0x3c0>
 8007e7c:	2200      	movs	r2, #0
 8007e7e:	4659      	mov	r1, fp
 8007e80:	4640      	mov	r0, r8
 8007e82:	f000 fe97 	bl	8008bb4 <_strtod_r>
 8007e86:	6822      	ldr	r2, [r4, #0]
 8007e88:	9b03      	ldr	r3, [sp, #12]
 8007e8a:	f012 0f02 	tst.w	r2, #2
 8007e8e:	ec57 6b10 	vmov	r6, r7, d0
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	d021      	beq.n	8007eda <_scanf_float+0x3d6>
 8007e96:	9903      	ldr	r1, [sp, #12]
 8007e98:	1d1a      	adds	r2, r3, #4
 8007e9a:	600a      	str	r2, [r1, #0]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	e9c3 6700 	strd	r6, r7, [r3]
 8007ea2:	68e3      	ldr	r3, [r4, #12]
 8007ea4:	3301      	adds	r3, #1
 8007ea6:	60e3      	str	r3, [r4, #12]
 8007ea8:	e66d      	b.n	8007b86 <_scanf_float+0x82>
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0e5      	beq.n	8007e7c <_scanf_float+0x378>
 8007eb0:	9905      	ldr	r1, [sp, #20]
 8007eb2:	230a      	movs	r3, #10
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	3101      	adds	r1, #1
 8007eb8:	4640      	mov	r0, r8
 8007eba:	f000 ff03 	bl	8008cc4 <_strtol_r>
 8007ebe:	9b04      	ldr	r3, [sp, #16]
 8007ec0:	9e05      	ldr	r6, [sp, #20]
 8007ec2:	1ac2      	subs	r2, r0, r3
 8007ec4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007ec8:	429e      	cmp	r6, r3
 8007eca:	bf28      	it	cs
 8007ecc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007ed0:	4912      	ldr	r1, [pc, #72]	; (8007f1c <_scanf_float+0x418>)
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 f82c 	bl	8007f30 <siprintf>
 8007ed8:	e7d0      	b.n	8007e7c <_scanf_float+0x378>
 8007eda:	9903      	ldr	r1, [sp, #12]
 8007edc:	f012 0f04 	tst.w	r2, #4
 8007ee0:	f103 0204 	add.w	r2, r3, #4
 8007ee4:	600a      	str	r2, [r1, #0]
 8007ee6:	d1d9      	bne.n	8007e9c <_scanf_float+0x398>
 8007ee8:	f8d3 8000 	ldr.w	r8, [r3]
 8007eec:	ee10 2a10 	vmov	r2, s0
 8007ef0:	ee10 0a10 	vmov	r0, s0
 8007ef4:	463b      	mov	r3, r7
 8007ef6:	4639      	mov	r1, r7
 8007ef8:	f7f8 fe18 	bl	8000b2c <__aeabi_dcmpun>
 8007efc:	b128      	cbz	r0, 8007f0a <_scanf_float+0x406>
 8007efe:	4808      	ldr	r0, [pc, #32]	; (8007f20 <_scanf_float+0x41c>)
 8007f00:	f000 f810 	bl	8007f24 <nanf>
 8007f04:	ed88 0a00 	vstr	s0, [r8]
 8007f08:	e7cb      	b.n	8007ea2 <_scanf_float+0x39e>
 8007f0a:	4630      	mov	r0, r6
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	f7f8 fe6b 	bl	8000be8 <__aeabi_d2f>
 8007f12:	f8c8 0000 	str.w	r0, [r8]
 8007f16:	e7c4      	b.n	8007ea2 <_scanf_float+0x39e>
 8007f18:	2500      	movs	r5, #0
 8007f1a:	e634      	b.n	8007b86 <_scanf_float+0x82>
 8007f1c:	0800bc0c 	.word	0x0800bc0c
 8007f20:	0800c018 	.word	0x0800c018

08007f24 <nanf>:
 8007f24:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f2c <nanf+0x8>
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	7fc00000 	.word	0x7fc00000

08007f30 <siprintf>:
 8007f30:	b40e      	push	{r1, r2, r3}
 8007f32:	b500      	push	{lr}
 8007f34:	b09c      	sub	sp, #112	; 0x70
 8007f36:	ab1d      	add	r3, sp, #116	; 0x74
 8007f38:	9002      	str	r0, [sp, #8]
 8007f3a:	9006      	str	r0, [sp, #24]
 8007f3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f40:	4809      	ldr	r0, [pc, #36]	; (8007f68 <siprintf+0x38>)
 8007f42:	9107      	str	r1, [sp, #28]
 8007f44:	9104      	str	r1, [sp, #16]
 8007f46:	4909      	ldr	r1, [pc, #36]	; (8007f6c <siprintf+0x3c>)
 8007f48:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f4c:	9105      	str	r1, [sp, #20]
 8007f4e:	6800      	ldr	r0, [r0, #0]
 8007f50:	9301      	str	r3, [sp, #4]
 8007f52:	a902      	add	r1, sp, #8
 8007f54:	f002 fee2 	bl	800ad1c <_svfiprintf_r>
 8007f58:	9b02      	ldr	r3, [sp, #8]
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	701a      	strb	r2, [r3, #0]
 8007f5e:	b01c      	add	sp, #112	; 0x70
 8007f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f64:	b003      	add	sp, #12
 8007f66:	4770      	bx	lr
 8007f68:	20000018 	.word	0x20000018
 8007f6c:	ffff0208 	.word	0xffff0208

08007f70 <sulp>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	4604      	mov	r4, r0
 8007f74:	460d      	mov	r5, r1
 8007f76:	ec45 4b10 	vmov	d0, r4, r5
 8007f7a:	4616      	mov	r6, r2
 8007f7c:	f002 fc2c 	bl	800a7d8 <__ulp>
 8007f80:	ec51 0b10 	vmov	r0, r1, d0
 8007f84:	b17e      	cbz	r6, 8007fa6 <sulp+0x36>
 8007f86:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007f8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	dd09      	ble.n	8007fa6 <sulp+0x36>
 8007f92:	051b      	lsls	r3, r3, #20
 8007f94:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007f98:	2400      	movs	r4, #0
 8007f9a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007f9e:	4622      	mov	r2, r4
 8007fa0:	462b      	mov	r3, r5
 8007fa2:	f7f8 fb29 	bl	80005f8 <__aeabi_dmul>
 8007fa6:	bd70      	pop	{r4, r5, r6, pc}

08007fa8 <_strtod_l>:
 8007fa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fac:	ed2d 8b02 	vpush	{d8}
 8007fb0:	b09d      	sub	sp, #116	; 0x74
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	9318      	str	r3, [sp, #96]	; 0x60
 8007fb8:	4ba2      	ldr	r3, [pc, #648]	; (8008244 <_strtod_l+0x29c>)
 8007fba:	9213      	str	r2, [sp, #76]	; 0x4c
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	4688      	mov	r8, r1
 8007fc6:	f7f8 f903 	bl	80001d0 <strlen>
 8007fca:	f04f 0a00 	mov.w	sl, #0
 8007fce:	4605      	mov	r5, r0
 8007fd0:	f04f 0b00 	mov.w	fp, #0
 8007fd4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007fd8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007fda:	781a      	ldrb	r2, [r3, #0]
 8007fdc:	2a2b      	cmp	r2, #43	; 0x2b
 8007fde:	d04e      	beq.n	800807e <_strtod_l+0xd6>
 8007fe0:	d83b      	bhi.n	800805a <_strtod_l+0xb2>
 8007fe2:	2a0d      	cmp	r2, #13
 8007fe4:	d834      	bhi.n	8008050 <_strtod_l+0xa8>
 8007fe6:	2a08      	cmp	r2, #8
 8007fe8:	d834      	bhi.n	8008054 <_strtod_l+0xac>
 8007fea:	2a00      	cmp	r2, #0
 8007fec:	d03e      	beq.n	800806c <_strtod_l+0xc4>
 8007fee:	2300      	movs	r3, #0
 8007ff0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ff2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007ff4:	7833      	ldrb	r3, [r6, #0]
 8007ff6:	2b30      	cmp	r3, #48	; 0x30
 8007ff8:	f040 80b0 	bne.w	800815c <_strtod_l+0x1b4>
 8007ffc:	7873      	ldrb	r3, [r6, #1]
 8007ffe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008002:	2b58      	cmp	r3, #88	; 0x58
 8008004:	d168      	bne.n	80080d8 <_strtod_l+0x130>
 8008006:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008008:	9301      	str	r3, [sp, #4]
 800800a:	ab18      	add	r3, sp, #96	; 0x60
 800800c:	9702      	str	r7, [sp, #8]
 800800e:	9300      	str	r3, [sp, #0]
 8008010:	4a8d      	ldr	r2, [pc, #564]	; (8008248 <_strtod_l+0x2a0>)
 8008012:	ab19      	add	r3, sp, #100	; 0x64
 8008014:	a917      	add	r1, sp, #92	; 0x5c
 8008016:	4620      	mov	r0, r4
 8008018:	f001 fd38 	bl	8009a8c <__gethex>
 800801c:	f010 0707 	ands.w	r7, r0, #7
 8008020:	4605      	mov	r5, r0
 8008022:	d005      	beq.n	8008030 <_strtod_l+0x88>
 8008024:	2f06      	cmp	r7, #6
 8008026:	d12c      	bne.n	8008082 <_strtod_l+0xda>
 8008028:	3601      	adds	r6, #1
 800802a:	2300      	movs	r3, #0
 800802c:	9617      	str	r6, [sp, #92]	; 0x5c
 800802e:	930a      	str	r3, [sp, #40]	; 0x28
 8008030:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008032:	2b00      	cmp	r3, #0
 8008034:	f040 8590 	bne.w	8008b58 <_strtod_l+0xbb0>
 8008038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800803a:	b1eb      	cbz	r3, 8008078 <_strtod_l+0xd0>
 800803c:	4652      	mov	r2, sl
 800803e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008042:	ec43 2b10 	vmov	d0, r2, r3
 8008046:	b01d      	add	sp, #116	; 0x74
 8008048:	ecbd 8b02 	vpop	{d8}
 800804c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008050:	2a20      	cmp	r2, #32
 8008052:	d1cc      	bne.n	8007fee <_strtod_l+0x46>
 8008054:	3301      	adds	r3, #1
 8008056:	9317      	str	r3, [sp, #92]	; 0x5c
 8008058:	e7be      	b.n	8007fd8 <_strtod_l+0x30>
 800805a:	2a2d      	cmp	r2, #45	; 0x2d
 800805c:	d1c7      	bne.n	8007fee <_strtod_l+0x46>
 800805e:	2201      	movs	r2, #1
 8008060:	920a      	str	r2, [sp, #40]	; 0x28
 8008062:	1c5a      	adds	r2, r3, #1
 8008064:	9217      	str	r2, [sp, #92]	; 0x5c
 8008066:	785b      	ldrb	r3, [r3, #1]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1c2      	bne.n	8007ff2 <_strtod_l+0x4a>
 800806c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800806e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008072:	2b00      	cmp	r3, #0
 8008074:	f040 856e 	bne.w	8008b54 <_strtod_l+0xbac>
 8008078:	4652      	mov	r2, sl
 800807a:	465b      	mov	r3, fp
 800807c:	e7e1      	b.n	8008042 <_strtod_l+0x9a>
 800807e:	2200      	movs	r2, #0
 8008080:	e7ee      	b.n	8008060 <_strtod_l+0xb8>
 8008082:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008084:	b13a      	cbz	r2, 8008096 <_strtod_l+0xee>
 8008086:	2135      	movs	r1, #53	; 0x35
 8008088:	a81a      	add	r0, sp, #104	; 0x68
 800808a:	f002 fcb0 	bl	800a9ee <__copybits>
 800808e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008090:	4620      	mov	r0, r4
 8008092:	f002 f86f 	bl	800a174 <_Bfree>
 8008096:	3f01      	subs	r7, #1
 8008098:	2f04      	cmp	r7, #4
 800809a:	d806      	bhi.n	80080aa <_strtod_l+0x102>
 800809c:	e8df f007 	tbb	[pc, r7]
 80080a0:	1714030a 	.word	0x1714030a
 80080a4:	0a          	.byte	0x0a
 80080a5:	00          	.byte	0x00
 80080a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80080aa:	0728      	lsls	r0, r5, #28
 80080ac:	d5c0      	bpl.n	8008030 <_strtod_l+0x88>
 80080ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80080b2:	e7bd      	b.n	8008030 <_strtod_l+0x88>
 80080b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80080b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80080ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80080be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80080c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80080c6:	e7f0      	b.n	80080aa <_strtod_l+0x102>
 80080c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800824c <_strtod_l+0x2a4>
 80080cc:	e7ed      	b.n	80080aa <_strtod_l+0x102>
 80080ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80080d2:	f04f 3aff 	mov.w	sl, #4294967295
 80080d6:	e7e8      	b.n	80080aa <_strtod_l+0x102>
 80080d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080da:	1c5a      	adds	r2, r3, #1
 80080dc:	9217      	str	r2, [sp, #92]	; 0x5c
 80080de:	785b      	ldrb	r3, [r3, #1]
 80080e0:	2b30      	cmp	r3, #48	; 0x30
 80080e2:	d0f9      	beq.n	80080d8 <_strtod_l+0x130>
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d0a3      	beq.n	8008030 <_strtod_l+0x88>
 80080e8:	2301      	movs	r3, #1
 80080ea:	f04f 0900 	mov.w	r9, #0
 80080ee:	9304      	str	r3, [sp, #16]
 80080f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80080f2:	9308      	str	r3, [sp, #32]
 80080f4:	f8cd 901c 	str.w	r9, [sp, #28]
 80080f8:	464f      	mov	r7, r9
 80080fa:	220a      	movs	r2, #10
 80080fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80080fe:	7806      	ldrb	r6, [r0, #0]
 8008100:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008104:	b2d9      	uxtb	r1, r3
 8008106:	2909      	cmp	r1, #9
 8008108:	d92a      	bls.n	8008160 <_strtod_l+0x1b8>
 800810a:	9905      	ldr	r1, [sp, #20]
 800810c:	462a      	mov	r2, r5
 800810e:	f002 ff1f 	bl	800af50 <strncmp>
 8008112:	b398      	cbz	r0, 800817c <_strtod_l+0x1d4>
 8008114:	2000      	movs	r0, #0
 8008116:	4632      	mov	r2, r6
 8008118:	463d      	mov	r5, r7
 800811a:	9005      	str	r0, [sp, #20]
 800811c:	4603      	mov	r3, r0
 800811e:	2a65      	cmp	r2, #101	; 0x65
 8008120:	d001      	beq.n	8008126 <_strtod_l+0x17e>
 8008122:	2a45      	cmp	r2, #69	; 0x45
 8008124:	d118      	bne.n	8008158 <_strtod_l+0x1b0>
 8008126:	b91d      	cbnz	r5, 8008130 <_strtod_l+0x188>
 8008128:	9a04      	ldr	r2, [sp, #16]
 800812a:	4302      	orrs	r2, r0
 800812c:	d09e      	beq.n	800806c <_strtod_l+0xc4>
 800812e:	2500      	movs	r5, #0
 8008130:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8008134:	f108 0201 	add.w	r2, r8, #1
 8008138:	9217      	str	r2, [sp, #92]	; 0x5c
 800813a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800813e:	2a2b      	cmp	r2, #43	; 0x2b
 8008140:	d075      	beq.n	800822e <_strtod_l+0x286>
 8008142:	2a2d      	cmp	r2, #45	; 0x2d
 8008144:	d07b      	beq.n	800823e <_strtod_l+0x296>
 8008146:	f04f 0c00 	mov.w	ip, #0
 800814a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800814e:	2909      	cmp	r1, #9
 8008150:	f240 8082 	bls.w	8008258 <_strtod_l+0x2b0>
 8008154:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008158:	2600      	movs	r6, #0
 800815a:	e09d      	b.n	8008298 <_strtod_l+0x2f0>
 800815c:	2300      	movs	r3, #0
 800815e:	e7c4      	b.n	80080ea <_strtod_l+0x142>
 8008160:	2f08      	cmp	r7, #8
 8008162:	bfd8      	it	le
 8008164:	9907      	ldrle	r1, [sp, #28]
 8008166:	f100 0001 	add.w	r0, r0, #1
 800816a:	bfda      	itte	le
 800816c:	fb02 3301 	mlale	r3, r2, r1, r3
 8008170:	9307      	strle	r3, [sp, #28]
 8008172:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008176:	3701      	adds	r7, #1
 8008178:	9017      	str	r0, [sp, #92]	; 0x5c
 800817a:	e7bf      	b.n	80080fc <_strtod_l+0x154>
 800817c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800817e:	195a      	adds	r2, r3, r5
 8008180:	9217      	str	r2, [sp, #92]	; 0x5c
 8008182:	5d5a      	ldrb	r2, [r3, r5]
 8008184:	2f00      	cmp	r7, #0
 8008186:	d037      	beq.n	80081f8 <_strtod_l+0x250>
 8008188:	9005      	str	r0, [sp, #20]
 800818a:	463d      	mov	r5, r7
 800818c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008190:	2b09      	cmp	r3, #9
 8008192:	d912      	bls.n	80081ba <_strtod_l+0x212>
 8008194:	2301      	movs	r3, #1
 8008196:	e7c2      	b.n	800811e <_strtod_l+0x176>
 8008198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	9217      	str	r2, [sp, #92]	; 0x5c
 800819e:	785a      	ldrb	r2, [r3, #1]
 80081a0:	3001      	adds	r0, #1
 80081a2:	2a30      	cmp	r2, #48	; 0x30
 80081a4:	d0f8      	beq.n	8008198 <_strtod_l+0x1f0>
 80081a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80081aa:	2b08      	cmp	r3, #8
 80081ac:	f200 84d9 	bhi.w	8008b62 <_strtod_l+0xbba>
 80081b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80081b2:	9005      	str	r0, [sp, #20]
 80081b4:	2000      	movs	r0, #0
 80081b6:	9308      	str	r3, [sp, #32]
 80081b8:	4605      	mov	r5, r0
 80081ba:	3a30      	subs	r2, #48	; 0x30
 80081bc:	f100 0301 	add.w	r3, r0, #1
 80081c0:	d014      	beq.n	80081ec <_strtod_l+0x244>
 80081c2:	9905      	ldr	r1, [sp, #20]
 80081c4:	4419      	add	r1, r3
 80081c6:	9105      	str	r1, [sp, #20]
 80081c8:	462b      	mov	r3, r5
 80081ca:	eb00 0e05 	add.w	lr, r0, r5
 80081ce:	210a      	movs	r1, #10
 80081d0:	4573      	cmp	r3, lr
 80081d2:	d113      	bne.n	80081fc <_strtod_l+0x254>
 80081d4:	182b      	adds	r3, r5, r0
 80081d6:	2b08      	cmp	r3, #8
 80081d8:	f105 0501 	add.w	r5, r5, #1
 80081dc:	4405      	add	r5, r0
 80081de:	dc1c      	bgt.n	800821a <_strtod_l+0x272>
 80081e0:	9907      	ldr	r1, [sp, #28]
 80081e2:	230a      	movs	r3, #10
 80081e4:	fb03 2301 	mla	r3, r3, r1, r2
 80081e8:	9307      	str	r3, [sp, #28]
 80081ea:	2300      	movs	r3, #0
 80081ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80081ee:	1c51      	adds	r1, r2, #1
 80081f0:	9117      	str	r1, [sp, #92]	; 0x5c
 80081f2:	7852      	ldrb	r2, [r2, #1]
 80081f4:	4618      	mov	r0, r3
 80081f6:	e7c9      	b.n	800818c <_strtod_l+0x1e4>
 80081f8:	4638      	mov	r0, r7
 80081fa:	e7d2      	b.n	80081a2 <_strtod_l+0x1fa>
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	dc04      	bgt.n	800820a <_strtod_l+0x262>
 8008200:	9e07      	ldr	r6, [sp, #28]
 8008202:	434e      	muls	r6, r1
 8008204:	9607      	str	r6, [sp, #28]
 8008206:	3301      	adds	r3, #1
 8008208:	e7e2      	b.n	80081d0 <_strtod_l+0x228>
 800820a:	f103 0c01 	add.w	ip, r3, #1
 800820e:	f1bc 0f10 	cmp.w	ip, #16
 8008212:	bfd8      	it	le
 8008214:	fb01 f909 	mulle.w	r9, r1, r9
 8008218:	e7f5      	b.n	8008206 <_strtod_l+0x25e>
 800821a:	2d10      	cmp	r5, #16
 800821c:	bfdc      	itt	le
 800821e:	230a      	movle	r3, #10
 8008220:	fb03 2909 	mlale	r9, r3, r9, r2
 8008224:	e7e1      	b.n	80081ea <_strtod_l+0x242>
 8008226:	2300      	movs	r3, #0
 8008228:	9305      	str	r3, [sp, #20]
 800822a:	2301      	movs	r3, #1
 800822c:	e77c      	b.n	8008128 <_strtod_l+0x180>
 800822e:	f04f 0c00 	mov.w	ip, #0
 8008232:	f108 0202 	add.w	r2, r8, #2
 8008236:	9217      	str	r2, [sp, #92]	; 0x5c
 8008238:	f898 2002 	ldrb.w	r2, [r8, #2]
 800823c:	e785      	b.n	800814a <_strtod_l+0x1a2>
 800823e:	f04f 0c01 	mov.w	ip, #1
 8008242:	e7f6      	b.n	8008232 <_strtod_l+0x28a>
 8008244:	0800be60 	.word	0x0800be60
 8008248:	0800bc14 	.word	0x0800bc14
 800824c:	7ff00000 	.word	0x7ff00000
 8008250:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008252:	1c51      	adds	r1, r2, #1
 8008254:	9117      	str	r1, [sp, #92]	; 0x5c
 8008256:	7852      	ldrb	r2, [r2, #1]
 8008258:	2a30      	cmp	r2, #48	; 0x30
 800825a:	d0f9      	beq.n	8008250 <_strtod_l+0x2a8>
 800825c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008260:	2908      	cmp	r1, #8
 8008262:	f63f af79 	bhi.w	8008158 <_strtod_l+0x1b0>
 8008266:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800826a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800826c:	9206      	str	r2, [sp, #24]
 800826e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008270:	1c51      	adds	r1, r2, #1
 8008272:	9117      	str	r1, [sp, #92]	; 0x5c
 8008274:	7852      	ldrb	r2, [r2, #1]
 8008276:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800827a:	2e09      	cmp	r6, #9
 800827c:	d937      	bls.n	80082ee <_strtod_l+0x346>
 800827e:	9e06      	ldr	r6, [sp, #24]
 8008280:	1b89      	subs	r1, r1, r6
 8008282:	2908      	cmp	r1, #8
 8008284:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008288:	dc02      	bgt.n	8008290 <_strtod_l+0x2e8>
 800828a:	4576      	cmp	r6, lr
 800828c:	bfa8      	it	ge
 800828e:	4676      	movge	r6, lr
 8008290:	f1bc 0f00 	cmp.w	ip, #0
 8008294:	d000      	beq.n	8008298 <_strtod_l+0x2f0>
 8008296:	4276      	negs	r6, r6
 8008298:	2d00      	cmp	r5, #0
 800829a:	d14d      	bne.n	8008338 <_strtod_l+0x390>
 800829c:	9904      	ldr	r1, [sp, #16]
 800829e:	4301      	orrs	r1, r0
 80082a0:	f47f aec6 	bne.w	8008030 <_strtod_l+0x88>
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f47f aee1 	bne.w	800806c <_strtod_l+0xc4>
 80082aa:	2a69      	cmp	r2, #105	; 0x69
 80082ac:	d027      	beq.n	80082fe <_strtod_l+0x356>
 80082ae:	dc24      	bgt.n	80082fa <_strtod_l+0x352>
 80082b0:	2a49      	cmp	r2, #73	; 0x49
 80082b2:	d024      	beq.n	80082fe <_strtod_l+0x356>
 80082b4:	2a4e      	cmp	r2, #78	; 0x4e
 80082b6:	f47f aed9 	bne.w	800806c <_strtod_l+0xc4>
 80082ba:	499f      	ldr	r1, [pc, #636]	; (8008538 <_strtod_l+0x590>)
 80082bc:	a817      	add	r0, sp, #92	; 0x5c
 80082be:	f001 fe3d 	bl	8009f3c <__match>
 80082c2:	2800      	cmp	r0, #0
 80082c4:	f43f aed2 	beq.w	800806c <_strtod_l+0xc4>
 80082c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b28      	cmp	r3, #40	; 0x28
 80082ce:	d12d      	bne.n	800832c <_strtod_l+0x384>
 80082d0:	499a      	ldr	r1, [pc, #616]	; (800853c <_strtod_l+0x594>)
 80082d2:	aa1a      	add	r2, sp, #104	; 0x68
 80082d4:	a817      	add	r0, sp, #92	; 0x5c
 80082d6:	f001 fe45 	bl	8009f64 <__hexnan>
 80082da:	2805      	cmp	r0, #5
 80082dc:	d126      	bne.n	800832c <_strtod_l+0x384>
 80082de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80082e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80082e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80082e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80082ec:	e6a0      	b.n	8008030 <_strtod_l+0x88>
 80082ee:	210a      	movs	r1, #10
 80082f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80082f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80082f8:	e7b9      	b.n	800826e <_strtod_l+0x2c6>
 80082fa:	2a6e      	cmp	r2, #110	; 0x6e
 80082fc:	e7db      	b.n	80082b6 <_strtod_l+0x30e>
 80082fe:	4990      	ldr	r1, [pc, #576]	; (8008540 <_strtod_l+0x598>)
 8008300:	a817      	add	r0, sp, #92	; 0x5c
 8008302:	f001 fe1b 	bl	8009f3c <__match>
 8008306:	2800      	cmp	r0, #0
 8008308:	f43f aeb0 	beq.w	800806c <_strtod_l+0xc4>
 800830c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800830e:	498d      	ldr	r1, [pc, #564]	; (8008544 <_strtod_l+0x59c>)
 8008310:	3b01      	subs	r3, #1
 8008312:	a817      	add	r0, sp, #92	; 0x5c
 8008314:	9317      	str	r3, [sp, #92]	; 0x5c
 8008316:	f001 fe11 	bl	8009f3c <__match>
 800831a:	b910      	cbnz	r0, 8008322 <_strtod_l+0x37a>
 800831c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800831e:	3301      	adds	r3, #1
 8008320:	9317      	str	r3, [sp, #92]	; 0x5c
 8008322:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008554 <_strtod_l+0x5ac>
 8008326:	f04f 0a00 	mov.w	sl, #0
 800832a:	e681      	b.n	8008030 <_strtod_l+0x88>
 800832c:	4886      	ldr	r0, [pc, #536]	; (8008548 <_strtod_l+0x5a0>)
 800832e:	f002 fdf7 	bl	800af20 <nan>
 8008332:	ec5b ab10 	vmov	sl, fp, d0
 8008336:	e67b      	b.n	8008030 <_strtod_l+0x88>
 8008338:	9b05      	ldr	r3, [sp, #20]
 800833a:	9807      	ldr	r0, [sp, #28]
 800833c:	1af3      	subs	r3, r6, r3
 800833e:	2f00      	cmp	r7, #0
 8008340:	bf08      	it	eq
 8008342:	462f      	moveq	r7, r5
 8008344:	2d10      	cmp	r5, #16
 8008346:	9306      	str	r3, [sp, #24]
 8008348:	46a8      	mov	r8, r5
 800834a:	bfa8      	it	ge
 800834c:	f04f 0810 	movge.w	r8, #16
 8008350:	f7f8 f8d8 	bl	8000504 <__aeabi_ui2d>
 8008354:	2d09      	cmp	r5, #9
 8008356:	4682      	mov	sl, r0
 8008358:	468b      	mov	fp, r1
 800835a:	dd13      	ble.n	8008384 <_strtod_l+0x3dc>
 800835c:	4b7b      	ldr	r3, [pc, #492]	; (800854c <_strtod_l+0x5a4>)
 800835e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008362:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008366:	f7f8 f947 	bl	80005f8 <__aeabi_dmul>
 800836a:	4682      	mov	sl, r0
 800836c:	4648      	mov	r0, r9
 800836e:	468b      	mov	fp, r1
 8008370:	f7f8 f8c8 	bl	8000504 <__aeabi_ui2d>
 8008374:	4602      	mov	r2, r0
 8008376:	460b      	mov	r3, r1
 8008378:	4650      	mov	r0, sl
 800837a:	4659      	mov	r1, fp
 800837c:	f7f7 ff86 	bl	800028c <__adddf3>
 8008380:	4682      	mov	sl, r0
 8008382:	468b      	mov	fp, r1
 8008384:	2d0f      	cmp	r5, #15
 8008386:	dc38      	bgt.n	80083fa <_strtod_l+0x452>
 8008388:	9b06      	ldr	r3, [sp, #24]
 800838a:	2b00      	cmp	r3, #0
 800838c:	f43f ae50 	beq.w	8008030 <_strtod_l+0x88>
 8008390:	dd24      	ble.n	80083dc <_strtod_l+0x434>
 8008392:	2b16      	cmp	r3, #22
 8008394:	dc0b      	bgt.n	80083ae <_strtod_l+0x406>
 8008396:	496d      	ldr	r1, [pc, #436]	; (800854c <_strtod_l+0x5a4>)
 8008398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800839c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083a0:	4652      	mov	r2, sl
 80083a2:	465b      	mov	r3, fp
 80083a4:	f7f8 f928 	bl	80005f8 <__aeabi_dmul>
 80083a8:	4682      	mov	sl, r0
 80083aa:	468b      	mov	fp, r1
 80083ac:	e640      	b.n	8008030 <_strtod_l+0x88>
 80083ae:	9a06      	ldr	r2, [sp, #24]
 80083b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80083b4:	4293      	cmp	r3, r2
 80083b6:	db20      	blt.n	80083fa <_strtod_l+0x452>
 80083b8:	4c64      	ldr	r4, [pc, #400]	; (800854c <_strtod_l+0x5a4>)
 80083ba:	f1c5 050f 	rsb	r5, r5, #15
 80083be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80083c2:	4652      	mov	r2, sl
 80083c4:	465b      	mov	r3, fp
 80083c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80083ca:	f7f8 f915 	bl	80005f8 <__aeabi_dmul>
 80083ce:	9b06      	ldr	r3, [sp, #24]
 80083d0:	1b5d      	subs	r5, r3, r5
 80083d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80083d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80083da:	e7e3      	b.n	80083a4 <_strtod_l+0x3fc>
 80083dc:	9b06      	ldr	r3, [sp, #24]
 80083de:	3316      	adds	r3, #22
 80083e0:	db0b      	blt.n	80083fa <_strtod_l+0x452>
 80083e2:	9b05      	ldr	r3, [sp, #20]
 80083e4:	1b9e      	subs	r6, r3, r6
 80083e6:	4b59      	ldr	r3, [pc, #356]	; (800854c <_strtod_l+0x5a4>)
 80083e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80083ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083f0:	4650      	mov	r0, sl
 80083f2:	4659      	mov	r1, fp
 80083f4:	f7f8 fa2a 	bl	800084c <__aeabi_ddiv>
 80083f8:	e7d6      	b.n	80083a8 <_strtod_l+0x400>
 80083fa:	9b06      	ldr	r3, [sp, #24]
 80083fc:	eba5 0808 	sub.w	r8, r5, r8
 8008400:	4498      	add	r8, r3
 8008402:	f1b8 0f00 	cmp.w	r8, #0
 8008406:	dd74      	ble.n	80084f2 <_strtod_l+0x54a>
 8008408:	f018 030f 	ands.w	r3, r8, #15
 800840c:	d00a      	beq.n	8008424 <_strtod_l+0x47c>
 800840e:	494f      	ldr	r1, [pc, #316]	; (800854c <_strtod_l+0x5a4>)
 8008410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008414:	4652      	mov	r2, sl
 8008416:	465b      	mov	r3, fp
 8008418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800841c:	f7f8 f8ec 	bl	80005f8 <__aeabi_dmul>
 8008420:	4682      	mov	sl, r0
 8008422:	468b      	mov	fp, r1
 8008424:	f038 080f 	bics.w	r8, r8, #15
 8008428:	d04f      	beq.n	80084ca <_strtod_l+0x522>
 800842a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800842e:	dd22      	ble.n	8008476 <_strtod_l+0x4ce>
 8008430:	2500      	movs	r5, #0
 8008432:	462e      	mov	r6, r5
 8008434:	9507      	str	r5, [sp, #28]
 8008436:	9505      	str	r5, [sp, #20]
 8008438:	2322      	movs	r3, #34	; 0x22
 800843a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008554 <_strtod_l+0x5ac>
 800843e:	6023      	str	r3, [r4, #0]
 8008440:	f04f 0a00 	mov.w	sl, #0
 8008444:	9b07      	ldr	r3, [sp, #28]
 8008446:	2b00      	cmp	r3, #0
 8008448:	f43f adf2 	beq.w	8008030 <_strtod_l+0x88>
 800844c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800844e:	4620      	mov	r0, r4
 8008450:	f001 fe90 	bl	800a174 <_Bfree>
 8008454:	9905      	ldr	r1, [sp, #20]
 8008456:	4620      	mov	r0, r4
 8008458:	f001 fe8c 	bl	800a174 <_Bfree>
 800845c:	4631      	mov	r1, r6
 800845e:	4620      	mov	r0, r4
 8008460:	f001 fe88 	bl	800a174 <_Bfree>
 8008464:	9907      	ldr	r1, [sp, #28]
 8008466:	4620      	mov	r0, r4
 8008468:	f001 fe84 	bl	800a174 <_Bfree>
 800846c:	4629      	mov	r1, r5
 800846e:	4620      	mov	r0, r4
 8008470:	f001 fe80 	bl	800a174 <_Bfree>
 8008474:	e5dc      	b.n	8008030 <_strtod_l+0x88>
 8008476:	4b36      	ldr	r3, [pc, #216]	; (8008550 <_strtod_l+0x5a8>)
 8008478:	9304      	str	r3, [sp, #16]
 800847a:	2300      	movs	r3, #0
 800847c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008480:	4650      	mov	r0, sl
 8008482:	4659      	mov	r1, fp
 8008484:	4699      	mov	r9, r3
 8008486:	f1b8 0f01 	cmp.w	r8, #1
 800848a:	dc21      	bgt.n	80084d0 <_strtod_l+0x528>
 800848c:	b10b      	cbz	r3, 8008492 <_strtod_l+0x4ea>
 800848e:	4682      	mov	sl, r0
 8008490:	468b      	mov	fp, r1
 8008492:	4b2f      	ldr	r3, [pc, #188]	; (8008550 <_strtod_l+0x5a8>)
 8008494:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008498:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800849c:	4652      	mov	r2, sl
 800849e:	465b      	mov	r3, fp
 80084a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 80084a4:	f7f8 f8a8 	bl	80005f8 <__aeabi_dmul>
 80084a8:	4b2a      	ldr	r3, [pc, #168]	; (8008554 <_strtod_l+0x5ac>)
 80084aa:	460a      	mov	r2, r1
 80084ac:	400b      	ands	r3, r1
 80084ae:	492a      	ldr	r1, [pc, #168]	; (8008558 <_strtod_l+0x5b0>)
 80084b0:	428b      	cmp	r3, r1
 80084b2:	4682      	mov	sl, r0
 80084b4:	d8bc      	bhi.n	8008430 <_strtod_l+0x488>
 80084b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80084ba:	428b      	cmp	r3, r1
 80084bc:	bf86      	itte	hi
 80084be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800855c <_strtod_l+0x5b4>
 80084c2:	f04f 3aff 	movhi.w	sl, #4294967295
 80084c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80084ca:	2300      	movs	r3, #0
 80084cc:	9304      	str	r3, [sp, #16]
 80084ce:	e084      	b.n	80085da <_strtod_l+0x632>
 80084d0:	f018 0f01 	tst.w	r8, #1
 80084d4:	d005      	beq.n	80084e2 <_strtod_l+0x53a>
 80084d6:	9b04      	ldr	r3, [sp, #16]
 80084d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084dc:	f7f8 f88c 	bl	80005f8 <__aeabi_dmul>
 80084e0:	2301      	movs	r3, #1
 80084e2:	9a04      	ldr	r2, [sp, #16]
 80084e4:	3208      	adds	r2, #8
 80084e6:	f109 0901 	add.w	r9, r9, #1
 80084ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 80084ee:	9204      	str	r2, [sp, #16]
 80084f0:	e7c9      	b.n	8008486 <_strtod_l+0x4de>
 80084f2:	d0ea      	beq.n	80084ca <_strtod_l+0x522>
 80084f4:	f1c8 0800 	rsb	r8, r8, #0
 80084f8:	f018 020f 	ands.w	r2, r8, #15
 80084fc:	d00a      	beq.n	8008514 <_strtod_l+0x56c>
 80084fe:	4b13      	ldr	r3, [pc, #76]	; (800854c <_strtod_l+0x5a4>)
 8008500:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008504:	4650      	mov	r0, sl
 8008506:	4659      	mov	r1, fp
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f7f8 f99e 	bl	800084c <__aeabi_ddiv>
 8008510:	4682      	mov	sl, r0
 8008512:	468b      	mov	fp, r1
 8008514:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008518:	d0d7      	beq.n	80084ca <_strtod_l+0x522>
 800851a:	f1b8 0f1f 	cmp.w	r8, #31
 800851e:	dd1f      	ble.n	8008560 <_strtod_l+0x5b8>
 8008520:	2500      	movs	r5, #0
 8008522:	462e      	mov	r6, r5
 8008524:	9507      	str	r5, [sp, #28]
 8008526:	9505      	str	r5, [sp, #20]
 8008528:	2322      	movs	r3, #34	; 0x22
 800852a:	f04f 0a00 	mov.w	sl, #0
 800852e:	f04f 0b00 	mov.w	fp, #0
 8008532:	6023      	str	r3, [r4, #0]
 8008534:	e786      	b.n	8008444 <_strtod_l+0x49c>
 8008536:	bf00      	nop
 8008538:	0800bbe5 	.word	0x0800bbe5
 800853c:	0800bc28 	.word	0x0800bc28
 8008540:	0800bbdd 	.word	0x0800bbdd
 8008544:	0800bd6c 	.word	0x0800bd6c
 8008548:	0800c018 	.word	0x0800c018
 800854c:	0800bef8 	.word	0x0800bef8
 8008550:	0800bed0 	.word	0x0800bed0
 8008554:	7ff00000 	.word	0x7ff00000
 8008558:	7ca00000 	.word	0x7ca00000
 800855c:	7fefffff 	.word	0x7fefffff
 8008560:	f018 0310 	ands.w	r3, r8, #16
 8008564:	bf18      	it	ne
 8008566:	236a      	movne	r3, #106	; 0x6a
 8008568:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008918 <_strtod_l+0x970>
 800856c:	9304      	str	r3, [sp, #16]
 800856e:	4650      	mov	r0, sl
 8008570:	4659      	mov	r1, fp
 8008572:	2300      	movs	r3, #0
 8008574:	f018 0f01 	tst.w	r8, #1
 8008578:	d004      	beq.n	8008584 <_strtod_l+0x5dc>
 800857a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800857e:	f7f8 f83b 	bl	80005f8 <__aeabi_dmul>
 8008582:	2301      	movs	r3, #1
 8008584:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008588:	f109 0908 	add.w	r9, r9, #8
 800858c:	d1f2      	bne.n	8008574 <_strtod_l+0x5cc>
 800858e:	b10b      	cbz	r3, 8008594 <_strtod_l+0x5ec>
 8008590:	4682      	mov	sl, r0
 8008592:	468b      	mov	fp, r1
 8008594:	9b04      	ldr	r3, [sp, #16]
 8008596:	b1c3      	cbz	r3, 80085ca <_strtod_l+0x622>
 8008598:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800859c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	4659      	mov	r1, fp
 80085a4:	dd11      	ble.n	80085ca <_strtod_l+0x622>
 80085a6:	2b1f      	cmp	r3, #31
 80085a8:	f340 8124 	ble.w	80087f4 <_strtod_l+0x84c>
 80085ac:	2b34      	cmp	r3, #52	; 0x34
 80085ae:	bfde      	ittt	le
 80085b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80085b4:	f04f 33ff 	movle.w	r3, #4294967295
 80085b8:	fa03 f202 	lslle.w	r2, r3, r2
 80085bc:	f04f 0a00 	mov.w	sl, #0
 80085c0:	bfcc      	ite	gt
 80085c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80085c6:	ea02 0b01 	andle.w	fp, r2, r1
 80085ca:	2200      	movs	r2, #0
 80085cc:	2300      	movs	r3, #0
 80085ce:	4650      	mov	r0, sl
 80085d0:	4659      	mov	r1, fp
 80085d2:	f7f8 fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d1a2      	bne.n	8008520 <_strtod_l+0x578>
 80085da:	9b07      	ldr	r3, [sp, #28]
 80085dc:	9300      	str	r3, [sp, #0]
 80085de:	9908      	ldr	r1, [sp, #32]
 80085e0:	462b      	mov	r3, r5
 80085e2:	463a      	mov	r2, r7
 80085e4:	4620      	mov	r0, r4
 80085e6:	f001 fe2d 	bl	800a244 <__s2b>
 80085ea:	9007      	str	r0, [sp, #28]
 80085ec:	2800      	cmp	r0, #0
 80085ee:	f43f af1f 	beq.w	8008430 <_strtod_l+0x488>
 80085f2:	9b05      	ldr	r3, [sp, #20]
 80085f4:	1b9e      	subs	r6, r3, r6
 80085f6:	9b06      	ldr	r3, [sp, #24]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	bfb4      	ite	lt
 80085fc:	4633      	movlt	r3, r6
 80085fe:	2300      	movge	r3, #0
 8008600:	930c      	str	r3, [sp, #48]	; 0x30
 8008602:	9b06      	ldr	r3, [sp, #24]
 8008604:	2500      	movs	r5, #0
 8008606:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800860a:	9312      	str	r3, [sp, #72]	; 0x48
 800860c:	462e      	mov	r6, r5
 800860e:	9b07      	ldr	r3, [sp, #28]
 8008610:	4620      	mov	r0, r4
 8008612:	6859      	ldr	r1, [r3, #4]
 8008614:	f001 fd6e 	bl	800a0f4 <_Balloc>
 8008618:	9005      	str	r0, [sp, #20]
 800861a:	2800      	cmp	r0, #0
 800861c:	f43f af0c 	beq.w	8008438 <_strtod_l+0x490>
 8008620:	9b07      	ldr	r3, [sp, #28]
 8008622:	691a      	ldr	r2, [r3, #16]
 8008624:	3202      	adds	r2, #2
 8008626:	f103 010c 	add.w	r1, r3, #12
 800862a:	0092      	lsls	r2, r2, #2
 800862c:	300c      	adds	r0, #12
 800862e:	f001 fd53 	bl	800a0d8 <memcpy>
 8008632:	ec4b ab10 	vmov	d0, sl, fp
 8008636:	aa1a      	add	r2, sp, #104	; 0x68
 8008638:	a919      	add	r1, sp, #100	; 0x64
 800863a:	4620      	mov	r0, r4
 800863c:	f002 f948 	bl	800a8d0 <__d2b>
 8008640:	ec4b ab18 	vmov	d8, sl, fp
 8008644:	9018      	str	r0, [sp, #96]	; 0x60
 8008646:	2800      	cmp	r0, #0
 8008648:	f43f aef6 	beq.w	8008438 <_strtod_l+0x490>
 800864c:	2101      	movs	r1, #1
 800864e:	4620      	mov	r0, r4
 8008650:	f001 fe92 	bl	800a378 <__i2b>
 8008654:	4606      	mov	r6, r0
 8008656:	2800      	cmp	r0, #0
 8008658:	f43f aeee 	beq.w	8008438 <_strtod_l+0x490>
 800865c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800865e:	9904      	ldr	r1, [sp, #16]
 8008660:	2b00      	cmp	r3, #0
 8008662:	bfab      	itete	ge
 8008664:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008666:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008668:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800866a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800866e:	bfac      	ite	ge
 8008670:	eb03 0902 	addge.w	r9, r3, r2
 8008674:	1ad7      	sublt	r7, r2, r3
 8008676:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008678:	eba3 0801 	sub.w	r8, r3, r1
 800867c:	4490      	add	r8, r2
 800867e:	4ba1      	ldr	r3, [pc, #644]	; (8008904 <_strtod_l+0x95c>)
 8008680:	f108 38ff 	add.w	r8, r8, #4294967295
 8008684:	4598      	cmp	r8, r3
 8008686:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800868a:	f280 80c7 	bge.w	800881c <_strtod_l+0x874>
 800868e:	eba3 0308 	sub.w	r3, r3, r8
 8008692:	2b1f      	cmp	r3, #31
 8008694:	eba2 0203 	sub.w	r2, r2, r3
 8008698:	f04f 0101 	mov.w	r1, #1
 800869c:	f300 80b1 	bgt.w	8008802 <_strtod_l+0x85a>
 80086a0:	fa01 f303 	lsl.w	r3, r1, r3
 80086a4:	930d      	str	r3, [sp, #52]	; 0x34
 80086a6:	2300      	movs	r3, #0
 80086a8:	9308      	str	r3, [sp, #32]
 80086aa:	eb09 0802 	add.w	r8, r9, r2
 80086ae:	9b04      	ldr	r3, [sp, #16]
 80086b0:	45c1      	cmp	r9, r8
 80086b2:	4417      	add	r7, r2
 80086b4:	441f      	add	r7, r3
 80086b6:	464b      	mov	r3, r9
 80086b8:	bfa8      	it	ge
 80086ba:	4643      	movge	r3, r8
 80086bc:	42bb      	cmp	r3, r7
 80086be:	bfa8      	it	ge
 80086c0:	463b      	movge	r3, r7
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	bfc2      	ittt	gt
 80086c6:	eba8 0803 	subgt.w	r8, r8, r3
 80086ca:	1aff      	subgt	r7, r7, r3
 80086cc:	eba9 0903 	subgt.w	r9, r9, r3
 80086d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	dd17      	ble.n	8008706 <_strtod_l+0x75e>
 80086d6:	4631      	mov	r1, r6
 80086d8:	461a      	mov	r2, r3
 80086da:	4620      	mov	r0, r4
 80086dc:	f001 ff0c 	bl	800a4f8 <__pow5mult>
 80086e0:	4606      	mov	r6, r0
 80086e2:	2800      	cmp	r0, #0
 80086e4:	f43f aea8 	beq.w	8008438 <_strtod_l+0x490>
 80086e8:	4601      	mov	r1, r0
 80086ea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80086ec:	4620      	mov	r0, r4
 80086ee:	f001 fe59 	bl	800a3a4 <__multiply>
 80086f2:	900b      	str	r0, [sp, #44]	; 0x2c
 80086f4:	2800      	cmp	r0, #0
 80086f6:	f43f ae9f 	beq.w	8008438 <_strtod_l+0x490>
 80086fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80086fc:	4620      	mov	r0, r4
 80086fe:	f001 fd39 	bl	800a174 <_Bfree>
 8008702:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008704:	9318      	str	r3, [sp, #96]	; 0x60
 8008706:	f1b8 0f00 	cmp.w	r8, #0
 800870a:	f300 808c 	bgt.w	8008826 <_strtod_l+0x87e>
 800870e:	9b06      	ldr	r3, [sp, #24]
 8008710:	2b00      	cmp	r3, #0
 8008712:	dd08      	ble.n	8008726 <_strtod_l+0x77e>
 8008714:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008716:	9905      	ldr	r1, [sp, #20]
 8008718:	4620      	mov	r0, r4
 800871a:	f001 feed 	bl	800a4f8 <__pow5mult>
 800871e:	9005      	str	r0, [sp, #20]
 8008720:	2800      	cmp	r0, #0
 8008722:	f43f ae89 	beq.w	8008438 <_strtod_l+0x490>
 8008726:	2f00      	cmp	r7, #0
 8008728:	dd08      	ble.n	800873c <_strtod_l+0x794>
 800872a:	9905      	ldr	r1, [sp, #20]
 800872c:	463a      	mov	r2, r7
 800872e:	4620      	mov	r0, r4
 8008730:	f001 ff3c 	bl	800a5ac <__lshift>
 8008734:	9005      	str	r0, [sp, #20]
 8008736:	2800      	cmp	r0, #0
 8008738:	f43f ae7e 	beq.w	8008438 <_strtod_l+0x490>
 800873c:	f1b9 0f00 	cmp.w	r9, #0
 8008740:	dd08      	ble.n	8008754 <_strtod_l+0x7ac>
 8008742:	4631      	mov	r1, r6
 8008744:	464a      	mov	r2, r9
 8008746:	4620      	mov	r0, r4
 8008748:	f001 ff30 	bl	800a5ac <__lshift>
 800874c:	4606      	mov	r6, r0
 800874e:	2800      	cmp	r0, #0
 8008750:	f43f ae72 	beq.w	8008438 <_strtod_l+0x490>
 8008754:	9a05      	ldr	r2, [sp, #20]
 8008756:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008758:	4620      	mov	r0, r4
 800875a:	f001 ffb3 	bl	800a6c4 <__mdiff>
 800875e:	4605      	mov	r5, r0
 8008760:	2800      	cmp	r0, #0
 8008762:	f43f ae69 	beq.w	8008438 <_strtod_l+0x490>
 8008766:	68c3      	ldr	r3, [r0, #12]
 8008768:	930b      	str	r3, [sp, #44]	; 0x2c
 800876a:	2300      	movs	r3, #0
 800876c:	60c3      	str	r3, [r0, #12]
 800876e:	4631      	mov	r1, r6
 8008770:	f001 ff8c 	bl	800a68c <__mcmp>
 8008774:	2800      	cmp	r0, #0
 8008776:	da60      	bge.n	800883a <_strtod_l+0x892>
 8008778:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800877a:	ea53 030a 	orrs.w	r3, r3, sl
 800877e:	f040 8082 	bne.w	8008886 <_strtod_l+0x8de>
 8008782:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008786:	2b00      	cmp	r3, #0
 8008788:	d17d      	bne.n	8008886 <_strtod_l+0x8de>
 800878a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800878e:	0d1b      	lsrs	r3, r3, #20
 8008790:	051b      	lsls	r3, r3, #20
 8008792:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008796:	d976      	bls.n	8008886 <_strtod_l+0x8de>
 8008798:	696b      	ldr	r3, [r5, #20]
 800879a:	b913      	cbnz	r3, 80087a2 <_strtod_l+0x7fa>
 800879c:	692b      	ldr	r3, [r5, #16]
 800879e:	2b01      	cmp	r3, #1
 80087a0:	dd71      	ble.n	8008886 <_strtod_l+0x8de>
 80087a2:	4629      	mov	r1, r5
 80087a4:	2201      	movs	r2, #1
 80087a6:	4620      	mov	r0, r4
 80087a8:	f001 ff00 	bl	800a5ac <__lshift>
 80087ac:	4631      	mov	r1, r6
 80087ae:	4605      	mov	r5, r0
 80087b0:	f001 ff6c 	bl	800a68c <__mcmp>
 80087b4:	2800      	cmp	r0, #0
 80087b6:	dd66      	ble.n	8008886 <_strtod_l+0x8de>
 80087b8:	9904      	ldr	r1, [sp, #16]
 80087ba:	4a53      	ldr	r2, [pc, #332]	; (8008908 <_strtod_l+0x960>)
 80087bc:	465b      	mov	r3, fp
 80087be:	2900      	cmp	r1, #0
 80087c0:	f000 8081 	beq.w	80088c6 <_strtod_l+0x91e>
 80087c4:	ea02 010b 	and.w	r1, r2, fp
 80087c8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80087cc:	dc7b      	bgt.n	80088c6 <_strtod_l+0x91e>
 80087ce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80087d2:	f77f aea9 	ble.w	8008528 <_strtod_l+0x580>
 80087d6:	4b4d      	ldr	r3, [pc, #308]	; (800890c <_strtod_l+0x964>)
 80087d8:	4650      	mov	r0, sl
 80087da:	4659      	mov	r1, fp
 80087dc:	2200      	movs	r2, #0
 80087de:	f7f7 ff0b 	bl	80005f8 <__aeabi_dmul>
 80087e2:	460b      	mov	r3, r1
 80087e4:	4303      	orrs	r3, r0
 80087e6:	bf08      	it	eq
 80087e8:	2322      	moveq	r3, #34	; 0x22
 80087ea:	4682      	mov	sl, r0
 80087ec:	468b      	mov	fp, r1
 80087ee:	bf08      	it	eq
 80087f0:	6023      	streq	r3, [r4, #0]
 80087f2:	e62b      	b.n	800844c <_strtod_l+0x4a4>
 80087f4:	f04f 32ff 	mov.w	r2, #4294967295
 80087f8:	fa02 f303 	lsl.w	r3, r2, r3
 80087fc:	ea03 0a0a 	and.w	sl, r3, sl
 8008800:	e6e3      	b.n	80085ca <_strtod_l+0x622>
 8008802:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008806:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800880a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800880e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008812:	fa01 f308 	lsl.w	r3, r1, r8
 8008816:	9308      	str	r3, [sp, #32]
 8008818:	910d      	str	r1, [sp, #52]	; 0x34
 800881a:	e746      	b.n	80086aa <_strtod_l+0x702>
 800881c:	2300      	movs	r3, #0
 800881e:	9308      	str	r3, [sp, #32]
 8008820:	2301      	movs	r3, #1
 8008822:	930d      	str	r3, [sp, #52]	; 0x34
 8008824:	e741      	b.n	80086aa <_strtod_l+0x702>
 8008826:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008828:	4642      	mov	r2, r8
 800882a:	4620      	mov	r0, r4
 800882c:	f001 febe 	bl	800a5ac <__lshift>
 8008830:	9018      	str	r0, [sp, #96]	; 0x60
 8008832:	2800      	cmp	r0, #0
 8008834:	f47f af6b 	bne.w	800870e <_strtod_l+0x766>
 8008838:	e5fe      	b.n	8008438 <_strtod_l+0x490>
 800883a:	465f      	mov	r7, fp
 800883c:	d16e      	bne.n	800891c <_strtod_l+0x974>
 800883e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008840:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008844:	b342      	cbz	r2, 8008898 <_strtod_l+0x8f0>
 8008846:	4a32      	ldr	r2, [pc, #200]	; (8008910 <_strtod_l+0x968>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d128      	bne.n	800889e <_strtod_l+0x8f6>
 800884c:	9b04      	ldr	r3, [sp, #16]
 800884e:	4651      	mov	r1, sl
 8008850:	b1eb      	cbz	r3, 800888e <_strtod_l+0x8e6>
 8008852:	4b2d      	ldr	r3, [pc, #180]	; (8008908 <_strtod_l+0x960>)
 8008854:	403b      	ands	r3, r7
 8008856:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800885a:	f04f 32ff 	mov.w	r2, #4294967295
 800885e:	d819      	bhi.n	8008894 <_strtod_l+0x8ec>
 8008860:	0d1b      	lsrs	r3, r3, #20
 8008862:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008866:	fa02 f303 	lsl.w	r3, r2, r3
 800886a:	4299      	cmp	r1, r3
 800886c:	d117      	bne.n	800889e <_strtod_l+0x8f6>
 800886e:	4b29      	ldr	r3, [pc, #164]	; (8008914 <_strtod_l+0x96c>)
 8008870:	429f      	cmp	r7, r3
 8008872:	d102      	bne.n	800887a <_strtod_l+0x8d2>
 8008874:	3101      	adds	r1, #1
 8008876:	f43f addf 	beq.w	8008438 <_strtod_l+0x490>
 800887a:	4b23      	ldr	r3, [pc, #140]	; (8008908 <_strtod_l+0x960>)
 800887c:	403b      	ands	r3, r7
 800887e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008882:	f04f 0a00 	mov.w	sl, #0
 8008886:	9b04      	ldr	r3, [sp, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d1a4      	bne.n	80087d6 <_strtod_l+0x82e>
 800888c:	e5de      	b.n	800844c <_strtod_l+0x4a4>
 800888e:	f04f 33ff 	mov.w	r3, #4294967295
 8008892:	e7ea      	b.n	800886a <_strtod_l+0x8c2>
 8008894:	4613      	mov	r3, r2
 8008896:	e7e8      	b.n	800886a <_strtod_l+0x8c2>
 8008898:	ea53 030a 	orrs.w	r3, r3, sl
 800889c:	d08c      	beq.n	80087b8 <_strtod_l+0x810>
 800889e:	9b08      	ldr	r3, [sp, #32]
 80088a0:	b1db      	cbz	r3, 80088da <_strtod_l+0x932>
 80088a2:	423b      	tst	r3, r7
 80088a4:	d0ef      	beq.n	8008886 <_strtod_l+0x8de>
 80088a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a8:	9a04      	ldr	r2, [sp, #16]
 80088aa:	4650      	mov	r0, sl
 80088ac:	4659      	mov	r1, fp
 80088ae:	b1c3      	cbz	r3, 80088e2 <_strtod_l+0x93a>
 80088b0:	f7ff fb5e 	bl	8007f70 <sulp>
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	ec51 0b18 	vmov	r0, r1, d8
 80088bc:	f7f7 fce6 	bl	800028c <__adddf3>
 80088c0:	4682      	mov	sl, r0
 80088c2:	468b      	mov	fp, r1
 80088c4:	e7df      	b.n	8008886 <_strtod_l+0x8de>
 80088c6:	4013      	ands	r3, r2
 80088c8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80088cc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80088d0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80088d4:	f04f 3aff 	mov.w	sl, #4294967295
 80088d8:	e7d5      	b.n	8008886 <_strtod_l+0x8de>
 80088da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80088dc:	ea13 0f0a 	tst.w	r3, sl
 80088e0:	e7e0      	b.n	80088a4 <_strtod_l+0x8fc>
 80088e2:	f7ff fb45 	bl	8007f70 <sulp>
 80088e6:	4602      	mov	r2, r0
 80088e8:	460b      	mov	r3, r1
 80088ea:	ec51 0b18 	vmov	r0, r1, d8
 80088ee:	f7f7 fccb 	bl	8000288 <__aeabi_dsub>
 80088f2:	2200      	movs	r2, #0
 80088f4:	2300      	movs	r3, #0
 80088f6:	4682      	mov	sl, r0
 80088f8:	468b      	mov	fp, r1
 80088fa:	f7f8 f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80088fe:	2800      	cmp	r0, #0
 8008900:	d0c1      	beq.n	8008886 <_strtod_l+0x8de>
 8008902:	e611      	b.n	8008528 <_strtod_l+0x580>
 8008904:	fffffc02 	.word	0xfffffc02
 8008908:	7ff00000 	.word	0x7ff00000
 800890c:	39500000 	.word	0x39500000
 8008910:	000fffff 	.word	0x000fffff
 8008914:	7fefffff 	.word	0x7fefffff
 8008918:	0800bc40 	.word	0x0800bc40
 800891c:	4631      	mov	r1, r6
 800891e:	4628      	mov	r0, r5
 8008920:	f002 f832 	bl	800a988 <__ratio>
 8008924:	ec59 8b10 	vmov	r8, r9, d0
 8008928:	ee10 0a10 	vmov	r0, s0
 800892c:	2200      	movs	r2, #0
 800892e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008932:	4649      	mov	r1, r9
 8008934:	f7f8 f8dc 	bl	8000af0 <__aeabi_dcmple>
 8008938:	2800      	cmp	r0, #0
 800893a:	d07a      	beq.n	8008a32 <_strtod_l+0xa8a>
 800893c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d04a      	beq.n	80089d8 <_strtod_l+0xa30>
 8008942:	4b95      	ldr	r3, [pc, #596]	; (8008b98 <_strtod_l+0xbf0>)
 8008944:	2200      	movs	r2, #0
 8008946:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800894a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008b98 <_strtod_l+0xbf0>
 800894e:	f04f 0800 	mov.w	r8, #0
 8008952:	4b92      	ldr	r3, [pc, #584]	; (8008b9c <_strtod_l+0xbf4>)
 8008954:	403b      	ands	r3, r7
 8008956:	930d      	str	r3, [sp, #52]	; 0x34
 8008958:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800895a:	4b91      	ldr	r3, [pc, #580]	; (8008ba0 <_strtod_l+0xbf8>)
 800895c:	429a      	cmp	r2, r3
 800895e:	f040 80b0 	bne.w	8008ac2 <_strtod_l+0xb1a>
 8008962:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008966:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800896a:	ec4b ab10 	vmov	d0, sl, fp
 800896e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008972:	f001 ff31 	bl	800a7d8 <__ulp>
 8008976:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800897a:	ec53 2b10 	vmov	r2, r3, d0
 800897e:	f7f7 fe3b 	bl	80005f8 <__aeabi_dmul>
 8008982:	4652      	mov	r2, sl
 8008984:	465b      	mov	r3, fp
 8008986:	f7f7 fc81 	bl	800028c <__adddf3>
 800898a:	460b      	mov	r3, r1
 800898c:	4983      	ldr	r1, [pc, #524]	; (8008b9c <_strtod_l+0xbf4>)
 800898e:	4a85      	ldr	r2, [pc, #532]	; (8008ba4 <_strtod_l+0xbfc>)
 8008990:	4019      	ands	r1, r3
 8008992:	4291      	cmp	r1, r2
 8008994:	4682      	mov	sl, r0
 8008996:	d960      	bls.n	8008a5a <_strtod_l+0xab2>
 8008998:	ee18 3a90 	vmov	r3, s17
 800899c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d104      	bne.n	80089ae <_strtod_l+0xa06>
 80089a4:	ee18 3a10 	vmov	r3, s16
 80089a8:	3301      	adds	r3, #1
 80089aa:	f43f ad45 	beq.w	8008438 <_strtod_l+0x490>
 80089ae:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008bb0 <_strtod_l+0xc08>
 80089b2:	f04f 3aff 	mov.w	sl, #4294967295
 80089b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80089b8:	4620      	mov	r0, r4
 80089ba:	f001 fbdb 	bl	800a174 <_Bfree>
 80089be:	9905      	ldr	r1, [sp, #20]
 80089c0:	4620      	mov	r0, r4
 80089c2:	f001 fbd7 	bl	800a174 <_Bfree>
 80089c6:	4631      	mov	r1, r6
 80089c8:	4620      	mov	r0, r4
 80089ca:	f001 fbd3 	bl	800a174 <_Bfree>
 80089ce:	4629      	mov	r1, r5
 80089d0:	4620      	mov	r0, r4
 80089d2:	f001 fbcf 	bl	800a174 <_Bfree>
 80089d6:	e61a      	b.n	800860e <_strtod_l+0x666>
 80089d8:	f1ba 0f00 	cmp.w	sl, #0
 80089dc:	d11b      	bne.n	8008a16 <_strtod_l+0xa6e>
 80089de:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80089e2:	b9f3      	cbnz	r3, 8008a22 <_strtod_l+0xa7a>
 80089e4:	4b6c      	ldr	r3, [pc, #432]	; (8008b98 <_strtod_l+0xbf0>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	4640      	mov	r0, r8
 80089ea:	4649      	mov	r1, r9
 80089ec:	f7f8 f876 	bl	8000adc <__aeabi_dcmplt>
 80089f0:	b9d0      	cbnz	r0, 8008a28 <_strtod_l+0xa80>
 80089f2:	4640      	mov	r0, r8
 80089f4:	4649      	mov	r1, r9
 80089f6:	4b6c      	ldr	r3, [pc, #432]	; (8008ba8 <_strtod_l+0xc00>)
 80089f8:	2200      	movs	r2, #0
 80089fa:	f7f7 fdfd 	bl	80005f8 <__aeabi_dmul>
 80089fe:	4680      	mov	r8, r0
 8008a00:	4689      	mov	r9, r1
 8008a02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008a0a:	9315      	str	r3, [sp, #84]	; 0x54
 8008a0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008a10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008a14:	e79d      	b.n	8008952 <_strtod_l+0x9aa>
 8008a16:	f1ba 0f01 	cmp.w	sl, #1
 8008a1a:	d102      	bne.n	8008a22 <_strtod_l+0xa7a>
 8008a1c:	2f00      	cmp	r7, #0
 8008a1e:	f43f ad83 	beq.w	8008528 <_strtod_l+0x580>
 8008a22:	4b62      	ldr	r3, [pc, #392]	; (8008bac <_strtod_l+0xc04>)
 8008a24:	2200      	movs	r2, #0
 8008a26:	e78e      	b.n	8008946 <_strtod_l+0x99e>
 8008a28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008ba8 <_strtod_l+0xc00>
 8008a2c:	f04f 0800 	mov.w	r8, #0
 8008a30:	e7e7      	b.n	8008a02 <_strtod_l+0xa5a>
 8008a32:	4b5d      	ldr	r3, [pc, #372]	; (8008ba8 <_strtod_l+0xc00>)
 8008a34:	4640      	mov	r0, r8
 8008a36:	4649      	mov	r1, r9
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f7f7 fddd 	bl	80005f8 <__aeabi_dmul>
 8008a3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a40:	4680      	mov	r8, r0
 8008a42:	4689      	mov	r9, r1
 8008a44:	b933      	cbnz	r3, 8008a54 <_strtod_l+0xaac>
 8008a46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a4a:	900e      	str	r0, [sp, #56]	; 0x38
 8008a4c:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008a52:	e7dd      	b.n	8008a10 <_strtod_l+0xa68>
 8008a54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008a58:	e7f9      	b.n	8008a4e <_strtod_l+0xaa6>
 8008a5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008a5e:	9b04      	ldr	r3, [sp, #16]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d1a8      	bne.n	80089b6 <_strtod_l+0xa0e>
 8008a64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008a68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a6a:	0d1b      	lsrs	r3, r3, #20
 8008a6c:	051b      	lsls	r3, r3, #20
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d1a1      	bne.n	80089b6 <_strtod_l+0xa0e>
 8008a72:	4640      	mov	r0, r8
 8008a74:	4649      	mov	r1, r9
 8008a76:	f7f8 f91f 	bl	8000cb8 <__aeabi_d2lz>
 8008a7a:	f7f7 fd8f 	bl	800059c <__aeabi_l2d>
 8008a7e:	4602      	mov	r2, r0
 8008a80:	460b      	mov	r3, r1
 8008a82:	4640      	mov	r0, r8
 8008a84:	4649      	mov	r1, r9
 8008a86:	f7f7 fbff 	bl	8000288 <__aeabi_dsub>
 8008a8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a90:	ea43 030a 	orr.w	r3, r3, sl
 8008a94:	4313      	orrs	r3, r2
 8008a96:	4680      	mov	r8, r0
 8008a98:	4689      	mov	r9, r1
 8008a9a:	d055      	beq.n	8008b48 <_strtod_l+0xba0>
 8008a9c:	a336      	add	r3, pc, #216	; (adr r3, 8008b78 <_strtod_l+0xbd0>)
 8008a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa2:	f7f8 f81b 	bl	8000adc <__aeabi_dcmplt>
 8008aa6:	2800      	cmp	r0, #0
 8008aa8:	f47f acd0 	bne.w	800844c <_strtod_l+0x4a4>
 8008aac:	a334      	add	r3, pc, #208	; (adr r3, 8008b80 <_strtod_l+0xbd8>)
 8008aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab2:	4640      	mov	r0, r8
 8008ab4:	4649      	mov	r1, r9
 8008ab6:	f7f8 f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8008aba:	2800      	cmp	r0, #0
 8008abc:	f43f af7b 	beq.w	80089b6 <_strtod_l+0xa0e>
 8008ac0:	e4c4      	b.n	800844c <_strtod_l+0x4a4>
 8008ac2:	9b04      	ldr	r3, [sp, #16]
 8008ac4:	b333      	cbz	r3, 8008b14 <_strtod_l+0xb6c>
 8008ac6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ac8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008acc:	d822      	bhi.n	8008b14 <_strtod_l+0xb6c>
 8008ace:	a32e      	add	r3, pc, #184	; (adr r3, 8008b88 <_strtod_l+0xbe0>)
 8008ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad4:	4640      	mov	r0, r8
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	f7f8 f80a 	bl	8000af0 <__aeabi_dcmple>
 8008adc:	b1a0      	cbz	r0, 8008b08 <_strtod_l+0xb60>
 8008ade:	4649      	mov	r1, r9
 8008ae0:	4640      	mov	r0, r8
 8008ae2:	f7f8 f861 	bl	8000ba8 <__aeabi_d2uiz>
 8008ae6:	2801      	cmp	r0, #1
 8008ae8:	bf38      	it	cc
 8008aea:	2001      	movcc	r0, #1
 8008aec:	f7f7 fd0a 	bl	8000504 <__aeabi_ui2d>
 8008af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008af2:	4680      	mov	r8, r0
 8008af4:	4689      	mov	r9, r1
 8008af6:	bb23      	cbnz	r3, 8008b42 <_strtod_l+0xb9a>
 8008af8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008afc:	9010      	str	r0, [sp, #64]	; 0x40
 8008afe:	9311      	str	r3, [sp, #68]	; 0x44
 8008b00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008b04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008b08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008b0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008b10:	1a9b      	subs	r3, r3, r2
 8008b12:	9309      	str	r3, [sp, #36]	; 0x24
 8008b14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b18:	eeb0 0a48 	vmov.f32	s0, s16
 8008b1c:	eef0 0a68 	vmov.f32	s1, s17
 8008b20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008b24:	f001 fe58 	bl	800a7d8 <__ulp>
 8008b28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008b2c:	ec53 2b10 	vmov	r2, r3, d0
 8008b30:	f7f7 fd62 	bl	80005f8 <__aeabi_dmul>
 8008b34:	ec53 2b18 	vmov	r2, r3, d8
 8008b38:	f7f7 fba8 	bl	800028c <__adddf3>
 8008b3c:	4682      	mov	sl, r0
 8008b3e:	468b      	mov	fp, r1
 8008b40:	e78d      	b.n	8008a5e <_strtod_l+0xab6>
 8008b42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008b46:	e7db      	b.n	8008b00 <_strtod_l+0xb58>
 8008b48:	a311      	add	r3, pc, #68	; (adr r3, 8008b90 <_strtod_l+0xbe8>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f7f7 ffc5 	bl	8000adc <__aeabi_dcmplt>
 8008b52:	e7b2      	b.n	8008aba <_strtod_l+0xb12>
 8008b54:	2300      	movs	r3, #0
 8008b56:	930a      	str	r3, [sp, #40]	; 0x28
 8008b58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008b5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008b5c:	6013      	str	r3, [r2, #0]
 8008b5e:	f7ff ba6b 	b.w	8008038 <_strtod_l+0x90>
 8008b62:	2a65      	cmp	r2, #101	; 0x65
 8008b64:	f43f ab5f 	beq.w	8008226 <_strtod_l+0x27e>
 8008b68:	2a45      	cmp	r2, #69	; 0x45
 8008b6a:	f43f ab5c 	beq.w	8008226 <_strtod_l+0x27e>
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f7ff bb94 	b.w	800829c <_strtod_l+0x2f4>
 8008b74:	f3af 8000 	nop.w
 8008b78:	94a03595 	.word	0x94a03595
 8008b7c:	3fdfffff 	.word	0x3fdfffff
 8008b80:	35afe535 	.word	0x35afe535
 8008b84:	3fe00000 	.word	0x3fe00000
 8008b88:	ffc00000 	.word	0xffc00000
 8008b8c:	41dfffff 	.word	0x41dfffff
 8008b90:	94a03595 	.word	0x94a03595
 8008b94:	3fcfffff 	.word	0x3fcfffff
 8008b98:	3ff00000 	.word	0x3ff00000
 8008b9c:	7ff00000 	.word	0x7ff00000
 8008ba0:	7fe00000 	.word	0x7fe00000
 8008ba4:	7c9fffff 	.word	0x7c9fffff
 8008ba8:	3fe00000 	.word	0x3fe00000
 8008bac:	bff00000 	.word	0xbff00000
 8008bb0:	7fefffff 	.word	0x7fefffff

08008bb4 <_strtod_r>:
 8008bb4:	4b01      	ldr	r3, [pc, #4]	; (8008bbc <_strtod_r+0x8>)
 8008bb6:	f7ff b9f7 	b.w	8007fa8 <_strtod_l>
 8008bba:	bf00      	nop
 8008bbc:	20000080 	.word	0x20000080

08008bc0 <_strtol_l.constprop.0>:
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008bc6:	d001      	beq.n	8008bcc <_strtol_l.constprop.0+0xc>
 8008bc8:	2b24      	cmp	r3, #36	; 0x24
 8008bca:	d906      	bls.n	8008bda <_strtol_l.constprop.0+0x1a>
 8008bcc:	f7fe fafe 	bl	80071cc <__errno>
 8008bd0:	2316      	movs	r3, #22
 8008bd2:	6003      	str	r3, [r0, #0]
 8008bd4:	2000      	movs	r0, #0
 8008bd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008cc0 <_strtol_l.constprop.0+0x100>
 8008bde:	460d      	mov	r5, r1
 8008be0:	462e      	mov	r6, r5
 8008be2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008be6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bea:	f017 0708 	ands.w	r7, r7, #8
 8008bee:	d1f7      	bne.n	8008be0 <_strtol_l.constprop.0+0x20>
 8008bf0:	2c2d      	cmp	r4, #45	; 0x2d
 8008bf2:	d132      	bne.n	8008c5a <_strtol_l.constprop.0+0x9a>
 8008bf4:	782c      	ldrb	r4, [r5, #0]
 8008bf6:	2701      	movs	r7, #1
 8008bf8:	1cb5      	adds	r5, r6, #2
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d05b      	beq.n	8008cb6 <_strtol_l.constprop.0+0xf6>
 8008bfe:	2b10      	cmp	r3, #16
 8008c00:	d109      	bne.n	8008c16 <_strtol_l.constprop.0+0x56>
 8008c02:	2c30      	cmp	r4, #48	; 0x30
 8008c04:	d107      	bne.n	8008c16 <_strtol_l.constprop.0+0x56>
 8008c06:	782c      	ldrb	r4, [r5, #0]
 8008c08:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c0c:	2c58      	cmp	r4, #88	; 0x58
 8008c0e:	d14d      	bne.n	8008cac <_strtol_l.constprop.0+0xec>
 8008c10:	786c      	ldrb	r4, [r5, #1]
 8008c12:	2310      	movs	r3, #16
 8008c14:	3502      	adds	r5, #2
 8008c16:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008c1a:	f108 38ff 	add.w	r8, r8, #4294967295
 8008c1e:	f04f 0c00 	mov.w	ip, #0
 8008c22:	fbb8 f9f3 	udiv	r9, r8, r3
 8008c26:	4666      	mov	r6, ip
 8008c28:	fb03 8a19 	mls	sl, r3, r9, r8
 8008c2c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008c30:	f1be 0f09 	cmp.w	lr, #9
 8008c34:	d816      	bhi.n	8008c64 <_strtol_l.constprop.0+0xa4>
 8008c36:	4674      	mov	r4, lr
 8008c38:	42a3      	cmp	r3, r4
 8008c3a:	dd24      	ble.n	8008c86 <_strtol_l.constprop.0+0xc6>
 8008c3c:	f1bc 0f00 	cmp.w	ip, #0
 8008c40:	db1e      	blt.n	8008c80 <_strtol_l.constprop.0+0xc0>
 8008c42:	45b1      	cmp	r9, r6
 8008c44:	d31c      	bcc.n	8008c80 <_strtol_l.constprop.0+0xc0>
 8008c46:	d101      	bne.n	8008c4c <_strtol_l.constprop.0+0x8c>
 8008c48:	45a2      	cmp	sl, r4
 8008c4a:	db19      	blt.n	8008c80 <_strtol_l.constprop.0+0xc0>
 8008c4c:	fb06 4603 	mla	r6, r6, r3, r4
 8008c50:	f04f 0c01 	mov.w	ip, #1
 8008c54:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c58:	e7e8      	b.n	8008c2c <_strtol_l.constprop.0+0x6c>
 8008c5a:	2c2b      	cmp	r4, #43	; 0x2b
 8008c5c:	bf04      	itt	eq
 8008c5e:	782c      	ldrbeq	r4, [r5, #0]
 8008c60:	1cb5      	addeq	r5, r6, #2
 8008c62:	e7ca      	b.n	8008bfa <_strtol_l.constprop.0+0x3a>
 8008c64:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c68:	f1be 0f19 	cmp.w	lr, #25
 8008c6c:	d801      	bhi.n	8008c72 <_strtol_l.constprop.0+0xb2>
 8008c6e:	3c37      	subs	r4, #55	; 0x37
 8008c70:	e7e2      	b.n	8008c38 <_strtol_l.constprop.0+0x78>
 8008c72:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c76:	f1be 0f19 	cmp.w	lr, #25
 8008c7a:	d804      	bhi.n	8008c86 <_strtol_l.constprop.0+0xc6>
 8008c7c:	3c57      	subs	r4, #87	; 0x57
 8008c7e:	e7db      	b.n	8008c38 <_strtol_l.constprop.0+0x78>
 8008c80:	f04f 3cff 	mov.w	ip, #4294967295
 8008c84:	e7e6      	b.n	8008c54 <_strtol_l.constprop.0+0x94>
 8008c86:	f1bc 0f00 	cmp.w	ip, #0
 8008c8a:	da05      	bge.n	8008c98 <_strtol_l.constprop.0+0xd8>
 8008c8c:	2322      	movs	r3, #34	; 0x22
 8008c8e:	6003      	str	r3, [r0, #0]
 8008c90:	4646      	mov	r6, r8
 8008c92:	b942      	cbnz	r2, 8008ca6 <_strtol_l.constprop.0+0xe6>
 8008c94:	4630      	mov	r0, r6
 8008c96:	e79e      	b.n	8008bd6 <_strtol_l.constprop.0+0x16>
 8008c98:	b107      	cbz	r7, 8008c9c <_strtol_l.constprop.0+0xdc>
 8008c9a:	4276      	negs	r6, r6
 8008c9c:	2a00      	cmp	r2, #0
 8008c9e:	d0f9      	beq.n	8008c94 <_strtol_l.constprop.0+0xd4>
 8008ca0:	f1bc 0f00 	cmp.w	ip, #0
 8008ca4:	d000      	beq.n	8008ca8 <_strtol_l.constprop.0+0xe8>
 8008ca6:	1e69      	subs	r1, r5, #1
 8008ca8:	6011      	str	r1, [r2, #0]
 8008caa:	e7f3      	b.n	8008c94 <_strtol_l.constprop.0+0xd4>
 8008cac:	2430      	movs	r4, #48	; 0x30
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d1b1      	bne.n	8008c16 <_strtol_l.constprop.0+0x56>
 8008cb2:	2308      	movs	r3, #8
 8008cb4:	e7af      	b.n	8008c16 <_strtol_l.constprop.0+0x56>
 8008cb6:	2c30      	cmp	r4, #48	; 0x30
 8008cb8:	d0a5      	beq.n	8008c06 <_strtol_l.constprop.0+0x46>
 8008cba:	230a      	movs	r3, #10
 8008cbc:	e7ab      	b.n	8008c16 <_strtol_l.constprop.0+0x56>
 8008cbe:	bf00      	nop
 8008cc0:	0800bc69 	.word	0x0800bc69

08008cc4 <_strtol_r>:
 8008cc4:	f7ff bf7c 	b.w	8008bc0 <_strtol_l.constprop.0>

08008cc8 <quorem>:
 8008cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	6903      	ldr	r3, [r0, #16]
 8008cce:	690c      	ldr	r4, [r1, #16]
 8008cd0:	42a3      	cmp	r3, r4
 8008cd2:	4607      	mov	r7, r0
 8008cd4:	f2c0 8081 	blt.w	8008dda <quorem+0x112>
 8008cd8:	3c01      	subs	r4, #1
 8008cda:	f101 0814 	add.w	r8, r1, #20
 8008cde:	f100 0514 	add.w	r5, r0, #20
 8008ce2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ce6:	9301      	str	r3, [sp, #4]
 8008ce8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008cec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008cf0:	3301      	adds	r3, #1
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008cf8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008cfc:	fbb2 f6f3 	udiv	r6, r2, r3
 8008d00:	d331      	bcc.n	8008d66 <quorem+0x9e>
 8008d02:	f04f 0e00 	mov.w	lr, #0
 8008d06:	4640      	mov	r0, r8
 8008d08:	46ac      	mov	ip, r5
 8008d0a:	46f2      	mov	sl, lr
 8008d0c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008d10:	b293      	uxth	r3, r2
 8008d12:	fb06 e303 	mla	r3, r6, r3, lr
 8008d16:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008d1a:	b29b      	uxth	r3, r3
 8008d1c:	ebaa 0303 	sub.w	r3, sl, r3
 8008d20:	f8dc a000 	ldr.w	sl, [ip]
 8008d24:	0c12      	lsrs	r2, r2, #16
 8008d26:	fa13 f38a 	uxtah	r3, r3, sl
 8008d2a:	fb06 e202 	mla	r2, r6, r2, lr
 8008d2e:	9300      	str	r3, [sp, #0]
 8008d30:	9b00      	ldr	r3, [sp, #0]
 8008d32:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008d36:	b292      	uxth	r2, r2
 8008d38:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008d3c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d40:	f8bd 3000 	ldrh.w	r3, [sp]
 8008d44:	4581      	cmp	r9, r0
 8008d46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d4a:	f84c 3b04 	str.w	r3, [ip], #4
 8008d4e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008d52:	d2db      	bcs.n	8008d0c <quorem+0x44>
 8008d54:	f855 300b 	ldr.w	r3, [r5, fp]
 8008d58:	b92b      	cbnz	r3, 8008d66 <quorem+0x9e>
 8008d5a:	9b01      	ldr	r3, [sp, #4]
 8008d5c:	3b04      	subs	r3, #4
 8008d5e:	429d      	cmp	r5, r3
 8008d60:	461a      	mov	r2, r3
 8008d62:	d32e      	bcc.n	8008dc2 <quorem+0xfa>
 8008d64:	613c      	str	r4, [r7, #16]
 8008d66:	4638      	mov	r0, r7
 8008d68:	f001 fc90 	bl	800a68c <__mcmp>
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	db24      	blt.n	8008dba <quorem+0xf2>
 8008d70:	3601      	adds	r6, #1
 8008d72:	4628      	mov	r0, r5
 8008d74:	f04f 0c00 	mov.w	ip, #0
 8008d78:	f858 2b04 	ldr.w	r2, [r8], #4
 8008d7c:	f8d0 e000 	ldr.w	lr, [r0]
 8008d80:	b293      	uxth	r3, r2
 8008d82:	ebac 0303 	sub.w	r3, ip, r3
 8008d86:	0c12      	lsrs	r2, r2, #16
 8008d88:	fa13 f38e 	uxtah	r3, r3, lr
 8008d8c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008d90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008d94:	b29b      	uxth	r3, r3
 8008d96:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008d9a:	45c1      	cmp	r9, r8
 8008d9c:	f840 3b04 	str.w	r3, [r0], #4
 8008da0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008da4:	d2e8      	bcs.n	8008d78 <quorem+0xb0>
 8008da6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008daa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008dae:	b922      	cbnz	r2, 8008dba <quorem+0xf2>
 8008db0:	3b04      	subs	r3, #4
 8008db2:	429d      	cmp	r5, r3
 8008db4:	461a      	mov	r2, r3
 8008db6:	d30a      	bcc.n	8008dce <quorem+0x106>
 8008db8:	613c      	str	r4, [r7, #16]
 8008dba:	4630      	mov	r0, r6
 8008dbc:	b003      	add	sp, #12
 8008dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dc2:	6812      	ldr	r2, [r2, #0]
 8008dc4:	3b04      	subs	r3, #4
 8008dc6:	2a00      	cmp	r2, #0
 8008dc8:	d1cc      	bne.n	8008d64 <quorem+0x9c>
 8008dca:	3c01      	subs	r4, #1
 8008dcc:	e7c7      	b.n	8008d5e <quorem+0x96>
 8008dce:	6812      	ldr	r2, [r2, #0]
 8008dd0:	3b04      	subs	r3, #4
 8008dd2:	2a00      	cmp	r2, #0
 8008dd4:	d1f0      	bne.n	8008db8 <quorem+0xf0>
 8008dd6:	3c01      	subs	r4, #1
 8008dd8:	e7eb      	b.n	8008db2 <quorem+0xea>
 8008dda:	2000      	movs	r0, #0
 8008ddc:	e7ee      	b.n	8008dbc <quorem+0xf4>
	...

08008de0 <_dtoa_r>:
 8008de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008de4:	ed2d 8b04 	vpush	{d8-d9}
 8008de8:	ec57 6b10 	vmov	r6, r7, d0
 8008dec:	b093      	sub	sp, #76	; 0x4c
 8008dee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008df0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008df4:	9106      	str	r1, [sp, #24]
 8008df6:	ee10 aa10 	vmov	sl, s0
 8008dfa:	4604      	mov	r4, r0
 8008dfc:	9209      	str	r2, [sp, #36]	; 0x24
 8008dfe:	930c      	str	r3, [sp, #48]	; 0x30
 8008e00:	46bb      	mov	fp, r7
 8008e02:	b975      	cbnz	r5, 8008e22 <_dtoa_r+0x42>
 8008e04:	2010      	movs	r0, #16
 8008e06:	f001 f94d 	bl	800a0a4 <malloc>
 8008e0a:	4602      	mov	r2, r0
 8008e0c:	6260      	str	r0, [r4, #36]	; 0x24
 8008e0e:	b920      	cbnz	r0, 8008e1a <_dtoa_r+0x3a>
 8008e10:	4ba7      	ldr	r3, [pc, #668]	; (80090b0 <_dtoa_r+0x2d0>)
 8008e12:	21ea      	movs	r1, #234	; 0xea
 8008e14:	48a7      	ldr	r0, [pc, #668]	; (80090b4 <_dtoa_r+0x2d4>)
 8008e16:	f002 f8bd 	bl	800af94 <__assert_func>
 8008e1a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008e1e:	6005      	str	r5, [r0, #0]
 8008e20:	60c5      	str	r5, [r0, #12]
 8008e22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e24:	6819      	ldr	r1, [r3, #0]
 8008e26:	b151      	cbz	r1, 8008e3e <_dtoa_r+0x5e>
 8008e28:	685a      	ldr	r2, [r3, #4]
 8008e2a:	604a      	str	r2, [r1, #4]
 8008e2c:	2301      	movs	r3, #1
 8008e2e:	4093      	lsls	r3, r2
 8008e30:	608b      	str	r3, [r1, #8]
 8008e32:	4620      	mov	r0, r4
 8008e34:	f001 f99e 	bl	800a174 <_Bfree>
 8008e38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	601a      	str	r2, [r3, #0]
 8008e3e:	1e3b      	subs	r3, r7, #0
 8008e40:	bfaa      	itet	ge
 8008e42:	2300      	movge	r3, #0
 8008e44:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008e48:	f8c8 3000 	strge.w	r3, [r8]
 8008e4c:	4b9a      	ldr	r3, [pc, #616]	; (80090b8 <_dtoa_r+0x2d8>)
 8008e4e:	bfbc      	itt	lt
 8008e50:	2201      	movlt	r2, #1
 8008e52:	f8c8 2000 	strlt.w	r2, [r8]
 8008e56:	ea33 030b 	bics.w	r3, r3, fp
 8008e5a:	d11b      	bne.n	8008e94 <_dtoa_r+0xb4>
 8008e5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008e5e:	f242 730f 	movw	r3, #9999	; 0x270f
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e68:	4333      	orrs	r3, r6
 8008e6a:	f000 8592 	beq.w	8009992 <_dtoa_r+0xbb2>
 8008e6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008e70:	b963      	cbnz	r3, 8008e8c <_dtoa_r+0xac>
 8008e72:	4b92      	ldr	r3, [pc, #584]	; (80090bc <_dtoa_r+0x2dc>)
 8008e74:	e022      	b.n	8008ebc <_dtoa_r+0xdc>
 8008e76:	4b92      	ldr	r3, [pc, #584]	; (80090c0 <_dtoa_r+0x2e0>)
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	3308      	adds	r3, #8
 8008e7c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	9801      	ldr	r0, [sp, #4]
 8008e82:	b013      	add	sp, #76	; 0x4c
 8008e84:	ecbd 8b04 	vpop	{d8-d9}
 8008e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e8c:	4b8b      	ldr	r3, [pc, #556]	; (80090bc <_dtoa_r+0x2dc>)
 8008e8e:	9301      	str	r3, [sp, #4]
 8008e90:	3303      	adds	r3, #3
 8008e92:	e7f3      	b.n	8008e7c <_dtoa_r+0x9c>
 8008e94:	2200      	movs	r2, #0
 8008e96:	2300      	movs	r3, #0
 8008e98:	4650      	mov	r0, sl
 8008e9a:	4659      	mov	r1, fp
 8008e9c:	f7f7 fe14 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ea0:	ec4b ab19 	vmov	d9, sl, fp
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	b158      	cbz	r0, 8008ec0 <_dtoa_r+0xe0>
 8008ea8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008eaa:	2301      	movs	r3, #1
 8008eac:	6013      	str	r3, [r2, #0]
 8008eae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 856b 	beq.w	800998c <_dtoa_r+0xbac>
 8008eb6:	4883      	ldr	r0, [pc, #524]	; (80090c4 <_dtoa_r+0x2e4>)
 8008eb8:	6018      	str	r0, [r3, #0]
 8008eba:	1e43      	subs	r3, r0, #1
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	e7df      	b.n	8008e80 <_dtoa_r+0xa0>
 8008ec0:	ec4b ab10 	vmov	d0, sl, fp
 8008ec4:	aa10      	add	r2, sp, #64	; 0x40
 8008ec6:	a911      	add	r1, sp, #68	; 0x44
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f001 fd01 	bl	800a8d0 <__d2b>
 8008ece:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008ed2:	ee08 0a10 	vmov	s16, r0
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	f000 8084 	beq.w	8008fe4 <_dtoa_r+0x204>
 8008edc:	ee19 3a90 	vmov	r3, s19
 8008ee0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ee4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008ee8:	4656      	mov	r6, sl
 8008eea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008eee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ef2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008ef6:	4b74      	ldr	r3, [pc, #464]	; (80090c8 <_dtoa_r+0x2e8>)
 8008ef8:	2200      	movs	r2, #0
 8008efa:	4630      	mov	r0, r6
 8008efc:	4639      	mov	r1, r7
 8008efe:	f7f7 f9c3 	bl	8000288 <__aeabi_dsub>
 8008f02:	a365      	add	r3, pc, #404	; (adr r3, 8009098 <_dtoa_r+0x2b8>)
 8008f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f08:	f7f7 fb76 	bl	80005f8 <__aeabi_dmul>
 8008f0c:	a364      	add	r3, pc, #400	; (adr r3, 80090a0 <_dtoa_r+0x2c0>)
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f7f7 f9bb 	bl	800028c <__adddf3>
 8008f16:	4606      	mov	r6, r0
 8008f18:	4628      	mov	r0, r5
 8008f1a:	460f      	mov	r7, r1
 8008f1c:	f7f7 fb02 	bl	8000524 <__aeabi_i2d>
 8008f20:	a361      	add	r3, pc, #388	; (adr r3, 80090a8 <_dtoa_r+0x2c8>)
 8008f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f26:	f7f7 fb67 	bl	80005f8 <__aeabi_dmul>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	4630      	mov	r0, r6
 8008f30:	4639      	mov	r1, r7
 8008f32:	f7f7 f9ab 	bl	800028c <__adddf3>
 8008f36:	4606      	mov	r6, r0
 8008f38:	460f      	mov	r7, r1
 8008f3a:	f7f7 fe0d 	bl	8000b58 <__aeabi_d2iz>
 8008f3e:	2200      	movs	r2, #0
 8008f40:	9000      	str	r0, [sp, #0]
 8008f42:	2300      	movs	r3, #0
 8008f44:	4630      	mov	r0, r6
 8008f46:	4639      	mov	r1, r7
 8008f48:	f7f7 fdc8 	bl	8000adc <__aeabi_dcmplt>
 8008f4c:	b150      	cbz	r0, 8008f64 <_dtoa_r+0x184>
 8008f4e:	9800      	ldr	r0, [sp, #0]
 8008f50:	f7f7 fae8 	bl	8000524 <__aeabi_i2d>
 8008f54:	4632      	mov	r2, r6
 8008f56:	463b      	mov	r3, r7
 8008f58:	f7f7 fdb6 	bl	8000ac8 <__aeabi_dcmpeq>
 8008f5c:	b910      	cbnz	r0, 8008f64 <_dtoa_r+0x184>
 8008f5e:	9b00      	ldr	r3, [sp, #0]
 8008f60:	3b01      	subs	r3, #1
 8008f62:	9300      	str	r3, [sp, #0]
 8008f64:	9b00      	ldr	r3, [sp, #0]
 8008f66:	2b16      	cmp	r3, #22
 8008f68:	d85a      	bhi.n	8009020 <_dtoa_r+0x240>
 8008f6a:	9a00      	ldr	r2, [sp, #0]
 8008f6c:	4b57      	ldr	r3, [pc, #348]	; (80090cc <_dtoa_r+0x2ec>)
 8008f6e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	ec51 0b19 	vmov	r0, r1, d9
 8008f7a:	f7f7 fdaf 	bl	8000adc <__aeabi_dcmplt>
 8008f7e:	2800      	cmp	r0, #0
 8008f80:	d050      	beq.n	8009024 <_dtoa_r+0x244>
 8008f82:	9b00      	ldr	r3, [sp, #0]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	9300      	str	r3, [sp, #0]
 8008f88:	2300      	movs	r3, #0
 8008f8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f8c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f8e:	1b5d      	subs	r5, r3, r5
 8008f90:	1e6b      	subs	r3, r5, #1
 8008f92:	9305      	str	r3, [sp, #20]
 8008f94:	bf45      	ittet	mi
 8008f96:	f1c5 0301 	rsbmi	r3, r5, #1
 8008f9a:	9304      	strmi	r3, [sp, #16]
 8008f9c:	2300      	movpl	r3, #0
 8008f9e:	2300      	movmi	r3, #0
 8008fa0:	bf4c      	ite	mi
 8008fa2:	9305      	strmi	r3, [sp, #20]
 8008fa4:	9304      	strpl	r3, [sp, #16]
 8008fa6:	9b00      	ldr	r3, [sp, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	db3d      	blt.n	8009028 <_dtoa_r+0x248>
 8008fac:	9b05      	ldr	r3, [sp, #20]
 8008fae:	9a00      	ldr	r2, [sp, #0]
 8008fb0:	920a      	str	r2, [sp, #40]	; 0x28
 8008fb2:	4413      	add	r3, r2
 8008fb4:	9305      	str	r3, [sp, #20]
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	9307      	str	r3, [sp, #28]
 8008fba:	9b06      	ldr	r3, [sp, #24]
 8008fbc:	2b09      	cmp	r3, #9
 8008fbe:	f200 8089 	bhi.w	80090d4 <_dtoa_r+0x2f4>
 8008fc2:	2b05      	cmp	r3, #5
 8008fc4:	bfc4      	itt	gt
 8008fc6:	3b04      	subgt	r3, #4
 8008fc8:	9306      	strgt	r3, [sp, #24]
 8008fca:	9b06      	ldr	r3, [sp, #24]
 8008fcc:	f1a3 0302 	sub.w	r3, r3, #2
 8008fd0:	bfcc      	ite	gt
 8008fd2:	2500      	movgt	r5, #0
 8008fd4:	2501      	movle	r5, #1
 8008fd6:	2b03      	cmp	r3, #3
 8008fd8:	f200 8087 	bhi.w	80090ea <_dtoa_r+0x30a>
 8008fdc:	e8df f003 	tbb	[pc, r3]
 8008fe0:	59383a2d 	.word	0x59383a2d
 8008fe4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008fe8:	441d      	add	r5, r3
 8008fea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008fee:	2b20      	cmp	r3, #32
 8008ff0:	bfc1      	itttt	gt
 8008ff2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008ff6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008ffa:	fa0b f303 	lslgt.w	r3, fp, r3
 8008ffe:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009002:	bfda      	itte	le
 8009004:	f1c3 0320 	rsble	r3, r3, #32
 8009008:	fa06 f003 	lslle.w	r0, r6, r3
 800900c:	4318      	orrgt	r0, r3
 800900e:	f7f7 fa79 	bl	8000504 <__aeabi_ui2d>
 8009012:	2301      	movs	r3, #1
 8009014:	4606      	mov	r6, r0
 8009016:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800901a:	3d01      	subs	r5, #1
 800901c:	930e      	str	r3, [sp, #56]	; 0x38
 800901e:	e76a      	b.n	8008ef6 <_dtoa_r+0x116>
 8009020:	2301      	movs	r3, #1
 8009022:	e7b2      	b.n	8008f8a <_dtoa_r+0x1aa>
 8009024:	900b      	str	r0, [sp, #44]	; 0x2c
 8009026:	e7b1      	b.n	8008f8c <_dtoa_r+0x1ac>
 8009028:	9b04      	ldr	r3, [sp, #16]
 800902a:	9a00      	ldr	r2, [sp, #0]
 800902c:	1a9b      	subs	r3, r3, r2
 800902e:	9304      	str	r3, [sp, #16]
 8009030:	4253      	negs	r3, r2
 8009032:	9307      	str	r3, [sp, #28]
 8009034:	2300      	movs	r3, #0
 8009036:	930a      	str	r3, [sp, #40]	; 0x28
 8009038:	e7bf      	b.n	8008fba <_dtoa_r+0x1da>
 800903a:	2300      	movs	r3, #0
 800903c:	9308      	str	r3, [sp, #32]
 800903e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009040:	2b00      	cmp	r3, #0
 8009042:	dc55      	bgt.n	80090f0 <_dtoa_r+0x310>
 8009044:	2301      	movs	r3, #1
 8009046:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800904a:	461a      	mov	r2, r3
 800904c:	9209      	str	r2, [sp, #36]	; 0x24
 800904e:	e00c      	b.n	800906a <_dtoa_r+0x28a>
 8009050:	2301      	movs	r3, #1
 8009052:	e7f3      	b.n	800903c <_dtoa_r+0x25c>
 8009054:	2300      	movs	r3, #0
 8009056:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009058:	9308      	str	r3, [sp, #32]
 800905a:	9b00      	ldr	r3, [sp, #0]
 800905c:	4413      	add	r3, r2
 800905e:	9302      	str	r3, [sp, #8]
 8009060:	3301      	adds	r3, #1
 8009062:	2b01      	cmp	r3, #1
 8009064:	9303      	str	r3, [sp, #12]
 8009066:	bfb8      	it	lt
 8009068:	2301      	movlt	r3, #1
 800906a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800906c:	2200      	movs	r2, #0
 800906e:	6042      	str	r2, [r0, #4]
 8009070:	2204      	movs	r2, #4
 8009072:	f102 0614 	add.w	r6, r2, #20
 8009076:	429e      	cmp	r6, r3
 8009078:	6841      	ldr	r1, [r0, #4]
 800907a:	d93d      	bls.n	80090f8 <_dtoa_r+0x318>
 800907c:	4620      	mov	r0, r4
 800907e:	f001 f839 	bl	800a0f4 <_Balloc>
 8009082:	9001      	str	r0, [sp, #4]
 8009084:	2800      	cmp	r0, #0
 8009086:	d13b      	bne.n	8009100 <_dtoa_r+0x320>
 8009088:	4b11      	ldr	r3, [pc, #68]	; (80090d0 <_dtoa_r+0x2f0>)
 800908a:	4602      	mov	r2, r0
 800908c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009090:	e6c0      	b.n	8008e14 <_dtoa_r+0x34>
 8009092:	2301      	movs	r3, #1
 8009094:	e7df      	b.n	8009056 <_dtoa_r+0x276>
 8009096:	bf00      	nop
 8009098:	636f4361 	.word	0x636f4361
 800909c:	3fd287a7 	.word	0x3fd287a7
 80090a0:	8b60c8b3 	.word	0x8b60c8b3
 80090a4:	3fc68a28 	.word	0x3fc68a28
 80090a8:	509f79fb 	.word	0x509f79fb
 80090ac:	3fd34413 	.word	0x3fd34413
 80090b0:	0800bd76 	.word	0x0800bd76
 80090b4:	0800bd8d 	.word	0x0800bd8d
 80090b8:	7ff00000 	.word	0x7ff00000
 80090bc:	0800bd72 	.word	0x0800bd72
 80090c0:	0800bd69 	.word	0x0800bd69
 80090c4:	0800bbe9 	.word	0x0800bbe9
 80090c8:	3ff80000 	.word	0x3ff80000
 80090cc:	0800bef8 	.word	0x0800bef8
 80090d0:	0800bde8 	.word	0x0800bde8
 80090d4:	2501      	movs	r5, #1
 80090d6:	2300      	movs	r3, #0
 80090d8:	9306      	str	r3, [sp, #24]
 80090da:	9508      	str	r5, [sp, #32]
 80090dc:	f04f 33ff 	mov.w	r3, #4294967295
 80090e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090e4:	2200      	movs	r2, #0
 80090e6:	2312      	movs	r3, #18
 80090e8:	e7b0      	b.n	800904c <_dtoa_r+0x26c>
 80090ea:	2301      	movs	r3, #1
 80090ec:	9308      	str	r3, [sp, #32]
 80090ee:	e7f5      	b.n	80090dc <_dtoa_r+0x2fc>
 80090f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80090f6:	e7b8      	b.n	800906a <_dtoa_r+0x28a>
 80090f8:	3101      	adds	r1, #1
 80090fa:	6041      	str	r1, [r0, #4]
 80090fc:	0052      	lsls	r2, r2, #1
 80090fe:	e7b8      	b.n	8009072 <_dtoa_r+0x292>
 8009100:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009102:	9a01      	ldr	r2, [sp, #4]
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	9b03      	ldr	r3, [sp, #12]
 8009108:	2b0e      	cmp	r3, #14
 800910a:	f200 809d 	bhi.w	8009248 <_dtoa_r+0x468>
 800910e:	2d00      	cmp	r5, #0
 8009110:	f000 809a 	beq.w	8009248 <_dtoa_r+0x468>
 8009114:	9b00      	ldr	r3, [sp, #0]
 8009116:	2b00      	cmp	r3, #0
 8009118:	dd32      	ble.n	8009180 <_dtoa_r+0x3a0>
 800911a:	4ab7      	ldr	r2, [pc, #732]	; (80093f8 <_dtoa_r+0x618>)
 800911c:	f003 030f 	and.w	r3, r3, #15
 8009120:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009124:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009128:	9b00      	ldr	r3, [sp, #0]
 800912a:	05d8      	lsls	r0, r3, #23
 800912c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009130:	d516      	bpl.n	8009160 <_dtoa_r+0x380>
 8009132:	4bb2      	ldr	r3, [pc, #712]	; (80093fc <_dtoa_r+0x61c>)
 8009134:	ec51 0b19 	vmov	r0, r1, d9
 8009138:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800913c:	f7f7 fb86 	bl	800084c <__aeabi_ddiv>
 8009140:	f007 070f 	and.w	r7, r7, #15
 8009144:	4682      	mov	sl, r0
 8009146:	468b      	mov	fp, r1
 8009148:	2503      	movs	r5, #3
 800914a:	4eac      	ldr	r6, [pc, #688]	; (80093fc <_dtoa_r+0x61c>)
 800914c:	b957      	cbnz	r7, 8009164 <_dtoa_r+0x384>
 800914e:	4642      	mov	r2, r8
 8009150:	464b      	mov	r3, r9
 8009152:	4650      	mov	r0, sl
 8009154:	4659      	mov	r1, fp
 8009156:	f7f7 fb79 	bl	800084c <__aeabi_ddiv>
 800915a:	4682      	mov	sl, r0
 800915c:	468b      	mov	fp, r1
 800915e:	e028      	b.n	80091b2 <_dtoa_r+0x3d2>
 8009160:	2502      	movs	r5, #2
 8009162:	e7f2      	b.n	800914a <_dtoa_r+0x36a>
 8009164:	07f9      	lsls	r1, r7, #31
 8009166:	d508      	bpl.n	800917a <_dtoa_r+0x39a>
 8009168:	4640      	mov	r0, r8
 800916a:	4649      	mov	r1, r9
 800916c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009170:	f7f7 fa42 	bl	80005f8 <__aeabi_dmul>
 8009174:	3501      	adds	r5, #1
 8009176:	4680      	mov	r8, r0
 8009178:	4689      	mov	r9, r1
 800917a:	107f      	asrs	r7, r7, #1
 800917c:	3608      	adds	r6, #8
 800917e:	e7e5      	b.n	800914c <_dtoa_r+0x36c>
 8009180:	f000 809b 	beq.w	80092ba <_dtoa_r+0x4da>
 8009184:	9b00      	ldr	r3, [sp, #0]
 8009186:	4f9d      	ldr	r7, [pc, #628]	; (80093fc <_dtoa_r+0x61c>)
 8009188:	425e      	negs	r6, r3
 800918a:	4b9b      	ldr	r3, [pc, #620]	; (80093f8 <_dtoa_r+0x618>)
 800918c:	f006 020f 	and.w	r2, r6, #15
 8009190:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009198:	ec51 0b19 	vmov	r0, r1, d9
 800919c:	f7f7 fa2c 	bl	80005f8 <__aeabi_dmul>
 80091a0:	1136      	asrs	r6, r6, #4
 80091a2:	4682      	mov	sl, r0
 80091a4:	468b      	mov	fp, r1
 80091a6:	2300      	movs	r3, #0
 80091a8:	2502      	movs	r5, #2
 80091aa:	2e00      	cmp	r6, #0
 80091ac:	d17a      	bne.n	80092a4 <_dtoa_r+0x4c4>
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d1d3      	bne.n	800915a <_dtoa_r+0x37a>
 80091b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f000 8082 	beq.w	80092be <_dtoa_r+0x4de>
 80091ba:	4b91      	ldr	r3, [pc, #580]	; (8009400 <_dtoa_r+0x620>)
 80091bc:	2200      	movs	r2, #0
 80091be:	4650      	mov	r0, sl
 80091c0:	4659      	mov	r1, fp
 80091c2:	f7f7 fc8b 	bl	8000adc <__aeabi_dcmplt>
 80091c6:	2800      	cmp	r0, #0
 80091c8:	d079      	beq.n	80092be <_dtoa_r+0x4de>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d076      	beq.n	80092be <_dtoa_r+0x4de>
 80091d0:	9b02      	ldr	r3, [sp, #8]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	dd36      	ble.n	8009244 <_dtoa_r+0x464>
 80091d6:	9b00      	ldr	r3, [sp, #0]
 80091d8:	4650      	mov	r0, sl
 80091da:	4659      	mov	r1, fp
 80091dc:	1e5f      	subs	r7, r3, #1
 80091de:	2200      	movs	r2, #0
 80091e0:	4b88      	ldr	r3, [pc, #544]	; (8009404 <_dtoa_r+0x624>)
 80091e2:	f7f7 fa09 	bl	80005f8 <__aeabi_dmul>
 80091e6:	9e02      	ldr	r6, [sp, #8]
 80091e8:	4682      	mov	sl, r0
 80091ea:	468b      	mov	fp, r1
 80091ec:	3501      	adds	r5, #1
 80091ee:	4628      	mov	r0, r5
 80091f0:	f7f7 f998 	bl	8000524 <__aeabi_i2d>
 80091f4:	4652      	mov	r2, sl
 80091f6:	465b      	mov	r3, fp
 80091f8:	f7f7 f9fe 	bl	80005f8 <__aeabi_dmul>
 80091fc:	4b82      	ldr	r3, [pc, #520]	; (8009408 <_dtoa_r+0x628>)
 80091fe:	2200      	movs	r2, #0
 8009200:	f7f7 f844 	bl	800028c <__adddf3>
 8009204:	46d0      	mov	r8, sl
 8009206:	46d9      	mov	r9, fp
 8009208:	4682      	mov	sl, r0
 800920a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800920e:	2e00      	cmp	r6, #0
 8009210:	d158      	bne.n	80092c4 <_dtoa_r+0x4e4>
 8009212:	4b7e      	ldr	r3, [pc, #504]	; (800940c <_dtoa_r+0x62c>)
 8009214:	2200      	movs	r2, #0
 8009216:	4640      	mov	r0, r8
 8009218:	4649      	mov	r1, r9
 800921a:	f7f7 f835 	bl	8000288 <__aeabi_dsub>
 800921e:	4652      	mov	r2, sl
 8009220:	465b      	mov	r3, fp
 8009222:	4680      	mov	r8, r0
 8009224:	4689      	mov	r9, r1
 8009226:	f7f7 fc77 	bl	8000b18 <__aeabi_dcmpgt>
 800922a:	2800      	cmp	r0, #0
 800922c:	f040 8295 	bne.w	800975a <_dtoa_r+0x97a>
 8009230:	4652      	mov	r2, sl
 8009232:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009236:	4640      	mov	r0, r8
 8009238:	4649      	mov	r1, r9
 800923a:	f7f7 fc4f 	bl	8000adc <__aeabi_dcmplt>
 800923e:	2800      	cmp	r0, #0
 8009240:	f040 8289 	bne.w	8009756 <_dtoa_r+0x976>
 8009244:	ec5b ab19 	vmov	sl, fp, d9
 8009248:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800924a:	2b00      	cmp	r3, #0
 800924c:	f2c0 8148 	blt.w	80094e0 <_dtoa_r+0x700>
 8009250:	9a00      	ldr	r2, [sp, #0]
 8009252:	2a0e      	cmp	r2, #14
 8009254:	f300 8144 	bgt.w	80094e0 <_dtoa_r+0x700>
 8009258:	4b67      	ldr	r3, [pc, #412]	; (80093f8 <_dtoa_r+0x618>)
 800925a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800925e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	f280 80d5 	bge.w	8009414 <_dtoa_r+0x634>
 800926a:	9b03      	ldr	r3, [sp, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	f300 80d1 	bgt.w	8009414 <_dtoa_r+0x634>
 8009272:	f040 826f 	bne.w	8009754 <_dtoa_r+0x974>
 8009276:	4b65      	ldr	r3, [pc, #404]	; (800940c <_dtoa_r+0x62c>)
 8009278:	2200      	movs	r2, #0
 800927a:	4640      	mov	r0, r8
 800927c:	4649      	mov	r1, r9
 800927e:	f7f7 f9bb 	bl	80005f8 <__aeabi_dmul>
 8009282:	4652      	mov	r2, sl
 8009284:	465b      	mov	r3, fp
 8009286:	f7f7 fc3d 	bl	8000b04 <__aeabi_dcmpge>
 800928a:	9e03      	ldr	r6, [sp, #12]
 800928c:	4637      	mov	r7, r6
 800928e:	2800      	cmp	r0, #0
 8009290:	f040 8245 	bne.w	800971e <_dtoa_r+0x93e>
 8009294:	9d01      	ldr	r5, [sp, #4]
 8009296:	2331      	movs	r3, #49	; 0x31
 8009298:	f805 3b01 	strb.w	r3, [r5], #1
 800929c:	9b00      	ldr	r3, [sp, #0]
 800929e:	3301      	adds	r3, #1
 80092a0:	9300      	str	r3, [sp, #0]
 80092a2:	e240      	b.n	8009726 <_dtoa_r+0x946>
 80092a4:	07f2      	lsls	r2, r6, #31
 80092a6:	d505      	bpl.n	80092b4 <_dtoa_r+0x4d4>
 80092a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80092ac:	f7f7 f9a4 	bl	80005f8 <__aeabi_dmul>
 80092b0:	3501      	adds	r5, #1
 80092b2:	2301      	movs	r3, #1
 80092b4:	1076      	asrs	r6, r6, #1
 80092b6:	3708      	adds	r7, #8
 80092b8:	e777      	b.n	80091aa <_dtoa_r+0x3ca>
 80092ba:	2502      	movs	r5, #2
 80092bc:	e779      	b.n	80091b2 <_dtoa_r+0x3d2>
 80092be:	9f00      	ldr	r7, [sp, #0]
 80092c0:	9e03      	ldr	r6, [sp, #12]
 80092c2:	e794      	b.n	80091ee <_dtoa_r+0x40e>
 80092c4:	9901      	ldr	r1, [sp, #4]
 80092c6:	4b4c      	ldr	r3, [pc, #304]	; (80093f8 <_dtoa_r+0x618>)
 80092c8:	4431      	add	r1, r6
 80092ca:	910d      	str	r1, [sp, #52]	; 0x34
 80092cc:	9908      	ldr	r1, [sp, #32]
 80092ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80092d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80092d6:	2900      	cmp	r1, #0
 80092d8:	d043      	beq.n	8009362 <_dtoa_r+0x582>
 80092da:	494d      	ldr	r1, [pc, #308]	; (8009410 <_dtoa_r+0x630>)
 80092dc:	2000      	movs	r0, #0
 80092de:	f7f7 fab5 	bl	800084c <__aeabi_ddiv>
 80092e2:	4652      	mov	r2, sl
 80092e4:	465b      	mov	r3, fp
 80092e6:	f7f6 ffcf 	bl	8000288 <__aeabi_dsub>
 80092ea:	9d01      	ldr	r5, [sp, #4]
 80092ec:	4682      	mov	sl, r0
 80092ee:	468b      	mov	fp, r1
 80092f0:	4649      	mov	r1, r9
 80092f2:	4640      	mov	r0, r8
 80092f4:	f7f7 fc30 	bl	8000b58 <__aeabi_d2iz>
 80092f8:	4606      	mov	r6, r0
 80092fa:	f7f7 f913 	bl	8000524 <__aeabi_i2d>
 80092fe:	4602      	mov	r2, r0
 8009300:	460b      	mov	r3, r1
 8009302:	4640      	mov	r0, r8
 8009304:	4649      	mov	r1, r9
 8009306:	f7f6 ffbf 	bl	8000288 <__aeabi_dsub>
 800930a:	3630      	adds	r6, #48	; 0x30
 800930c:	f805 6b01 	strb.w	r6, [r5], #1
 8009310:	4652      	mov	r2, sl
 8009312:	465b      	mov	r3, fp
 8009314:	4680      	mov	r8, r0
 8009316:	4689      	mov	r9, r1
 8009318:	f7f7 fbe0 	bl	8000adc <__aeabi_dcmplt>
 800931c:	2800      	cmp	r0, #0
 800931e:	d163      	bne.n	80093e8 <_dtoa_r+0x608>
 8009320:	4642      	mov	r2, r8
 8009322:	464b      	mov	r3, r9
 8009324:	4936      	ldr	r1, [pc, #216]	; (8009400 <_dtoa_r+0x620>)
 8009326:	2000      	movs	r0, #0
 8009328:	f7f6 ffae 	bl	8000288 <__aeabi_dsub>
 800932c:	4652      	mov	r2, sl
 800932e:	465b      	mov	r3, fp
 8009330:	f7f7 fbd4 	bl	8000adc <__aeabi_dcmplt>
 8009334:	2800      	cmp	r0, #0
 8009336:	f040 80b5 	bne.w	80094a4 <_dtoa_r+0x6c4>
 800933a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800933c:	429d      	cmp	r5, r3
 800933e:	d081      	beq.n	8009244 <_dtoa_r+0x464>
 8009340:	4b30      	ldr	r3, [pc, #192]	; (8009404 <_dtoa_r+0x624>)
 8009342:	2200      	movs	r2, #0
 8009344:	4650      	mov	r0, sl
 8009346:	4659      	mov	r1, fp
 8009348:	f7f7 f956 	bl	80005f8 <__aeabi_dmul>
 800934c:	4b2d      	ldr	r3, [pc, #180]	; (8009404 <_dtoa_r+0x624>)
 800934e:	4682      	mov	sl, r0
 8009350:	468b      	mov	fp, r1
 8009352:	4640      	mov	r0, r8
 8009354:	4649      	mov	r1, r9
 8009356:	2200      	movs	r2, #0
 8009358:	f7f7 f94e 	bl	80005f8 <__aeabi_dmul>
 800935c:	4680      	mov	r8, r0
 800935e:	4689      	mov	r9, r1
 8009360:	e7c6      	b.n	80092f0 <_dtoa_r+0x510>
 8009362:	4650      	mov	r0, sl
 8009364:	4659      	mov	r1, fp
 8009366:	f7f7 f947 	bl	80005f8 <__aeabi_dmul>
 800936a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800936c:	9d01      	ldr	r5, [sp, #4]
 800936e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009370:	4682      	mov	sl, r0
 8009372:	468b      	mov	fp, r1
 8009374:	4649      	mov	r1, r9
 8009376:	4640      	mov	r0, r8
 8009378:	f7f7 fbee 	bl	8000b58 <__aeabi_d2iz>
 800937c:	4606      	mov	r6, r0
 800937e:	f7f7 f8d1 	bl	8000524 <__aeabi_i2d>
 8009382:	3630      	adds	r6, #48	; 0x30
 8009384:	4602      	mov	r2, r0
 8009386:	460b      	mov	r3, r1
 8009388:	4640      	mov	r0, r8
 800938a:	4649      	mov	r1, r9
 800938c:	f7f6 ff7c 	bl	8000288 <__aeabi_dsub>
 8009390:	f805 6b01 	strb.w	r6, [r5], #1
 8009394:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009396:	429d      	cmp	r5, r3
 8009398:	4680      	mov	r8, r0
 800939a:	4689      	mov	r9, r1
 800939c:	f04f 0200 	mov.w	r2, #0
 80093a0:	d124      	bne.n	80093ec <_dtoa_r+0x60c>
 80093a2:	4b1b      	ldr	r3, [pc, #108]	; (8009410 <_dtoa_r+0x630>)
 80093a4:	4650      	mov	r0, sl
 80093a6:	4659      	mov	r1, fp
 80093a8:	f7f6 ff70 	bl	800028c <__adddf3>
 80093ac:	4602      	mov	r2, r0
 80093ae:	460b      	mov	r3, r1
 80093b0:	4640      	mov	r0, r8
 80093b2:	4649      	mov	r1, r9
 80093b4:	f7f7 fbb0 	bl	8000b18 <__aeabi_dcmpgt>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	d173      	bne.n	80094a4 <_dtoa_r+0x6c4>
 80093bc:	4652      	mov	r2, sl
 80093be:	465b      	mov	r3, fp
 80093c0:	4913      	ldr	r1, [pc, #76]	; (8009410 <_dtoa_r+0x630>)
 80093c2:	2000      	movs	r0, #0
 80093c4:	f7f6 ff60 	bl	8000288 <__aeabi_dsub>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4640      	mov	r0, r8
 80093ce:	4649      	mov	r1, r9
 80093d0:	f7f7 fb84 	bl	8000adc <__aeabi_dcmplt>
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f43f af35 	beq.w	8009244 <_dtoa_r+0x464>
 80093da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80093dc:	1e6b      	subs	r3, r5, #1
 80093de:	930f      	str	r3, [sp, #60]	; 0x3c
 80093e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80093e4:	2b30      	cmp	r3, #48	; 0x30
 80093e6:	d0f8      	beq.n	80093da <_dtoa_r+0x5fa>
 80093e8:	9700      	str	r7, [sp, #0]
 80093ea:	e049      	b.n	8009480 <_dtoa_r+0x6a0>
 80093ec:	4b05      	ldr	r3, [pc, #20]	; (8009404 <_dtoa_r+0x624>)
 80093ee:	f7f7 f903 	bl	80005f8 <__aeabi_dmul>
 80093f2:	4680      	mov	r8, r0
 80093f4:	4689      	mov	r9, r1
 80093f6:	e7bd      	b.n	8009374 <_dtoa_r+0x594>
 80093f8:	0800bef8 	.word	0x0800bef8
 80093fc:	0800bed0 	.word	0x0800bed0
 8009400:	3ff00000 	.word	0x3ff00000
 8009404:	40240000 	.word	0x40240000
 8009408:	401c0000 	.word	0x401c0000
 800940c:	40140000 	.word	0x40140000
 8009410:	3fe00000 	.word	0x3fe00000
 8009414:	9d01      	ldr	r5, [sp, #4]
 8009416:	4656      	mov	r6, sl
 8009418:	465f      	mov	r7, fp
 800941a:	4642      	mov	r2, r8
 800941c:	464b      	mov	r3, r9
 800941e:	4630      	mov	r0, r6
 8009420:	4639      	mov	r1, r7
 8009422:	f7f7 fa13 	bl	800084c <__aeabi_ddiv>
 8009426:	f7f7 fb97 	bl	8000b58 <__aeabi_d2iz>
 800942a:	4682      	mov	sl, r0
 800942c:	f7f7 f87a 	bl	8000524 <__aeabi_i2d>
 8009430:	4642      	mov	r2, r8
 8009432:	464b      	mov	r3, r9
 8009434:	f7f7 f8e0 	bl	80005f8 <__aeabi_dmul>
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4630      	mov	r0, r6
 800943e:	4639      	mov	r1, r7
 8009440:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009444:	f7f6 ff20 	bl	8000288 <__aeabi_dsub>
 8009448:	f805 6b01 	strb.w	r6, [r5], #1
 800944c:	9e01      	ldr	r6, [sp, #4]
 800944e:	9f03      	ldr	r7, [sp, #12]
 8009450:	1bae      	subs	r6, r5, r6
 8009452:	42b7      	cmp	r7, r6
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	d135      	bne.n	80094c6 <_dtoa_r+0x6e6>
 800945a:	f7f6 ff17 	bl	800028c <__adddf3>
 800945e:	4642      	mov	r2, r8
 8009460:	464b      	mov	r3, r9
 8009462:	4606      	mov	r6, r0
 8009464:	460f      	mov	r7, r1
 8009466:	f7f7 fb57 	bl	8000b18 <__aeabi_dcmpgt>
 800946a:	b9d0      	cbnz	r0, 80094a2 <_dtoa_r+0x6c2>
 800946c:	4642      	mov	r2, r8
 800946e:	464b      	mov	r3, r9
 8009470:	4630      	mov	r0, r6
 8009472:	4639      	mov	r1, r7
 8009474:	f7f7 fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8009478:	b110      	cbz	r0, 8009480 <_dtoa_r+0x6a0>
 800947a:	f01a 0f01 	tst.w	sl, #1
 800947e:	d110      	bne.n	80094a2 <_dtoa_r+0x6c2>
 8009480:	4620      	mov	r0, r4
 8009482:	ee18 1a10 	vmov	r1, s16
 8009486:	f000 fe75 	bl	800a174 <_Bfree>
 800948a:	2300      	movs	r3, #0
 800948c:	9800      	ldr	r0, [sp, #0]
 800948e:	702b      	strb	r3, [r5, #0]
 8009490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009492:	3001      	adds	r0, #1
 8009494:	6018      	str	r0, [r3, #0]
 8009496:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009498:	2b00      	cmp	r3, #0
 800949a:	f43f acf1 	beq.w	8008e80 <_dtoa_r+0xa0>
 800949e:	601d      	str	r5, [r3, #0]
 80094a0:	e4ee      	b.n	8008e80 <_dtoa_r+0xa0>
 80094a2:	9f00      	ldr	r7, [sp, #0]
 80094a4:	462b      	mov	r3, r5
 80094a6:	461d      	mov	r5, r3
 80094a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094ac:	2a39      	cmp	r2, #57	; 0x39
 80094ae:	d106      	bne.n	80094be <_dtoa_r+0x6de>
 80094b0:	9a01      	ldr	r2, [sp, #4]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d1f7      	bne.n	80094a6 <_dtoa_r+0x6c6>
 80094b6:	9901      	ldr	r1, [sp, #4]
 80094b8:	2230      	movs	r2, #48	; 0x30
 80094ba:	3701      	adds	r7, #1
 80094bc:	700a      	strb	r2, [r1, #0]
 80094be:	781a      	ldrb	r2, [r3, #0]
 80094c0:	3201      	adds	r2, #1
 80094c2:	701a      	strb	r2, [r3, #0]
 80094c4:	e790      	b.n	80093e8 <_dtoa_r+0x608>
 80094c6:	4ba6      	ldr	r3, [pc, #664]	; (8009760 <_dtoa_r+0x980>)
 80094c8:	2200      	movs	r2, #0
 80094ca:	f7f7 f895 	bl	80005f8 <__aeabi_dmul>
 80094ce:	2200      	movs	r2, #0
 80094d0:	2300      	movs	r3, #0
 80094d2:	4606      	mov	r6, r0
 80094d4:	460f      	mov	r7, r1
 80094d6:	f7f7 faf7 	bl	8000ac8 <__aeabi_dcmpeq>
 80094da:	2800      	cmp	r0, #0
 80094dc:	d09d      	beq.n	800941a <_dtoa_r+0x63a>
 80094de:	e7cf      	b.n	8009480 <_dtoa_r+0x6a0>
 80094e0:	9a08      	ldr	r2, [sp, #32]
 80094e2:	2a00      	cmp	r2, #0
 80094e4:	f000 80d7 	beq.w	8009696 <_dtoa_r+0x8b6>
 80094e8:	9a06      	ldr	r2, [sp, #24]
 80094ea:	2a01      	cmp	r2, #1
 80094ec:	f300 80ba 	bgt.w	8009664 <_dtoa_r+0x884>
 80094f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094f2:	2a00      	cmp	r2, #0
 80094f4:	f000 80b2 	beq.w	800965c <_dtoa_r+0x87c>
 80094f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80094fc:	9e07      	ldr	r6, [sp, #28]
 80094fe:	9d04      	ldr	r5, [sp, #16]
 8009500:	9a04      	ldr	r2, [sp, #16]
 8009502:	441a      	add	r2, r3
 8009504:	9204      	str	r2, [sp, #16]
 8009506:	9a05      	ldr	r2, [sp, #20]
 8009508:	2101      	movs	r1, #1
 800950a:	441a      	add	r2, r3
 800950c:	4620      	mov	r0, r4
 800950e:	9205      	str	r2, [sp, #20]
 8009510:	f000 ff32 	bl	800a378 <__i2b>
 8009514:	4607      	mov	r7, r0
 8009516:	2d00      	cmp	r5, #0
 8009518:	dd0c      	ble.n	8009534 <_dtoa_r+0x754>
 800951a:	9b05      	ldr	r3, [sp, #20]
 800951c:	2b00      	cmp	r3, #0
 800951e:	dd09      	ble.n	8009534 <_dtoa_r+0x754>
 8009520:	42ab      	cmp	r3, r5
 8009522:	9a04      	ldr	r2, [sp, #16]
 8009524:	bfa8      	it	ge
 8009526:	462b      	movge	r3, r5
 8009528:	1ad2      	subs	r2, r2, r3
 800952a:	9204      	str	r2, [sp, #16]
 800952c:	9a05      	ldr	r2, [sp, #20]
 800952e:	1aed      	subs	r5, r5, r3
 8009530:	1ad3      	subs	r3, r2, r3
 8009532:	9305      	str	r3, [sp, #20]
 8009534:	9b07      	ldr	r3, [sp, #28]
 8009536:	b31b      	cbz	r3, 8009580 <_dtoa_r+0x7a0>
 8009538:	9b08      	ldr	r3, [sp, #32]
 800953a:	2b00      	cmp	r3, #0
 800953c:	f000 80af 	beq.w	800969e <_dtoa_r+0x8be>
 8009540:	2e00      	cmp	r6, #0
 8009542:	dd13      	ble.n	800956c <_dtoa_r+0x78c>
 8009544:	4639      	mov	r1, r7
 8009546:	4632      	mov	r2, r6
 8009548:	4620      	mov	r0, r4
 800954a:	f000 ffd5 	bl	800a4f8 <__pow5mult>
 800954e:	ee18 2a10 	vmov	r2, s16
 8009552:	4601      	mov	r1, r0
 8009554:	4607      	mov	r7, r0
 8009556:	4620      	mov	r0, r4
 8009558:	f000 ff24 	bl	800a3a4 <__multiply>
 800955c:	ee18 1a10 	vmov	r1, s16
 8009560:	4680      	mov	r8, r0
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fe06 	bl	800a174 <_Bfree>
 8009568:	ee08 8a10 	vmov	s16, r8
 800956c:	9b07      	ldr	r3, [sp, #28]
 800956e:	1b9a      	subs	r2, r3, r6
 8009570:	d006      	beq.n	8009580 <_dtoa_r+0x7a0>
 8009572:	ee18 1a10 	vmov	r1, s16
 8009576:	4620      	mov	r0, r4
 8009578:	f000 ffbe 	bl	800a4f8 <__pow5mult>
 800957c:	ee08 0a10 	vmov	s16, r0
 8009580:	2101      	movs	r1, #1
 8009582:	4620      	mov	r0, r4
 8009584:	f000 fef8 	bl	800a378 <__i2b>
 8009588:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800958a:	2b00      	cmp	r3, #0
 800958c:	4606      	mov	r6, r0
 800958e:	f340 8088 	ble.w	80096a2 <_dtoa_r+0x8c2>
 8009592:	461a      	mov	r2, r3
 8009594:	4601      	mov	r1, r0
 8009596:	4620      	mov	r0, r4
 8009598:	f000 ffae 	bl	800a4f8 <__pow5mult>
 800959c:	9b06      	ldr	r3, [sp, #24]
 800959e:	2b01      	cmp	r3, #1
 80095a0:	4606      	mov	r6, r0
 80095a2:	f340 8081 	ble.w	80096a8 <_dtoa_r+0x8c8>
 80095a6:	f04f 0800 	mov.w	r8, #0
 80095aa:	6933      	ldr	r3, [r6, #16]
 80095ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80095b0:	6918      	ldr	r0, [r3, #16]
 80095b2:	f000 fe91 	bl	800a2d8 <__hi0bits>
 80095b6:	f1c0 0020 	rsb	r0, r0, #32
 80095ba:	9b05      	ldr	r3, [sp, #20]
 80095bc:	4418      	add	r0, r3
 80095be:	f010 001f 	ands.w	r0, r0, #31
 80095c2:	f000 8092 	beq.w	80096ea <_dtoa_r+0x90a>
 80095c6:	f1c0 0320 	rsb	r3, r0, #32
 80095ca:	2b04      	cmp	r3, #4
 80095cc:	f340 808a 	ble.w	80096e4 <_dtoa_r+0x904>
 80095d0:	f1c0 001c 	rsb	r0, r0, #28
 80095d4:	9b04      	ldr	r3, [sp, #16]
 80095d6:	4403      	add	r3, r0
 80095d8:	9304      	str	r3, [sp, #16]
 80095da:	9b05      	ldr	r3, [sp, #20]
 80095dc:	4403      	add	r3, r0
 80095de:	4405      	add	r5, r0
 80095e0:	9305      	str	r3, [sp, #20]
 80095e2:	9b04      	ldr	r3, [sp, #16]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	dd07      	ble.n	80095f8 <_dtoa_r+0x818>
 80095e8:	ee18 1a10 	vmov	r1, s16
 80095ec:	461a      	mov	r2, r3
 80095ee:	4620      	mov	r0, r4
 80095f0:	f000 ffdc 	bl	800a5ac <__lshift>
 80095f4:	ee08 0a10 	vmov	s16, r0
 80095f8:	9b05      	ldr	r3, [sp, #20]
 80095fa:	2b00      	cmp	r3, #0
 80095fc:	dd05      	ble.n	800960a <_dtoa_r+0x82a>
 80095fe:	4631      	mov	r1, r6
 8009600:	461a      	mov	r2, r3
 8009602:	4620      	mov	r0, r4
 8009604:	f000 ffd2 	bl	800a5ac <__lshift>
 8009608:	4606      	mov	r6, r0
 800960a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800960c:	2b00      	cmp	r3, #0
 800960e:	d06e      	beq.n	80096ee <_dtoa_r+0x90e>
 8009610:	ee18 0a10 	vmov	r0, s16
 8009614:	4631      	mov	r1, r6
 8009616:	f001 f839 	bl	800a68c <__mcmp>
 800961a:	2800      	cmp	r0, #0
 800961c:	da67      	bge.n	80096ee <_dtoa_r+0x90e>
 800961e:	9b00      	ldr	r3, [sp, #0]
 8009620:	3b01      	subs	r3, #1
 8009622:	ee18 1a10 	vmov	r1, s16
 8009626:	9300      	str	r3, [sp, #0]
 8009628:	220a      	movs	r2, #10
 800962a:	2300      	movs	r3, #0
 800962c:	4620      	mov	r0, r4
 800962e:	f000 fdc3 	bl	800a1b8 <__multadd>
 8009632:	9b08      	ldr	r3, [sp, #32]
 8009634:	ee08 0a10 	vmov	s16, r0
 8009638:	2b00      	cmp	r3, #0
 800963a:	f000 81b1 	beq.w	80099a0 <_dtoa_r+0xbc0>
 800963e:	2300      	movs	r3, #0
 8009640:	4639      	mov	r1, r7
 8009642:	220a      	movs	r2, #10
 8009644:	4620      	mov	r0, r4
 8009646:	f000 fdb7 	bl	800a1b8 <__multadd>
 800964a:	9b02      	ldr	r3, [sp, #8]
 800964c:	2b00      	cmp	r3, #0
 800964e:	4607      	mov	r7, r0
 8009650:	f300 808e 	bgt.w	8009770 <_dtoa_r+0x990>
 8009654:	9b06      	ldr	r3, [sp, #24]
 8009656:	2b02      	cmp	r3, #2
 8009658:	dc51      	bgt.n	80096fe <_dtoa_r+0x91e>
 800965a:	e089      	b.n	8009770 <_dtoa_r+0x990>
 800965c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800965e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009662:	e74b      	b.n	80094fc <_dtoa_r+0x71c>
 8009664:	9b03      	ldr	r3, [sp, #12]
 8009666:	1e5e      	subs	r6, r3, #1
 8009668:	9b07      	ldr	r3, [sp, #28]
 800966a:	42b3      	cmp	r3, r6
 800966c:	bfbf      	itttt	lt
 800966e:	9b07      	ldrlt	r3, [sp, #28]
 8009670:	9607      	strlt	r6, [sp, #28]
 8009672:	1af2      	sublt	r2, r6, r3
 8009674:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009676:	bfb6      	itet	lt
 8009678:	189b      	addlt	r3, r3, r2
 800967a:	1b9e      	subge	r6, r3, r6
 800967c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	bfb8      	it	lt
 8009682:	2600      	movlt	r6, #0
 8009684:	2b00      	cmp	r3, #0
 8009686:	bfb7      	itett	lt
 8009688:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800968c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009690:	1a9d      	sublt	r5, r3, r2
 8009692:	2300      	movlt	r3, #0
 8009694:	e734      	b.n	8009500 <_dtoa_r+0x720>
 8009696:	9e07      	ldr	r6, [sp, #28]
 8009698:	9d04      	ldr	r5, [sp, #16]
 800969a:	9f08      	ldr	r7, [sp, #32]
 800969c:	e73b      	b.n	8009516 <_dtoa_r+0x736>
 800969e:	9a07      	ldr	r2, [sp, #28]
 80096a0:	e767      	b.n	8009572 <_dtoa_r+0x792>
 80096a2:	9b06      	ldr	r3, [sp, #24]
 80096a4:	2b01      	cmp	r3, #1
 80096a6:	dc18      	bgt.n	80096da <_dtoa_r+0x8fa>
 80096a8:	f1ba 0f00 	cmp.w	sl, #0
 80096ac:	d115      	bne.n	80096da <_dtoa_r+0x8fa>
 80096ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096b2:	b993      	cbnz	r3, 80096da <_dtoa_r+0x8fa>
 80096b4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80096b8:	0d1b      	lsrs	r3, r3, #20
 80096ba:	051b      	lsls	r3, r3, #20
 80096bc:	b183      	cbz	r3, 80096e0 <_dtoa_r+0x900>
 80096be:	9b04      	ldr	r3, [sp, #16]
 80096c0:	3301      	adds	r3, #1
 80096c2:	9304      	str	r3, [sp, #16]
 80096c4:	9b05      	ldr	r3, [sp, #20]
 80096c6:	3301      	adds	r3, #1
 80096c8:	9305      	str	r3, [sp, #20]
 80096ca:	f04f 0801 	mov.w	r8, #1
 80096ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	f47f af6a 	bne.w	80095aa <_dtoa_r+0x7ca>
 80096d6:	2001      	movs	r0, #1
 80096d8:	e76f      	b.n	80095ba <_dtoa_r+0x7da>
 80096da:	f04f 0800 	mov.w	r8, #0
 80096de:	e7f6      	b.n	80096ce <_dtoa_r+0x8ee>
 80096e0:	4698      	mov	r8, r3
 80096e2:	e7f4      	b.n	80096ce <_dtoa_r+0x8ee>
 80096e4:	f43f af7d 	beq.w	80095e2 <_dtoa_r+0x802>
 80096e8:	4618      	mov	r0, r3
 80096ea:	301c      	adds	r0, #28
 80096ec:	e772      	b.n	80095d4 <_dtoa_r+0x7f4>
 80096ee:	9b03      	ldr	r3, [sp, #12]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	dc37      	bgt.n	8009764 <_dtoa_r+0x984>
 80096f4:	9b06      	ldr	r3, [sp, #24]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	dd34      	ble.n	8009764 <_dtoa_r+0x984>
 80096fa:	9b03      	ldr	r3, [sp, #12]
 80096fc:	9302      	str	r3, [sp, #8]
 80096fe:	9b02      	ldr	r3, [sp, #8]
 8009700:	b96b      	cbnz	r3, 800971e <_dtoa_r+0x93e>
 8009702:	4631      	mov	r1, r6
 8009704:	2205      	movs	r2, #5
 8009706:	4620      	mov	r0, r4
 8009708:	f000 fd56 	bl	800a1b8 <__multadd>
 800970c:	4601      	mov	r1, r0
 800970e:	4606      	mov	r6, r0
 8009710:	ee18 0a10 	vmov	r0, s16
 8009714:	f000 ffba 	bl	800a68c <__mcmp>
 8009718:	2800      	cmp	r0, #0
 800971a:	f73f adbb 	bgt.w	8009294 <_dtoa_r+0x4b4>
 800971e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009720:	9d01      	ldr	r5, [sp, #4]
 8009722:	43db      	mvns	r3, r3
 8009724:	9300      	str	r3, [sp, #0]
 8009726:	f04f 0800 	mov.w	r8, #0
 800972a:	4631      	mov	r1, r6
 800972c:	4620      	mov	r0, r4
 800972e:	f000 fd21 	bl	800a174 <_Bfree>
 8009732:	2f00      	cmp	r7, #0
 8009734:	f43f aea4 	beq.w	8009480 <_dtoa_r+0x6a0>
 8009738:	f1b8 0f00 	cmp.w	r8, #0
 800973c:	d005      	beq.n	800974a <_dtoa_r+0x96a>
 800973e:	45b8      	cmp	r8, r7
 8009740:	d003      	beq.n	800974a <_dtoa_r+0x96a>
 8009742:	4641      	mov	r1, r8
 8009744:	4620      	mov	r0, r4
 8009746:	f000 fd15 	bl	800a174 <_Bfree>
 800974a:	4639      	mov	r1, r7
 800974c:	4620      	mov	r0, r4
 800974e:	f000 fd11 	bl	800a174 <_Bfree>
 8009752:	e695      	b.n	8009480 <_dtoa_r+0x6a0>
 8009754:	2600      	movs	r6, #0
 8009756:	4637      	mov	r7, r6
 8009758:	e7e1      	b.n	800971e <_dtoa_r+0x93e>
 800975a:	9700      	str	r7, [sp, #0]
 800975c:	4637      	mov	r7, r6
 800975e:	e599      	b.n	8009294 <_dtoa_r+0x4b4>
 8009760:	40240000 	.word	0x40240000
 8009764:	9b08      	ldr	r3, [sp, #32]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 80ca 	beq.w	8009900 <_dtoa_r+0xb20>
 800976c:	9b03      	ldr	r3, [sp, #12]
 800976e:	9302      	str	r3, [sp, #8]
 8009770:	2d00      	cmp	r5, #0
 8009772:	dd05      	ble.n	8009780 <_dtoa_r+0x9a0>
 8009774:	4639      	mov	r1, r7
 8009776:	462a      	mov	r2, r5
 8009778:	4620      	mov	r0, r4
 800977a:	f000 ff17 	bl	800a5ac <__lshift>
 800977e:	4607      	mov	r7, r0
 8009780:	f1b8 0f00 	cmp.w	r8, #0
 8009784:	d05b      	beq.n	800983e <_dtoa_r+0xa5e>
 8009786:	6879      	ldr	r1, [r7, #4]
 8009788:	4620      	mov	r0, r4
 800978a:	f000 fcb3 	bl	800a0f4 <_Balloc>
 800978e:	4605      	mov	r5, r0
 8009790:	b928      	cbnz	r0, 800979e <_dtoa_r+0x9be>
 8009792:	4b87      	ldr	r3, [pc, #540]	; (80099b0 <_dtoa_r+0xbd0>)
 8009794:	4602      	mov	r2, r0
 8009796:	f240 21ea 	movw	r1, #746	; 0x2ea
 800979a:	f7ff bb3b 	b.w	8008e14 <_dtoa_r+0x34>
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	3202      	adds	r2, #2
 80097a2:	0092      	lsls	r2, r2, #2
 80097a4:	f107 010c 	add.w	r1, r7, #12
 80097a8:	300c      	adds	r0, #12
 80097aa:	f000 fc95 	bl	800a0d8 <memcpy>
 80097ae:	2201      	movs	r2, #1
 80097b0:	4629      	mov	r1, r5
 80097b2:	4620      	mov	r0, r4
 80097b4:	f000 fefa 	bl	800a5ac <__lshift>
 80097b8:	9b01      	ldr	r3, [sp, #4]
 80097ba:	f103 0901 	add.w	r9, r3, #1
 80097be:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80097c2:	4413      	add	r3, r2
 80097c4:	9305      	str	r3, [sp, #20]
 80097c6:	f00a 0301 	and.w	r3, sl, #1
 80097ca:	46b8      	mov	r8, r7
 80097cc:	9304      	str	r3, [sp, #16]
 80097ce:	4607      	mov	r7, r0
 80097d0:	4631      	mov	r1, r6
 80097d2:	ee18 0a10 	vmov	r0, s16
 80097d6:	f7ff fa77 	bl	8008cc8 <quorem>
 80097da:	4641      	mov	r1, r8
 80097dc:	9002      	str	r0, [sp, #8]
 80097de:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80097e2:	ee18 0a10 	vmov	r0, s16
 80097e6:	f000 ff51 	bl	800a68c <__mcmp>
 80097ea:	463a      	mov	r2, r7
 80097ec:	9003      	str	r0, [sp, #12]
 80097ee:	4631      	mov	r1, r6
 80097f0:	4620      	mov	r0, r4
 80097f2:	f000 ff67 	bl	800a6c4 <__mdiff>
 80097f6:	68c2      	ldr	r2, [r0, #12]
 80097f8:	f109 3bff 	add.w	fp, r9, #4294967295
 80097fc:	4605      	mov	r5, r0
 80097fe:	bb02      	cbnz	r2, 8009842 <_dtoa_r+0xa62>
 8009800:	4601      	mov	r1, r0
 8009802:	ee18 0a10 	vmov	r0, s16
 8009806:	f000 ff41 	bl	800a68c <__mcmp>
 800980a:	4602      	mov	r2, r0
 800980c:	4629      	mov	r1, r5
 800980e:	4620      	mov	r0, r4
 8009810:	9207      	str	r2, [sp, #28]
 8009812:	f000 fcaf 	bl	800a174 <_Bfree>
 8009816:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800981a:	ea43 0102 	orr.w	r1, r3, r2
 800981e:	9b04      	ldr	r3, [sp, #16]
 8009820:	430b      	orrs	r3, r1
 8009822:	464d      	mov	r5, r9
 8009824:	d10f      	bne.n	8009846 <_dtoa_r+0xa66>
 8009826:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800982a:	d02a      	beq.n	8009882 <_dtoa_r+0xaa2>
 800982c:	9b03      	ldr	r3, [sp, #12]
 800982e:	2b00      	cmp	r3, #0
 8009830:	dd02      	ble.n	8009838 <_dtoa_r+0xa58>
 8009832:	9b02      	ldr	r3, [sp, #8]
 8009834:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009838:	f88b a000 	strb.w	sl, [fp]
 800983c:	e775      	b.n	800972a <_dtoa_r+0x94a>
 800983e:	4638      	mov	r0, r7
 8009840:	e7ba      	b.n	80097b8 <_dtoa_r+0x9d8>
 8009842:	2201      	movs	r2, #1
 8009844:	e7e2      	b.n	800980c <_dtoa_r+0xa2c>
 8009846:	9b03      	ldr	r3, [sp, #12]
 8009848:	2b00      	cmp	r3, #0
 800984a:	db04      	blt.n	8009856 <_dtoa_r+0xa76>
 800984c:	9906      	ldr	r1, [sp, #24]
 800984e:	430b      	orrs	r3, r1
 8009850:	9904      	ldr	r1, [sp, #16]
 8009852:	430b      	orrs	r3, r1
 8009854:	d122      	bne.n	800989c <_dtoa_r+0xabc>
 8009856:	2a00      	cmp	r2, #0
 8009858:	ddee      	ble.n	8009838 <_dtoa_r+0xa58>
 800985a:	ee18 1a10 	vmov	r1, s16
 800985e:	2201      	movs	r2, #1
 8009860:	4620      	mov	r0, r4
 8009862:	f000 fea3 	bl	800a5ac <__lshift>
 8009866:	4631      	mov	r1, r6
 8009868:	ee08 0a10 	vmov	s16, r0
 800986c:	f000 ff0e 	bl	800a68c <__mcmp>
 8009870:	2800      	cmp	r0, #0
 8009872:	dc03      	bgt.n	800987c <_dtoa_r+0xa9c>
 8009874:	d1e0      	bne.n	8009838 <_dtoa_r+0xa58>
 8009876:	f01a 0f01 	tst.w	sl, #1
 800987a:	d0dd      	beq.n	8009838 <_dtoa_r+0xa58>
 800987c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009880:	d1d7      	bne.n	8009832 <_dtoa_r+0xa52>
 8009882:	2339      	movs	r3, #57	; 0x39
 8009884:	f88b 3000 	strb.w	r3, [fp]
 8009888:	462b      	mov	r3, r5
 800988a:	461d      	mov	r5, r3
 800988c:	3b01      	subs	r3, #1
 800988e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009892:	2a39      	cmp	r2, #57	; 0x39
 8009894:	d071      	beq.n	800997a <_dtoa_r+0xb9a>
 8009896:	3201      	adds	r2, #1
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	e746      	b.n	800972a <_dtoa_r+0x94a>
 800989c:	2a00      	cmp	r2, #0
 800989e:	dd07      	ble.n	80098b0 <_dtoa_r+0xad0>
 80098a0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80098a4:	d0ed      	beq.n	8009882 <_dtoa_r+0xaa2>
 80098a6:	f10a 0301 	add.w	r3, sl, #1
 80098aa:	f88b 3000 	strb.w	r3, [fp]
 80098ae:	e73c      	b.n	800972a <_dtoa_r+0x94a>
 80098b0:	9b05      	ldr	r3, [sp, #20]
 80098b2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80098b6:	4599      	cmp	r9, r3
 80098b8:	d047      	beq.n	800994a <_dtoa_r+0xb6a>
 80098ba:	ee18 1a10 	vmov	r1, s16
 80098be:	2300      	movs	r3, #0
 80098c0:	220a      	movs	r2, #10
 80098c2:	4620      	mov	r0, r4
 80098c4:	f000 fc78 	bl	800a1b8 <__multadd>
 80098c8:	45b8      	cmp	r8, r7
 80098ca:	ee08 0a10 	vmov	s16, r0
 80098ce:	f04f 0300 	mov.w	r3, #0
 80098d2:	f04f 020a 	mov.w	r2, #10
 80098d6:	4641      	mov	r1, r8
 80098d8:	4620      	mov	r0, r4
 80098da:	d106      	bne.n	80098ea <_dtoa_r+0xb0a>
 80098dc:	f000 fc6c 	bl	800a1b8 <__multadd>
 80098e0:	4680      	mov	r8, r0
 80098e2:	4607      	mov	r7, r0
 80098e4:	f109 0901 	add.w	r9, r9, #1
 80098e8:	e772      	b.n	80097d0 <_dtoa_r+0x9f0>
 80098ea:	f000 fc65 	bl	800a1b8 <__multadd>
 80098ee:	4639      	mov	r1, r7
 80098f0:	4680      	mov	r8, r0
 80098f2:	2300      	movs	r3, #0
 80098f4:	220a      	movs	r2, #10
 80098f6:	4620      	mov	r0, r4
 80098f8:	f000 fc5e 	bl	800a1b8 <__multadd>
 80098fc:	4607      	mov	r7, r0
 80098fe:	e7f1      	b.n	80098e4 <_dtoa_r+0xb04>
 8009900:	9b03      	ldr	r3, [sp, #12]
 8009902:	9302      	str	r3, [sp, #8]
 8009904:	9d01      	ldr	r5, [sp, #4]
 8009906:	ee18 0a10 	vmov	r0, s16
 800990a:	4631      	mov	r1, r6
 800990c:	f7ff f9dc 	bl	8008cc8 <quorem>
 8009910:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009914:	9b01      	ldr	r3, [sp, #4]
 8009916:	f805 ab01 	strb.w	sl, [r5], #1
 800991a:	1aea      	subs	r2, r5, r3
 800991c:	9b02      	ldr	r3, [sp, #8]
 800991e:	4293      	cmp	r3, r2
 8009920:	dd09      	ble.n	8009936 <_dtoa_r+0xb56>
 8009922:	ee18 1a10 	vmov	r1, s16
 8009926:	2300      	movs	r3, #0
 8009928:	220a      	movs	r2, #10
 800992a:	4620      	mov	r0, r4
 800992c:	f000 fc44 	bl	800a1b8 <__multadd>
 8009930:	ee08 0a10 	vmov	s16, r0
 8009934:	e7e7      	b.n	8009906 <_dtoa_r+0xb26>
 8009936:	9b02      	ldr	r3, [sp, #8]
 8009938:	2b00      	cmp	r3, #0
 800993a:	bfc8      	it	gt
 800993c:	461d      	movgt	r5, r3
 800993e:	9b01      	ldr	r3, [sp, #4]
 8009940:	bfd8      	it	le
 8009942:	2501      	movle	r5, #1
 8009944:	441d      	add	r5, r3
 8009946:	f04f 0800 	mov.w	r8, #0
 800994a:	ee18 1a10 	vmov	r1, s16
 800994e:	2201      	movs	r2, #1
 8009950:	4620      	mov	r0, r4
 8009952:	f000 fe2b 	bl	800a5ac <__lshift>
 8009956:	4631      	mov	r1, r6
 8009958:	ee08 0a10 	vmov	s16, r0
 800995c:	f000 fe96 	bl	800a68c <__mcmp>
 8009960:	2800      	cmp	r0, #0
 8009962:	dc91      	bgt.n	8009888 <_dtoa_r+0xaa8>
 8009964:	d102      	bne.n	800996c <_dtoa_r+0xb8c>
 8009966:	f01a 0f01 	tst.w	sl, #1
 800996a:	d18d      	bne.n	8009888 <_dtoa_r+0xaa8>
 800996c:	462b      	mov	r3, r5
 800996e:	461d      	mov	r5, r3
 8009970:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009974:	2a30      	cmp	r2, #48	; 0x30
 8009976:	d0fa      	beq.n	800996e <_dtoa_r+0xb8e>
 8009978:	e6d7      	b.n	800972a <_dtoa_r+0x94a>
 800997a:	9a01      	ldr	r2, [sp, #4]
 800997c:	429a      	cmp	r2, r3
 800997e:	d184      	bne.n	800988a <_dtoa_r+0xaaa>
 8009980:	9b00      	ldr	r3, [sp, #0]
 8009982:	3301      	adds	r3, #1
 8009984:	9300      	str	r3, [sp, #0]
 8009986:	2331      	movs	r3, #49	; 0x31
 8009988:	7013      	strb	r3, [r2, #0]
 800998a:	e6ce      	b.n	800972a <_dtoa_r+0x94a>
 800998c:	4b09      	ldr	r3, [pc, #36]	; (80099b4 <_dtoa_r+0xbd4>)
 800998e:	f7ff ba95 	b.w	8008ebc <_dtoa_r+0xdc>
 8009992:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009994:	2b00      	cmp	r3, #0
 8009996:	f47f aa6e 	bne.w	8008e76 <_dtoa_r+0x96>
 800999a:	4b07      	ldr	r3, [pc, #28]	; (80099b8 <_dtoa_r+0xbd8>)
 800999c:	f7ff ba8e 	b.w	8008ebc <_dtoa_r+0xdc>
 80099a0:	9b02      	ldr	r3, [sp, #8]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	dcae      	bgt.n	8009904 <_dtoa_r+0xb24>
 80099a6:	9b06      	ldr	r3, [sp, #24]
 80099a8:	2b02      	cmp	r3, #2
 80099aa:	f73f aea8 	bgt.w	80096fe <_dtoa_r+0x91e>
 80099ae:	e7a9      	b.n	8009904 <_dtoa_r+0xb24>
 80099b0:	0800bde8 	.word	0x0800bde8
 80099b4:	0800bbe8 	.word	0x0800bbe8
 80099b8:	0800bd69 	.word	0x0800bd69

080099bc <rshift>:
 80099bc:	6903      	ldr	r3, [r0, #16]
 80099be:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099c6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099ca:	f100 0414 	add.w	r4, r0, #20
 80099ce:	dd45      	ble.n	8009a5c <rshift+0xa0>
 80099d0:	f011 011f 	ands.w	r1, r1, #31
 80099d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099dc:	d10c      	bne.n	80099f8 <rshift+0x3c>
 80099de:	f100 0710 	add.w	r7, r0, #16
 80099e2:	4629      	mov	r1, r5
 80099e4:	42b1      	cmp	r1, r6
 80099e6:	d334      	bcc.n	8009a52 <rshift+0x96>
 80099e8:	1a9b      	subs	r3, r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	1eea      	subs	r2, r5, #3
 80099ee:	4296      	cmp	r6, r2
 80099f0:	bf38      	it	cc
 80099f2:	2300      	movcc	r3, #0
 80099f4:	4423      	add	r3, r4
 80099f6:	e015      	b.n	8009a24 <rshift+0x68>
 80099f8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80099fc:	f1c1 0820 	rsb	r8, r1, #32
 8009a00:	40cf      	lsrs	r7, r1
 8009a02:	f105 0e04 	add.w	lr, r5, #4
 8009a06:	46a1      	mov	r9, r4
 8009a08:	4576      	cmp	r6, lr
 8009a0a:	46f4      	mov	ip, lr
 8009a0c:	d815      	bhi.n	8009a3a <rshift+0x7e>
 8009a0e:	1a9a      	subs	r2, r3, r2
 8009a10:	0092      	lsls	r2, r2, #2
 8009a12:	3a04      	subs	r2, #4
 8009a14:	3501      	adds	r5, #1
 8009a16:	42ae      	cmp	r6, r5
 8009a18:	bf38      	it	cc
 8009a1a:	2200      	movcc	r2, #0
 8009a1c:	18a3      	adds	r3, r4, r2
 8009a1e:	50a7      	str	r7, [r4, r2]
 8009a20:	b107      	cbz	r7, 8009a24 <rshift+0x68>
 8009a22:	3304      	adds	r3, #4
 8009a24:	1b1a      	subs	r2, r3, r4
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a2c:	bf08      	it	eq
 8009a2e:	2300      	moveq	r3, #0
 8009a30:	6102      	str	r2, [r0, #16]
 8009a32:	bf08      	it	eq
 8009a34:	6143      	streq	r3, [r0, #20]
 8009a36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a3a:	f8dc c000 	ldr.w	ip, [ip]
 8009a3e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a42:	ea4c 0707 	orr.w	r7, ip, r7
 8009a46:	f849 7b04 	str.w	r7, [r9], #4
 8009a4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a4e:	40cf      	lsrs	r7, r1
 8009a50:	e7da      	b.n	8009a08 <rshift+0x4c>
 8009a52:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a56:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a5a:	e7c3      	b.n	80099e4 <rshift+0x28>
 8009a5c:	4623      	mov	r3, r4
 8009a5e:	e7e1      	b.n	8009a24 <rshift+0x68>

08009a60 <__hexdig_fun>:
 8009a60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a64:	2b09      	cmp	r3, #9
 8009a66:	d802      	bhi.n	8009a6e <__hexdig_fun+0xe>
 8009a68:	3820      	subs	r0, #32
 8009a6a:	b2c0      	uxtb	r0, r0
 8009a6c:	4770      	bx	lr
 8009a6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a72:	2b05      	cmp	r3, #5
 8009a74:	d801      	bhi.n	8009a7a <__hexdig_fun+0x1a>
 8009a76:	3847      	subs	r0, #71	; 0x47
 8009a78:	e7f7      	b.n	8009a6a <__hexdig_fun+0xa>
 8009a7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a7e:	2b05      	cmp	r3, #5
 8009a80:	d801      	bhi.n	8009a86 <__hexdig_fun+0x26>
 8009a82:	3827      	subs	r0, #39	; 0x27
 8009a84:	e7f1      	b.n	8009a6a <__hexdig_fun+0xa>
 8009a86:	2000      	movs	r0, #0
 8009a88:	4770      	bx	lr
	...

08009a8c <__gethex>:
 8009a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a90:	ed2d 8b02 	vpush	{d8}
 8009a94:	b089      	sub	sp, #36	; 0x24
 8009a96:	ee08 0a10 	vmov	s16, r0
 8009a9a:	9304      	str	r3, [sp, #16]
 8009a9c:	4bb4      	ldr	r3, [pc, #720]	; (8009d70 <__gethex+0x2e4>)
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	9301      	str	r3, [sp, #4]
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	468b      	mov	fp, r1
 8009aa6:	4690      	mov	r8, r2
 8009aa8:	f7f6 fb92 	bl	80001d0 <strlen>
 8009aac:	9b01      	ldr	r3, [sp, #4]
 8009aae:	f8db 2000 	ldr.w	r2, [fp]
 8009ab2:	4403      	add	r3, r0
 8009ab4:	4682      	mov	sl, r0
 8009ab6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	1c93      	adds	r3, r2, #2
 8009abe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ac2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ac6:	32fe      	adds	r2, #254	; 0xfe
 8009ac8:	18d1      	adds	r1, r2, r3
 8009aca:	461f      	mov	r7, r3
 8009acc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ad0:	9100      	str	r1, [sp, #0]
 8009ad2:	2830      	cmp	r0, #48	; 0x30
 8009ad4:	d0f8      	beq.n	8009ac8 <__gethex+0x3c>
 8009ad6:	f7ff ffc3 	bl	8009a60 <__hexdig_fun>
 8009ada:	4604      	mov	r4, r0
 8009adc:	2800      	cmp	r0, #0
 8009ade:	d13a      	bne.n	8009b56 <__gethex+0xca>
 8009ae0:	9901      	ldr	r1, [sp, #4]
 8009ae2:	4652      	mov	r2, sl
 8009ae4:	4638      	mov	r0, r7
 8009ae6:	f001 fa33 	bl	800af50 <strncmp>
 8009aea:	4605      	mov	r5, r0
 8009aec:	2800      	cmp	r0, #0
 8009aee:	d168      	bne.n	8009bc2 <__gethex+0x136>
 8009af0:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009af4:	eb07 060a 	add.w	r6, r7, sl
 8009af8:	f7ff ffb2 	bl	8009a60 <__hexdig_fun>
 8009afc:	2800      	cmp	r0, #0
 8009afe:	d062      	beq.n	8009bc6 <__gethex+0x13a>
 8009b00:	4633      	mov	r3, r6
 8009b02:	7818      	ldrb	r0, [r3, #0]
 8009b04:	2830      	cmp	r0, #48	; 0x30
 8009b06:	461f      	mov	r7, r3
 8009b08:	f103 0301 	add.w	r3, r3, #1
 8009b0c:	d0f9      	beq.n	8009b02 <__gethex+0x76>
 8009b0e:	f7ff ffa7 	bl	8009a60 <__hexdig_fun>
 8009b12:	2301      	movs	r3, #1
 8009b14:	fab0 f480 	clz	r4, r0
 8009b18:	0964      	lsrs	r4, r4, #5
 8009b1a:	4635      	mov	r5, r6
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	463a      	mov	r2, r7
 8009b20:	4616      	mov	r6, r2
 8009b22:	3201      	adds	r2, #1
 8009b24:	7830      	ldrb	r0, [r6, #0]
 8009b26:	f7ff ff9b 	bl	8009a60 <__hexdig_fun>
 8009b2a:	2800      	cmp	r0, #0
 8009b2c:	d1f8      	bne.n	8009b20 <__gethex+0x94>
 8009b2e:	9901      	ldr	r1, [sp, #4]
 8009b30:	4652      	mov	r2, sl
 8009b32:	4630      	mov	r0, r6
 8009b34:	f001 fa0c 	bl	800af50 <strncmp>
 8009b38:	b980      	cbnz	r0, 8009b5c <__gethex+0xd0>
 8009b3a:	b94d      	cbnz	r5, 8009b50 <__gethex+0xc4>
 8009b3c:	eb06 050a 	add.w	r5, r6, sl
 8009b40:	462a      	mov	r2, r5
 8009b42:	4616      	mov	r6, r2
 8009b44:	3201      	adds	r2, #1
 8009b46:	7830      	ldrb	r0, [r6, #0]
 8009b48:	f7ff ff8a 	bl	8009a60 <__hexdig_fun>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d1f8      	bne.n	8009b42 <__gethex+0xb6>
 8009b50:	1bad      	subs	r5, r5, r6
 8009b52:	00ad      	lsls	r5, r5, #2
 8009b54:	e004      	b.n	8009b60 <__gethex+0xd4>
 8009b56:	2400      	movs	r4, #0
 8009b58:	4625      	mov	r5, r4
 8009b5a:	e7e0      	b.n	8009b1e <__gethex+0x92>
 8009b5c:	2d00      	cmp	r5, #0
 8009b5e:	d1f7      	bne.n	8009b50 <__gethex+0xc4>
 8009b60:	7833      	ldrb	r3, [r6, #0]
 8009b62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b66:	2b50      	cmp	r3, #80	; 0x50
 8009b68:	d13b      	bne.n	8009be2 <__gethex+0x156>
 8009b6a:	7873      	ldrb	r3, [r6, #1]
 8009b6c:	2b2b      	cmp	r3, #43	; 0x2b
 8009b6e:	d02c      	beq.n	8009bca <__gethex+0x13e>
 8009b70:	2b2d      	cmp	r3, #45	; 0x2d
 8009b72:	d02e      	beq.n	8009bd2 <__gethex+0x146>
 8009b74:	1c71      	adds	r1, r6, #1
 8009b76:	f04f 0900 	mov.w	r9, #0
 8009b7a:	7808      	ldrb	r0, [r1, #0]
 8009b7c:	f7ff ff70 	bl	8009a60 <__hexdig_fun>
 8009b80:	1e43      	subs	r3, r0, #1
 8009b82:	b2db      	uxtb	r3, r3
 8009b84:	2b18      	cmp	r3, #24
 8009b86:	d82c      	bhi.n	8009be2 <__gethex+0x156>
 8009b88:	f1a0 0210 	sub.w	r2, r0, #16
 8009b8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009b90:	f7ff ff66 	bl	8009a60 <__hexdig_fun>
 8009b94:	1e43      	subs	r3, r0, #1
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b18      	cmp	r3, #24
 8009b9a:	d91d      	bls.n	8009bd8 <__gethex+0x14c>
 8009b9c:	f1b9 0f00 	cmp.w	r9, #0
 8009ba0:	d000      	beq.n	8009ba4 <__gethex+0x118>
 8009ba2:	4252      	negs	r2, r2
 8009ba4:	4415      	add	r5, r2
 8009ba6:	f8cb 1000 	str.w	r1, [fp]
 8009baa:	b1e4      	cbz	r4, 8009be6 <__gethex+0x15a>
 8009bac:	9b00      	ldr	r3, [sp, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	bf14      	ite	ne
 8009bb2:	2700      	movne	r7, #0
 8009bb4:	2706      	moveq	r7, #6
 8009bb6:	4638      	mov	r0, r7
 8009bb8:	b009      	add	sp, #36	; 0x24
 8009bba:	ecbd 8b02 	vpop	{d8}
 8009bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bc2:	463e      	mov	r6, r7
 8009bc4:	4625      	mov	r5, r4
 8009bc6:	2401      	movs	r4, #1
 8009bc8:	e7ca      	b.n	8009b60 <__gethex+0xd4>
 8009bca:	f04f 0900 	mov.w	r9, #0
 8009bce:	1cb1      	adds	r1, r6, #2
 8009bd0:	e7d3      	b.n	8009b7a <__gethex+0xee>
 8009bd2:	f04f 0901 	mov.w	r9, #1
 8009bd6:	e7fa      	b.n	8009bce <__gethex+0x142>
 8009bd8:	230a      	movs	r3, #10
 8009bda:	fb03 0202 	mla	r2, r3, r2, r0
 8009bde:	3a10      	subs	r2, #16
 8009be0:	e7d4      	b.n	8009b8c <__gethex+0x100>
 8009be2:	4631      	mov	r1, r6
 8009be4:	e7df      	b.n	8009ba6 <__gethex+0x11a>
 8009be6:	1bf3      	subs	r3, r6, r7
 8009be8:	3b01      	subs	r3, #1
 8009bea:	4621      	mov	r1, r4
 8009bec:	2b07      	cmp	r3, #7
 8009bee:	dc0b      	bgt.n	8009c08 <__gethex+0x17c>
 8009bf0:	ee18 0a10 	vmov	r0, s16
 8009bf4:	f000 fa7e 	bl	800a0f4 <_Balloc>
 8009bf8:	4604      	mov	r4, r0
 8009bfa:	b940      	cbnz	r0, 8009c0e <__gethex+0x182>
 8009bfc:	4b5d      	ldr	r3, [pc, #372]	; (8009d74 <__gethex+0x2e8>)
 8009bfe:	4602      	mov	r2, r0
 8009c00:	21de      	movs	r1, #222	; 0xde
 8009c02:	485d      	ldr	r0, [pc, #372]	; (8009d78 <__gethex+0x2ec>)
 8009c04:	f001 f9c6 	bl	800af94 <__assert_func>
 8009c08:	3101      	adds	r1, #1
 8009c0a:	105b      	asrs	r3, r3, #1
 8009c0c:	e7ee      	b.n	8009bec <__gethex+0x160>
 8009c0e:	f100 0914 	add.w	r9, r0, #20
 8009c12:	f04f 0b00 	mov.w	fp, #0
 8009c16:	f1ca 0301 	rsb	r3, sl, #1
 8009c1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c1e:	f8cd b000 	str.w	fp, [sp]
 8009c22:	9306      	str	r3, [sp, #24]
 8009c24:	42b7      	cmp	r7, r6
 8009c26:	d340      	bcc.n	8009caa <__gethex+0x21e>
 8009c28:	9802      	ldr	r0, [sp, #8]
 8009c2a:	9b00      	ldr	r3, [sp, #0]
 8009c2c:	f840 3b04 	str.w	r3, [r0], #4
 8009c30:	eba0 0009 	sub.w	r0, r0, r9
 8009c34:	1080      	asrs	r0, r0, #2
 8009c36:	0146      	lsls	r6, r0, #5
 8009c38:	6120      	str	r0, [r4, #16]
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f000 fb4c 	bl	800a2d8 <__hi0bits>
 8009c40:	1a30      	subs	r0, r6, r0
 8009c42:	f8d8 6000 	ldr.w	r6, [r8]
 8009c46:	42b0      	cmp	r0, r6
 8009c48:	dd63      	ble.n	8009d12 <__gethex+0x286>
 8009c4a:	1b87      	subs	r7, r0, r6
 8009c4c:	4639      	mov	r1, r7
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f000 fef0 	bl	800aa34 <__any_on>
 8009c54:	4682      	mov	sl, r0
 8009c56:	b1a8      	cbz	r0, 8009c84 <__gethex+0x1f8>
 8009c58:	1e7b      	subs	r3, r7, #1
 8009c5a:	1159      	asrs	r1, r3, #5
 8009c5c:	f003 021f 	and.w	r2, r3, #31
 8009c60:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c64:	f04f 0a01 	mov.w	sl, #1
 8009c68:	fa0a f202 	lsl.w	r2, sl, r2
 8009c6c:	420a      	tst	r2, r1
 8009c6e:	d009      	beq.n	8009c84 <__gethex+0x1f8>
 8009c70:	4553      	cmp	r3, sl
 8009c72:	dd05      	ble.n	8009c80 <__gethex+0x1f4>
 8009c74:	1eb9      	subs	r1, r7, #2
 8009c76:	4620      	mov	r0, r4
 8009c78:	f000 fedc 	bl	800aa34 <__any_on>
 8009c7c:	2800      	cmp	r0, #0
 8009c7e:	d145      	bne.n	8009d0c <__gethex+0x280>
 8009c80:	f04f 0a02 	mov.w	sl, #2
 8009c84:	4639      	mov	r1, r7
 8009c86:	4620      	mov	r0, r4
 8009c88:	f7ff fe98 	bl	80099bc <rshift>
 8009c8c:	443d      	add	r5, r7
 8009c8e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009c92:	42ab      	cmp	r3, r5
 8009c94:	da4c      	bge.n	8009d30 <__gethex+0x2a4>
 8009c96:	ee18 0a10 	vmov	r0, s16
 8009c9a:	4621      	mov	r1, r4
 8009c9c:	f000 fa6a 	bl	800a174 <_Bfree>
 8009ca0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	6013      	str	r3, [r2, #0]
 8009ca6:	27a3      	movs	r7, #163	; 0xa3
 8009ca8:	e785      	b.n	8009bb6 <__gethex+0x12a>
 8009caa:	1e73      	subs	r3, r6, #1
 8009cac:	9a05      	ldr	r2, [sp, #20]
 8009cae:	9303      	str	r3, [sp, #12]
 8009cb0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d019      	beq.n	8009cec <__gethex+0x260>
 8009cb8:	f1bb 0f20 	cmp.w	fp, #32
 8009cbc:	d107      	bne.n	8009cce <__gethex+0x242>
 8009cbe:	9b02      	ldr	r3, [sp, #8]
 8009cc0:	9a00      	ldr	r2, [sp, #0]
 8009cc2:	f843 2b04 	str.w	r2, [r3], #4
 8009cc6:	9302      	str	r3, [sp, #8]
 8009cc8:	2300      	movs	r3, #0
 8009cca:	9300      	str	r3, [sp, #0]
 8009ccc:	469b      	mov	fp, r3
 8009cce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009cd2:	f7ff fec5 	bl	8009a60 <__hexdig_fun>
 8009cd6:	9b00      	ldr	r3, [sp, #0]
 8009cd8:	f000 000f 	and.w	r0, r0, #15
 8009cdc:	fa00 f00b 	lsl.w	r0, r0, fp
 8009ce0:	4303      	orrs	r3, r0
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	f10b 0b04 	add.w	fp, fp, #4
 8009ce8:	9b03      	ldr	r3, [sp, #12]
 8009cea:	e00d      	b.n	8009d08 <__gethex+0x27c>
 8009cec:	9b03      	ldr	r3, [sp, #12]
 8009cee:	9a06      	ldr	r2, [sp, #24]
 8009cf0:	4413      	add	r3, r2
 8009cf2:	42bb      	cmp	r3, r7
 8009cf4:	d3e0      	bcc.n	8009cb8 <__gethex+0x22c>
 8009cf6:	4618      	mov	r0, r3
 8009cf8:	9901      	ldr	r1, [sp, #4]
 8009cfa:	9307      	str	r3, [sp, #28]
 8009cfc:	4652      	mov	r2, sl
 8009cfe:	f001 f927 	bl	800af50 <strncmp>
 8009d02:	9b07      	ldr	r3, [sp, #28]
 8009d04:	2800      	cmp	r0, #0
 8009d06:	d1d7      	bne.n	8009cb8 <__gethex+0x22c>
 8009d08:	461e      	mov	r6, r3
 8009d0a:	e78b      	b.n	8009c24 <__gethex+0x198>
 8009d0c:	f04f 0a03 	mov.w	sl, #3
 8009d10:	e7b8      	b.n	8009c84 <__gethex+0x1f8>
 8009d12:	da0a      	bge.n	8009d2a <__gethex+0x29e>
 8009d14:	1a37      	subs	r7, r6, r0
 8009d16:	4621      	mov	r1, r4
 8009d18:	ee18 0a10 	vmov	r0, s16
 8009d1c:	463a      	mov	r2, r7
 8009d1e:	f000 fc45 	bl	800a5ac <__lshift>
 8009d22:	1bed      	subs	r5, r5, r7
 8009d24:	4604      	mov	r4, r0
 8009d26:	f100 0914 	add.w	r9, r0, #20
 8009d2a:	f04f 0a00 	mov.w	sl, #0
 8009d2e:	e7ae      	b.n	8009c8e <__gethex+0x202>
 8009d30:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d34:	42a8      	cmp	r0, r5
 8009d36:	dd72      	ble.n	8009e1e <__gethex+0x392>
 8009d38:	1b45      	subs	r5, r0, r5
 8009d3a:	42ae      	cmp	r6, r5
 8009d3c:	dc36      	bgt.n	8009dac <__gethex+0x320>
 8009d3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d42:	2b02      	cmp	r3, #2
 8009d44:	d02a      	beq.n	8009d9c <__gethex+0x310>
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	d02c      	beq.n	8009da4 <__gethex+0x318>
 8009d4a:	2b01      	cmp	r3, #1
 8009d4c:	d11c      	bne.n	8009d88 <__gethex+0x2fc>
 8009d4e:	42ae      	cmp	r6, r5
 8009d50:	d11a      	bne.n	8009d88 <__gethex+0x2fc>
 8009d52:	2e01      	cmp	r6, #1
 8009d54:	d112      	bne.n	8009d7c <__gethex+0x2f0>
 8009d56:	9a04      	ldr	r2, [sp, #16]
 8009d58:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	2301      	movs	r3, #1
 8009d60:	6123      	str	r3, [r4, #16]
 8009d62:	f8c9 3000 	str.w	r3, [r9]
 8009d66:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d68:	2762      	movs	r7, #98	; 0x62
 8009d6a:	601c      	str	r4, [r3, #0]
 8009d6c:	e723      	b.n	8009bb6 <__gethex+0x12a>
 8009d6e:	bf00      	nop
 8009d70:	0800be60 	.word	0x0800be60
 8009d74:	0800bde8 	.word	0x0800bde8
 8009d78:	0800bdf9 	.word	0x0800bdf9
 8009d7c:	1e71      	subs	r1, r6, #1
 8009d7e:	4620      	mov	r0, r4
 8009d80:	f000 fe58 	bl	800aa34 <__any_on>
 8009d84:	2800      	cmp	r0, #0
 8009d86:	d1e6      	bne.n	8009d56 <__gethex+0x2ca>
 8009d88:	ee18 0a10 	vmov	r0, s16
 8009d8c:	4621      	mov	r1, r4
 8009d8e:	f000 f9f1 	bl	800a174 <_Bfree>
 8009d92:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d94:	2300      	movs	r3, #0
 8009d96:	6013      	str	r3, [r2, #0]
 8009d98:	2750      	movs	r7, #80	; 0x50
 8009d9a:	e70c      	b.n	8009bb6 <__gethex+0x12a>
 8009d9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d1f2      	bne.n	8009d88 <__gethex+0x2fc>
 8009da2:	e7d8      	b.n	8009d56 <__gethex+0x2ca>
 8009da4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d1d5      	bne.n	8009d56 <__gethex+0x2ca>
 8009daa:	e7ed      	b.n	8009d88 <__gethex+0x2fc>
 8009dac:	1e6f      	subs	r7, r5, #1
 8009dae:	f1ba 0f00 	cmp.w	sl, #0
 8009db2:	d131      	bne.n	8009e18 <__gethex+0x38c>
 8009db4:	b127      	cbz	r7, 8009dc0 <__gethex+0x334>
 8009db6:	4639      	mov	r1, r7
 8009db8:	4620      	mov	r0, r4
 8009dba:	f000 fe3b 	bl	800aa34 <__any_on>
 8009dbe:	4682      	mov	sl, r0
 8009dc0:	117b      	asrs	r3, r7, #5
 8009dc2:	2101      	movs	r1, #1
 8009dc4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009dc8:	f007 071f 	and.w	r7, r7, #31
 8009dcc:	fa01 f707 	lsl.w	r7, r1, r7
 8009dd0:	421f      	tst	r7, r3
 8009dd2:	4629      	mov	r1, r5
 8009dd4:	4620      	mov	r0, r4
 8009dd6:	bf18      	it	ne
 8009dd8:	f04a 0a02 	orrne.w	sl, sl, #2
 8009ddc:	1b76      	subs	r6, r6, r5
 8009dde:	f7ff fded 	bl	80099bc <rshift>
 8009de2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009de6:	2702      	movs	r7, #2
 8009de8:	f1ba 0f00 	cmp.w	sl, #0
 8009dec:	d048      	beq.n	8009e80 <__gethex+0x3f4>
 8009dee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009df2:	2b02      	cmp	r3, #2
 8009df4:	d015      	beq.n	8009e22 <__gethex+0x396>
 8009df6:	2b03      	cmp	r3, #3
 8009df8:	d017      	beq.n	8009e2a <__gethex+0x39e>
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d109      	bne.n	8009e12 <__gethex+0x386>
 8009dfe:	f01a 0f02 	tst.w	sl, #2
 8009e02:	d006      	beq.n	8009e12 <__gethex+0x386>
 8009e04:	f8d9 0000 	ldr.w	r0, [r9]
 8009e08:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e0c:	f01a 0f01 	tst.w	sl, #1
 8009e10:	d10e      	bne.n	8009e30 <__gethex+0x3a4>
 8009e12:	f047 0710 	orr.w	r7, r7, #16
 8009e16:	e033      	b.n	8009e80 <__gethex+0x3f4>
 8009e18:	f04f 0a01 	mov.w	sl, #1
 8009e1c:	e7d0      	b.n	8009dc0 <__gethex+0x334>
 8009e1e:	2701      	movs	r7, #1
 8009e20:	e7e2      	b.n	8009de8 <__gethex+0x35c>
 8009e22:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e24:	f1c3 0301 	rsb	r3, r3, #1
 8009e28:	9315      	str	r3, [sp, #84]	; 0x54
 8009e2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d0f0      	beq.n	8009e12 <__gethex+0x386>
 8009e30:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e34:	f104 0314 	add.w	r3, r4, #20
 8009e38:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e3c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e40:	f04f 0c00 	mov.w	ip, #0
 8009e44:	4618      	mov	r0, r3
 8009e46:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e4a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e4e:	d01c      	beq.n	8009e8a <__gethex+0x3fe>
 8009e50:	3201      	adds	r2, #1
 8009e52:	6002      	str	r2, [r0, #0]
 8009e54:	2f02      	cmp	r7, #2
 8009e56:	f104 0314 	add.w	r3, r4, #20
 8009e5a:	d13f      	bne.n	8009edc <__gethex+0x450>
 8009e5c:	f8d8 2000 	ldr.w	r2, [r8]
 8009e60:	3a01      	subs	r2, #1
 8009e62:	42b2      	cmp	r2, r6
 8009e64:	d10a      	bne.n	8009e7c <__gethex+0x3f0>
 8009e66:	1171      	asrs	r1, r6, #5
 8009e68:	2201      	movs	r2, #1
 8009e6a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e6e:	f006 061f 	and.w	r6, r6, #31
 8009e72:	fa02 f606 	lsl.w	r6, r2, r6
 8009e76:	421e      	tst	r6, r3
 8009e78:	bf18      	it	ne
 8009e7a:	4617      	movne	r7, r2
 8009e7c:	f047 0720 	orr.w	r7, r7, #32
 8009e80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e82:	601c      	str	r4, [r3, #0]
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	601d      	str	r5, [r3, #0]
 8009e88:	e695      	b.n	8009bb6 <__gethex+0x12a>
 8009e8a:	4299      	cmp	r1, r3
 8009e8c:	f843 cc04 	str.w	ip, [r3, #-4]
 8009e90:	d8d8      	bhi.n	8009e44 <__gethex+0x3b8>
 8009e92:	68a3      	ldr	r3, [r4, #8]
 8009e94:	459b      	cmp	fp, r3
 8009e96:	db19      	blt.n	8009ecc <__gethex+0x440>
 8009e98:	6861      	ldr	r1, [r4, #4]
 8009e9a:	ee18 0a10 	vmov	r0, s16
 8009e9e:	3101      	adds	r1, #1
 8009ea0:	f000 f928 	bl	800a0f4 <_Balloc>
 8009ea4:	4681      	mov	r9, r0
 8009ea6:	b918      	cbnz	r0, 8009eb0 <__gethex+0x424>
 8009ea8:	4b1a      	ldr	r3, [pc, #104]	; (8009f14 <__gethex+0x488>)
 8009eaa:	4602      	mov	r2, r0
 8009eac:	2184      	movs	r1, #132	; 0x84
 8009eae:	e6a8      	b.n	8009c02 <__gethex+0x176>
 8009eb0:	6922      	ldr	r2, [r4, #16]
 8009eb2:	3202      	adds	r2, #2
 8009eb4:	f104 010c 	add.w	r1, r4, #12
 8009eb8:	0092      	lsls	r2, r2, #2
 8009eba:	300c      	adds	r0, #12
 8009ebc:	f000 f90c 	bl	800a0d8 <memcpy>
 8009ec0:	4621      	mov	r1, r4
 8009ec2:	ee18 0a10 	vmov	r0, s16
 8009ec6:	f000 f955 	bl	800a174 <_Bfree>
 8009eca:	464c      	mov	r4, r9
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009ed4:	6122      	str	r2, [r4, #16]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	615a      	str	r2, [r3, #20]
 8009eda:	e7bb      	b.n	8009e54 <__gethex+0x3c8>
 8009edc:	6922      	ldr	r2, [r4, #16]
 8009ede:	455a      	cmp	r2, fp
 8009ee0:	dd0b      	ble.n	8009efa <__gethex+0x46e>
 8009ee2:	2101      	movs	r1, #1
 8009ee4:	4620      	mov	r0, r4
 8009ee6:	f7ff fd69 	bl	80099bc <rshift>
 8009eea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009eee:	3501      	adds	r5, #1
 8009ef0:	42ab      	cmp	r3, r5
 8009ef2:	f6ff aed0 	blt.w	8009c96 <__gethex+0x20a>
 8009ef6:	2701      	movs	r7, #1
 8009ef8:	e7c0      	b.n	8009e7c <__gethex+0x3f0>
 8009efa:	f016 061f 	ands.w	r6, r6, #31
 8009efe:	d0fa      	beq.n	8009ef6 <__gethex+0x46a>
 8009f00:	4453      	add	r3, sl
 8009f02:	f1c6 0620 	rsb	r6, r6, #32
 8009f06:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009f0a:	f000 f9e5 	bl	800a2d8 <__hi0bits>
 8009f0e:	42b0      	cmp	r0, r6
 8009f10:	dbe7      	blt.n	8009ee2 <__gethex+0x456>
 8009f12:	e7f0      	b.n	8009ef6 <__gethex+0x46a>
 8009f14:	0800bde8 	.word	0x0800bde8

08009f18 <L_shift>:
 8009f18:	f1c2 0208 	rsb	r2, r2, #8
 8009f1c:	0092      	lsls	r2, r2, #2
 8009f1e:	b570      	push	{r4, r5, r6, lr}
 8009f20:	f1c2 0620 	rsb	r6, r2, #32
 8009f24:	6843      	ldr	r3, [r0, #4]
 8009f26:	6804      	ldr	r4, [r0, #0]
 8009f28:	fa03 f506 	lsl.w	r5, r3, r6
 8009f2c:	432c      	orrs	r4, r5
 8009f2e:	40d3      	lsrs	r3, r2
 8009f30:	6004      	str	r4, [r0, #0]
 8009f32:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f36:	4288      	cmp	r0, r1
 8009f38:	d3f4      	bcc.n	8009f24 <L_shift+0xc>
 8009f3a:	bd70      	pop	{r4, r5, r6, pc}

08009f3c <__match>:
 8009f3c:	b530      	push	{r4, r5, lr}
 8009f3e:	6803      	ldr	r3, [r0, #0]
 8009f40:	3301      	adds	r3, #1
 8009f42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f46:	b914      	cbnz	r4, 8009f4e <__match+0x12>
 8009f48:	6003      	str	r3, [r0, #0]
 8009f4a:	2001      	movs	r0, #1
 8009f4c:	bd30      	pop	{r4, r5, pc}
 8009f4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f52:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f56:	2d19      	cmp	r5, #25
 8009f58:	bf98      	it	ls
 8009f5a:	3220      	addls	r2, #32
 8009f5c:	42a2      	cmp	r2, r4
 8009f5e:	d0f0      	beq.n	8009f42 <__match+0x6>
 8009f60:	2000      	movs	r0, #0
 8009f62:	e7f3      	b.n	8009f4c <__match+0x10>

08009f64 <__hexnan>:
 8009f64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f68:	680b      	ldr	r3, [r1, #0]
 8009f6a:	115e      	asrs	r6, r3, #5
 8009f6c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f70:	f013 031f 	ands.w	r3, r3, #31
 8009f74:	b087      	sub	sp, #28
 8009f76:	bf18      	it	ne
 8009f78:	3604      	addne	r6, #4
 8009f7a:	2500      	movs	r5, #0
 8009f7c:	1f37      	subs	r7, r6, #4
 8009f7e:	4690      	mov	r8, r2
 8009f80:	6802      	ldr	r2, [r0, #0]
 8009f82:	9301      	str	r3, [sp, #4]
 8009f84:	4682      	mov	sl, r0
 8009f86:	f846 5c04 	str.w	r5, [r6, #-4]
 8009f8a:	46b9      	mov	r9, r7
 8009f8c:	463c      	mov	r4, r7
 8009f8e:	9502      	str	r5, [sp, #8]
 8009f90:	46ab      	mov	fp, r5
 8009f92:	7851      	ldrb	r1, [r2, #1]
 8009f94:	1c53      	adds	r3, r2, #1
 8009f96:	9303      	str	r3, [sp, #12]
 8009f98:	b341      	cbz	r1, 8009fec <__hexnan+0x88>
 8009f9a:	4608      	mov	r0, r1
 8009f9c:	9205      	str	r2, [sp, #20]
 8009f9e:	9104      	str	r1, [sp, #16]
 8009fa0:	f7ff fd5e 	bl	8009a60 <__hexdig_fun>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	d14f      	bne.n	800a048 <__hexnan+0xe4>
 8009fa8:	9904      	ldr	r1, [sp, #16]
 8009faa:	9a05      	ldr	r2, [sp, #20]
 8009fac:	2920      	cmp	r1, #32
 8009fae:	d818      	bhi.n	8009fe2 <__hexnan+0x7e>
 8009fb0:	9b02      	ldr	r3, [sp, #8]
 8009fb2:	459b      	cmp	fp, r3
 8009fb4:	dd13      	ble.n	8009fde <__hexnan+0x7a>
 8009fb6:	454c      	cmp	r4, r9
 8009fb8:	d206      	bcs.n	8009fc8 <__hexnan+0x64>
 8009fba:	2d07      	cmp	r5, #7
 8009fbc:	dc04      	bgt.n	8009fc8 <__hexnan+0x64>
 8009fbe:	462a      	mov	r2, r5
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	4620      	mov	r0, r4
 8009fc4:	f7ff ffa8 	bl	8009f18 <L_shift>
 8009fc8:	4544      	cmp	r4, r8
 8009fca:	d950      	bls.n	800a06e <__hexnan+0x10a>
 8009fcc:	2300      	movs	r3, #0
 8009fce:	f1a4 0904 	sub.w	r9, r4, #4
 8009fd2:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fd6:	f8cd b008 	str.w	fp, [sp, #8]
 8009fda:	464c      	mov	r4, r9
 8009fdc:	461d      	mov	r5, r3
 8009fde:	9a03      	ldr	r2, [sp, #12]
 8009fe0:	e7d7      	b.n	8009f92 <__hexnan+0x2e>
 8009fe2:	2929      	cmp	r1, #41	; 0x29
 8009fe4:	d156      	bne.n	800a094 <__hexnan+0x130>
 8009fe6:	3202      	adds	r2, #2
 8009fe8:	f8ca 2000 	str.w	r2, [sl]
 8009fec:	f1bb 0f00 	cmp.w	fp, #0
 8009ff0:	d050      	beq.n	800a094 <__hexnan+0x130>
 8009ff2:	454c      	cmp	r4, r9
 8009ff4:	d206      	bcs.n	800a004 <__hexnan+0xa0>
 8009ff6:	2d07      	cmp	r5, #7
 8009ff8:	dc04      	bgt.n	800a004 <__hexnan+0xa0>
 8009ffa:	462a      	mov	r2, r5
 8009ffc:	4649      	mov	r1, r9
 8009ffe:	4620      	mov	r0, r4
 800a000:	f7ff ff8a 	bl	8009f18 <L_shift>
 800a004:	4544      	cmp	r4, r8
 800a006:	d934      	bls.n	800a072 <__hexnan+0x10e>
 800a008:	f1a8 0204 	sub.w	r2, r8, #4
 800a00c:	4623      	mov	r3, r4
 800a00e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a012:	f842 1f04 	str.w	r1, [r2, #4]!
 800a016:	429f      	cmp	r7, r3
 800a018:	d2f9      	bcs.n	800a00e <__hexnan+0xaa>
 800a01a:	1b3b      	subs	r3, r7, r4
 800a01c:	f023 0303 	bic.w	r3, r3, #3
 800a020:	3304      	adds	r3, #4
 800a022:	3401      	adds	r4, #1
 800a024:	3e03      	subs	r6, #3
 800a026:	42b4      	cmp	r4, r6
 800a028:	bf88      	it	hi
 800a02a:	2304      	movhi	r3, #4
 800a02c:	4443      	add	r3, r8
 800a02e:	2200      	movs	r2, #0
 800a030:	f843 2b04 	str.w	r2, [r3], #4
 800a034:	429f      	cmp	r7, r3
 800a036:	d2fb      	bcs.n	800a030 <__hexnan+0xcc>
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	b91b      	cbnz	r3, 800a044 <__hexnan+0xe0>
 800a03c:	4547      	cmp	r7, r8
 800a03e:	d127      	bne.n	800a090 <__hexnan+0x12c>
 800a040:	2301      	movs	r3, #1
 800a042:	603b      	str	r3, [r7, #0]
 800a044:	2005      	movs	r0, #5
 800a046:	e026      	b.n	800a096 <__hexnan+0x132>
 800a048:	3501      	adds	r5, #1
 800a04a:	2d08      	cmp	r5, #8
 800a04c:	f10b 0b01 	add.w	fp, fp, #1
 800a050:	dd06      	ble.n	800a060 <__hexnan+0xfc>
 800a052:	4544      	cmp	r4, r8
 800a054:	d9c3      	bls.n	8009fde <__hexnan+0x7a>
 800a056:	2300      	movs	r3, #0
 800a058:	f844 3c04 	str.w	r3, [r4, #-4]
 800a05c:	2501      	movs	r5, #1
 800a05e:	3c04      	subs	r4, #4
 800a060:	6822      	ldr	r2, [r4, #0]
 800a062:	f000 000f 	and.w	r0, r0, #15
 800a066:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	e7b7      	b.n	8009fde <__hexnan+0x7a>
 800a06e:	2508      	movs	r5, #8
 800a070:	e7b5      	b.n	8009fde <__hexnan+0x7a>
 800a072:	9b01      	ldr	r3, [sp, #4]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d0df      	beq.n	800a038 <__hexnan+0xd4>
 800a078:	f04f 32ff 	mov.w	r2, #4294967295
 800a07c:	f1c3 0320 	rsb	r3, r3, #32
 800a080:	fa22 f303 	lsr.w	r3, r2, r3
 800a084:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a088:	401a      	ands	r2, r3
 800a08a:	f846 2c04 	str.w	r2, [r6, #-4]
 800a08e:	e7d3      	b.n	800a038 <__hexnan+0xd4>
 800a090:	3f04      	subs	r7, #4
 800a092:	e7d1      	b.n	800a038 <__hexnan+0xd4>
 800a094:	2004      	movs	r0, #4
 800a096:	b007      	add	sp, #28
 800a098:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a09c <_localeconv_r>:
 800a09c:	4800      	ldr	r0, [pc, #0]	; (800a0a0 <_localeconv_r+0x4>)
 800a09e:	4770      	bx	lr
 800a0a0:	20000170 	.word	0x20000170

0800a0a4 <malloc>:
 800a0a4:	4b02      	ldr	r3, [pc, #8]	; (800a0b0 <malloc+0xc>)
 800a0a6:	4601      	mov	r1, r0
 800a0a8:	6818      	ldr	r0, [r3, #0]
 800a0aa:	f000 bd67 	b.w	800ab7c <_malloc_r>
 800a0ae:	bf00      	nop
 800a0b0:	20000018 	.word	0x20000018

0800a0b4 <__ascii_mbtowc>:
 800a0b4:	b082      	sub	sp, #8
 800a0b6:	b901      	cbnz	r1, 800a0ba <__ascii_mbtowc+0x6>
 800a0b8:	a901      	add	r1, sp, #4
 800a0ba:	b142      	cbz	r2, 800a0ce <__ascii_mbtowc+0x1a>
 800a0bc:	b14b      	cbz	r3, 800a0d2 <__ascii_mbtowc+0x1e>
 800a0be:	7813      	ldrb	r3, [r2, #0]
 800a0c0:	600b      	str	r3, [r1, #0]
 800a0c2:	7812      	ldrb	r2, [r2, #0]
 800a0c4:	1e10      	subs	r0, r2, #0
 800a0c6:	bf18      	it	ne
 800a0c8:	2001      	movne	r0, #1
 800a0ca:	b002      	add	sp, #8
 800a0cc:	4770      	bx	lr
 800a0ce:	4610      	mov	r0, r2
 800a0d0:	e7fb      	b.n	800a0ca <__ascii_mbtowc+0x16>
 800a0d2:	f06f 0001 	mvn.w	r0, #1
 800a0d6:	e7f8      	b.n	800a0ca <__ascii_mbtowc+0x16>

0800a0d8 <memcpy>:
 800a0d8:	440a      	add	r2, r1
 800a0da:	4291      	cmp	r1, r2
 800a0dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a0e0:	d100      	bne.n	800a0e4 <memcpy+0xc>
 800a0e2:	4770      	bx	lr
 800a0e4:	b510      	push	{r4, lr}
 800a0e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0ee:	4291      	cmp	r1, r2
 800a0f0:	d1f9      	bne.n	800a0e6 <memcpy+0xe>
 800a0f2:	bd10      	pop	{r4, pc}

0800a0f4 <_Balloc>:
 800a0f4:	b570      	push	{r4, r5, r6, lr}
 800a0f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	460d      	mov	r5, r1
 800a0fc:	b976      	cbnz	r6, 800a11c <_Balloc+0x28>
 800a0fe:	2010      	movs	r0, #16
 800a100:	f7ff ffd0 	bl	800a0a4 <malloc>
 800a104:	4602      	mov	r2, r0
 800a106:	6260      	str	r0, [r4, #36]	; 0x24
 800a108:	b920      	cbnz	r0, 800a114 <_Balloc+0x20>
 800a10a:	4b18      	ldr	r3, [pc, #96]	; (800a16c <_Balloc+0x78>)
 800a10c:	4818      	ldr	r0, [pc, #96]	; (800a170 <_Balloc+0x7c>)
 800a10e:	2166      	movs	r1, #102	; 0x66
 800a110:	f000 ff40 	bl	800af94 <__assert_func>
 800a114:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a118:	6006      	str	r6, [r0, #0]
 800a11a:	60c6      	str	r6, [r0, #12]
 800a11c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a11e:	68f3      	ldr	r3, [r6, #12]
 800a120:	b183      	cbz	r3, 800a144 <_Balloc+0x50>
 800a122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a124:	68db      	ldr	r3, [r3, #12]
 800a126:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a12a:	b9b8      	cbnz	r0, 800a15c <_Balloc+0x68>
 800a12c:	2101      	movs	r1, #1
 800a12e:	fa01 f605 	lsl.w	r6, r1, r5
 800a132:	1d72      	adds	r2, r6, #5
 800a134:	0092      	lsls	r2, r2, #2
 800a136:	4620      	mov	r0, r4
 800a138:	f000 fc9d 	bl	800aa76 <_calloc_r>
 800a13c:	b160      	cbz	r0, 800a158 <_Balloc+0x64>
 800a13e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a142:	e00e      	b.n	800a162 <_Balloc+0x6e>
 800a144:	2221      	movs	r2, #33	; 0x21
 800a146:	2104      	movs	r1, #4
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fc94 	bl	800aa76 <_calloc_r>
 800a14e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a150:	60f0      	str	r0, [r6, #12]
 800a152:	68db      	ldr	r3, [r3, #12]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e4      	bne.n	800a122 <_Balloc+0x2e>
 800a158:	2000      	movs	r0, #0
 800a15a:	bd70      	pop	{r4, r5, r6, pc}
 800a15c:	6802      	ldr	r2, [r0, #0]
 800a15e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a162:	2300      	movs	r3, #0
 800a164:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a168:	e7f7      	b.n	800a15a <_Balloc+0x66>
 800a16a:	bf00      	nop
 800a16c:	0800bd76 	.word	0x0800bd76
 800a170:	0800be74 	.word	0x0800be74

0800a174 <_Bfree>:
 800a174:	b570      	push	{r4, r5, r6, lr}
 800a176:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a178:	4605      	mov	r5, r0
 800a17a:	460c      	mov	r4, r1
 800a17c:	b976      	cbnz	r6, 800a19c <_Bfree+0x28>
 800a17e:	2010      	movs	r0, #16
 800a180:	f7ff ff90 	bl	800a0a4 <malloc>
 800a184:	4602      	mov	r2, r0
 800a186:	6268      	str	r0, [r5, #36]	; 0x24
 800a188:	b920      	cbnz	r0, 800a194 <_Bfree+0x20>
 800a18a:	4b09      	ldr	r3, [pc, #36]	; (800a1b0 <_Bfree+0x3c>)
 800a18c:	4809      	ldr	r0, [pc, #36]	; (800a1b4 <_Bfree+0x40>)
 800a18e:	218a      	movs	r1, #138	; 0x8a
 800a190:	f000 ff00 	bl	800af94 <__assert_func>
 800a194:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a198:	6006      	str	r6, [r0, #0]
 800a19a:	60c6      	str	r6, [r0, #12]
 800a19c:	b13c      	cbz	r4, 800a1ae <_Bfree+0x3a>
 800a19e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a1a0:	6862      	ldr	r2, [r4, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a1a8:	6021      	str	r1, [r4, #0]
 800a1aa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a1ae:	bd70      	pop	{r4, r5, r6, pc}
 800a1b0:	0800bd76 	.word	0x0800bd76
 800a1b4:	0800be74 	.word	0x0800be74

0800a1b8 <__multadd>:
 800a1b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1bc:	690d      	ldr	r5, [r1, #16]
 800a1be:	4607      	mov	r7, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	461e      	mov	r6, r3
 800a1c4:	f101 0c14 	add.w	ip, r1, #20
 800a1c8:	2000      	movs	r0, #0
 800a1ca:	f8dc 3000 	ldr.w	r3, [ip]
 800a1ce:	b299      	uxth	r1, r3
 800a1d0:	fb02 6101 	mla	r1, r2, r1, r6
 800a1d4:	0c1e      	lsrs	r6, r3, #16
 800a1d6:	0c0b      	lsrs	r3, r1, #16
 800a1d8:	fb02 3306 	mla	r3, r2, r6, r3
 800a1dc:	b289      	uxth	r1, r1
 800a1de:	3001      	adds	r0, #1
 800a1e0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a1e4:	4285      	cmp	r5, r0
 800a1e6:	f84c 1b04 	str.w	r1, [ip], #4
 800a1ea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a1ee:	dcec      	bgt.n	800a1ca <__multadd+0x12>
 800a1f0:	b30e      	cbz	r6, 800a236 <__multadd+0x7e>
 800a1f2:	68a3      	ldr	r3, [r4, #8]
 800a1f4:	42ab      	cmp	r3, r5
 800a1f6:	dc19      	bgt.n	800a22c <__multadd+0x74>
 800a1f8:	6861      	ldr	r1, [r4, #4]
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	3101      	adds	r1, #1
 800a1fe:	f7ff ff79 	bl	800a0f4 <_Balloc>
 800a202:	4680      	mov	r8, r0
 800a204:	b928      	cbnz	r0, 800a212 <__multadd+0x5a>
 800a206:	4602      	mov	r2, r0
 800a208:	4b0c      	ldr	r3, [pc, #48]	; (800a23c <__multadd+0x84>)
 800a20a:	480d      	ldr	r0, [pc, #52]	; (800a240 <__multadd+0x88>)
 800a20c:	21b5      	movs	r1, #181	; 0xb5
 800a20e:	f000 fec1 	bl	800af94 <__assert_func>
 800a212:	6922      	ldr	r2, [r4, #16]
 800a214:	3202      	adds	r2, #2
 800a216:	f104 010c 	add.w	r1, r4, #12
 800a21a:	0092      	lsls	r2, r2, #2
 800a21c:	300c      	adds	r0, #12
 800a21e:	f7ff ff5b 	bl	800a0d8 <memcpy>
 800a222:	4621      	mov	r1, r4
 800a224:	4638      	mov	r0, r7
 800a226:	f7ff ffa5 	bl	800a174 <_Bfree>
 800a22a:	4644      	mov	r4, r8
 800a22c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a230:	3501      	adds	r5, #1
 800a232:	615e      	str	r6, [r3, #20]
 800a234:	6125      	str	r5, [r4, #16]
 800a236:	4620      	mov	r0, r4
 800a238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a23c:	0800bde8 	.word	0x0800bde8
 800a240:	0800be74 	.word	0x0800be74

0800a244 <__s2b>:
 800a244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a248:	460c      	mov	r4, r1
 800a24a:	4615      	mov	r5, r2
 800a24c:	461f      	mov	r7, r3
 800a24e:	2209      	movs	r2, #9
 800a250:	3308      	adds	r3, #8
 800a252:	4606      	mov	r6, r0
 800a254:	fb93 f3f2 	sdiv	r3, r3, r2
 800a258:	2100      	movs	r1, #0
 800a25a:	2201      	movs	r2, #1
 800a25c:	429a      	cmp	r2, r3
 800a25e:	db09      	blt.n	800a274 <__s2b+0x30>
 800a260:	4630      	mov	r0, r6
 800a262:	f7ff ff47 	bl	800a0f4 <_Balloc>
 800a266:	b940      	cbnz	r0, 800a27a <__s2b+0x36>
 800a268:	4602      	mov	r2, r0
 800a26a:	4b19      	ldr	r3, [pc, #100]	; (800a2d0 <__s2b+0x8c>)
 800a26c:	4819      	ldr	r0, [pc, #100]	; (800a2d4 <__s2b+0x90>)
 800a26e:	21ce      	movs	r1, #206	; 0xce
 800a270:	f000 fe90 	bl	800af94 <__assert_func>
 800a274:	0052      	lsls	r2, r2, #1
 800a276:	3101      	adds	r1, #1
 800a278:	e7f0      	b.n	800a25c <__s2b+0x18>
 800a27a:	9b08      	ldr	r3, [sp, #32]
 800a27c:	6143      	str	r3, [r0, #20]
 800a27e:	2d09      	cmp	r5, #9
 800a280:	f04f 0301 	mov.w	r3, #1
 800a284:	6103      	str	r3, [r0, #16]
 800a286:	dd16      	ble.n	800a2b6 <__s2b+0x72>
 800a288:	f104 0909 	add.w	r9, r4, #9
 800a28c:	46c8      	mov	r8, r9
 800a28e:	442c      	add	r4, r5
 800a290:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a294:	4601      	mov	r1, r0
 800a296:	3b30      	subs	r3, #48	; 0x30
 800a298:	220a      	movs	r2, #10
 800a29a:	4630      	mov	r0, r6
 800a29c:	f7ff ff8c 	bl	800a1b8 <__multadd>
 800a2a0:	45a0      	cmp	r8, r4
 800a2a2:	d1f5      	bne.n	800a290 <__s2b+0x4c>
 800a2a4:	f1a5 0408 	sub.w	r4, r5, #8
 800a2a8:	444c      	add	r4, r9
 800a2aa:	1b2d      	subs	r5, r5, r4
 800a2ac:	1963      	adds	r3, r4, r5
 800a2ae:	42bb      	cmp	r3, r7
 800a2b0:	db04      	blt.n	800a2bc <__s2b+0x78>
 800a2b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2b6:	340a      	adds	r4, #10
 800a2b8:	2509      	movs	r5, #9
 800a2ba:	e7f6      	b.n	800a2aa <__s2b+0x66>
 800a2bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a2c0:	4601      	mov	r1, r0
 800a2c2:	3b30      	subs	r3, #48	; 0x30
 800a2c4:	220a      	movs	r2, #10
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f7ff ff76 	bl	800a1b8 <__multadd>
 800a2cc:	e7ee      	b.n	800a2ac <__s2b+0x68>
 800a2ce:	bf00      	nop
 800a2d0:	0800bde8 	.word	0x0800bde8
 800a2d4:	0800be74 	.word	0x0800be74

0800a2d8 <__hi0bits>:
 800a2d8:	0c03      	lsrs	r3, r0, #16
 800a2da:	041b      	lsls	r3, r3, #16
 800a2dc:	b9d3      	cbnz	r3, 800a314 <__hi0bits+0x3c>
 800a2de:	0400      	lsls	r0, r0, #16
 800a2e0:	2310      	movs	r3, #16
 800a2e2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a2e6:	bf04      	itt	eq
 800a2e8:	0200      	lsleq	r0, r0, #8
 800a2ea:	3308      	addeq	r3, #8
 800a2ec:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a2f0:	bf04      	itt	eq
 800a2f2:	0100      	lsleq	r0, r0, #4
 800a2f4:	3304      	addeq	r3, #4
 800a2f6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a2fa:	bf04      	itt	eq
 800a2fc:	0080      	lsleq	r0, r0, #2
 800a2fe:	3302      	addeq	r3, #2
 800a300:	2800      	cmp	r0, #0
 800a302:	db05      	blt.n	800a310 <__hi0bits+0x38>
 800a304:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a308:	f103 0301 	add.w	r3, r3, #1
 800a30c:	bf08      	it	eq
 800a30e:	2320      	moveq	r3, #32
 800a310:	4618      	mov	r0, r3
 800a312:	4770      	bx	lr
 800a314:	2300      	movs	r3, #0
 800a316:	e7e4      	b.n	800a2e2 <__hi0bits+0xa>

0800a318 <__lo0bits>:
 800a318:	6803      	ldr	r3, [r0, #0]
 800a31a:	f013 0207 	ands.w	r2, r3, #7
 800a31e:	4601      	mov	r1, r0
 800a320:	d00b      	beq.n	800a33a <__lo0bits+0x22>
 800a322:	07da      	lsls	r2, r3, #31
 800a324:	d423      	bmi.n	800a36e <__lo0bits+0x56>
 800a326:	0798      	lsls	r0, r3, #30
 800a328:	bf49      	itett	mi
 800a32a:	085b      	lsrmi	r3, r3, #1
 800a32c:	089b      	lsrpl	r3, r3, #2
 800a32e:	2001      	movmi	r0, #1
 800a330:	600b      	strmi	r3, [r1, #0]
 800a332:	bf5c      	itt	pl
 800a334:	600b      	strpl	r3, [r1, #0]
 800a336:	2002      	movpl	r0, #2
 800a338:	4770      	bx	lr
 800a33a:	b298      	uxth	r0, r3
 800a33c:	b9a8      	cbnz	r0, 800a36a <__lo0bits+0x52>
 800a33e:	0c1b      	lsrs	r3, r3, #16
 800a340:	2010      	movs	r0, #16
 800a342:	b2da      	uxtb	r2, r3
 800a344:	b90a      	cbnz	r2, 800a34a <__lo0bits+0x32>
 800a346:	3008      	adds	r0, #8
 800a348:	0a1b      	lsrs	r3, r3, #8
 800a34a:	071a      	lsls	r2, r3, #28
 800a34c:	bf04      	itt	eq
 800a34e:	091b      	lsreq	r3, r3, #4
 800a350:	3004      	addeq	r0, #4
 800a352:	079a      	lsls	r2, r3, #30
 800a354:	bf04      	itt	eq
 800a356:	089b      	lsreq	r3, r3, #2
 800a358:	3002      	addeq	r0, #2
 800a35a:	07da      	lsls	r2, r3, #31
 800a35c:	d403      	bmi.n	800a366 <__lo0bits+0x4e>
 800a35e:	085b      	lsrs	r3, r3, #1
 800a360:	f100 0001 	add.w	r0, r0, #1
 800a364:	d005      	beq.n	800a372 <__lo0bits+0x5a>
 800a366:	600b      	str	r3, [r1, #0]
 800a368:	4770      	bx	lr
 800a36a:	4610      	mov	r0, r2
 800a36c:	e7e9      	b.n	800a342 <__lo0bits+0x2a>
 800a36e:	2000      	movs	r0, #0
 800a370:	4770      	bx	lr
 800a372:	2020      	movs	r0, #32
 800a374:	4770      	bx	lr
	...

0800a378 <__i2b>:
 800a378:	b510      	push	{r4, lr}
 800a37a:	460c      	mov	r4, r1
 800a37c:	2101      	movs	r1, #1
 800a37e:	f7ff feb9 	bl	800a0f4 <_Balloc>
 800a382:	4602      	mov	r2, r0
 800a384:	b928      	cbnz	r0, 800a392 <__i2b+0x1a>
 800a386:	4b05      	ldr	r3, [pc, #20]	; (800a39c <__i2b+0x24>)
 800a388:	4805      	ldr	r0, [pc, #20]	; (800a3a0 <__i2b+0x28>)
 800a38a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a38e:	f000 fe01 	bl	800af94 <__assert_func>
 800a392:	2301      	movs	r3, #1
 800a394:	6144      	str	r4, [r0, #20]
 800a396:	6103      	str	r3, [r0, #16]
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	bf00      	nop
 800a39c:	0800bde8 	.word	0x0800bde8
 800a3a0:	0800be74 	.word	0x0800be74

0800a3a4 <__multiply>:
 800a3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a8:	4691      	mov	r9, r2
 800a3aa:	690a      	ldr	r2, [r1, #16]
 800a3ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a3b0:	429a      	cmp	r2, r3
 800a3b2:	bfb8      	it	lt
 800a3b4:	460b      	movlt	r3, r1
 800a3b6:	460c      	mov	r4, r1
 800a3b8:	bfbc      	itt	lt
 800a3ba:	464c      	movlt	r4, r9
 800a3bc:	4699      	movlt	r9, r3
 800a3be:	6927      	ldr	r7, [r4, #16]
 800a3c0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a3c4:	68a3      	ldr	r3, [r4, #8]
 800a3c6:	6861      	ldr	r1, [r4, #4]
 800a3c8:	eb07 060a 	add.w	r6, r7, sl
 800a3cc:	42b3      	cmp	r3, r6
 800a3ce:	b085      	sub	sp, #20
 800a3d0:	bfb8      	it	lt
 800a3d2:	3101      	addlt	r1, #1
 800a3d4:	f7ff fe8e 	bl	800a0f4 <_Balloc>
 800a3d8:	b930      	cbnz	r0, 800a3e8 <__multiply+0x44>
 800a3da:	4602      	mov	r2, r0
 800a3dc:	4b44      	ldr	r3, [pc, #272]	; (800a4f0 <__multiply+0x14c>)
 800a3de:	4845      	ldr	r0, [pc, #276]	; (800a4f4 <__multiply+0x150>)
 800a3e0:	f240 115d 	movw	r1, #349	; 0x15d
 800a3e4:	f000 fdd6 	bl	800af94 <__assert_func>
 800a3e8:	f100 0514 	add.w	r5, r0, #20
 800a3ec:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a3f0:	462b      	mov	r3, r5
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	4543      	cmp	r3, r8
 800a3f6:	d321      	bcc.n	800a43c <__multiply+0x98>
 800a3f8:	f104 0314 	add.w	r3, r4, #20
 800a3fc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a400:	f109 0314 	add.w	r3, r9, #20
 800a404:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a408:	9202      	str	r2, [sp, #8]
 800a40a:	1b3a      	subs	r2, r7, r4
 800a40c:	3a15      	subs	r2, #21
 800a40e:	f022 0203 	bic.w	r2, r2, #3
 800a412:	3204      	adds	r2, #4
 800a414:	f104 0115 	add.w	r1, r4, #21
 800a418:	428f      	cmp	r7, r1
 800a41a:	bf38      	it	cc
 800a41c:	2204      	movcc	r2, #4
 800a41e:	9201      	str	r2, [sp, #4]
 800a420:	9a02      	ldr	r2, [sp, #8]
 800a422:	9303      	str	r3, [sp, #12]
 800a424:	429a      	cmp	r2, r3
 800a426:	d80c      	bhi.n	800a442 <__multiply+0x9e>
 800a428:	2e00      	cmp	r6, #0
 800a42a:	dd03      	ble.n	800a434 <__multiply+0x90>
 800a42c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a430:	2b00      	cmp	r3, #0
 800a432:	d05a      	beq.n	800a4ea <__multiply+0x146>
 800a434:	6106      	str	r6, [r0, #16]
 800a436:	b005      	add	sp, #20
 800a438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a43c:	f843 2b04 	str.w	r2, [r3], #4
 800a440:	e7d8      	b.n	800a3f4 <__multiply+0x50>
 800a442:	f8b3 a000 	ldrh.w	sl, [r3]
 800a446:	f1ba 0f00 	cmp.w	sl, #0
 800a44a:	d024      	beq.n	800a496 <__multiply+0xf2>
 800a44c:	f104 0e14 	add.w	lr, r4, #20
 800a450:	46a9      	mov	r9, r5
 800a452:	f04f 0c00 	mov.w	ip, #0
 800a456:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a45a:	f8d9 1000 	ldr.w	r1, [r9]
 800a45e:	fa1f fb82 	uxth.w	fp, r2
 800a462:	b289      	uxth	r1, r1
 800a464:	fb0a 110b 	mla	r1, sl, fp, r1
 800a468:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a46c:	f8d9 2000 	ldr.w	r2, [r9]
 800a470:	4461      	add	r1, ip
 800a472:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a476:	fb0a c20b 	mla	r2, sl, fp, ip
 800a47a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a47e:	b289      	uxth	r1, r1
 800a480:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a484:	4577      	cmp	r7, lr
 800a486:	f849 1b04 	str.w	r1, [r9], #4
 800a48a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a48e:	d8e2      	bhi.n	800a456 <__multiply+0xb2>
 800a490:	9a01      	ldr	r2, [sp, #4]
 800a492:	f845 c002 	str.w	ip, [r5, r2]
 800a496:	9a03      	ldr	r2, [sp, #12]
 800a498:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a49c:	3304      	adds	r3, #4
 800a49e:	f1b9 0f00 	cmp.w	r9, #0
 800a4a2:	d020      	beq.n	800a4e6 <__multiply+0x142>
 800a4a4:	6829      	ldr	r1, [r5, #0]
 800a4a6:	f104 0c14 	add.w	ip, r4, #20
 800a4aa:	46ae      	mov	lr, r5
 800a4ac:	f04f 0a00 	mov.w	sl, #0
 800a4b0:	f8bc b000 	ldrh.w	fp, [ip]
 800a4b4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a4b8:	fb09 220b 	mla	r2, r9, fp, r2
 800a4bc:	4492      	add	sl, r2
 800a4be:	b289      	uxth	r1, r1
 800a4c0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a4c4:	f84e 1b04 	str.w	r1, [lr], #4
 800a4c8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a4cc:	f8be 1000 	ldrh.w	r1, [lr]
 800a4d0:	0c12      	lsrs	r2, r2, #16
 800a4d2:	fb09 1102 	mla	r1, r9, r2, r1
 800a4d6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a4da:	4567      	cmp	r7, ip
 800a4dc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a4e0:	d8e6      	bhi.n	800a4b0 <__multiply+0x10c>
 800a4e2:	9a01      	ldr	r2, [sp, #4]
 800a4e4:	50a9      	str	r1, [r5, r2]
 800a4e6:	3504      	adds	r5, #4
 800a4e8:	e79a      	b.n	800a420 <__multiply+0x7c>
 800a4ea:	3e01      	subs	r6, #1
 800a4ec:	e79c      	b.n	800a428 <__multiply+0x84>
 800a4ee:	bf00      	nop
 800a4f0:	0800bde8 	.word	0x0800bde8
 800a4f4:	0800be74 	.word	0x0800be74

0800a4f8 <__pow5mult>:
 800a4f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4fc:	4615      	mov	r5, r2
 800a4fe:	f012 0203 	ands.w	r2, r2, #3
 800a502:	4606      	mov	r6, r0
 800a504:	460f      	mov	r7, r1
 800a506:	d007      	beq.n	800a518 <__pow5mult+0x20>
 800a508:	4c25      	ldr	r4, [pc, #148]	; (800a5a0 <__pow5mult+0xa8>)
 800a50a:	3a01      	subs	r2, #1
 800a50c:	2300      	movs	r3, #0
 800a50e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a512:	f7ff fe51 	bl	800a1b8 <__multadd>
 800a516:	4607      	mov	r7, r0
 800a518:	10ad      	asrs	r5, r5, #2
 800a51a:	d03d      	beq.n	800a598 <__pow5mult+0xa0>
 800a51c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a51e:	b97c      	cbnz	r4, 800a540 <__pow5mult+0x48>
 800a520:	2010      	movs	r0, #16
 800a522:	f7ff fdbf 	bl	800a0a4 <malloc>
 800a526:	4602      	mov	r2, r0
 800a528:	6270      	str	r0, [r6, #36]	; 0x24
 800a52a:	b928      	cbnz	r0, 800a538 <__pow5mult+0x40>
 800a52c:	4b1d      	ldr	r3, [pc, #116]	; (800a5a4 <__pow5mult+0xac>)
 800a52e:	481e      	ldr	r0, [pc, #120]	; (800a5a8 <__pow5mult+0xb0>)
 800a530:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a534:	f000 fd2e 	bl	800af94 <__assert_func>
 800a538:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a53c:	6004      	str	r4, [r0, #0]
 800a53e:	60c4      	str	r4, [r0, #12]
 800a540:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a544:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a548:	b94c      	cbnz	r4, 800a55e <__pow5mult+0x66>
 800a54a:	f240 2171 	movw	r1, #625	; 0x271
 800a54e:	4630      	mov	r0, r6
 800a550:	f7ff ff12 	bl	800a378 <__i2b>
 800a554:	2300      	movs	r3, #0
 800a556:	f8c8 0008 	str.w	r0, [r8, #8]
 800a55a:	4604      	mov	r4, r0
 800a55c:	6003      	str	r3, [r0, #0]
 800a55e:	f04f 0900 	mov.w	r9, #0
 800a562:	07eb      	lsls	r3, r5, #31
 800a564:	d50a      	bpl.n	800a57c <__pow5mult+0x84>
 800a566:	4639      	mov	r1, r7
 800a568:	4622      	mov	r2, r4
 800a56a:	4630      	mov	r0, r6
 800a56c:	f7ff ff1a 	bl	800a3a4 <__multiply>
 800a570:	4639      	mov	r1, r7
 800a572:	4680      	mov	r8, r0
 800a574:	4630      	mov	r0, r6
 800a576:	f7ff fdfd 	bl	800a174 <_Bfree>
 800a57a:	4647      	mov	r7, r8
 800a57c:	106d      	asrs	r5, r5, #1
 800a57e:	d00b      	beq.n	800a598 <__pow5mult+0xa0>
 800a580:	6820      	ldr	r0, [r4, #0]
 800a582:	b938      	cbnz	r0, 800a594 <__pow5mult+0x9c>
 800a584:	4622      	mov	r2, r4
 800a586:	4621      	mov	r1, r4
 800a588:	4630      	mov	r0, r6
 800a58a:	f7ff ff0b 	bl	800a3a4 <__multiply>
 800a58e:	6020      	str	r0, [r4, #0]
 800a590:	f8c0 9000 	str.w	r9, [r0]
 800a594:	4604      	mov	r4, r0
 800a596:	e7e4      	b.n	800a562 <__pow5mult+0x6a>
 800a598:	4638      	mov	r0, r7
 800a59a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59e:	bf00      	nop
 800a5a0:	0800bfc0 	.word	0x0800bfc0
 800a5a4:	0800bd76 	.word	0x0800bd76
 800a5a8:	0800be74 	.word	0x0800be74

0800a5ac <__lshift>:
 800a5ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5b0:	460c      	mov	r4, r1
 800a5b2:	6849      	ldr	r1, [r1, #4]
 800a5b4:	6923      	ldr	r3, [r4, #16]
 800a5b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a5ba:	68a3      	ldr	r3, [r4, #8]
 800a5bc:	4607      	mov	r7, r0
 800a5be:	4691      	mov	r9, r2
 800a5c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a5c4:	f108 0601 	add.w	r6, r8, #1
 800a5c8:	42b3      	cmp	r3, r6
 800a5ca:	db0b      	blt.n	800a5e4 <__lshift+0x38>
 800a5cc:	4638      	mov	r0, r7
 800a5ce:	f7ff fd91 	bl	800a0f4 <_Balloc>
 800a5d2:	4605      	mov	r5, r0
 800a5d4:	b948      	cbnz	r0, 800a5ea <__lshift+0x3e>
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	4b2a      	ldr	r3, [pc, #168]	; (800a684 <__lshift+0xd8>)
 800a5da:	482b      	ldr	r0, [pc, #172]	; (800a688 <__lshift+0xdc>)
 800a5dc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a5e0:	f000 fcd8 	bl	800af94 <__assert_func>
 800a5e4:	3101      	adds	r1, #1
 800a5e6:	005b      	lsls	r3, r3, #1
 800a5e8:	e7ee      	b.n	800a5c8 <__lshift+0x1c>
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	f100 0114 	add.w	r1, r0, #20
 800a5f0:	f100 0210 	add.w	r2, r0, #16
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	4553      	cmp	r3, sl
 800a5f8:	db37      	blt.n	800a66a <__lshift+0xbe>
 800a5fa:	6920      	ldr	r0, [r4, #16]
 800a5fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a600:	f104 0314 	add.w	r3, r4, #20
 800a604:	f019 091f 	ands.w	r9, r9, #31
 800a608:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a60c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a610:	d02f      	beq.n	800a672 <__lshift+0xc6>
 800a612:	f1c9 0e20 	rsb	lr, r9, #32
 800a616:	468a      	mov	sl, r1
 800a618:	f04f 0c00 	mov.w	ip, #0
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	fa02 f209 	lsl.w	r2, r2, r9
 800a622:	ea42 020c 	orr.w	r2, r2, ip
 800a626:	f84a 2b04 	str.w	r2, [sl], #4
 800a62a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a62e:	4298      	cmp	r0, r3
 800a630:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a634:	d8f2      	bhi.n	800a61c <__lshift+0x70>
 800a636:	1b03      	subs	r3, r0, r4
 800a638:	3b15      	subs	r3, #21
 800a63a:	f023 0303 	bic.w	r3, r3, #3
 800a63e:	3304      	adds	r3, #4
 800a640:	f104 0215 	add.w	r2, r4, #21
 800a644:	4290      	cmp	r0, r2
 800a646:	bf38      	it	cc
 800a648:	2304      	movcc	r3, #4
 800a64a:	f841 c003 	str.w	ip, [r1, r3]
 800a64e:	f1bc 0f00 	cmp.w	ip, #0
 800a652:	d001      	beq.n	800a658 <__lshift+0xac>
 800a654:	f108 0602 	add.w	r6, r8, #2
 800a658:	3e01      	subs	r6, #1
 800a65a:	4638      	mov	r0, r7
 800a65c:	612e      	str	r6, [r5, #16]
 800a65e:	4621      	mov	r1, r4
 800a660:	f7ff fd88 	bl	800a174 <_Bfree>
 800a664:	4628      	mov	r0, r5
 800a666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a66a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a66e:	3301      	adds	r3, #1
 800a670:	e7c1      	b.n	800a5f6 <__lshift+0x4a>
 800a672:	3904      	subs	r1, #4
 800a674:	f853 2b04 	ldr.w	r2, [r3], #4
 800a678:	f841 2f04 	str.w	r2, [r1, #4]!
 800a67c:	4298      	cmp	r0, r3
 800a67e:	d8f9      	bhi.n	800a674 <__lshift+0xc8>
 800a680:	e7ea      	b.n	800a658 <__lshift+0xac>
 800a682:	bf00      	nop
 800a684:	0800bde8 	.word	0x0800bde8
 800a688:	0800be74 	.word	0x0800be74

0800a68c <__mcmp>:
 800a68c:	b530      	push	{r4, r5, lr}
 800a68e:	6902      	ldr	r2, [r0, #16]
 800a690:	690c      	ldr	r4, [r1, #16]
 800a692:	1b12      	subs	r2, r2, r4
 800a694:	d10e      	bne.n	800a6b4 <__mcmp+0x28>
 800a696:	f100 0314 	add.w	r3, r0, #20
 800a69a:	3114      	adds	r1, #20
 800a69c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a6a0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a6a4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a6a8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a6ac:	42a5      	cmp	r5, r4
 800a6ae:	d003      	beq.n	800a6b8 <__mcmp+0x2c>
 800a6b0:	d305      	bcc.n	800a6be <__mcmp+0x32>
 800a6b2:	2201      	movs	r2, #1
 800a6b4:	4610      	mov	r0, r2
 800a6b6:	bd30      	pop	{r4, r5, pc}
 800a6b8:	4283      	cmp	r3, r0
 800a6ba:	d3f3      	bcc.n	800a6a4 <__mcmp+0x18>
 800a6bc:	e7fa      	b.n	800a6b4 <__mcmp+0x28>
 800a6be:	f04f 32ff 	mov.w	r2, #4294967295
 800a6c2:	e7f7      	b.n	800a6b4 <__mcmp+0x28>

0800a6c4 <__mdiff>:
 800a6c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6c8:	460c      	mov	r4, r1
 800a6ca:	4606      	mov	r6, r0
 800a6cc:	4611      	mov	r1, r2
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	4690      	mov	r8, r2
 800a6d2:	f7ff ffdb 	bl	800a68c <__mcmp>
 800a6d6:	1e05      	subs	r5, r0, #0
 800a6d8:	d110      	bne.n	800a6fc <__mdiff+0x38>
 800a6da:	4629      	mov	r1, r5
 800a6dc:	4630      	mov	r0, r6
 800a6de:	f7ff fd09 	bl	800a0f4 <_Balloc>
 800a6e2:	b930      	cbnz	r0, 800a6f2 <__mdiff+0x2e>
 800a6e4:	4b3a      	ldr	r3, [pc, #232]	; (800a7d0 <__mdiff+0x10c>)
 800a6e6:	4602      	mov	r2, r0
 800a6e8:	f240 2132 	movw	r1, #562	; 0x232
 800a6ec:	4839      	ldr	r0, [pc, #228]	; (800a7d4 <__mdiff+0x110>)
 800a6ee:	f000 fc51 	bl	800af94 <__assert_func>
 800a6f2:	2301      	movs	r3, #1
 800a6f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a6f8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fc:	bfa4      	itt	ge
 800a6fe:	4643      	movge	r3, r8
 800a700:	46a0      	movge	r8, r4
 800a702:	4630      	mov	r0, r6
 800a704:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a708:	bfa6      	itte	ge
 800a70a:	461c      	movge	r4, r3
 800a70c:	2500      	movge	r5, #0
 800a70e:	2501      	movlt	r5, #1
 800a710:	f7ff fcf0 	bl	800a0f4 <_Balloc>
 800a714:	b920      	cbnz	r0, 800a720 <__mdiff+0x5c>
 800a716:	4b2e      	ldr	r3, [pc, #184]	; (800a7d0 <__mdiff+0x10c>)
 800a718:	4602      	mov	r2, r0
 800a71a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a71e:	e7e5      	b.n	800a6ec <__mdiff+0x28>
 800a720:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a724:	6926      	ldr	r6, [r4, #16]
 800a726:	60c5      	str	r5, [r0, #12]
 800a728:	f104 0914 	add.w	r9, r4, #20
 800a72c:	f108 0514 	add.w	r5, r8, #20
 800a730:	f100 0e14 	add.w	lr, r0, #20
 800a734:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a738:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a73c:	f108 0210 	add.w	r2, r8, #16
 800a740:	46f2      	mov	sl, lr
 800a742:	2100      	movs	r1, #0
 800a744:	f859 3b04 	ldr.w	r3, [r9], #4
 800a748:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a74c:	fa1f f883 	uxth.w	r8, r3
 800a750:	fa11 f18b 	uxtah	r1, r1, fp
 800a754:	0c1b      	lsrs	r3, r3, #16
 800a756:	eba1 0808 	sub.w	r8, r1, r8
 800a75a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a75e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a762:	fa1f f888 	uxth.w	r8, r8
 800a766:	1419      	asrs	r1, r3, #16
 800a768:	454e      	cmp	r6, r9
 800a76a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a76e:	f84a 3b04 	str.w	r3, [sl], #4
 800a772:	d8e7      	bhi.n	800a744 <__mdiff+0x80>
 800a774:	1b33      	subs	r3, r6, r4
 800a776:	3b15      	subs	r3, #21
 800a778:	f023 0303 	bic.w	r3, r3, #3
 800a77c:	3304      	adds	r3, #4
 800a77e:	3415      	adds	r4, #21
 800a780:	42a6      	cmp	r6, r4
 800a782:	bf38      	it	cc
 800a784:	2304      	movcc	r3, #4
 800a786:	441d      	add	r5, r3
 800a788:	4473      	add	r3, lr
 800a78a:	469e      	mov	lr, r3
 800a78c:	462e      	mov	r6, r5
 800a78e:	4566      	cmp	r6, ip
 800a790:	d30e      	bcc.n	800a7b0 <__mdiff+0xec>
 800a792:	f10c 0203 	add.w	r2, ip, #3
 800a796:	1b52      	subs	r2, r2, r5
 800a798:	f022 0203 	bic.w	r2, r2, #3
 800a79c:	3d03      	subs	r5, #3
 800a79e:	45ac      	cmp	ip, r5
 800a7a0:	bf38      	it	cc
 800a7a2:	2200      	movcc	r2, #0
 800a7a4:	441a      	add	r2, r3
 800a7a6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a7aa:	b17b      	cbz	r3, 800a7cc <__mdiff+0x108>
 800a7ac:	6107      	str	r7, [r0, #16]
 800a7ae:	e7a3      	b.n	800a6f8 <__mdiff+0x34>
 800a7b0:	f856 8b04 	ldr.w	r8, [r6], #4
 800a7b4:	fa11 f288 	uxtah	r2, r1, r8
 800a7b8:	1414      	asrs	r4, r2, #16
 800a7ba:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a7be:	b292      	uxth	r2, r2
 800a7c0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a7c4:	f84e 2b04 	str.w	r2, [lr], #4
 800a7c8:	1421      	asrs	r1, r4, #16
 800a7ca:	e7e0      	b.n	800a78e <__mdiff+0xca>
 800a7cc:	3f01      	subs	r7, #1
 800a7ce:	e7ea      	b.n	800a7a6 <__mdiff+0xe2>
 800a7d0:	0800bde8 	.word	0x0800bde8
 800a7d4:	0800be74 	.word	0x0800be74

0800a7d8 <__ulp>:
 800a7d8:	b082      	sub	sp, #8
 800a7da:	ed8d 0b00 	vstr	d0, [sp]
 800a7de:	9b01      	ldr	r3, [sp, #4]
 800a7e0:	4912      	ldr	r1, [pc, #72]	; (800a82c <__ulp+0x54>)
 800a7e2:	4019      	ands	r1, r3
 800a7e4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a7e8:	2900      	cmp	r1, #0
 800a7ea:	dd05      	ble.n	800a7f8 <__ulp+0x20>
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	460b      	mov	r3, r1
 800a7f0:	ec43 2b10 	vmov	d0, r2, r3
 800a7f4:	b002      	add	sp, #8
 800a7f6:	4770      	bx	lr
 800a7f8:	4249      	negs	r1, r1
 800a7fa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a7fe:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a802:	f04f 0200 	mov.w	r2, #0
 800a806:	f04f 0300 	mov.w	r3, #0
 800a80a:	da04      	bge.n	800a816 <__ulp+0x3e>
 800a80c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a810:	fa41 f300 	asr.w	r3, r1, r0
 800a814:	e7ec      	b.n	800a7f0 <__ulp+0x18>
 800a816:	f1a0 0114 	sub.w	r1, r0, #20
 800a81a:	291e      	cmp	r1, #30
 800a81c:	bfda      	itte	le
 800a81e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a822:	fa20 f101 	lsrle.w	r1, r0, r1
 800a826:	2101      	movgt	r1, #1
 800a828:	460a      	mov	r2, r1
 800a82a:	e7e1      	b.n	800a7f0 <__ulp+0x18>
 800a82c:	7ff00000 	.word	0x7ff00000

0800a830 <__b2d>:
 800a830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a832:	6905      	ldr	r5, [r0, #16]
 800a834:	f100 0714 	add.w	r7, r0, #20
 800a838:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a83c:	1f2e      	subs	r6, r5, #4
 800a83e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a842:	4620      	mov	r0, r4
 800a844:	f7ff fd48 	bl	800a2d8 <__hi0bits>
 800a848:	f1c0 0320 	rsb	r3, r0, #32
 800a84c:	280a      	cmp	r0, #10
 800a84e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a8cc <__b2d+0x9c>
 800a852:	600b      	str	r3, [r1, #0]
 800a854:	dc14      	bgt.n	800a880 <__b2d+0x50>
 800a856:	f1c0 0e0b 	rsb	lr, r0, #11
 800a85a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a85e:	42b7      	cmp	r7, r6
 800a860:	ea41 030c 	orr.w	r3, r1, ip
 800a864:	bf34      	ite	cc
 800a866:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a86a:	2100      	movcs	r1, #0
 800a86c:	3015      	adds	r0, #21
 800a86e:	fa04 f000 	lsl.w	r0, r4, r0
 800a872:	fa21 f10e 	lsr.w	r1, r1, lr
 800a876:	ea40 0201 	orr.w	r2, r0, r1
 800a87a:	ec43 2b10 	vmov	d0, r2, r3
 800a87e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a880:	42b7      	cmp	r7, r6
 800a882:	bf3a      	itte	cc
 800a884:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a888:	f1a5 0608 	subcc.w	r6, r5, #8
 800a88c:	2100      	movcs	r1, #0
 800a88e:	380b      	subs	r0, #11
 800a890:	d017      	beq.n	800a8c2 <__b2d+0x92>
 800a892:	f1c0 0c20 	rsb	ip, r0, #32
 800a896:	fa04 f500 	lsl.w	r5, r4, r0
 800a89a:	42be      	cmp	r6, r7
 800a89c:	fa21 f40c 	lsr.w	r4, r1, ip
 800a8a0:	ea45 0504 	orr.w	r5, r5, r4
 800a8a4:	bf8c      	ite	hi
 800a8a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a8aa:	2400      	movls	r4, #0
 800a8ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a8b0:	fa01 f000 	lsl.w	r0, r1, r0
 800a8b4:	fa24 f40c 	lsr.w	r4, r4, ip
 800a8b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a8bc:	ea40 0204 	orr.w	r2, r0, r4
 800a8c0:	e7db      	b.n	800a87a <__b2d+0x4a>
 800a8c2:	ea44 030c 	orr.w	r3, r4, ip
 800a8c6:	460a      	mov	r2, r1
 800a8c8:	e7d7      	b.n	800a87a <__b2d+0x4a>
 800a8ca:	bf00      	nop
 800a8cc:	3ff00000 	.word	0x3ff00000

0800a8d0 <__d2b>:
 800a8d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a8d4:	4689      	mov	r9, r1
 800a8d6:	2101      	movs	r1, #1
 800a8d8:	ec57 6b10 	vmov	r6, r7, d0
 800a8dc:	4690      	mov	r8, r2
 800a8de:	f7ff fc09 	bl	800a0f4 <_Balloc>
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	b930      	cbnz	r0, 800a8f4 <__d2b+0x24>
 800a8e6:	4602      	mov	r2, r0
 800a8e8:	4b25      	ldr	r3, [pc, #148]	; (800a980 <__d2b+0xb0>)
 800a8ea:	4826      	ldr	r0, [pc, #152]	; (800a984 <__d2b+0xb4>)
 800a8ec:	f240 310a 	movw	r1, #778	; 0x30a
 800a8f0:	f000 fb50 	bl	800af94 <__assert_func>
 800a8f4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a8f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a8fc:	bb35      	cbnz	r5, 800a94c <__d2b+0x7c>
 800a8fe:	2e00      	cmp	r6, #0
 800a900:	9301      	str	r3, [sp, #4]
 800a902:	d028      	beq.n	800a956 <__d2b+0x86>
 800a904:	4668      	mov	r0, sp
 800a906:	9600      	str	r6, [sp, #0]
 800a908:	f7ff fd06 	bl	800a318 <__lo0bits>
 800a90c:	9900      	ldr	r1, [sp, #0]
 800a90e:	b300      	cbz	r0, 800a952 <__d2b+0x82>
 800a910:	9a01      	ldr	r2, [sp, #4]
 800a912:	f1c0 0320 	rsb	r3, r0, #32
 800a916:	fa02 f303 	lsl.w	r3, r2, r3
 800a91a:	430b      	orrs	r3, r1
 800a91c:	40c2      	lsrs	r2, r0
 800a91e:	6163      	str	r3, [r4, #20]
 800a920:	9201      	str	r2, [sp, #4]
 800a922:	9b01      	ldr	r3, [sp, #4]
 800a924:	61a3      	str	r3, [r4, #24]
 800a926:	2b00      	cmp	r3, #0
 800a928:	bf14      	ite	ne
 800a92a:	2202      	movne	r2, #2
 800a92c:	2201      	moveq	r2, #1
 800a92e:	6122      	str	r2, [r4, #16]
 800a930:	b1d5      	cbz	r5, 800a968 <__d2b+0x98>
 800a932:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a936:	4405      	add	r5, r0
 800a938:	f8c9 5000 	str.w	r5, [r9]
 800a93c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a940:	f8c8 0000 	str.w	r0, [r8]
 800a944:	4620      	mov	r0, r4
 800a946:	b003      	add	sp, #12
 800a948:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a94c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a950:	e7d5      	b.n	800a8fe <__d2b+0x2e>
 800a952:	6161      	str	r1, [r4, #20]
 800a954:	e7e5      	b.n	800a922 <__d2b+0x52>
 800a956:	a801      	add	r0, sp, #4
 800a958:	f7ff fcde 	bl	800a318 <__lo0bits>
 800a95c:	9b01      	ldr	r3, [sp, #4]
 800a95e:	6163      	str	r3, [r4, #20]
 800a960:	2201      	movs	r2, #1
 800a962:	6122      	str	r2, [r4, #16]
 800a964:	3020      	adds	r0, #32
 800a966:	e7e3      	b.n	800a930 <__d2b+0x60>
 800a968:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a96c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a970:	f8c9 0000 	str.w	r0, [r9]
 800a974:	6918      	ldr	r0, [r3, #16]
 800a976:	f7ff fcaf 	bl	800a2d8 <__hi0bits>
 800a97a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a97e:	e7df      	b.n	800a940 <__d2b+0x70>
 800a980:	0800bde8 	.word	0x0800bde8
 800a984:	0800be74 	.word	0x0800be74

0800a988 <__ratio>:
 800a988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	4688      	mov	r8, r1
 800a98e:	4669      	mov	r1, sp
 800a990:	4681      	mov	r9, r0
 800a992:	f7ff ff4d 	bl	800a830 <__b2d>
 800a996:	a901      	add	r1, sp, #4
 800a998:	4640      	mov	r0, r8
 800a99a:	ec55 4b10 	vmov	r4, r5, d0
 800a99e:	f7ff ff47 	bl	800a830 <__b2d>
 800a9a2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a9a6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a9aa:	eba3 0c02 	sub.w	ip, r3, r2
 800a9ae:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a9b2:	1a9b      	subs	r3, r3, r2
 800a9b4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a9b8:	ec51 0b10 	vmov	r0, r1, d0
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	bfd6      	itet	le
 800a9c0:	460a      	movle	r2, r1
 800a9c2:	462a      	movgt	r2, r5
 800a9c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a9c8:	468b      	mov	fp, r1
 800a9ca:	462f      	mov	r7, r5
 800a9cc:	bfd4      	ite	le
 800a9ce:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a9d2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	ee10 2a10 	vmov	r2, s0
 800a9dc:	465b      	mov	r3, fp
 800a9de:	4639      	mov	r1, r7
 800a9e0:	f7f5 ff34 	bl	800084c <__aeabi_ddiv>
 800a9e4:	ec41 0b10 	vmov	d0, r0, r1
 800a9e8:	b003      	add	sp, #12
 800a9ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a9ee <__copybits>:
 800a9ee:	3901      	subs	r1, #1
 800a9f0:	b570      	push	{r4, r5, r6, lr}
 800a9f2:	1149      	asrs	r1, r1, #5
 800a9f4:	6914      	ldr	r4, [r2, #16]
 800a9f6:	3101      	adds	r1, #1
 800a9f8:	f102 0314 	add.w	r3, r2, #20
 800a9fc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aa00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aa04:	1f05      	subs	r5, r0, #4
 800aa06:	42a3      	cmp	r3, r4
 800aa08:	d30c      	bcc.n	800aa24 <__copybits+0x36>
 800aa0a:	1aa3      	subs	r3, r4, r2
 800aa0c:	3b11      	subs	r3, #17
 800aa0e:	f023 0303 	bic.w	r3, r3, #3
 800aa12:	3211      	adds	r2, #17
 800aa14:	42a2      	cmp	r2, r4
 800aa16:	bf88      	it	hi
 800aa18:	2300      	movhi	r3, #0
 800aa1a:	4418      	add	r0, r3
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4288      	cmp	r0, r1
 800aa20:	d305      	bcc.n	800aa2e <__copybits+0x40>
 800aa22:	bd70      	pop	{r4, r5, r6, pc}
 800aa24:	f853 6b04 	ldr.w	r6, [r3], #4
 800aa28:	f845 6f04 	str.w	r6, [r5, #4]!
 800aa2c:	e7eb      	b.n	800aa06 <__copybits+0x18>
 800aa2e:	f840 3b04 	str.w	r3, [r0], #4
 800aa32:	e7f4      	b.n	800aa1e <__copybits+0x30>

0800aa34 <__any_on>:
 800aa34:	f100 0214 	add.w	r2, r0, #20
 800aa38:	6900      	ldr	r0, [r0, #16]
 800aa3a:	114b      	asrs	r3, r1, #5
 800aa3c:	4298      	cmp	r0, r3
 800aa3e:	b510      	push	{r4, lr}
 800aa40:	db11      	blt.n	800aa66 <__any_on+0x32>
 800aa42:	dd0a      	ble.n	800aa5a <__any_on+0x26>
 800aa44:	f011 011f 	ands.w	r1, r1, #31
 800aa48:	d007      	beq.n	800aa5a <__any_on+0x26>
 800aa4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800aa4e:	fa24 f001 	lsr.w	r0, r4, r1
 800aa52:	fa00 f101 	lsl.w	r1, r0, r1
 800aa56:	428c      	cmp	r4, r1
 800aa58:	d10b      	bne.n	800aa72 <__any_on+0x3e>
 800aa5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aa5e:	4293      	cmp	r3, r2
 800aa60:	d803      	bhi.n	800aa6a <__any_on+0x36>
 800aa62:	2000      	movs	r0, #0
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	4603      	mov	r3, r0
 800aa68:	e7f7      	b.n	800aa5a <__any_on+0x26>
 800aa6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa6e:	2900      	cmp	r1, #0
 800aa70:	d0f5      	beq.n	800aa5e <__any_on+0x2a>
 800aa72:	2001      	movs	r0, #1
 800aa74:	e7f6      	b.n	800aa64 <__any_on+0x30>

0800aa76 <_calloc_r>:
 800aa76:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aa78:	fba1 2402 	umull	r2, r4, r1, r2
 800aa7c:	b94c      	cbnz	r4, 800aa92 <_calloc_r+0x1c>
 800aa7e:	4611      	mov	r1, r2
 800aa80:	9201      	str	r2, [sp, #4]
 800aa82:	f000 f87b 	bl	800ab7c <_malloc_r>
 800aa86:	9a01      	ldr	r2, [sp, #4]
 800aa88:	4605      	mov	r5, r0
 800aa8a:	b930      	cbnz	r0, 800aa9a <_calloc_r+0x24>
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	b003      	add	sp, #12
 800aa90:	bd30      	pop	{r4, r5, pc}
 800aa92:	220c      	movs	r2, #12
 800aa94:	6002      	str	r2, [r0, #0]
 800aa96:	2500      	movs	r5, #0
 800aa98:	e7f8      	b.n	800aa8c <_calloc_r+0x16>
 800aa9a:	4621      	mov	r1, r4
 800aa9c:	f7fc fbc0 	bl	8007220 <memset>
 800aaa0:	e7f4      	b.n	800aa8c <_calloc_r+0x16>
	...

0800aaa4 <_free_r>:
 800aaa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaa6:	2900      	cmp	r1, #0
 800aaa8:	d044      	beq.n	800ab34 <_free_r+0x90>
 800aaaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaae:	9001      	str	r0, [sp, #4]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	f1a1 0404 	sub.w	r4, r1, #4
 800aab6:	bfb8      	it	lt
 800aab8:	18e4      	addlt	r4, r4, r3
 800aaba:	f000 fab5 	bl	800b028 <__malloc_lock>
 800aabe:	4a1e      	ldr	r2, [pc, #120]	; (800ab38 <_free_r+0x94>)
 800aac0:	9801      	ldr	r0, [sp, #4]
 800aac2:	6813      	ldr	r3, [r2, #0]
 800aac4:	b933      	cbnz	r3, 800aad4 <_free_r+0x30>
 800aac6:	6063      	str	r3, [r4, #4]
 800aac8:	6014      	str	r4, [r2, #0]
 800aaca:	b003      	add	sp, #12
 800aacc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800aad0:	f000 bab0 	b.w	800b034 <__malloc_unlock>
 800aad4:	42a3      	cmp	r3, r4
 800aad6:	d908      	bls.n	800aaea <_free_r+0x46>
 800aad8:	6825      	ldr	r5, [r4, #0]
 800aada:	1961      	adds	r1, r4, r5
 800aadc:	428b      	cmp	r3, r1
 800aade:	bf01      	itttt	eq
 800aae0:	6819      	ldreq	r1, [r3, #0]
 800aae2:	685b      	ldreq	r3, [r3, #4]
 800aae4:	1949      	addeq	r1, r1, r5
 800aae6:	6021      	streq	r1, [r4, #0]
 800aae8:	e7ed      	b.n	800aac6 <_free_r+0x22>
 800aaea:	461a      	mov	r2, r3
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	b10b      	cbz	r3, 800aaf4 <_free_r+0x50>
 800aaf0:	42a3      	cmp	r3, r4
 800aaf2:	d9fa      	bls.n	800aaea <_free_r+0x46>
 800aaf4:	6811      	ldr	r1, [r2, #0]
 800aaf6:	1855      	adds	r5, r2, r1
 800aaf8:	42a5      	cmp	r5, r4
 800aafa:	d10b      	bne.n	800ab14 <_free_r+0x70>
 800aafc:	6824      	ldr	r4, [r4, #0]
 800aafe:	4421      	add	r1, r4
 800ab00:	1854      	adds	r4, r2, r1
 800ab02:	42a3      	cmp	r3, r4
 800ab04:	6011      	str	r1, [r2, #0]
 800ab06:	d1e0      	bne.n	800aaca <_free_r+0x26>
 800ab08:	681c      	ldr	r4, [r3, #0]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	6053      	str	r3, [r2, #4]
 800ab0e:	4421      	add	r1, r4
 800ab10:	6011      	str	r1, [r2, #0]
 800ab12:	e7da      	b.n	800aaca <_free_r+0x26>
 800ab14:	d902      	bls.n	800ab1c <_free_r+0x78>
 800ab16:	230c      	movs	r3, #12
 800ab18:	6003      	str	r3, [r0, #0]
 800ab1a:	e7d6      	b.n	800aaca <_free_r+0x26>
 800ab1c:	6825      	ldr	r5, [r4, #0]
 800ab1e:	1961      	adds	r1, r4, r5
 800ab20:	428b      	cmp	r3, r1
 800ab22:	bf04      	itt	eq
 800ab24:	6819      	ldreq	r1, [r3, #0]
 800ab26:	685b      	ldreq	r3, [r3, #4]
 800ab28:	6063      	str	r3, [r4, #4]
 800ab2a:	bf04      	itt	eq
 800ab2c:	1949      	addeq	r1, r1, r5
 800ab2e:	6021      	streq	r1, [r4, #0]
 800ab30:	6054      	str	r4, [r2, #4]
 800ab32:	e7ca      	b.n	800aaca <_free_r+0x26>
 800ab34:	b003      	add	sp, #12
 800ab36:	bd30      	pop	{r4, r5, pc}
 800ab38:	200007a8 	.word	0x200007a8

0800ab3c <sbrk_aligned>:
 800ab3c:	b570      	push	{r4, r5, r6, lr}
 800ab3e:	4e0e      	ldr	r6, [pc, #56]	; (800ab78 <sbrk_aligned+0x3c>)
 800ab40:	460c      	mov	r4, r1
 800ab42:	6831      	ldr	r1, [r6, #0]
 800ab44:	4605      	mov	r5, r0
 800ab46:	b911      	cbnz	r1, 800ab4e <sbrk_aligned+0x12>
 800ab48:	f000 f9f2 	bl	800af30 <_sbrk_r>
 800ab4c:	6030      	str	r0, [r6, #0]
 800ab4e:	4621      	mov	r1, r4
 800ab50:	4628      	mov	r0, r5
 800ab52:	f000 f9ed 	bl	800af30 <_sbrk_r>
 800ab56:	1c43      	adds	r3, r0, #1
 800ab58:	d00a      	beq.n	800ab70 <sbrk_aligned+0x34>
 800ab5a:	1cc4      	adds	r4, r0, #3
 800ab5c:	f024 0403 	bic.w	r4, r4, #3
 800ab60:	42a0      	cmp	r0, r4
 800ab62:	d007      	beq.n	800ab74 <sbrk_aligned+0x38>
 800ab64:	1a21      	subs	r1, r4, r0
 800ab66:	4628      	mov	r0, r5
 800ab68:	f000 f9e2 	bl	800af30 <_sbrk_r>
 800ab6c:	3001      	adds	r0, #1
 800ab6e:	d101      	bne.n	800ab74 <sbrk_aligned+0x38>
 800ab70:	f04f 34ff 	mov.w	r4, #4294967295
 800ab74:	4620      	mov	r0, r4
 800ab76:	bd70      	pop	{r4, r5, r6, pc}
 800ab78:	200007ac 	.word	0x200007ac

0800ab7c <_malloc_r>:
 800ab7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab80:	1ccd      	adds	r5, r1, #3
 800ab82:	f025 0503 	bic.w	r5, r5, #3
 800ab86:	3508      	adds	r5, #8
 800ab88:	2d0c      	cmp	r5, #12
 800ab8a:	bf38      	it	cc
 800ab8c:	250c      	movcc	r5, #12
 800ab8e:	2d00      	cmp	r5, #0
 800ab90:	4607      	mov	r7, r0
 800ab92:	db01      	blt.n	800ab98 <_malloc_r+0x1c>
 800ab94:	42a9      	cmp	r1, r5
 800ab96:	d905      	bls.n	800aba4 <_malloc_r+0x28>
 800ab98:	230c      	movs	r3, #12
 800ab9a:	603b      	str	r3, [r7, #0]
 800ab9c:	2600      	movs	r6, #0
 800ab9e:	4630      	mov	r0, r6
 800aba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aba4:	4e2e      	ldr	r6, [pc, #184]	; (800ac60 <_malloc_r+0xe4>)
 800aba6:	f000 fa3f 	bl	800b028 <__malloc_lock>
 800abaa:	6833      	ldr	r3, [r6, #0]
 800abac:	461c      	mov	r4, r3
 800abae:	bb34      	cbnz	r4, 800abfe <_malloc_r+0x82>
 800abb0:	4629      	mov	r1, r5
 800abb2:	4638      	mov	r0, r7
 800abb4:	f7ff ffc2 	bl	800ab3c <sbrk_aligned>
 800abb8:	1c43      	adds	r3, r0, #1
 800abba:	4604      	mov	r4, r0
 800abbc:	d14d      	bne.n	800ac5a <_malloc_r+0xde>
 800abbe:	6834      	ldr	r4, [r6, #0]
 800abc0:	4626      	mov	r6, r4
 800abc2:	2e00      	cmp	r6, #0
 800abc4:	d140      	bne.n	800ac48 <_malloc_r+0xcc>
 800abc6:	6823      	ldr	r3, [r4, #0]
 800abc8:	4631      	mov	r1, r6
 800abca:	4638      	mov	r0, r7
 800abcc:	eb04 0803 	add.w	r8, r4, r3
 800abd0:	f000 f9ae 	bl	800af30 <_sbrk_r>
 800abd4:	4580      	cmp	r8, r0
 800abd6:	d13a      	bne.n	800ac4e <_malloc_r+0xd2>
 800abd8:	6821      	ldr	r1, [r4, #0]
 800abda:	3503      	adds	r5, #3
 800abdc:	1a6d      	subs	r5, r5, r1
 800abde:	f025 0503 	bic.w	r5, r5, #3
 800abe2:	3508      	adds	r5, #8
 800abe4:	2d0c      	cmp	r5, #12
 800abe6:	bf38      	it	cc
 800abe8:	250c      	movcc	r5, #12
 800abea:	4629      	mov	r1, r5
 800abec:	4638      	mov	r0, r7
 800abee:	f7ff ffa5 	bl	800ab3c <sbrk_aligned>
 800abf2:	3001      	adds	r0, #1
 800abf4:	d02b      	beq.n	800ac4e <_malloc_r+0xd2>
 800abf6:	6823      	ldr	r3, [r4, #0]
 800abf8:	442b      	add	r3, r5
 800abfa:	6023      	str	r3, [r4, #0]
 800abfc:	e00e      	b.n	800ac1c <_malloc_r+0xa0>
 800abfe:	6822      	ldr	r2, [r4, #0]
 800ac00:	1b52      	subs	r2, r2, r5
 800ac02:	d41e      	bmi.n	800ac42 <_malloc_r+0xc6>
 800ac04:	2a0b      	cmp	r2, #11
 800ac06:	d916      	bls.n	800ac36 <_malloc_r+0xba>
 800ac08:	1961      	adds	r1, r4, r5
 800ac0a:	42a3      	cmp	r3, r4
 800ac0c:	6025      	str	r5, [r4, #0]
 800ac0e:	bf18      	it	ne
 800ac10:	6059      	strne	r1, [r3, #4]
 800ac12:	6863      	ldr	r3, [r4, #4]
 800ac14:	bf08      	it	eq
 800ac16:	6031      	streq	r1, [r6, #0]
 800ac18:	5162      	str	r2, [r4, r5]
 800ac1a:	604b      	str	r3, [r1, #4]
 800ac1c:	4638      	mov	r0, r7
 800ac1e:	f104 060b 	add.w	r6, r4, #11
 800ac22:	f000 fa07 	bl	800b034 <__malloc_unlock>
 800ac26:	f026 0607 	bic.w	r6, r6, #7
 800ac2a:	1d23      	adds	r3, r4, #4
 800ac2c:	1af2      	subs	r2, r6, r3
 800ac2e:	d0b6      	beq.n	800ab9e <_malloc_r+0x22>
 800ac30:	1b9b      	subs	r3, r3, r6
 800ac32:	50a3      	str	r3, [r4, r2]
 800ac34:	e7b3      	b.n	800ab9e <_malloc_r+0x22>
 800ac36:	6862      	ldr	r2, [r4, #4]
 800ac38:	42a3      	cmp	r3, r4
 800ac3a:	bf0c      	ite	eq
 800ac3c:	6032      	streq	r2, [r6, #0]
 800ac3e:	605a      	strne	r2, [r3, #4]
 800ac40:	e7ec      	b.n	800ac1c <_malloc_r+0xa0>
 800ac42:	4623      	mov	r3, r4
 800ac44:	6864      	ldr	r4, [r4, #4]
 800ac46:	e7b2      	b.n	800abae <_malloc_r+0x32>
 800ac48:	4634      	mov	r4, r6
 800ac4a:	6876      	ldr	r6, [r6, #4]
 800ac4c:	e7b9      	b.n	800abc2 <_malloc_r+0x46>
 800ac4e:	230c      	movs	r3, #12
 800ac50:	603b      	str	r3, [r7, #0]
 800ac52:	4638      	mov	r0, r7
 800ac54:	f000 f9ee 	bl	800b034 <__malloc_unlock>
 800ac58:	e7a1      	b.n	800ab9e <_malloc_r+0x22>
 800ac5a:	6025      	str	r5, [r4, #0]
 800ac5c:	e7de      	b.n	800ac1c <_malloc_r+0xa0>
 800ac5e:	bf00      	nop
 800ac60:	200007a8 	.word	0x200007a8

0800ac64 <__ssputs_r>:
 800ac64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac68:	688e      	ldr	r6, [r1, #8]
 800ac6a:	429e      	cmp	r6, r3
 800ac6c:	4682      	mov	sl, r0
 800ac6e:	460c      	mov	r4, r1
 800ac70:	4690      	mov	r8, r2
 800ac72:	461f      	mov	r7, r3
 800ac74:	d838      	bhi.n	800ace8 <__ssputs_r+0x84>
 800ac76:	898a      	ldrh	r2, [r1, #12]
 800ac78:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ac7c:	d032      	beq.n	800ace4 <__ssputs_r+0x80>
 800ac7e:	6825      	ldr	r5, [r4, #0]
 800ac80:	6909      	ldr	r1, [r1, #16]
 800ac82:	eba5 0901 	sub.w	r9, r5, r1
 800ac86:	6965      	ldr	r5, [r4, #20]
 800ac88:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ac8c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ac90:	3301      	adds	r3, #1
 800ac92:	444b      	add	r3, r9
 800ac94:	106d      	asrs	r5, r5, #1
 800ac96:	429d      	cmp	r5, r3
 800ac98:	bf38      	it	cc
 800ac9a:	461d      	movcc	r5, r3
 800ac9c:	0553      	lsls	r3, r2, #21
 800ac9e:	d531      	bpl.n	800ad04 <__ssputs_r+0xa0>
 800aca0:	4629      	mov	r1, r5
 800aca2:	f7ff ff6b 	bl	800ab7c <_malloc_r>
 800aca6:	4606      	mov	r6, r0
 800aca8:	b950      	cbnz	r0, 800acc0 <__ssputs_r+0x5c>
 800acaa:	230c      	movs	r3, #12
 800acac:	f8ca 3000 	str.w	r3, [sl]
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acb6:	81a3      	strh	r3, [r4, #12]
 800acb8:	f04f 30ff 	mov.w	r0, #4294967295
 800acbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acc0:	6921      	ldr	r1, [r4, #16]
 800acc2:	464a      	mov	r2, r9
 800acc4:	f7ff fa08 	bl	800a0d8 <memcpy>
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	6126      	str	r6, [r4, #16]
 800acd6:	6165      	str	r5, [r4, #20]
 800acd8:	444e      	add	r6, r9
 800acda:	eba5 0509 	sub.w	r5, r5, r9
 800acde:	6026      	str	r6, [r4, #0]
 800ace0:	60a5      	str	r5, [r4, #8]
 800ace2:	463e      	mov	r6, r7
 800ace4:	42be      	cmp	r6, r7
 800ace6:	d900      	bls.n	800acea <__ssputs_r+0x86>
 800ace8:	463e      	mov	r6, r7
 800acea:	6820      	ldr	r0, [r4, #0]
 800acec:	4632      	mov	r2, r6
 800acee:	4641      	mov	r1, r8
 800acf0:	f000 f980 	bl	800aff4 <memmove>
 800acf4:	68a3      	ldr	r3, [r4, #8]
 800acf6:	1b9b      	subs	r3, r3, r6
 800acf8:	60a3      	str	r3, [r4, #8]
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	4433      	add	r3, r6
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	2000      	movs	r0, #0
 800ad02:	e7db      	b.n	800acbc <__ssputs_r+0x58>
 800ad04:	462a      	mov	r2, r5
 800ad06:	f000 f99b 	bl	800b040 <_realloc_r>
 800ad0a:	4606      	mov	r6, r0
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	d1e1      	bne.n	800acd4 <__ssputs_r+0x70>
 800ad10:	6921      	ldr	r1, [r4, #16]
 800ad12:	4650      	mov	r0, sl
 800ad14:	f7ff fec6 	bl	800aaa4 <_free_r>
 800ad18:	e7c7      	b.n	800acaa <__ssputs_r+0x46>
	...

0800ad1c <_svfiprintf_r>:
 800ad1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad20:	4698      	mov	r8, r3
 800ad22:	898b      	ldrh	r3, [r1, #12]
 800ad24:	061b      	lsls	r3, r3, #24
 800ad26:	b09d      	sub	sp, #116	; 0x74
 800ad28:	4607      	mov	r7, r0
 800ad2a:	460d      	mov	r5, r1
 800ad2c:	4614      	mov	r4, r2
 800ad2e:	d50e      	bpl.n	800ad4e <_svfiprintf_r+0x32>
 800ad30:	690b      	ldr	r3, [r1, #16]
 800ad32:	b963      	cbnz	r3, 800ad4e <_svfiprintf_r+0x32>
 800ad34:	2140      	movs	r1, #64	; 0x40
 800ad36:	f7ff ff21 	bl	800ab7c <_malloc_r>
 800ad3a:	6028      	str	r0, [r5, #0]
 800ad3c:	6128      	str	r0, [r5, #16]
 800ad3e:	b920      	cbnz	r0, 800ad4a <_svfiprintf_r+0x2e>
 800ad40:	230c      	movs	r3, #12
 800ad42:	603b      	str	r3, [r7, #0]
 800ad44:	f04f 30ff 	mov.w	r0, #4294967295
 800ad48:	e0d1      	b.n	800aeee <_svfiprintf_r+0x1d2>
 800ad4a:	2340      	movs	r3, #64	; 0x40
 800ad4c:	616b      	str	r3, [r5, #20]
 800ad4e:	2300      	movs	r3, #0
 800ad50:	9309      	str	r3, [sp, #36]	; 0x24
 800ad52:	2320      	movs	r3, #32
 800ad54:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad5c:	2330      	movs	r3, #48	; 0x30
 800ad5e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af08 <_svfiprintf_r+0x1ec>
 800ad62:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ad66:	f04f 0901 	mov.w	r9, #1
 800ad6a:	4623      	mov	r3, r4
 800ad6c:	469a      	mov	sl, r3
 800ad6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ad72:	b10a      	cbz	r2, 800ad78 <_svfiprintf_r+0x5c>
 800ad74:	2a25      	cmp	r2, #37	; 0x25
 800ad76:	d1f9      	bne.n	800ad6c <_svfiprintf_r+0x50>
 800ad78:	ebba 0b04 	subs.w	fp, sl, r4
 800ad7c:	d00b      	beq.n	800ad96 <_svfiprintf_r+0x7a>
 800ad7e:	465b      	mov	r3, fp
 800ad80:	4622      	mov	r2, r4
 800ad82:	4629      	mov	r1, r5
 800ad84:	4638      	mov	r0, r7
 800ad86:	f7ff ff6d 	bl	800ac64 <__ssputs_r>
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	f000 80aa 	beq.w	800aee4 <_svfiprintf_r+0x1c8>
 800ad90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad92:	445a      	add	r2, fp
 800ad94:	9209      	str	r2, [sp, #36]	; 0x24
 800ad96:	f89a 3000 	ldrb.w	r3, [sl]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	f000 80a2 	beq.w	800aee4 <_svfiprintf_r+0x1c8>
 800ada0:	2300      	movs	r3, #0
 800ada2:	f04f 32ff 	mov.w	r2, #4294967295
 800ada6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800adaa:	f10a 0a01 	add.w	sl, sl, #1
 800adae:	9304      	str	r3, [sp, #16]
 800adb0:	9307      	str	r3, [sp, #28]
 800adb2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adb6:	931a      	str	r3, [sp, #104]	; 0x68
 800adb8:	4654      	mov	r4, sl
 800adba:	2205      	movs	r2, #5
 800adbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adc0:	4851      	ldr	r0, [pc, #324]	; (800af08 <_svfiprintf_r+0x1ec>)
 800adc2:	f7f5 fa0d 	bl	80001e0 <memchr>
 800adc6:	9a04      	ldr	r2, [sp, #16]
 800adc8:	b9d8      	cbnz	r0, 800ae02 <_svfiprintf_r+0xe6>
 800adca:	06d0      	lsls	r0, r2, #27
 800adcc:	bf44      	itt	mi
 800adce:	2320      	movmi	r3, #32
 800add0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800add4:	0711      	lsls	r1, r2, #28
 800add6:	bf44      	itt	mi
 800add8:	232b      	movmi	r3, #43	; 0x2b
 800adda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800adde:	f89a 3000 	ldrb.w	r3, [sl]
 800ade2:	2b2a      	cmp	r3, #42	; 0x2a
 800ade4:	d015      	beq.n	800ae12 <_svfiprintf_r+0xf6>
 800ade6:	9a07      	ldr	r2, [sp, #28]
 800ade8:	4654      	mov	r4, sl
 800adea:	2000      	movs	r0, #0
 800adec:	f04f 0c0a 	mov.w	ip, #10
 800adf0:	4621      	mov	r1, r4
 800adf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800adf6:	3b30      	subs	r3, #48	; 0x30
 800adf8:	2b09      	cmp	r3, #9
 800adfa:	d94e      	bls.n	800ae9a <_svfiprintf_r+0x17e>
 800adfc:	b1b0      	cbz	r0, 800ae2c <_svfiprintf_r+0x110>
 800adfe:	9207      	str	r2, [sp, #28]
 800ae00:	e014      	b.n	800ae2c <_svfiprintf_r+0x110>
 800ae02:	eba0 0308 	sub.w	r3, r0, r8
 800ae06:	fa09 f303 	lsl.w	r3, r9, r3
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	9304      	str	r3, [sp, #16]
 800ae0e:	46a2      	mov	sl, r4
 800ae10:	e7d2      	b.n	800adb8 <_svfiprintf_r+0x9c>
 800ae12:	9b03      	ldr	r3, [sp, #12]
 800ae14:	1d19      	adds	r1, r3, #4
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	9103      	str	r1, [sp, #12]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	bfbb      	ittet	lt
 800ae1e:	425b      	neglt	r3, r3
 800ae20:	f042 0202 	orrlt.w	r2, r2, #2
 800ae24:	9307      	strge	r3, [sp, #28]
 800ae26:	9307      	strlt	r3, [sp, #28]
 800ae28:	bfb8      	it	lt
 800ae2a:	9204      	strlt	r2, [sp, #16]
 800ae2c:	7823      	ldrb	r3, [r4, #0]
 800ae2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ae30:	d10c      	bne.n	800ae4c <_svfiprintf_r+0x130>
 800ae32:	7863      	ldrb	r3, [r4, #1]
 800ae34:	2b2a      	cmp	r3, #42	; 0x2a
 800ae36:	d135      	bne.n	800aea4 <_svfiprintf_r+0x188>
 800ae38:	9b03      	ldr	r3, [sp, #12]
 800ae3a:	1d1a      	adds	r2, r3, #4
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	9203      	str	r2, [sp, #12]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	bfb8      	it	lt
 800ae44:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae48:	3402      	adds	r4, #2
 800ae4a:	9305      	str	r3, [sp, #20]
 800ae4c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af18 <_svfiprintf_r+0x1fc>
 800ae50:	7821      	ldrb	r1, [r4, #0]
 800ae52:	2203      	movs	r2, #3
 800ae54:	4650      	mov	r0, sl
 800ae56:	f7f5 f9c3 	bl	80001e0 <memchr>
 800ae5a:	b140      	cbz	r0, 800ae6e <_svfiprintf_r+0x152>
 800ae5c:	2340      	movs	r3, #64	; 0x40
 800ae5e:	eba0 000a 	sub.w	r0, r0, sl
 800ae62:	fa03 f000 	lsl.w	r0, r3, r0
 800ae66:	9b04      	ldr	r3, [sp, #16]
 800ae68:	4303      	orrs	r3, r0
 800ae6a:	3401      	adds	r4, #1
 800ae6c:	9304      	str	r3, [sp, #16]
 800ae6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae72:	4826      	ldr	r0, [pc, #152]	; (800af0c <_svfiprintf_r+0x1f0>)
 800ae74:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ae78:	2206      	movs	r2, #6
 800ae7a:	f7f5 f9b1 	bl	80001e0 <memchr>
 800ae7e:	2800      	cmp	r0, #0
 800ae80:	d038      	beq.n	800aef4 <_svfiprintf_r+0x1d8>
 800ae82:	4b23      	ldr	r3, [pc, #140]	; (800af10 <_svfiprintf_r+0x1f4>)
 800ae84:	bb1b      	cbnz	r3, 800aece <_svfiprintf_r+0x1b2>
 800ae86:	9b03      	ldr	r3, [sp, #12]
 800ae88:	3307      	adds	r3, #7
 800ae8a:	f023 0307 	bic.w	r3, r3, #7
 800ae8e:	3308      	adds	r3, #8
 800ae90:	9303      	str	r3, [sp, #12]
 800ae92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae94:	4433      	add	r3, r6
 800ae96:	9309      	str	r3, [sp, #36]	; 0x24
 800ae98:	e767      	b.n	800ad6a <_svfiprintf_r+0x4e>
 800ae9a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae9e:	460c      	mov	r4, r1
 800aea0:	2001      	movs	r0, #1
 800aea2:	e7a5      	b.n	800adf0 <_svfiprintf_r+0xd4>
 800aea4:	2300      	movs	r3, #0
 800aea6:	3401      	adds	r4, #1
 800aea8:	9305      	str	r3, [sp, #20]
 800aeaa:	4619      	mov	r1, r3
 800aeac:	f04f 0c0a 	mov.w	ip, #10
 800aeb0:	4620      	mov	r0, r4
 800aeb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aeb6:	3a30      	subs	r2, #48	; 0x30
 800aeb8:	2a09      	cmp	r2, #9
 800aeba:	d903      	bls.n	800aec4 <_svfiprintf_r+0x1a8>
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d0c5      	beq.n	800ae4c <_svfiprintf_r+0x130>
 800aec0:	9105      	str	r1, [sp, #20]
 800aec2:	e7c3      	b.n	800ae4c <_svfiprintf_r+0x130>
 800aec4:	fb0c 2101 	mla	r1, ip, r1, r2
 800aec8:	4604      	mov	r4, r0
 800aeca:	2301      	movs	r3, #1
 800aecc:	e7f0      	b.n	800aeb0 <_svfiprintf_r+0x194>
 800aece:	ab03      	add	r3, sp, #12
 800aed0:	9300      	str	r3, [sp, #0]
 800aed2:	462a      	mov	r2, r5
 800aed4:	4b0f      	ldr	r3, [pc, #60]	; (800af14 <_svfiprintf_r+0x1f8>)
 800aed6:	a904      	add	r1, sp, #16
 800aed8:	4638      	mov	r0, r7
 800aeda:	f7fc fa49 	bl	8007370 <_printf_float>
 800aede:	1c42      	adds	r2, r0, #1
 800aee0:	4606      	mov	r6, r0
 800aee2:	d1d6      	bne.n	800ae92 <_svfiprintf_r+0x176>
 800aee4:	89ab      	ldrh	r3, [r5, #12]
 800aee6:	065b      	lsls	r3, r3, #25
 800aee8:	f53f af2c 	bmi.w	800ad44 <_svfiprintf_r+0x28>
 800aeec:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aeee:	b01d      	add	sp, #116	; 0x74
 800aef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aef4:	ab03      	add	r3, sp, #12
 800aef6:	9300      	str	r3, [sp, #0]
 800aef8:	462a      	mov	r2, r5
 800aefa:	4b06      	ldr	r3, [pc, #24]	; (800af14 <_svfiprintf_r+0x1f8>)
 800aefc:	a904      	add	r1, sp, #16
 800aefe:	4638      	mov	r0, r7
 800af00:	f7fc fcda 	bl	80078b8 <_printf_i>
 800af04:	e7eb      	b.n	800aede <_svfiprintf_r+0x1c2>
 800af06:	bf00      	nop
 800af08:	0800bfcc 	.word	0x0800bfcc
 800af0c:	0800bfd6 	.word	0x0800bfd6
 800af10:	08007371 	.word	0x08007371
 800af14:	0800ac65 	.word	0x0800ac65
 800af18:	0800bfd2 	.word	0x0800bfd2
 800af1c:	00000000 	.word	0x00000000

0800af20 <nan>:
 800af20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800af28 <nan+0x8>
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	00000000 	.word	0x00000000
 800af2c:	7ff80000 	.word	0x7ff80000

0800af30 <_sbrk_r>:
 800af30:	b538      	push	{r3, r4, r5, lr}
 800af32:	4d06      	ldr	r5, [pc, #24]	; (800af4c <_sbrk_r+0x1c>)
 800af34:	2300      	movs	r3, #0
 800af36:	4604      	mov	r4, r0
 800af38:	4608      	mov	r0, r1
 800af3a:	602b      	str	r3, [r5, #0]
 800af3c:	f7f6 febe 	bl	8001cbc <_sbrk>
 800af40:	1c43      	adds	r3, r0, #1
 800af42:	d102      	bne.n	800af4a <_sbrk_r+0x1a>
 800af44:	682b      	ldr	r3, [r5, #0]
 800af46:	b103      	cbz	r3, 800af4a <_sbrk_r+0x1a>
 800af48:	6023      	str	r3, [r4, #0]
 800af4a:	bd38      	pop	{r3, r4, r5, pc}
 800af4c:	200007b0 	.word	0x200007b0

0800af50 <strncmp>:
 800af50:	b510      	push	{r4, lr}
 800af52:	b17a      	cbz	r2, 800af74 <strncmp+0x24>
 800af54:	4603      	mov	r3, r0
 800af56:	3901      	subs	r1, #1
 800af58:	1884      	adds	r4, r0, r2
 800af5a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800af5e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800af62:	4290      	cmp	r0, r2
 800af64:	d101      	bne.n	800af6a <strncmp+0x1a>
 800af66:	42a3      	cmp	r3, r4
 800af68:	d101      	bne.n	800af6e <strncmp+0x1e>
 800af6a:	1a80      	subs	r0, r0, r2
 800af6c:	bd10      	pop	{r4, pc}
 800af6e:	2800      	cmp	r0, #0
 800af70:	d1f3      	bne.n	800af5a <strncmp+0xa>
 800af72:	e7fa      	b.n	800af6a <strncmp+0x1a>
 800af74:	4610      	mov	r0, r2
 800af76:	e7f9      	b.n	800af6c <strncmp+0x1c>

0800af78 <__ascii_wctomb>:
 800af78:	b149      	cbz	r1, 800af8e <__ascii_wctomb+0x16>
 800af7a:	2aff      	cmp	r2, #255	; 0xff
 800af7c:	bf85      	ittet	hi
 800af7e:	238a      	movhi	r3, #138	; 0x8a
 800af80:	6003      	strhi	r3, [r0, #0]
 800af82:	700a      	strbls	r2, [r1, #0]
 800af84:	f04f 30ff 	movhi.w	r0, #4294967295
 800af88:	bf98      	it	ls
 800af8a:	2001      	movls	r0, #1
 800af8c:	4770      	bx	lr
 800af8e:	4608      	mov	r0, r1
 800af90:	4770      	bx	lr
	...

0800af94 <__assert_func>:
 800af94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af96:	4614      	mov	r4, r2
 800af98:	461a      	mov	r2, r3
 800af9a:	4b09      	ldr	r3, [pc, #36]	; (800afc0 <__assert_func+0x2c>)
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4605      	mov	r5, r0
 800afa0:	68d8      	ldr	r0, [r3, #12]
 800afa2:	b14c      	cbz	r4, 800afb8 <__assert_func+0x24>
 800afa4:	4b07      	ldr	r3, [pc, #28]	; (800afc4 <__assert_func+0x30>)
 800afa6:	9100      	str	r1, [sp, #0]
 800afa8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afac:	4906      	ldr	r1, [pc, #24]	; (800afc8 <__assert_func+0x34>)
 800afae:	462b      	mov	r3, r5
 800afb0:	f000 f80e 	bl	800afd0 <fiprintf>
 800afb4:	f000 fa8c 	bl	800b4d0 <abort>
 800afb8:	4b04      	ldr	r3, [pc, #16]	; (800afcc <__assert_func+0x38>)
 800afba:	461c      	mov	r4, r3
 800afbc:	e7f3      	b.n	800afa6 <__assert_func+0x12>
 800afbe:	bf00      	nop
 800afc0:	20000018 	.word	0x20000018
 800afc4:	0800bfdd 	.word	0x0800bfdd
 800afc8:	0800bfea 	.word	0x0800bfea
 800afcc:	0800c018 	.word	0x0800c018

0800afd0 <fiprintf>:
 800afd0:	b40e      	push	{r1, r2, r3}
 800afd2:	b503      	push	{r0, r1, lr}
 800afd4:	4601      	mov	r1, r0
 800afd6:	ab03      	add	r3, sp, #12
 800afd8:	4805      	ldr	r0, [pc, #20]	; (800aff0 <fiprintf+0x20>)
 800afda:	f853 2b04 	ldr.w	r2, [r3], #4
 800afde:	6800      	ldr	r0, [r0, #0]
 800afe0:	9301      	str	r3, [sp, #4]
 800afe2:	f000 f885 	bl	800b0f0 <_vfiprintf_r>
 800afe6:	b002      	add	sp, #8
 800afe8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afec:	b003      	add	sp, #12
 800afee:	4770      	bx	lr
 800aff0:	20000018 	.word	0x20000018

0800aff4 <memmove>:
 800aff4:	4288      	cmp	r0, r1
 800aff6:	b510      	push	{r4, lr}
 800aff8:	eb01 0402 	add.w	r4, r1, r2
 800affc:	d902      	bls.n	800b004 <memmove+0x10>
 800affe:	4284      	cmp	r4, r0
 800b000:	4623      	mov	r3, r4
 800b002:	d807      	bhi.n	800b014 <memmove+0x20>
 800b004:	1e43      	subs	r3, r0, #1
 800b006:	42a1      	cmp	r1, r4
 800b008:	d008      	beq.n	800b01c <memmove+0x28>
 800b00a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b00e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b012:	e7f8      	b.n	800b006 <memmove+0x12>
 800b014:	4402      	add	r2, r0
 800b016:	4601      	mov	r1, r0
 800b018:	428a      	cmp	r2, r1
 800b01a:	d100      	bne.n	800b01e <memmove+0x2a>
 800b01c:	bd10      	pop	{r4, pc}
 800b01e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b022:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b026:	e7f7      	b.n	800b018 <memmove+0x24>

0800b028 <__malloc_lock>:
 800b028:	4801      	ldr	r0, [pc, #4]	; (800b030 <__malloc_lock+0x8>)
 800b02a:	f000 bc11 	b.w	800b850 <__retarget_lock_acquire_recursive>
 800b02e:	bf00      	nop
 800b030:	200007b4 	.word	0x200007b4

0800b034 <__malloc_unlock>:
 800b034:	4801      	ldr	r0, [pc, #4]	; (800b03c <__malloc_unlock+0x8>)
 800b036:	f000 bc0c 	b.w	800b852 <__retarget_lock_release_recursive>
 800b03a:	bf00      	nop
 800b03c:	200007b4 	.word	0x200007b4

0800b040 <_realloc_r>:
 800b040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b044:	4680      	mov	r8, r0
 800b046:	4614      	mov	r4, r2
 800b048:	460e      	mov	r6, r1
 800b04a:	b921      	cbnz	r1, 800b056 <_realloc_r+0x16>
 800b04c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b050:	4611      	mov	r1, r2
 800b052:	f7ff bd93 	b.w	800ab7c <_malloc_r>
 800b056:	b92a      	cbnz	r2, 800b064 <_realloc_r+0x24>
 800b058:	f7ff fd24 	bl	800aaa4 <_free_r>
 800b05c:	4625      	mov	r5, r4
 800b05e:	4628      	mov	r0, r5
 800b060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b064:	f000 fc5c 	bl	800b920 <_malloc_usable_size_r>
 800b068:	4284      	cmp	r4, r0
 800b06a:	4607      	mov	r7, r0
 800b06c:	d802      	bhi.n	800b074 <_realloc_r+0x34>
 800b06e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b072:	d812      	bhi.n	800b09a <_realloc_r+0x5a>
 800b074:	4621      	mov	r1, r4
 800b076:	4640      	mov	r0, r8
 800b078:	f7ff fd80 	bl	800ab7c <_malloc_r>
 800b07c:	4605      	mov	r5, r0
 800b07e:	2800      	cmp	r0, #0
 800b080:	d0ed      	beq.n	800b05e <_realloc_r+0x1e>
 800b082:	42bc      	cmp	r4, r7
 800b084:	4622      	mov	r2, r4
 800b086:	4631      	mov	r1, r6
 800b088:	bf28      	it	cs
 800b08a:	463a      	movcs	r2, r7
 800b08c:	f7ff f824 	bl	800a0d8 <memcpy>
 800b090:	4631      	mov	r1, r6
 800b092:	4640      	mov	r0, r8
 800b094:	f7ff fd06 	bl	800aaa4 <_free_r>
 800b098:	e7e1      	b.n	800b05e <_realloc_r+0x1e>
 800b09a:	4635      	mov	r5, r6
 800b09c:	e7df      	b.n	800b05e <_realloc_r+0x1e>

0800b09e <__sfputc_r>:
 800b09e:	6893      	ldr	r3, [r2, #8]
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	b410      	push	{r4}
 800b0a6:	6093      	str	r3, [r2, #8]
 800b0a8:	da08      	bge.n	800b0bc <__sfputc_r+0x1e>
 800b0aa:	6994      	ldr	r4, [r2, #24]
 800b0ac:	42a3      	cmp	r3, r4
 800b0ae:	db01      	blt.n	800b0b4 <__sfputc_r+0x16>
 800b0b0:	290a      	cmp	r1, #10
 800b0b2:	d103      	bne.n	800b0bc <__sfputc_r+0x1e>
 800b0b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0b8:	f000 b94a 	b.w	800b350 <__swbuf_r>
 800b0bc:	6813      	ldr	r3, [r2, #0]
 800b0be:	1c58      	adds	r0, r3, #1
 800b0c0:	6010      	str	r0, [r2, #0]
 800b0c2:	7019      	strb	r1, [r3, #0]
 800b0c4:	4608      	mov	r0, r1
 800b0c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ca:	4770      	bx	lr

0800b0cc <__sfputs_r>:
 800b0cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0ce:	4606      	mov	r6, r0
 800b0d0:	460f      	mov	r7, r1
 800b0d2:	4614      	mov	r4, r2
 800b0d4:	18d5      	adds	r5, r2, r3
 800b0d6:	42ac      	cmp	r4, r5
 800b0d8:	d101      	bne.n	800b0de <__sfputs_r+0x12>
 800b0da:	2000      	movs	r0, #0
 800b0dc:	e007      	b.n	800b0ee <__sfputs_r+0x22>
 800b0de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b0e2:	463a      	mov	r2, r7
 800b0e4:	4630      	mov	r0, r6
 800b0e6:	f7ff ffda 	bl	800b09e <__sfputc_r>
 800b0ea:	1c43      	adds	r3, r0, #1
 800b0ec:	d1f3      	bne.n	800b0d6 <__sfputs_r+0xa>
 800b0ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b0f0 <_vfiprintf_r>:
 800b0f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0f4:	460d      	mov	r5, r1
 800b0f6:	b09d      	sub	sp, #116	; 0x74
 800b0f8:	4614      	mov	r4, r2
 800b0fa:	4698      	mov	r8, r3
 800b0fc:	4606      	mov	r6, r0
 800b0fe:	b118      	cbz	r0, 800b108 <_vfiprintf_r+0x18>
 800b100:	6983      	ldr	r3, [r0, #24]
 800b102:	b90b      	cbnz	r3, 800b108 <_vfiprintf_r+0x18>
 800b104:	f000 fb06 	bl	800b714 <__sinit>
 800b108:	4b89      	ldr	r3, [pc, #548]	; (800b330 <_vfiprintf_r+0x240>)
 800b10a:	429d      	cmp	r5, r3
 800b10c:	d11b      	bne.n	800b146 <_vfiprintf_r+0x56>
 800b10e:	6875      	ldr	r5, [r6, #4]
 800b110:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b112:	07d9      	lsls	r1, r3, #31
 800b114:	d405      	bmi.n	800b122 <_vfiprintf_r+0x32>
 800b116:	89ab      	ldrh	r3, [r5, #12]
 800b118:	059a      	lsls	r2, r3, #22
 800b11a:	d402      	bmi.n	800b122 <_vfiprintf_r+0x32>
 800b11c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b11e:	f000 fb97 	bl	800b850 <__retarget_lock_acquire_recursive>
 800b122:	89ab      	ldrh	r3, [r5, #12]
 800b124:	071b      	lsls	r3, r3, #28
 800b126:	d501      	bpl.n	800b12c <_vfiprintf_r+0x3c>
 800b128:	692b      	ldr	r3, [r5, #16]
 800b12a:	b9eb      	cbnz	r3, 800b168 <_vfiprintf_r+0x78>
 800b12c:	4629      	mov	r1, r5
 800b12e:	4630      	mov	r0, r6
 800b130:	f000 f960 	bl	800b3f4 <__swsetup_r>
 800b134:	b1c0      	cbz	r0, 800b168 <_vfiprintf_r+0x78>
 800b136:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b138:	07dc      	lsls	r4, r3, #31
 800b13a:	d50e      	bpl.n	800b15a <_vfiprintf_r+0x6a>
 800b13c:	f04f 30ff 	mov.w	r0, #4294967295
 800b140:	b01d      	add	sp, #116	; 0x74
 800b142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b146:	4b7b      	ldr	r3, [pc, #492]	; (800b334 <_vfiprintf_r+0x244>)
 800b148:	429d      	cmp	r5, r3
 800b14a:	d101      	bne.n	800b150 <_vfiprintf_r+0x60>
 800b14c:	68b5      	ldr	r5, [r6, #8]
 800b14e:	e7df      	b.n	800b110 <_vfiprintf_r+0x20>
 800b150:	4b79      	ldr	r3, [pc, #484]	; (800b338 <_vfiprintf_r+0x248>)
 800b152:	429d      	cmp	r5, r3
 800b154:	bf08      	it	eq
 800b156:	68f5      	ldreq	r5, [r6, #12]
 800b158:	e7da      	b.n	800b110 <_vfiprintf_r+0x20>
 800b15a:	89ab      	ldrh	r3, [r5, #12]
 800b15c:	0598      	lsls	r0, r3, #22
 800b15e:	d4ed      	bmi.n	800b13c <_vfiprintf_r+0x4c>
 800b160:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b162:	f000 fb76 	bl	800b852 <__retarget_lock_release_recursive>
 800b166:	e7e9      	b.n	800b13c <_vfiprintf_r+0x4c>
 800b168:	2300      	movs	r3, #0
 800b16a:	9309      	str	r3, [sp, #36]	; 0x24
 800b16c:	2320      	movs	r3, #32
 800b16e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b172:	f8cd 800c 	str.w	r8, [sp, #12]
 800b176:	2330      	movs	r3, #48	; 0x30
 800b178:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b33c <_vfiprintf_r+0x24c>
 800b17c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b180:	f04f 0901 	mov.w	r9, #1
 800b184:	4623      	mov	r3, r4
 800b186:	469a      	mov	sl, r3
 800b188:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b18c:	b10a      	cbz	r2, 800b192 <_vfiprintf_r+0xa2>
 800b18e:	2a25      	cmp	r2, #37	; 0x25
 800b190:	d1f9      	bne.n	800b186 <_vfiprintf_r+0x96>
 800b192:	ebba 0b04 	subs.w	fp, sl, r4
 800b196:	d00b      	beq.n	800b1b0 <_vfiprintf_r+0xc0>
 800b198:	465b      	mov	r3, fp
 800b19a:	4622      	mov	r2, r4
 800b19c:	4629      	mov	r1, r5
 800b19e:	4630      	mov	r0, r6
 800b1a0:	f7ff ff94 	bl	800b0cc <__sfputs_r>
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	f000 80aa 	beq.w	800b2fe <_vfiprintf_r+0x20e>
 800b1aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1ac:	445a      	add	r2, fp
 800b1ae:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b0:	f89a 3000 	ldrb.w	r3, [sl]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f000 80a2 	beq.w	800b2fe <_vfiprintf_r+0x20e>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b1c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1c4:	f10a 0a01 	add.w	sl, sl, #1
 800b1c8:	9304      	str	r3, [sp, #16]
 800b1ca:	9307      	str	r3, [sp, #28]
 800b1cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b1d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b1d2:	4654      	mov	r4, sl
 800b1d4:	2205      	movs	r2, #5
 800b1d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1da:	4858      	ldr	r0, [pc, #352]	; (800b33c <_vfiprintf_r+0x24c>)
 800b1dc:	f7f5 f800 	bl	80001e0 <memchr>
 800b1e0:	9a04      	ldr	r2, [sp, #16]
 800b1e2:	b9d8      	cbnz	r0, 800b21c <_vfiprintf_r+0x12c>
 800b1e4:	06d1      	lsls	r1, r2, #27
 800b1e6:	bf44      	itt	mi
 800b1e8:	2320      	movmi	r3, #32
 800b1ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1ee:	0713      	lsls	r3, r2, #28
 800b1f0:	bf44      	itt	mi
 800b1f2:	232b      	movmi	r3, #43	; 0x2b
 800b1f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1fc:	2b2a      	cmp	r3, #42	; 0x2a
 800b1fe:	d015      	beq.n	800b22c <_vfiprintf_r+0x13c>
 800b200:	9a07      	ldr	r2, [sp, #28]
 800b202:	4654      	mov	r4, sl
 800b204:	2000      	movs	r0, #0
 800b206:	f04f 0c0a 	mov.w	ip, #10
 800b20a:	4621      	mov	r1, r4
 800b20c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b210:	3b30      	subs	r3, #48	; 0x30
 800b212:	2b09      	cmp	r3, #9
 800b214:	d94e      	bls.n	800b2b4 <_vfiprintf_r+0x1c4>
 800b216:	b1b0      	cbz	r0, 800b246 <_vfiprintf_r+0x156>
 800b218:	9207      	str	r2, [sp, #28]
 800b21a:	e014      	b.n	800b246 <_vfiprintf_r+0x156>
 800b21c:	eba0 0308 	sub.w	r3, r0, r8
 800b220:	fa09 f303 	lsl.w	r3, r9, r3
 800b224:	4313      	orrs	r3, r2
 800b226:	9304      	str	r3, [sp, #16]
 800b228:	46a2      	mov	sl, r4
 800b22a:	e7d2      	b.n	800b1d2 <_vfiprintf_r+0xe2>
 800b22c:	9b03      	ldr	r3, [sp, #12]
 800b22e:	1d19      	adds	r1, r3, #4
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	9103      	str	r1, [sp, #12]
 800b234:	2b00      	cmp	r3, #0
 800b236:	bfbb      	ittet	lt
 800b238:	425b      	neglt	r3, r3
 800b23a:	f042 0202 	orrlt.w	r2, r2, #2
 800b23e:	9307      	strge	r3, [sp, #28]
 800b240:	9307      	strlt	r3, [sp, #28]
 800b242:	bfb8      	it	lt
 800b244:	9204      	strlt	r2, [sp, #16]
 800b246:	7823      	ldrb	r3, [r4, #0]
 800b248:	2b2e      	cmp	r3, #46	; 0x2e
 800b24a:	d10c      	bne.n	800b266 <_vfiprintf_r+0x176>
 800b24c:	7863      	ldrb	r3, [r4, #1]
 800b24e:	2b2a      	cmp	r3, #42	; 0x2a
 800b250:	d135      	bne.n	800b2be <_vfiprintf_r+0x1ce>
 800b252:	9b03      	ldr	r3, [sp, #12]
 800b254:	1d1a      	adds	r2, r3, #4
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	9203      	str	r2, [sp, #12]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	bfb8      	it	lt
 800b25e:	f04f 33ff 	movlt.w	r3, #4294967295
 800b262:	3402      	adds	r4, #2
 800b264:	9305      	str	r3, [sp, #20]
 800b266:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b34c <_vfiprintf_r+0x25c>
 800b26a:	7821      	ldrb	r1, [r4, #0]
 800b26c:	2203      	movs	r2, #3
 800b26e:	4650      	mov	r0, sl
 800b270:	f7f4 ffb6 	bl	80001e0 <memchr>
 800b274:	b140      	cbz	r0, 800b288 <_vfiprintf_r+0x198>
 800b276:	2340      	movs	r3, #64	; 0x40
 800b278:	eba0 000a 	sub.w	r0, r0, sl
 800b27c:	fa03 f000 	lsl.w	r0, r3, r0
 800b280:	9b04      	ldr	r3, [sp, #16]
 800b282:	4303      	orrs	r3, r0
 800b284:	3401      	adds	r4, #1
 800b286:	9304      	str	r3, [sp, #16]
 800b288:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b28c:	482c      	ldr	r0, [pc, #176]	; (800b340 <_vfiprintf_r+0x250>)
 800b28e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b292:	2206      	movs	r2, #6
 800b294:	f7f4 ffa4 	bl	80001e0 <memchr>
 800b298:	2800      	cmp	r0, #0
 800b29a:	d03f      	beq.n	800b31c <_vfiprintf_r+0x22c>
 800b29c:	4b29      	ldr	r3, [pc, #164]	; (800b344 <_vfiprintf_r+0x254>)
 800b29e:	bb1b      	cbnz	r3, 800b2e8 <_vfiprintf_r+0x1f8>
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	3307      	adds	r3, #7
 800b2a4:	f023 0307 	bic.w	r3, r3, #7
 800b2a8:	3308      	adds	r3, #8
 800b2aa:	9303      	str	r3, [sp, #12]
 800b2ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2ae:	443b      	add	r3, r7
 800b2b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b2b2:	e767      	b.n	800b184 <_vfiprintf_r+0x94>
 800b2b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2b8:	460c      	mov	r4, r1
 800b2ba:	2001      	movs	r0, #1
 800b2bc:	e7a5      	b.n	800b20a <_vfiprintf_r+0x11a>
 800b2be:	2300      	movs	r3, #0
 800b2c0:	3401      	adds	r4, #1
 800b2c2:	9305      	str	r3, [sp, #20]
 800b2c4:	4619      	mov	r1, r3
 800b2c6:	f04f 0c0a 	mov.w	ip, #10
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2d0:	3a30      	subs	r2, #48	; 0x30
 800b2d2:	2a09      	cmp	r2, #9
 800b2d4:	d903      	bls.n	800b2de <_vfiprintf_r+0x1ee>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0c5      	beq.n	800b266 <_vfiprintf_r+0x176>
 800b2da:	9105      	str	r1, [sp, #20]
 800b2dc:	e7c3      	b.n	800b266 <_vfiprintf_r+0x176>
 800b2de:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e7f0      	b.n	800b2ca <_vfiprintf_r+0x1da>
 800b2e8:	ab03      	add	r3, sp, #12
 800b2ea:	9300      	str	r3, [sp, #0]
 800b2ec:	462a      	mov	r2, r5
 800b2ee:	4b16      	ldr	r3, [pc, #88]	; (800b348 <_vfiprintf_r+0x258>)
 800b2f0:	a904      	add	r1, sp, #16
 800b2f2:	4630      	mov	r0, r6
 800b2f4:	f7fc f83c 	bl	8007370 <_printf_float>
 800b2f8:	4607      	mov	r7, r0
 800b2fa:	1c78      	adds	r0, r7, #1
 800b2fc:	d1d6      	bne.n	800b2ac <_vfiprintf_r+0x1bc>
 800b2fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b300:	07d9      	lsls	r1, r3, #31
 800b302:	d405      	bmi.n	800b310 <_vfiprintf_r+0x220>
 800b304:	89ab      	ldrh	r3, [r5, #12]
 800b306:	059a      	lsls	r2, r3, #22
 800b308:	d402      	bmi.n	800b310 <_vfiprintf_r+0x220>
 800b30a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b30c:	f000 faa1 	bl	800b852 <__retarget_lock_release_recursive>
 800b310:	89ab      	ldrh	r3, [r5, #12]
 800b312:	065b      	lsls	r3, r3, #25
 800b314:	f53f af12 	bmi.w	800b13c <_vfiprintf_r+0x4c>
 800b318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b31a:	e711      	b.n	800b140 <_vfiprintf_r+0x50>
 800b31c:	ab03      	add	r3, sp, #12
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	462a      	mov	r2, r5
 800b322:	4b09      	ldr	r3, [pc, #36]	; (800b348 <_vfiprintf_r+0x258>)
 800b324:	a904      	add	r1, sp, #16
 800b326:	4630      	mov	r0, r6
 800b328:	f7fc fac6 	bl	80078b8 <_printf_i>
 800b32c:	e7e4      	b.n	800b2f8 <_vfiprintf_r+0x208>
 800b32e:	bf00      	nop
 800b330:	0800c03c 	.word	0x0800c03c
 800b334:	0800c05c 	.word	0x0800c05c
 800b338:	0800c01c 	.word	0x0800c01c
 800b33c:	0800bfcc 	.word	0x0800bfcc
 800b340:	0800bfd6 	.word	0x0800bfd6
 800b344:	08007371 	.word	0x08007371
 800b348:	0800b0cd 	.word	0x0800b0cd
 800b34c:	0800bfd2 	.word	0x0800bfd2

0800b350 <__swbuf_r>:
 800b350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b352:	460e      	mov	r6, r1
 800b354:	4614      	mov	r4, r2
 800b356:	4605      	mov	r5, r0
 800b358:	b118      	cbz	r0, 800b362 <__swbuf_r+0x12>
 800b35a:	6983      	ldr	r3, [r0, #24]
 800b35c:	b90b      	cbnz	r3, 800b362 <__swbuf_r+0x12>
 800b35e:	f000 f9d9 	bl	800b714 <__sinit>
 800b362:	4b21      	ldr	r3, [pc, #132]	; (800b3e8 <__swbuf_r+0x98>)
 800b364:	429c      	cmp	r4, r3
 800b366:	d12b      	bne.n	800b3c0 <__swbuf_r+0x70>
 800b368:	686c      	ldr	r4, [r5, #4]
 800b36a:	69a3      	ldr	r3, [r4, #24]
 800b36c:	60a3      	str	r3, [r4, #8]
 800b36e:	89a3      	ldrh	r3, [r4, #12]
 800b370:	071a      	lsls	r2, r3, #28
 800b372:	d52f      	bpl.n	800b3d4 <__swbuf_r+0x84>
 800b374:	6923      	ldr	r3, [r4, #16]
 800b376:	b36b      	cbz	r3, 800b3d4 <__swbuf_r+0x84>
 800b378:	6923      	ldr	r3, [r4, #16]
 800b37a:	6820      	ldr	r0, [r4, #0]
 800b37c:	1ac0      	subs	r0, r0, r3
 800b37e:	6963      	ldr	r3, [r4, #20]
 800b380:	b2f6      	uxtb	r6, r6
 800b382:	4283      	cmp	r3, r0
 800b384:	4637      	mov	r7, r6
 800b386:	dc04      	bgt.n	800b392 <__swbuf_r+0x42>
 800b388:	4621      	mov	r1, r4
 800b38a:	4628      	mov	r0, r5
 800b38c:	f000 f92e 	bl	800b5ec <_fflush_r>
 800b390:	bb30      	cbnz	r0, 800b3e0 <__swbuf_r+0x90>
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	3b01      	subs	r3, #1
 800b396:	60a3      	str	r3, [r4, #8]
 800b398:	6823      	ldr	r3, [r4, #0]
 800b39a:	1c5a      	adds	r2, r3, #1
 800b39c:	6022      	str	r2, [r4, #0]
 800b39e:	701e      	strb	r6, [r3, #0]
 800b3a0:	6963      	ldr	r3, [r4, #20]
 800b3a2:	3001      	adds	r0, #1
 800b3a4:	4283      	cmp	r3, r0
 800b3a6:	d004      	beq.n	800b3b2 <__swbuf_r+0x62>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	07db      	lsls	r3, r3, #31
 800b3ac:	d506      	bpl.n	800b3bc <__swbuf_r+0x6c>
 800b3ae:	2e0a      	cmp	r6, #10
 800b3b0:	d104      	bne.n	800b3bc <__swbuf_r+0x6c>
 800b3b2:	4621      	mov	r1, r4
 800b3b4:	4628      	mov	r0, r5
 800b3b6:	f000 f919 	bl	800b5ec <_fflush_r>
 800b3ba:	b988      	cbnz	r0, 800b3e0 <__swbuf_r+0x90>
 800b3bc:	4638      	mov	r0, r7
 800b3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <__swbuf_r+0x9c>)
 800b3c2:	429c      	cmp	r4, r3
 800b3c4:	d101      	bne.n	800b3ca <__swbuf_r+0x7a>
 800b3c6:	68ac      	ldr	r4, [r5, #8]
 800b3c8:	e7cf      	b.n	800b36a <__swbuf_r+0x1a>
 800b3ca:	4b09      	ldr	r3, [pc, #36]	; (800b3f0 <__swbuf_r+0xa0>)
 800b3cc:	429c      	cmp	r4, r3
 800b3ce:	bf08      	it	eq
 800b3d0:	68ec      	ldreq	r4, [r5, #12]
 800b3d2:	e7ca      	b.n	800b36a <__swbuf_r+0x1a>
 800b3d4:	4621      	mov	r1, r4
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f000 f80c 	bl	800b3f4 <__swsetup_r>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d0cb      	beq.n	800b378 <__swbuf_r+0x28>
 800b3e0:	f04f 37ff 	mov.w	r7, #4294967295
 800b3e4:	e7ea      	b.n	800b3bc <__swbuf_r+0x6c>
 800b3e6:	bf00      	nop
 800b3e8:	0800c03c 	.word	0x0800c03c
 800b3ec:	0800c05c 	.word	0x0800c05c
 800b3f0:	0800c01c 	.word	0x0800c01c

0800b3f4 <__swsetup_r>:
 800b3f4:	4b32      	ldr	r3, [pc, #200]	; (800b4c0 <__swsetup_r+0xcc>)
 800b3f6:	b570      	push	{r4, r5, r6, lr}
 800b3f8:	681d      	ldr	r5, [r3, #0]
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460c      	mov	r4, r1
 800b3fe:	b125      	cbz	r5, 800b40a <__swsetup_r+0x16>
 800b400:	69ab      	ldr	r3, [r5, #24]
 800b402:	b913      	cbnz	r3, 800b40a <__swsetup_r+0x16>
 800b404:	4628      	mov	r0, r5
 800b406:	f000 f985 	bl	800b714 <__sinit>
 800b40a:	4b2e      	ldr	r3, [pc, #184]	; (800b4c4 <__swsetup_r+0xd0>)
 800b40c:	429c      	cmp	r4, r3
 800b40e:	d10f      	bne.n	800b430 <__swsetup_r+0x3c>
 800b410:	686c      	ldr	r4, [r5, #4]
 800b412:	89a3      	ldrh	r3, [r4, #12]
 800b414:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b418:	0719      	lsls	r1, r3, #28
 800b41a:	d42c      	bmi.n	800b476 <__swsetup_r+0x82>
 800b41c:	06dd      	lsls	r5, r3, #27
 800b41e:	d411      	bmi.n	800b444 <__swsetup_r+0x50>
 800b420:	2309      	movs	r3, #9
 800b422:	6033      	str	r3, [r6, #0]
 800b424:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b428:	81a3      	strh	r3, [r4, #12]
 800b42a:	f04f 30ff 	mov.w	r0, #4294967295
 800b42e:	e03e      	b.n	800b4ae <__swsetup_r+0xba>
 800b430:	4b25      	ldr	r3, [pc, #148]	; (800b4c8 <__swsetup_r+0xd4>)
 800b432:	429c      	cmp	r4, r3
 800b434:	d101      	bne.n	800b43a <__swsetup_r+0x46>
 800b436:	68ac      	ldr	r4, [r5, #8]
 800b438:	e7eb      	b.n	800b412 <__swsetup_r+0x1e>
 800b43a:	4b24      	ldr	r3, [pc, #144]	; (800b4cc <__swsetup_r+0xd8>)
 800b43c:	429c      	cmp	r4, r3
 800b43e:	bf08      	it	eq
 800b440:	68ec      	ldreq	r4, [r5, #12]
 800b442:	e7e6      	b.n	800b412 <__swsetup_r+0x1e>
 800b444:	0758      	lsls	r0, r3, #29
 800b446:	d512      	bpl.n	800b46e <__swsetup_r+0x7a>
 800b448:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b44a:	b141      	cbz	r1, 800b45e <__swsetup_r+0x6a>
 800b44c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b450:	4299      	cmp	r1, r3
 800b452:	d002      	beq.n	800b45a <__swsetup_r+0x66>
 800b454:	4630      	mov	r0, r6
 800b456:	f7ff fb25 	bl	800aaa4 <_free_r>
 800b45a:	2300      	movs	r3, #0
 800b45c:	6363      	str	r3, [r4, #52]	; 0x34
 800b45e:	89a3      	ldrh	r3, [r4, #12]
 800b460:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b464:	81a3      	strh	r3, [r4, #12]
 800b466:	2300      	movs	r3, #0
 800b468:	6063      	str	r3, [r4, #4]
 800b46a:	6923      	ldr	r3, [r4, #16]
 800b46c:	6023      	str	r3, [r4, #0]
 800b46e:	89a3      	ldrh	r3, [r4, #12]
 800b470:	f043 0308 	orr.w	r3, r3, #8
 800b474:	81a3      	strh	r3, [r4, #12]
 800b476:	6923      	ldr	r3, [r4, #16]
 800b478:	b94b      	cbnz	r3, 800b48e <__swsetup_r+0x9a>
 800b47a:	89a3      	ldrh	r3, [r4, #12]
 800b47c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b484:	d003      	beq.n	800b48e <__swsetup_r+0x9a>
 800b486:	4621      	mov	r1, r4
 800b488:	4630      	mov	r0, r6
 800b48a:	f000 fa09 	bl	800b8a0 <__smakebuf_r>
 800b48e:	89a0      	ldrh	r0, [r4, #12]
 800b490:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b494:	f010 0301 	ands.w	r3, r0, #1
 800b498:	d00a      	beq.n	800b4b0 <__swsetup_r+0xbc>
 800b49a:	2300      	movs	r3, #0
 800b49c:	60a3      	str	r3, [r4, #8]
 800b49e:	6963      	ldr	r3, [r4, #20]
 800b4a0:	425b      	negs	r3, r3
 800b4a2:	61a3      	str	r3, [r4, #24]
 800b4a4:	6923      	ldr	r3, [r4, #16]
 800b4a6:	b943      	cbnz	r3, 800b4ba <__swsetup_r+0xc6>
 800b4a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4ac:	d1ba      	bne.n	800b424 <__swsetup_r+0x30>
 800b4ae:	bd70      	pop	{r4, r5, r6, pc}
 800b4b0:	0781      	lsls	r1, r0, #30
 800b4b2:	bf58      	it	pl
 800b4b4:	6963      	ldrpl	r3, [r4, #20]
 800b4b6:	60a3      	str	r3, [r4, #8]
 800b4b8:	e7f4      	b.n	800b4a4 <__swsetup_r+0xb0>
 800b4ba:	2000      	movs	r0, #0
 800b4bc:	e7f7      	b.n	800b4ae <__swsetup_r+0xba>
 800b4be:	bf00      	nop
 800b4c0:	20000018 	.word	0x20000018
 800b4c4:	0800c03c 	.word	0x0800c03c
 800b4c8:	0800c05c 	.word	0x0800c05c
 800b4cc:	0800c01c 	.word	0x0800c01c

0800b4d0 <abort>:
 800b4d0:	b508      	push	{r3, lr}
 800b4d2:	2006      	movs	r0, #6
 800b4d4:	f000 fa54 	bl	800b980 <raise>
 800b4d8:	2001      	movs	r0, #1
 800b4da:	f7f6 fb77 	bl	8001bcc <_exit>
	...

0800b4e0 <__sflush_r>:
 800b4e0:	898a      	ldrh	r2, [r1, #12]
 800b4e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4e6:	4605      	mov	r5, r0
 800b4e8:	0710      	lsls	r0, r2, #28
 800b4ea:	460c      	mov	r4, r1
 800b4ec:	d458      	bmi.n	800b5a0 <__sflush_r+0xc0>
 800b4ee:	684b      	ldr	r3, [r1, #4]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	dc05      	bgt.n	800b500 <__sflush_r+0x20>
 800b4f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	dc02      	bgt.n	800b500 <__sflush_r+0x20>
 800b4fa:	2000      	movs	r0, #0
 800b4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b500:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b502:	2e00      	cmp	r6, #0
 800b504:	d0f9      	beq.n	800b4fa <__sflush_r+0x1a>
 800b506:	2300      	movs	r3, #0
 800b508:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b50c:	682f      	ldr	r7, [r5, #0]
 800b50e:	602b      	str	r3, [r5, #0]
 800b510:	d032      	beq.n	800b578 <__sflush_r+0x98>
 800b512:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b514:	89a3      	ldrh	r3, [r4, #12]
 800b516:	075a      	lsls	r2, r3, #29
 800b518:	d505      	bpl.n	800b526 <__sflush_r+0x46>
 800b51a:	6863      	ldr	r3, [r4, #4]
 800b51c:	1ac0      	subs	r0, r0, r3
 800b51e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b520:	b10b      	cbz	r3, 800b526 <__sflush_r+0x46>
 800b522:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b524:	1ac0      	subs	r0, r0, r3
 800b526:	2300      	movs	r3, #0
 800b528:	4602      	mov	r2, r0
 800b52a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b52c:	6a21      	ldr	r1, [r4, #32]
 800b52e:	4628      	mov	r0, r5
 800b530:	47b0      	blx	r6
 800b532:	1c43      	adds	r3, r0, #1
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	d106      	bne.n	800b546 <__sflush_r+0x66>
 800b538:	6829      	ldr	r1, [r5, #0]
 800b53a:	291d      	cmp	r1, #29
 800b53c:	d82c      	bhi.n	800b598 <__sflush_r+0xb8>
 800b53e:	4a2a      	ldr	r2, [pc, #168]	; (800b5e8 <__sflush_r+0x108>)
 800b540:	40ca      	lsrs	r2, r1
 800b542:	07d6      	lsls	r6, r2, #31
 800b544:	d528      	bpl.n	800b598 <__sflush_r+0xb8>
 800b546:	2200      	movs	r2, #0
 800b548:	6062      	str	r2, [r4, #4]
 800b54a:	04d9      	lsls	r1, r3, #19
 800b54c:	6922      	ldr	r2, [r4, #16]
 800b54e:	6022      	str	r2, [r4, #0]
 800b550:	d504      	bpl.n	800b55c <__sflush_r+0x7c>
 800b552:	1c42      	adds	r2, r0, #1
 800b554:	d101      	bne.n	800b55a <__sflush_r+0x7a>
 800b556:	682b      	ldr	r3, [r5, #0]
 800b558:	b903      	cbnz	r3, 800b55c <__sflush_r+0x7c>
 800b55a:	6560      	str	r0, [r4, #84]	; 0x54
 800b55c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b55e:	602f      	str	r7, [r5, #0]
 800b560:	2900      	cmp	r1, #0
 800b562:	d0ca      	beq.n	800b4fa <__sflush_r+0x1a>
 800b564:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b568:	4299      	cmp	r1, r3
 800b56a:	d002      	beq.n	800b572 <__sflush_r+0x92>
 800b56c:	4628      	mov	r0, r5
 800b56e:	f7ff fa99 	bl	800aaa4 <_free_r>
 800b572:	2000      	movs	r0, #0
 800b574:	6360      	str	r0, [r4, #52]	; 0x34
 800b576:	e7c1      	b.n	800b4fc <__sflush_r+0x1c>
 800b578:	6a21      	ldr	r1, [r4, #32]
 800b57a:	2301      	movs	r3, #1
 800b57c:	4628      	mov	r0, r5
 800b57e:	47b0      	blx	r6
 800b580:	1c41      	adds	r1, r0, #1
 800b582:	d1c7      	bne.n	800b514 <__sflush_r+0x34>
 800b584:	682b      	ldr	r3, [r5, #0]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d0c4      	beq.n	800b514 <__sflush_r+0x34>
 800b58a:	2b1d      	cmp	r3, #29
 800b58c:	d001      	beq.n	800b592 <__sflush_r+0xb2>
 800b58e:	2b16      	cmp	r3, #22
 800b590:	d101      	bne.n	800b596 <__sflush_r+0xb6>
 800b592:	602f      	str	r7, [r5, #0]
 800b594:	e7b1      	b.n	800b4fa <__sflush_r+0x1a>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b59c:	81a3      	strh	r3, [r4, #12]
 800b59e:	e7ad      	b.n	800b4fc <__sflush_r+0x1c>
 800b5a0:	690f      	ldr	r7, [r1, #16]
 800b5a2:	2f00      	cmp	r7, #0
 800b5a4:	d0a9      	beq.n	800b4fa <__sflush_r+0x1a>
 800b5a6:	0793      	lsls	r3, r2, #30
 800b5a8:	680e      	ldr	r6, [r1, #0]
 800b5aa:	bf08      	it	eq
 800b5ac:	694b      	ldreq	r3, [r1, #20]
 800b5ae:	600f      	str	r7, [r1, #0]
 800b5b0:	bf18      	it	ne
 800b5b2:	2300      	movne	r3, #0
 800b5b4:	eba6 0807 	sub.w	r8, r6, r7
 800b5b8:	608b      	str	r3, [r1, #8]
 800b5ba:	f1b8 0f00 	cmp.w	r8, #0
 800b5be:	dd9c      	ble.n	800b4fa <__sflush_r+0x1a>
 800b5c0:	6a21      	ldr	r1, [r4, #32]
 800b5c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b5c4:	4643      	mov	r3, r8
 800b5c6:	463a      	mov	r2, r7
 800b5c8:	4628      	mov	r0, r5
 800b5ca:	47b0      	blx	r6
 800b5cc:	2800      	cmp	r0, #0
 800b5ce:	dc06      	bgt.n	800b5de <__sflush_r+0xfe>
 800b5d0:	89a3      	ldrh	r3, [r4, #12]
 800b5d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5d6:	81a3      	strh	r3, [r4, #12]
 800b5d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5dc:	e78e      	b.n	800b4fc <__sflush_r+0x1c>
 800b5de:	4407      	add	r7, r0
 800b5e0:	eba8 0800 	sub.w	r8, r8, r0
 800b5e4:	e7e9      	b.n	800b5ba <__sflush_r+0xda>
 800b5e6:	bf00      	nop
 800b5e8:	20400001 	.word	0x20400001

0800b5ec <_fflush_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	690b      	ldr	r3, [r1, #16]
 800b5f0:	4605      	mov	r5, r0
 800b5f2:	460c      	mov	r4, r1
 800b5f4:	b913      	cbnz	r3, 800b5fc <_fflush_r+0x10>
 800b5f6:	2500      	movs	r5, #0
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	bd38      	pop	{r3, r4, r5, pc}
 800b5fc:	b118      	cbz	r0, 800b606 <_fflush_r+0x1a>
 800b5fe:	6983      	ldr	r3, [r0, #24]
 800b600:	b90b      	cbnz	r3, 800b606 <_fflush_r+0x1a>
 800b602:	f000 f887 	bl	800b714 <__sinit>
 800b606:	4b14      	ldr	r3, [pc, #80]	; (800b658 <_fflush_r+0x6c>)
 800b608:	429c      	cmp	r4, r3
 800b60a:	d11b      	bne.n	800b644 <_fflush_r+0x58>
 800b60c:	686c      	ldr	r4, [r5, #4]
 800b60e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b612:	2b00      	cmp	r3, #0
 800b614:	d0ef      	beq.n	800b5f6 <_fflush_r+0xa>
 800b616:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b618:	07d0      	lsls	r0, r2, #31
 800b61a:	d404      	bmi.n	800b626 <_fflush_r+0x3a>
 800b61c:	0599      	lsls	r1, r3, #22
 800b61e:	d402      	bmi.n	800b626 <_fflush_r+0x3a>
 800b620:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b622:	f000 f915 	bl	800b850 <__retarget_lock_acquire_recursive>
 800b626:	4628      	mov	r0, r5
 800b628:	4621      	mov	r1, r4
 800b62a:	f7ff ff59 	bl	800b4e0 <__sflush_r>
 800b62e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b630:	07da      	lsls	r2, r3, #31
 800b632:	4605      	mov	r5, r0
 800b634:	d4e0      	bmi.n	800b5f8 <_fflush_r+0xc>
 800b636:	89a3      	ldrh	r3, [r4, #12]
 800b638:	059b      	lsls	r3, r3, #22
 800b63a:	d4dd      	bmi.n	800b5f8 <_fflush_r+0xc>
 800b63c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b63e:	f000 f908 	bl	800b852 <__retarget_lock_release_recursive>
 800b642:	e7d9      	b.n	800b5f8 <_fflush_r+0xc>
 800b644:	4b05      	ldr	r3, [pc, #20]	; (800b65c <_fflush_r+0x70>)
 800b646:	429c      	cmp	r4, r3
 800b648:	d101      	bne.n	800b64e <_fflush_r+0x62>
 800b64a:	68ac      	ldr	r4, [r5, #8]
 800b64c:	e7df      	b.n	800b60e <_fflush_r+0x22>
 800b64e:	4b04      	ldr	r3, [pc, #16]	; (800b660 <_fflush_r+0x74>)
 800b650:	429c      	cmp	r4, r3
 800b652:	bf08      	it	eq
 800b654:	68ec      	ldreq	r4, [r5, #12]
 800b656:	e7da      	b.n	800b60e <_fflush_r+0x22>
 800b658:	0800c03c 	.word	0x0800c03c
 800b65c:	0800c05c 	.word	0x0800c05c
 800b660:	0800c01c 	.word	0x0800c01c

0800b664 <std>:
 800b664:	2300      	movs	r3, #0
 800b666:	b510      	push	{r4, lr}
 800b668:	4604      	mov	r4, r0
 800b66a:	e9c0 3300 	strd	r3, r3, [r0]
 800b66e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b672:	6083      	str	r3, [r0, #8]
 800b674:	8181      	strh	r1, [r0, #12]
 800b676:	6643      	str	r3, [r0, #100]	; 0x64
 800b678:	81c2      	strh	r2, [r0, #14]
 800b67a:	6183      	str	r3, [r0, #24]
 800b67c:	4619      	mov	r1, r3
 800b67e:	2208      	movs	r2, #8
 800b680:	305c      	adds	r0, #92	; 0x5c
 800b682:	f7fb fdcd 	bl	8007220 <memset>
 800b686:	4b05      	ldr	r3, [pc, #20]	; (800b69c <std+0x38>)
 800b688:	6263      	str	r3, [r4, #36]	; 0x24
 800b68a:	4b05      	ldr	r3, [pc, #20]	; (800b6a0 <std+0x3c>)
 800b68c:	62a3      	str	r3, [r4, #40]	; 0x28
 800b68e:	4b05      	ldr	r3, [pc, #20]	; (800b6a4 <std+0x40>)
 800b690:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b692:	4b05      	ldr	r3, [pc, #20]	; (800b6a8 <std+0x44>)
 800b694:	6224      	str	r4, [r4, #32]
 800b696:	6323      	str	r3, [r4, #48]	; 0x30
 800b698:	bd10      	pop	{r4, pc}
 800b69a:	bf00      	nop
 800b69c:	0800b9b9 	.word	0x0800b9b9
 800b6a0:	0800b9db 	.word	0x0800b9db
 800b6a4:	0800ba13 	.word	0x0800ba13
 800b6a8:	0800ba37 	.word	0x0800ba37

0800b6ac <_cleanup_r>:
 800b6ac:	4901      	ldr	r1, [pc, #4]	; (800b6b4 <_cleanup_r+0x8>)
 800b6ae:	f000 b8af 	b.w	800b810 <_fwalk_reent>
 800b6b2:	bf00      	nop
 800b6b4:	0800b5ed 	.word	0x0800b5ed

0800b6b8 <__sfmoreglue>:
 800b6b8:	b570      	push	{r4, r5, r6, lr}
 800b6ba:	2268      	movs	r2, #104	; 0x68
 800b6bc:	1e4d      	subs	r5, r1, #1
 800b6be:	4355      	muls	r5, r2
 800b6c0:	460e      	mov	r6, r1
 800b6c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b6c6:	f7ff fa59 	bl	800ab7c <_malloc_r>
 800b6ca:	4604      	mov	r4, r0
 800b6cc:	b140      	cbz	r0, 800b6e0 <__sfmoreglue+0x28>
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	e9c0 1600 	strd	r1, r6, [r0]
 800b6d4:	300c      	adds	r0, #12
 800b6d6:	60a0      	str	r0, [r4, #8]
 800b6d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b6dc:	f7fb fda0 	bl	8007220 <memset>
 800b6e0:	4620      	mov	r0, r4
 800b6e2:	bd70      	pop	{r4, r5, r6, pc}

0800b6e4 <__sfp_lock_acquire>:
 800b6e4:	4801      	ldr	r0, [pc, #4]	; (800b6ec <__sfp_lock_acquire+0x8>)
 800b6e6:	f000 b8b3 	b.w	800b850 <__retarget_lock_acquire_recursive>
 800b6ea:	bf00      	nop
 800b6ec:	200007b5 	.word	0x200007b5

0800b6f0 <__sfp_lock_release>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__sfp_lock_release+0x8>)
 800b6f2:	f000 b8ae 	b.w	800b852 <__retarget_lock_release_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	200007b5 	.word	0x200007b5

0800b6fc <__sinit_lock_acquire>:
 800b6fc:	4801      	ldr	r0, [pc, #4]	; (800b704 <__sinit_lock_acquire+0x8>)
 800b6fe:	f000 b8a7 	b.w	800b850 <__retarget_lock_acquire_recursive>
 800b702:	bf00      	nop
 800b704:	200007b6 	.word	0x200007b6

0800b708 <__sinit_lock_release>:
 800b708:	4801      	ldr	r0, [pc, #4]	; (800b710 <__sinit_lock_release+0x8>)
 800b70a:	f000 b8a2 	b.w	800b852 <__retarget_lock_release_recursive>
 800b70e:	bf00      	nop
 800b710:	200007b6 	.word	0x200007b6

0800b714 <__sinit>:
 800b714:	b510      	push	{r4, lr}
 800b716:	4604      	mov	r4, r0
 800b718:	f7ff fff0 	bl	800b6fc <__sinit_lock_acquire>
 800b71c:	69a3      	ldr	r3, [r4, #24]
 800b71e:	b11b      	cbz	r3, 800b728 <__sinit+0x14>
 800b720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b724:	f7ff bff0 	b.w	800b708 <__sinit_lock_release>
 800b728:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b72c:	6523      	str	r3, [r4, #80]	; 0x50
 800b72e:	4b13      	ldr	r3, [pc, #76]	; (800b77c <__sinit+0x68>)
 800b730:	4a13      	ldr	r2, [pc, #76]	; (800b780 <__sinit+0x6c>)
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	62a2      	str	r2, [r4, #40]	; 0x28
 800b736:	42a3      	cmp	r3, r4
 800b738:	bf04      	itt	eq
 800b73a:	2301      	moveq	r3, #1
 800b73c:	61a3      	streq	r3, [r4, #24]
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 f820 	bl	800b784 <__sfp>
 800b744:	6060      	str	r0, [r4, #4]
 800b746:	4620      	mov	r0, r4
 800b748:	f000 f81c 	bl	800b784 <__sfp>
 800b74c:	60a0      	str	r0, [r4, #8]
 800b74e:	4620      	mov	r0, r4
 800b750:	f000 f818 	bl	800b784 <__sfp>
 800b754:	2200      	movs	r2, #0
 800b756:	60e0      	str	r0, [r4, #12]
 800b758:	2104      	movs	r1, #4
 800b75a:	6860      	ldr	r0, [r4, #4]
 800b75c:	f7ff ff82 	bl	800b664 <std>
 800b760:	68a0      	ldr	r0, [r4, #8]
 800b762:	2201      	movs	r2, #1
 800b764:	2109      	movs	r1, #9
 800b766:	f7ff ff7d 	bl	800b664 <std>
 800b76a:	68e0      	ldr	r0, [r4, #12]
 800b76c:	2202      	movs	r2, #2
 800b76e:	2112      	movs	r1, #18
 800b770:	f7ff ff78 	bl	800b664 <std>
 800b774:	2301      	movs	r3, #1
 800b776:	61a3      	str	r3, [r4, #24]
 800b778:	e7d2      	b.n	800b720 <__sinit+0xc>
 800b77a:	bf00      	nop
 800b77c:	0800bbd4 	.word	0x0800bbd4
 800b780:	0800b6ad 	.word	0x0800b6ad

0800b784 <__sfp>:
 800b784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b786:	4607      	mov	r7, r0
 800b788:	f7ff ffac 	bl	800b6e4 <__sfp_lock_acquire>
 800b78c:	4b1e      	ldr	r3, [pc, #120]	; (800b808 <__sfp+0x84>)
 800b78e:	681e      	ldr	r6, [r3, #0]
 800b790:	69b3      	ldr	r3, [r6, #24]
 800b792:	b913      	cbnz	r3, 800b79a <__sfp+0x16>
 800b794:	4630      	mov	r0, r6
 800b796:	f7ff ffbd 	bl	800b714 <__sinit>
 800b79a:	3648      	adds	r6, #72	; 0x48
 800b79c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b7a0:	3b01      	subs	r3, #1
 800b7a2:	d503      	bpl.n	800b7ac <__sfp+0x28>
 800b7a4:	6833      	ldr	r3, [r6, #0]
 800b7a6:	b30b      	cbz	r3, 800b7ec <__sfp+0x68>
 800b7a8:	6836      	ldr	r6, [r6, #0]
 800b7aa:	e7f7      	b.n	800b79c <__sfp+0x18>
 800b7ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b7b0:	b9d5      	cbnz	r5, 800b7e8 <__sfp+0x64>
 800b7b2:	4b16      	ldr	r3, [pc, #88]	; (800b80c <__sfp+0x88>)
 800b7b4:	60e3      	str	r3, [r4, #12]
 800b7b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b7ba:	6665      	str	r5, [r4, #100]	; 0x64
 800b7bc:	f000 f847 	bl	800b84e <__retarget_lock_init_recursive>
 800b7c0:	f7ff ff96 	bl	800b6f0 <__sfp_lock_release>
 800b7c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b7c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b7cc:	6025      	str	r5, [r4, #0]
 800b7ce:	61a5      	str	r5, [r4, #24]
 800b7d0:	2208      	movs	r2, #8
 800b7d2:	4629      	mov	r1, r5
 800b7d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b7d8:	f7fb fd22 	bl	8007220 <memset>
 800b7dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b7e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7e8:	3468      	adds	r4, #104	; 0x68
 800b7ea:	e7d9      	b.n	800b7a0 <__sfp+0x1c>
 800b7ec:	2104      	movs	r1, #4
 800b7ee:	4638      	mov	r0, r7
 800b7f0:	f7ff ff62 	bl	800b6b8 <__sfmoreglue>
 800b7f4:	4604      	mov	r4, r0
 800b7f6:	6030      	str	r0, [r6, #0]
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	d1d5      	bne.n	800b7a8 <__sfp+0x24>
 800b7fc:	f7ff ff78 	bl	800b6f0 <__sfp_lock_release>
 800b800:	230c      	movs	r3, #12
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	e7ee      	b.n	800b7e4 <__sfp+0x60>
 800b806:	bf00      	nop
 800b808:	0800bbd4 	.word	0x0800bbd4
 800b80c:	ffff0001 	.word	0xffff0001

0800b810 <_fwalk_reent>:
 800b810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b814:	4606      	mov	r6, r0
 800b816:	4688      	mov	r8, r1
 800b818:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b81c:	2700      	movs	r7, #0
 800b81e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b822:	f1b9 0901 	subs.w	r9, r9, #1
 800b826:	d505      	bpl.n	800b834 <_fwalk_reent+0x24>
 800b828:	6824      	ldr	r4, [r4, #0]
 800b82a:	2c00      	cmp	r4, #0
 800b82c:	d1f7      	bne.n	800b81e <_fwalk_reent+0xe>
 800b82e:	4638      	mov	r0, r7
 800b830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b834:	89ab      	ldrh	r3, [r5, #12]
 800b836:	2b01      	cmp	r3, #1
 800b838:	d907      	bls.n	800b84a <_fwalk_reent+0x3a>
 800b83a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b83e:	3301      	adds	r3, #1
 800b840:	d003      	beq.n	800b84a <_fwalk_reent+0x3a>
 800b842:	4629      	mov	r1, r5
 800b844:	4630      	mov	r0, r6
 800b846:	47c0      	blx	r8
 800b848:	4307      	orrs	r7, r0
 800b84a:	3568      	adds	r5, #104	; 0x68
 800b84c:	e7e9      	b.n	800b822 <_fwalk_reent+0x12>

0800b84e <__retarget_lock_init_recursive>:
 800b84e:	4770      	bx	lr

0800b850 <__retarget_lock_acquire_recursive>:
 800b850:	4770      	bx	lr

0800b852 <__retarget_lock_release_recursive>:
 800b852:	4770      	bx	lr

0800b854 <__swhatbuf_r>:
 800b854:	b570      	push	{r4, r5, r6, lr}
 800b856:	460e      	mov	r6, r1
 800b858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b85c:	2900      	cmp	r1, #0
 800b85e:	b096      	sub	sp, #88	; 0x58
 800b860:	4614      	mov	r4, r2
 800b862:	461d      	mov	r5, r3
 800b864:	da08      	bge.n	800b878 <__swhatbuf_r+0x24>
 800b866:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b86a:	2200      	movs	r2, #0
 800b86c:	602a      	str	r2, [r5, #0]
 800b86e:	061a      	lsls	r2, r3, #24
 800b870:	d410      	bmi.n	800b894 <__swhatbuf_r+0x40>
 800b872:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b876:	e00e      	b.n	800b896 <__swhatbuf_r+0x42>
 800b878:	466a      	mov	r2, sp
 800b87a:	f000 f903 	bl	800ba84 <_fstat_r>
 800b87e:	2800      	cmp	r0, #0
 800b880:	dbf1      	blt.n	800b866 <__swhatbuf_r+0x12>
 800b882:	9a01      	ldr	r2, [sp, #4]
 800b884:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b888:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b88c:	425a      	negs	r2, r3
 800b88e:	415a      	adcs	r2, r3
 800b890:	602a      	str	r2, [r5, #0]
 800b892:	e7ee      	b.n	800b872 <__swhatbuf_r+0x1e>
 800b894:	2340      	movs	r3, #64	; 0x40
 800b896:	2000      	movs	r0, #0
 800b898:	6023      	str	r3, [r4, #0]
 800b89a:	b016      	add	sp, #88	; 0x58
 800b89c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b8a0 <__smakebuf_r>:
 800b8a0:	898b      	ldrh	r3, [r1, #12]
 800b8a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b8a4:	079d      	lsls	r5, r3, #30
 800b8a6:	4606      	mov	r6, r0
 800b8a8:	460c      	mov	r4, r1
 800b8aa:	d507      	bpl.n	800b8bc <__smakebuf_r+0x1c>
 800b8ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b8b0:	6023      	str	r3, [r4, #0]
 800b8b2:	6123      	str	r3, [r4, #16]
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	6163      	str	r3, [r4, #20]
 800b8b8:	b002      	add	sp, #8
 800b8ba:	bd70      	pop	{r4, r5, r6, pc}
 800b8bc:	ab01      	add	r3, sp, #4
 800b8be:	466a      	mov	r2, sp
 800b8c0:	f7ff ffc8 	bl	800b854 <__swhatbuf_r>
 800b8c4:	9900      	ldr	r1, [sp, #0]
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	4630      	mov	r0, r6
 800b8ca:	f7ff f957 	bl	800ab7c <_malloc_r>
 800b8ce:	b948      	cbnz	r0, 800b8e4 <__smakebuf_r+0x44>
 800b8d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8d4:	059a      	lsls	r2, r3, #22
 800b8d6:	d4ef      	bmi.n	800b8b8 <__smakebuf_r+0x18>
 800b8d8:	f023 0303 	bic.w	r3, r3, #3
 800b8dc:	f043 0302 	orr.w	r3, r3, #2
 800b8e0:	81a3      	strh	r3, [r4, #12]
 800b8e2:	e7e3      	b.n	800b8ac <__smakebuf_r+0xc>
 800b8e4:	4b0d      	ldr	r3, [pc, #52]	; (800b91c <__smakebuf_r+0x7c>)
 800b8e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8e8:	89a3      	ldrh	r3, [r4, #12]
 800b8ea:	6020      	str	r0, [r4, #0]
 800b8ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f0:	81a3      	strh	r3, [r4, #12]
 800b8f2:	9b00      	ldr	r3, [sp, #0]
 800b8f4:	6163      	str	r3, [r4, #20]
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	6120      	str	r0, [r4, #16]
 800b8fa:	b15b      	cbz	r3, 800b914 <__smakebuf_r+0x74>
 800b8fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b900:	4630      	mov	r0, r6
 800b902:	f000 f8d1 	bl	800baa8 <_isatty_r>
 800b906:	b128      	cbz	r0, 800b914 <__smakebuf_r+0x74>
 800b908:	89a3      	ldrh	r3, [r4, #12]
 800b90a:	f023 0303 	bic.w	r3, r3, #3
 800b90e:	f043 0301 	orr.w	r3, r3, #1
 800b912:	81a3      	strh	r3, [r4, #12]
 800b914:	89a0      	ldrh	r0, [r4, #12]
 800b916:	4305      	orrs	r5, r0
 800b918:	81a5      	strh	r5, [r4, #12]
 800b91a:	e7cd      	b.n	800b8b8 <__smakebuf_r+0x18>
 800b91c:	0800b6ad 	.word	0x0800b6ad

0800b920 <_malloc_usable_size_r>:
 800b920:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b924:	1f18      	subs	r0, r3, #4
 800b926:	2b00      	cmp	r3, #0
 800b928:	bfbc      	itt	lt
 800b92a:	580b      	ldrlt	r3, [r1, r0]
 800b92c:	18c0      	addlt	r0, r0, r3
 800b92e:	4770      	bx	lr

0800b930 <_raise_r>:
 800b930:	291f      	cmp	r1, #31
 800b932:	b538      	push	{r3, r4, r5, lr}
 800b934:	4604      	mov	r4, r0
 800b936:	460d      	mov	r5, r1
 800b938:	d904      	bls.n	800b944 <_raise_r+0x14>
 800b93a:	2316      	movs	r3, #22
 800b93c:	6003      	str	r3, [r0, #0]
 800b93e:	f04f 30ff 	mov.w	r0, #4294967295
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b946:	b112      	cbz	r2, 800b94e <_raise_r+0x1e>
 800b948:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b94c:	b94b      	cbnz	r3, 800b962 <_raise_r+0x32>
 800b94e:	4620      	mov	r0, r4
 800b950:	f000 f830 	bl	800b9b4 <_getpid_r>
 800b954:	462a      	mov	r2, r5
 800b956:	4601      	mov	r1, r0
 800b958:	4620      	mov	r0, r4
 800b95a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b95e:	f000 b817 	b.w	800b990 <_kill_r>
 800b962:	2b01      	cmp	r3, #1
 800b964:	d00a      	beq.n	800b97c <_raise_r+0x4c>
 800b966:	1c59      	adds	r1, r3, #1
 800b968:	d103      	bne.n	800b972 <_raise_r+0x42>
 800b96a:	2316      	movs	r3, #22
 800b96c:	6003      	str	r3, [r0, #0]
 800b96e:	2001      	movs	r0, #1
 800b970:	e7e7      	b.n	800b942 <_raise_r+0x12>
 800b972:	2400      	movs	r4, #0
 800b974:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b978:	4628      	mov	r0, r5
 800b97a:	4798      	blx	r3
 800b97c:	2000      	movs	r0, #0
 800b97e:	e7e0      	b.n	800b942 <_raise_r+0x12>

0800b980 <raise>:
 800b980:	4b02      	ldr	r3, [pc, #8]	; (800b98c <raise+0xc>)
 800b982:	4601      	mov	r1, r0
 800b984:	6818      	ldr	r0, [r3, #0]
 800b986:	f7ff bfd3 	b.w	800b930 <_raise_r>
 800b98a:	bf00      	nop
 800b98c:	20000018 	.word	0x20000018

0800b990 <_kill_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4d07      	ldr	r5, [pc, #28]	; (800b9b0 <_kill_r+0x20>)
 800b994:	2300      	movs	r3, #0
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	4611      	mov	r1, r2
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	f7f6 f905 	bl	8001bac <_kill>
 800b9a2:	1c43      	adds	r3, r0, #1
 800b9a4:	d102      	bne.n	800b9ac <_kill_r+0x1c>
 800b9a6:	682b      	ldr	r3, [r5, #0]
 800b9a8:	b103      	cbz	r3, 800b9ac <_kill_r+0x1c>
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	bd38      	pop	{r3, r4, r5, pc}
 800b9ae:	bf00      	nop
 800b9b0:	200007b0 	.word	0x200007b0

0800b9b4 <_getpid_r>:
 800b9b4:	f7f6 b8f2 	b.w	8001b9c <_getpid>

0800b9b8 <__sread>:
 800b9b8:	b510      	push	{r4, lr}
 800b9ba:	460c      	mov	r4, r1
 800b9bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9c0:	f000 f894 	bl	800baec <_read_r>
 800b9c4:	2800      	cmp	r0, #0
 800b9c6:	bfab      	itete	ge
 800b9c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b9ca:	89a3      	ldrhlt	r3, [r4, #12]
 800b9cc:	181b      	addge	r3, r3, r0
 800b9ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b9d2:	bfac      	ite	ge
 800b9d4:	6563      	strge	r3, [r4, #84]	; 0x54
 800b9d6:	81a3      	strhlt	r3, [r4, #12]
 800b9d8:	bd10      	pop	{r4, pc}

0800b9da <__swrite>:
 800b9da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b9de:	461f      	mov	r7, r3
 800b9e0:	898b      	ldrh	r3, [r1, #12]
 800b9e2:	05db      	lsls	r3, r3, #23
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	460c      	mov	r4, r1
 800b9e8:	4616      	mov	r6, r2
 800b9ea:	d505      	bpl.n	800b9f8 <__swrite+0x1e>
 800b9ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f0:	2302      	movs	r3, #2
 800b9f2:	2200      	movs	r2, #0
 800b9f4:	f000 f868 	bl	800bac8 <_lseek_r>
 800b9f8:	89a3      	ldrh	r3, [r4, #12]
 800b9fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ba02:	81a3      	strh	r3, [r4, #12]
 800ba04:	4632      	mov	r2, r6
 800ba06:	463b      	mov	r3, r7
 800ba08:	4628      	mov	r0, r5
 800ba0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ba0e:	f000 b817 	b.w	800ba40 <_write_r>

0800ba12 <__sseek>:
 800ba12:	b510      	push	{r4, lr}
 800ba14:	460c      	mov	r4, r1
 800ba16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba1a:	f000 f855 	bl	800bac8 <_lseek_r>
 800ba1e:	1c43      	adds	r3, r0, #1
 800ba20:	89a3      	ldrh	r3, [r4, #12]
 800ba22:	bf15      	itete	ne
 800ba24:	6560      	strne	r0, [r4, #84]	; 0x54
 800ba26:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ba2a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ba2e:	81a3      	strheq	r3, [r4, #12]
 800ba30:	bf18      	it	ne
 800ba32:	81a3      	strhne	r3, [r4, #12]
 800ba34:	bd10      	pop	{r4, pc}

0800ba36 <__sclose>:
 800ba36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ba3a:	f000 b813 	b.w	800ba64 <_close_r>
	...

0800ba40 <_write_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	4d07      	ldr	r5, [pc, #28]	; (800ba60 <_write_r+0x20>)
 800ba44:	4604      	mov	r4, r0
 800ba46:	4608      	mov	r0, r1
 800ba48:	4611      	mov	r1, r2
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	602a      	str	r2, [r5, #0]
 800ba4e:	461a      	mov	r2, r3
 800ba50:	f7f6 f8e3 	bl	8001c1a <_write>
 800ba54:	1c43      	adds	r3, r0, #1
 800ba56:	d102      	bne.n	800ba5e <_write_r+0x1e>
 800ba58:	682b      	ldr	r3, [r5, #0]
 800ba5a:	b103      	cbz	r3, 800ba5e <_write_r+0x1e>
 800ba5c:	6023      	str	r3, [r4, #0]
 800ba5e:	bd38      	pop	{r3, r4, r5, pc}
 800ba60:	200007b0 	.word	0x200007b0

0800ba64 <_close_r>:
 800ba64:	b538      	push	{r3, r4, r5, lr}
 800ba66:	4d06      	ldr	r5, [pc, #24]	; (800ba80 <_close_r+0x1c>)
 800ba68:	2300      	movs	r3, #0
 800ba6a:	4604      	mov	r4, r0
 800ba6c:	4608      	mov	r0, r1
 800ba6e:	602b      	str	r3, [r5, #0]
 800ba70:	f7f6 f8ef 	bl	8001c52 <_close>
 800ba74:	1c43      	adds	r3, r0, #1
 800ba76:	d102      	bne.n	800ba7e <_close_r+0x1a>
 800ba78:	682b      	ldr	r3, [r5, #0]
 800ba7a:	b103      	cbz	r3, 800ba7e <_close_r+0x1a>
 800ba7c:	6023      	str	r3, [r4, #0]
 800ba7e:	bd38      	pop	{r3, r4, r5, pc}
 800ba80:	200007b0 	.word	0x200007b0

0800ba84 <_fstat_r>:
 800ba84:	b538      	push	{r3, r4, r5, lr}
 800ba86:	4d07      	ldr	r5, [pc, #28]	; (800baa4 <_fstat_r+0x20>)
 800ba88:	2300      	movs	r3, #0
 800ba8a:	4604      	mov	r4, r0
 800ba8c:	4608      	mov	r0, r1
 800ba8e:	4611      	mov	r1, r2
 800ba90:	602b      	str	r3, [r5, #0]
 800ba92:	f7f6 f8ea 	bl	8001c6a <_fstat>
 800ba96:	1c43      	adds	r3, r0, #1
 800ba98:	d102      	bne.n	800baa0 <_fstat_r+0x1c>
 800ba9a:	682b      	ldr	r3, [r5, #0]
 800ba9c:	b103      	cbz	r3, 800baa0 <_fstat_r+0x1c>
 800ba9e:	6023      	str	r3, [r4, #0]
 800baa0:	bd38      	pop	{r3, r4, r5, pc}
 800baa2:	bf00      	nop
 800baa4:	200007b0 	.word	0x200007b0

0800baa8 <_isatty_r>:
 800baa8:	b538      	push	{r3, r4, r5, lr}
 800baaa:	4d06      	ldr	r5, [pc, #24]	; (800bac4 <_isatty_r+0x1c>)
 800baac:	2300      	movs	r3, #0
 800baae:	4604      	mov	r4, r0
 800bab0:	4608      	mov	r0, r1
 800bab2:	602b      	str	r3, [r5, #0]
 800bab4:	f7f6 f8e9 	bl	8001c8a <_isatty>
 800bab8:	1c43      	adds	r3, r0, #1
 800baba:	d102      	bne.n	800bac2 <_isatty_r+0x1a>
 800babc:	682b      	ldr	r3, [r5, #0]
 800babe:	b103      	cbz	r3, 800bac2 <_isatty_r+0x1a>
 800bac0:	6023      	str	r3, [r4, #0]
 800bac2:	bd38      	pop	{r3, r4, r5, pc}
 800bac4:	200007b0 	.word	0x200007b0

0800bac8 <_lseek_r>:
 800bac8:	b538      	push	{r3, r4, r5, lr}
 800baca:	4d07      	ldr	r5, [pc, #28]	; (800bae8 <_lseek_r+0x20>)
 800bacc:	4604      	mov	r4, r0
 800bace:	4608      	mov	r0, r1
 800bad0:	4611      	mov	r1, r2
 800bad2:	2200      	movs	r2, #0
 800bad4:	602a      	str	r2, [r5, #0]
 800bad6:	461a      	mov	r2, r3
 800bad8:	f7f6 f8e2 	bl	8001ca0 <_lseek>
 800badc:	1c43      	adds	r3, r0, #1
 800bade:	d102      	bne.n	800bae6 <_lseek_r+0x1e>
 800bae0:	682b      	ldr	r3, [r5, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <_lseek_r+0x1e>
 800bae4:	6023      	str	r3, [r4, #0]
 800bae6:	bd38      	pop	{r3, r4, r5, pc}
 800bae8:	200007b0 	.word	0x200007b0

0800baec <_read_r>:
 800baec:	b538      	push	{r3, r4, r5, lr}
 800baee:	4d07      	ldr	r5, [pc, #28]	; (800bb0c <_read_r+0x20>)
 800baf0:	4604      	mov	r4, r0
 800baf2:	4608      	mov	r0, r1
 800baf4:	4611      	mov	r1, r2
 800baf6:	2200      	movs	r2, #0
 800baf8:	602a      	str	r2, [r5, #0]
 800bafa:	461a      	mov	r2, r3
 800bafc:	f7f6 f870 	bl	8001be0 <_read>
 800bb00:	1c43      	adds	r3, r0, #1
 800bb02:	d102      	bne.n	800bb0a <_read_r+0x1e>
 800bb04:	682b      	ldr	r3, [r5, #0]
 800bb06:	b103      	cbz	r3, 800bb0a <_read_r+0x1e>
 800bb08:	6023      	str	r3, [r4, #0]
 800bb0a:	bd38      	pop	{r3, r4, r5, pc}
 800bb0c:	200007b0 	.word	0x200007b0

0800bb10 <_init>:
 800bb10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb12:	bf00      	nop
 800bb14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb16:	bc08      	pop	{r3}
 800bb18:	469e      	mov	lr, r3
 800bb1a:	4770      	bx	lr

0800bb1c <_fini>:
 800bb1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb1e:	bf00      	nop
 800bb20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb22:	bc08      	pop	{r3}
 800bb24:	469e      	mov	lr, r3
 800bb26:	4770      	bx	lr
