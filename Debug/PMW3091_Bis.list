
PMW3091_Bis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009960  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08009af0  08009af0  00019af0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a02c  0800a02c  000201ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800a02c  0800a02c  0001a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a034  0800a034  000201ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a034  0800a034  0001a034  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a038  0800a038  0001a038  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0800a03c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000538  200001ec  0800a228  000201ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000724  0800a228  00020724  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dde6  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f97  00000000  00000000  0002e002  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  0002ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00030b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002151a  00000000  00000000  000316b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6c0  00000000  00000000  00052bd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4aae  00000000  00000000  00061292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00125d40  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045f0  00000000  00000000  00125d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001ec 	.word	0x200001ec
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ad8 	.word	0x08009ad8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	08009ad8 	.word	0x08009ad8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b084      	sub	sp, #16
 8000ffc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ffe:	f000 fbee 	bl	80017de <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001002:	f000 f8bb 	bl	800117c <SystemClock_Config>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */

  MX_GPIO_Init();
 8001006:	f000 f989 	bl	800131c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800100a:	f000 f957 	bl	80012bc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800100e:	f000 f917 	bl	8001240 <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

  Tx_len = sprintf (buffer, "init\r\n"); // Début initialisation + écriture de "init"
 8001012:	494b      	ldr	r1, [pc, #300]	; (8001140 <main+0x148>)
 8001014:	484b      	ldr	r0, [pc, #300]	; (8001144 <main+0x14c>)
 8001016:	f004 ff6d 	bl	8005ef4 <siprintf>
 800101a:	4603      	mov	r3, r0
 800101c:	b29a      	uxth	r2, r3
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <main+0x150>)
 8001020:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2,(uint8_t*) buffer, Tx_len, 100); // Permet d'écrire en uart le tx_len : Va écrire dans le terminal ; "init"
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <main+0x150>)
 8001024:	881a      	ldrh	r2, [r3, #0]
 8001026:	2364      	movs	r3, #100	; 0x64
 8001028:	4946      	ldr	r1, [pc, #280]	; (8001144 <main+0x14c>)
 800102a:	4848      	ldr	r0, [pc, #288]	; (800114c <main+0x154>)
 800102c:	f002 ffda 	bl	8003fe4 <HAL_UART_Transmit>

  status = PMW3901_Init(&PMW3901_Descriptor); // Permet d'initialiser le capteur optique
 8001030:	4847      	ldr	r0, [pc, #284]	; (8001150 <main+0x158>)
 8001032:	f003 fcf1 	bl	8004a18 <PMW3901_Init>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	4b46      	ldr	r3, [pc, #280]	; (8001154 <main+0x15c>)
 800103c:	701a      	strb	r2, [r3, #0]

  Tx_len = sprintf (buffer, "init status = %d\r\n",status); // Permet d'afficher status qui s'il est égal à 0 veut dire que tout fonctionne
 800103e:	4b45      	ldr	r3, [pc, #276]	; (8001154 <main+0x15c>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	461a      	mov	r2, r3
 8001044:	4944      	ldr	r1, [pc, #272]	; (8001158 <main+0x160>)
 8001046:	483f      	ldr	r0, [pc, #252]	; (8001144 <main+0x14c>)
 8001048:	f004 ff54 	bl	8005ef4 <siprintf>
 800104c:	4603      	mov	r3, r0
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b3d      	ldr	r3, [pc, #244]	; (8001148 <main+0x150>)
 8001052:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100); // Permet d'écrire dans le terminal : "init status = " avec le status qui doit être à 0 indiquant que tout fonctionne
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <main+0x150>)
 8001056:	881a      	ldrh	r2, [r3, #0]
 8001058:	2364      	movs	r3, #100	; 0x64
 800105a:	493a      	ldr	r1, [pc, #232]	; (8001144 <main+0x14c>)
 800105c:	483b      	ldr	r0, [pc, #236]	; (800114c <main+0x154>)
 800105e:	f002 ffc1 	bl	8003fe4 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  status = PMW3901_Read_Variation(&var_x, &var_y); // Permet de lire les valeurs de var_x et var_y
 8001062:	493e      	ldr	r1, [pc, #248]	; (800115c <main+0x164>)
 8001064:	483e      	ldr	r0, [pc, #248]	; (8001160 <main+0x168>)
 8001066:	f004 f83d 	bl	80050e4 <PMW3901_Read_Variation>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4b39      	ldr	r3, [pc, #228]	; (8001154 <main+0x15c>)
 8001070:	701a      	strb	r2, [r3, #0]

	  dx = COEF_CAPTEUR_Petit_Robot_X * var_x;
 8001072:	4b3b      	ldr	r3, [pc, #236]	; (8001160 <main+0x168>)
 8001074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001078:	4618      	mov	r0, r3
 800107a:	f7ff fa53 	bl	8000524 <__aeabi_i2d>
 800107e:	f04f 0200 	mov.w	r2, #0
 8001082:	4b38      	ldr	r3, [pc, #224]	; (8001164 <main+0x16c>)
 8001084:	f7ff fab8 	bl	80005f8 <__aeabi_dmul>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fdaa 	bl	8000be8 <__aeabi_d2f>
 8001094:	4603      	mov	r3, r0
 8001096:	4a34      	ldr	r2, [pc, #208]	; (8001168 <main+0x170>)
 8001098:	6013      	str	r3, [r2, #0]
	  posX = posX + dx; // Permet de déterminer la position du robot grâce au capteur optique en X
 800109a:	4b34      	ldr	r3, [pc, #208]	; (800116c <main+0x174>)
 800109c:	ed93 7a00 	vldr	s14, [r3]
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <main+0x170>)
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010aa:	4b30      	ldr	r3, [pc, #192]	; (800116c <main+0x174>)
 80010ac:	edc3 7a00 	vstr	s15, [r3]

	  dy = COEF_CAPTEUR_Petit_Robot_Y * var_y;
 80010b0:	4b2a      	ldr	r3, [pc, #168]	; (800115c <main+0x164>)
 80010b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fa34 	bl	8000524 <__aeabi_i2d>
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <main+0x16c>)
 80010c2:	f7ff fa99 	bl	80005f8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4610      	mov	r0, r2
 80010cc:	4619      	mov	r1, r3
 80010ce:	f7ff fd8b 	bl	8000be8 <__aeabi_d2f>
 80010d2:	4603      	mov	r3, r0
 80010d4:	4a26      	ldr	r2, [pc, #152]	; (8001170 <main+0x178>)
 80010d6:	6013      	str	r3, [r2, #0]
	  posY = posY + dy; // Permet de déterminer la position du robot grâce au capteur optique en Y
 80010d8:	4b26      	ldr	r3, [pc, #152]	; (8001174 <main+0x17c>)
 80010da:	ed93 7a00 	vldr	s14, [r3]
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <main+0x178>)
 80010e0:	edd3 7a00 	vldr	s15, [r3]
 80010e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <main+0x17c>)
 80010ea:	edc3 7a00 	vstr	s15, [r3]

	  Tx_len = sprintf (buffer, "Position x = %f\tPosition y = %f\tStatus = %d\r\n",posX,posY,status);
 80010ee:	4b1f      	ldr	r3, [pc, #124]	; (800116c <main+0x174>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4618      	mov	r0, r3
 80010f4:	f7ff fa28 	bl	8000548 <__aeabi_f2d>
 80010f8:	4604      	mov	r4, r0
 80010fa:	460d      	mov	r5, r1
 80010fc:	4b1d      	ldr	r3, [pc, #116]	; (8001174 <main+0x17c>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff fa21 	bl	8000548 <__aeabi_f2d>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4912      	ldr	r1, [pc, #72]	; (8001154 <main+0x15c>)
 800110c:	7809      	ldrb	r1, [r1, #0]
 800110e:	9102      	str	r1, [sp, #8]
 8001110:	e9cd 2300 	strd	r2, r3, [sp]
 8001114:	4622      	mov	r2, r4
 8001116:	462b      	mov	r3, r5
 8001118:	4917      	ldr	r1, [pc, #92]	; (8001178 <main+0x180>)
 800111a:	480a      	ldr	r0, [pc, #40]	; (8001144 <main+0x14c>)
 800111c:	f004 feea 	bl	8005ef4 <siprintf>
 8001120:	4603      	mov	r3, r0
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b08      	ldr	r3, [pc, #32]	; (8001148 <main+0x150>)
 8001126:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, Tx_len, 100); // Permet d'afficher en uart dans le terminal le posX, posY, status
 8001128:	4b07      	ldr	r3, [pc, #28]	; (8001148 <main+0x150>)
 800112a:	881a      	ldrh	r2, [r3, #0]
 800112c:	2364      	movs	r3, #100	; 0x64
 800112e:	4905      	ldr	r1, [pc, #20]	; (8001144 <main+0x14c>)
 8001130:	4806      	ldr	r0, [pc, #24]	; (800114c <main+0x154>)
 8001132:	f002 ff57 	bl	8003fe4 <HAL_UART_Transmit>

	  HAL_Delay(10); // Permet de mettre un délai de 10 ms
 8001136:	200a      	movs	r0, #10
 8001138:	f000 fbc6 	bl	80018c8 <HAL_Delay>
	  status = PMW3901_Read_Variation(&var_x, &var_y); // Permet de lire les valeurs de var_x et var_y
 800113c:	e791      	b.n	8001062 <main+0x6a>
 800113e:	bf00      	nop
 8001140:	08009af0 	.word	0x08009af0
 8001144:	200002f0 	.word	0x200002f0
 8001148:	200006f0 	.word	0x200006f0
 800114c:	2000026c 	.word	0x2000026c
 8001150:	20000000 	.word	0x20000000
 8001154:	200006f2 	.word	0x200006f2
 8001158:	08009af8 	.word	0x08009af8
 800115c:	200006f6 	.word	0x200006f6
 8001160:	200006f4 	.word	0x200006f4
 8001164:	3fd00000 	.word	0x3fd00000
 8001168:	20000700 	.word	0x20000700
 800116c:	200006f8 	.word	0x200006f8
 8001170:	20000704 	.word	0x20000704
 8001174:	200006fc 	.word	0x200006fc
 8001178:	08009b0c 	.word	0x08009b0c

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b096      	sub	sp, #88	; 0x58
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2244      	movs	r2, #68	; 0x44
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f004 f82a 	bl	80051e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	463b      	mov	r3, r7
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800119e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80011a2:	f000 fe3b 	bl	8001e1c <HAL_PWREx_ControlVoltageScaling>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d001      	beq.n	80011b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80011ac:	f000 f916 	bl	80013dc <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80011b0:	f000 fe16 	bl	8001de0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <SystemClock_Config+0xc0>)
 80011b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80011ba:	4a20      	ldr	r2, [pc, #128]	; (800123c <SystemClock_Config+0xc0>)
 80011bc:	f023 0318 	bic.w	r3, r3, #24
 80011c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80011c4:	2314      	movs	r3, #20
 80011c6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80011d4:	2360      	movs	r3, #96	; 0x60
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d8:	2302      	movs	r3, #2
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80011dc:	2301      	movs	r3, #1
 80011de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80011e4:	2310      	movs	r3, #16
 80011e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80011e8:	2307      	movs	r3, #7
 80011ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fe65 	bl	8001ec8 <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001204:	f000 f8ea 	bl	80013dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2303      	movs	r3, #3
 800120e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	2101      	movs	r1, #1
 8001220:	4618      	mov	r0, r3
 8001222:	f001 fa65 	bl	80026f0 <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800122c:	f000 f8d6 	bl	80013dc <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001230:	f001 fe78 	bl	8002f24 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001234:	bf00      	nop
 8001236:	3758      	adds	r7, #88	; 0x58
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40021000 	.word	0x40021000

08001240 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001244:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <MX_SPI1_Init+0x78>)
 8001248:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <MX_SPI1_Init+0x74>)
 800124c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001250:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001258:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_SPI1_Init+0x74>)
 800125a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800125e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001266:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001268:	2200      	movs	r2, #0
 800126a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800126c:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_SPI1_Init+0x74>)
 800126e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001272:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001276:	2238      	movs	r2, #56	; 0x38
 8001278:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_SPI1_Init+0x74>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001288:	2200      	movs	r2, #0
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_SPI1_Init+0x74>)
 800128e:	2207      	movs	r2, #7
 8001290:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001292:	4b08      	ldr	r3, [pc, #32]	; (80012b4 <MX_SPI1_Init+0x74>)
 8001294:	2200      	movs	r2, #0
 8001296:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_SPI1_Init+0x74>)
 800129a:	2208      	movs	r2, #8
 800129c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_SPI1_Init+0x74>)
 80012a0:	f001 ff42 	bl	8003128 <HAL_SPI_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80012aa:	f000 f897 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000208 	.word	0x20000208
 80012b8:	40013000 	.word	0x40013000

080012bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c0:	4b14      	ldr	r3, [pc, #80]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012c2:	4a15      	ldr	r2, [pc, #84]	; (8001318 <MX_USART2_UART_Init+0x5c>)
 80012c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012c6:	4b13      	ldr	r3, [pc, #76]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012ce:	4b11      	ldr	r3, [pc, #68]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d4:	4b0f      	ldr	r3, [pc, #60]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012da:	4b0e      	ldr	r3, [pc, #56]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e0:	4b0c      	ldr	r3, [pc, #48]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012e2:	220c      	movs	r2, #12
 80012e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012ec:	4b09      	ldr	r3, [pc, #36]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012f8:	4b06      	ldr	r3, [pc, #24]	; (8001314 <MX_USART2_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012fe:	4805      	ldr	r0, [pc, #20]	; (8001314 <MX_USART2_UART_Init+0x58>)
 8001300:	f002 fe22 	bl	8003f48 <HAL_UART_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800130a:	f000 f867 	bl	80013dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800130e:	bf00      	nop
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	2000026c 	.word	0x2000026c
 8001318:	40004400 	.word	0x40004400

0800131c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b088      	sub	sp, #32
 8001320:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001322:	f107 030c 	add.w	r3, r7, #12
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001332:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <MX_GPIO_Init+0xb8>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <MX_GPIO_Init+0xb8>)
 8001338:	f043 0304 	orr.w	r3, r3, #4
 800133c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133e:	4b25      	ldr	r3, [pc, #148]	; (80013d4 <MX_GPIO_Init+0xb8>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134a:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <MX_GPIO_Init+0xb8>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <MX_GPIO_Init+0xb8>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <MX_GPIO_Init+0xb8>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <MX_GPIO_Init+0xb8>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	4a1b      	ldr	r2, [pc, #108]	; (80013d4 <MX_GPIO_Init+0xb8>)
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136e:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_GPIO_Init+0xb8>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	f003 0302 	and.w	r3, r3, #2
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800137a:	2200      	movs	r2, #0
 800137c:	2110      	movs	r1, #16
 800137e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001382:	f000 fd15 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	2108      	movs	r1, #8
 800138a:	4813      	ldr	r0, [pc, #76]	; (80013d8 <MX_GPIO_Init+0xbc>)
 800138c:	f000 fd10 	bl	8001db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8001390:	2310      	movs	r3, #16
 8001392:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 030c 	add.w	r3, r7, #12
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f000 fb97 	bl	8001adc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013ae:	2308      	movs	r3, #8
 80013b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	4619      	mov	r1, r3
 80013c4:	4804      	ldr	r0, [pc, #16]	; (80013d8 <MX_GPIO_Init+0xbc>)
 80013c6:	f000 fb89 	bl	8001adc <HAL_GPIO_Init>

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40021000 	.word	0x40021000
 80013d8:	48000400 	.word	0x48000400

080013dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e0:	b672      	cpsid	i
}
 80013e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <Error_Handler+0x8>
	...

080013e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_MspInit+0x44>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	4a0e      	ldr	r2, [pc, #56]	; (800142c <HAL_MspInit+0x44>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6613      	str	r3, [r2, #96]	; 0x60
 80013fa:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_MspInit+0x44>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_MspInit+0x44>)
 8001408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_MspInit+0x44>)
 800140c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001410:	6593      	str	r3, [r2, #88]	; 0x58
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_MspInit+0x44>)
 8001414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141a:	603b      	str	r3, [r7, #0]
 800141c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40021000 	.word	0x40021000

08001430 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0314 	add.w	r3, r7, #20
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
 8001446:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a17      	ldr	r2, [pc, #92]	; (80014ac <HAL_SPI_MspInit+0x7c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d128      	bne.n	80014a4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001452:	4b17      	ldr	r3, [pc, #92]	; (80014b0 <HAL_SPI_MspInit+0x80>)
 8001454:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001456:	4a16      	ldr	r2, [pc, #88]	; (80014b0 <HAL_SPI_MspInit+0x80>)
 8001458:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800145c:	6613      	str	r3, [r2, #96]	; 0x60
 800145e:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <HAL_SPI_MspInit+0x80>)
 8001460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001462:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <HAL_SPI_MspInit+0x80>)
 800146c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146e:	4a10      	ldr	r2, [pc, #64]	; (80014b0 <HAL_SPI_MspInit+0x80>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <HAL_SPI_MspInit+0x80>)
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	60fb      	str	r3, [r7, #12]
 8001480:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001482:	23e0      	movs	r3, #224	; 0xe0
 8001484:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001486:	2302      	movs	r3, #2
 8001488:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148e:	2303      	movs	r3, #3
 8001490:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001492:	2305      	movs	r3, #5
 8001494:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f000 fb1c 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014a4:	bf00      	nop
 80014a6:	3728      	adds	r7, #40	; 0x28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40013000 	.word	0x40013000
 80014b0:	40021000 	.word	0x40021000

080014b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b09e      	sub	sp, #120	; 0x78
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	f107 0310 	add.w	r3, r7, #16
 80014d0:	2254      	movs	r2, #84	; 0x54
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f003 fe85 	bl	80051e4 <memset>
  if(huart->Instance==USART2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a28      	ldr	r2, [pc, #160]	; (8001580 <HAL_UART_MspInit+0xcc>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d148      	bne.n	8001576 <HAL_UART_MspInit+0xc2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 0310 	add.w	r3, r7, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fb21 	bl	8002b38 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014fc:	f7ff ff6e 	bl	80013dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001500:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_UART_MspInit+0xd0>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <HAL_UART_MspInit+0xd0>)
 8001506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150a:	6593      	str	r3, [r2, #88]	; 0x58
 800150c:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_UART_MspInit+0xd0>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <HAL_UART_MspInit+0xd0>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a19      	ldr	r2, [pc, #100]	; (8001584 <HAL_UART_MspInit+0xd0>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b17      	ldr	r3, [pc, #92]	; (8001584 <HAL_UART_MspInit+0xd0>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001530:	2304      	movs	r3, #4
 8001532:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001540:	2307      	movs	r3, #7
 8001542:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001544:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f000 fac5 	bl	8001adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001556:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001558:	2302      	movs	r3, #2
 800155a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001560:	2303      	movs	r3, #3
 8001562:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001564:	2303      	movs	r3, #3
 8001566:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001572:	f000 fab3 	bl	8001adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001576:	bf00      	nop
 8001578:	3778      	adds	r7, #120	; 0x78
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40004400 	.word	0x40004400
 8001584:	40021000 	.word	0x40021000

08001588 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800158c:	e7fe      	b.n	800158c <NMI_Handler+0x4>

0800158e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800158e:	b480      	push	{r7}
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001592:	e7fe      	b.n	8001592 <HardFault_Handler+0x4>

08001594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler+0x4>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <BusFault_Handler+0x4>

080015a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015a4:	e7fe      	b.n	80015a4 <UsageFault_Handler+0x4>

080015a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015a6:	b480      	push	{r7}
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015d4:	f000 f958 	bl	8001888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}

080015dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_kill>:

int _kill(int pid, int sig)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f6:	f003 fdcb 	bl	8005190 <__errno>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2216      	movs	r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_exit>:

void _exit (int status)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800161e:	e7fe      	b.n	800161e <_exit+0x12>

08001620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e00a      	b.n	8001648 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001632:	f3af 8000 	nop.w
 8001636:	4601      	mov	r1, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	dbf0      	blt.n	8001632 <_read+0x12>
	}

return len;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b086      	sub	sp, #24
 800165e:	af00      	add	r7, sp, #0
 8001660:	60f8      	str	r0, [r7, #12]
 8001662:	60b9      	str	r1, [r7, #8]
 8001664:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001666:	2300      	movs	r3, #0
 8001668:	617b      	str	r3, [r7, #20]
 800166a:	e009      	b.n	8001680 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	1c5a      	adds	r2, r3, #1
 8001670:	60ba      	str	r2, [r7, #8]
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	4618      	mov	r0, r3
 8001676:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf1      	blt.n	800166c <_write+0x12>
	}
	return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_close>:

int _close(int file)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	return -1;
 800169a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800169e:	4618      	mov	r0, r3
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016aa:	b480      	push	{r7}
 80016ac:	b083      	sub	sp, #12
 80016ae:	af00      	add	r7, sp, #0
 80016b0:	6078      	str	r0, [r7, #4]
 80016b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ba:	605a      	str	r2, [r3, #4]
	return 0;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_isatty>:

int _isatty(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	return 1;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]
	return 0;
 80016ec:	2300      	movs	r3, #0
}
 80016ee:	4618      	mov	r0, r3
 80016f0:	3714      	adds	r7, #20
 80016f2:	46bd      	mov	sp, r7
 80016f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f8:	4770      	bx	lr
	...

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f003 fd30 	bl	8005190 <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	2000c000 	.word	0x2000c000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000708 	.word	0x20000708
 8001764:	20000728 	.word	0x20000728

08001768 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800178c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001790:	f7ff ffea 	bl	8001768 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001794:	480c      	ldr	r0, [pc, #48]	; (80017c8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001796:	490d      	ldr	r1, [pc, #52]	; (80017cc <LoopForever+0xa>)
  ldr r2, =_sidata
 8001798:	4a0d      	ldr	r2, [pc, #52]	; (80017d0 <LoopForever+0xe>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017ac:	4c0a      	ldr	r4, [pc, #40]	; (80017d8 <LoopForever+0x16>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017ba:	f003 fcef 	bl	800519c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017be:	f7ff fc1b 	bl	8000ff8 <main>

080017c2 <LoopForever>:

LoopForever:
    b LoopForever
 80017c2:	e7fe      	b.n	80017c2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017c4:	2000c000 	.word	0x2000c000
  ldr r0, =_sdata
 80017c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017cc:	200001ec 	.word	0x200001ec
  ldr r2, =_sidata
 80017d0:	0800a03c 	.word	0x0800a03c
  ldr r2, =_sbss
 80017d4:	200001ec 	.word	0x200001ec
  ldr r4, =_ebss
 80017d8:	20000724 	.word	0x20000724

080017dc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017dc:	e7fe      	b.n	80017dc <ADC1_IRQHandler>

080017de <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b082      	sub	sp, #8
 80017e2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f943 	bl	8001a74 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017ee:	2000      	movs	r0, #0
 80017f0:	f000 f80e 	bl	8001810 <HAL_InitTick>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	71fb      	strb	r3, [r7, #7]
 80017fe:	e001      	b.n	8001804 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001800:	f7ff fdf2 	bl	80013e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001804:	79fb      	ldrb	r3, [r7, #7]
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
	...

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b084      	sub	sp, #16
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800181c:	4b17      	ldr	r3, [pc, #92]	; (800187c <HAL_InitTick+0x6c>)
 800181e:	781b      	ldrb	r3, [r3, #0]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d023      	beq.n	800186c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001824:	4b16      	ldr	r3, [pc, #88]	; (8001880 <HAL_InitTick+0x70>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b14      	ldr	r3, [pc, #80]	; (800187c <HAL_InitTick+0x6c>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f941 	bl	8001ac2 <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d10f      	bne.n	8001866 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2b0f      	cmp	r3, #15
 800184a:	d809      	bhi.n	8001860 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800184c:	2200      	movs	r2, #0
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	f04f 30ff 	mov.w	r0, #4294967295
 8001854:	f000 f919 	bl	8001a8a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001858:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <HAL_InitTick+0x74>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e007      	b.n	8001870 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	73fb      	strb	r3, [r7, #15]
 8001864:	e004      	b.n	8001870 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	e001      	b.n	8001870 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001870:	7bfb      	ldrb	r3, [r7, #15]
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000014 	.word	0x20000014
 8001880:	2000000c 	.word	0x2000000c
 8001884:	20000010 	.word	0x20000010

08001888 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_IncTick+0x20>)
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	461a      	mov	r2, r3
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_IncTick+0x24>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4413      	add	r3, r2
 8001898:	4a04      	ldr	r2, [pc, #16]	; (80018ac <HAL_IncTick+0x24>)
 800189a:	6013      	str	r3, [r2, #0]
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	20000014 	.word	0x20000014
 80018ac:	2000070c 	.word	0x2000070c

080018b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return uwTick;
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <HAL_GetTick+0x14>)
 80018b6:	681b      	ldr	r3, [r3, #0]
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	2000070c 	.word	0x2000070c

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff ffee 	bl	80018b0 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffde 	bl	80018b0 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000014 	.word	0x20000014

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019be:	4770      	bx	lr
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	3b01      	subs	r3, #1
 8001a3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a40:	d301      	bcc.n	8001a46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a42:	2301      	movs	r3, #1
 8001a44:	e00f      	b.n	8001a66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <SysTick_Config+0x40>)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3b01      	subs	r3, #1
 8001a4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4e:	210f      	movs	r1, #15
 8001a50:	f04f 30ff 	mov.w	r0, #4294967295
 8001a54:	f7ff ff8e 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <SysTick_Config+0x40>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5e:	4b04      	ldr	r3, [pc, #16]	; (8001a70 <SysTick_Config+0x40>)
 8001a60:	2207      	movs	r2, #7
 8001a62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000e010 	.word	0xe000e010

08001a74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff ff47 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b086      	sub	sp, #24
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	60b9      	str	r1, [r7, #8]
 8001a94:	607a      	str	r2, [r7, #4]
 8001a96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a9c:	f7ff ff5c 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001aa0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	68b9      	ldr	r1, [r7, #8]
 8001aa6:	6978      	ldr	r0, [r7, #20]
 8001aa8:	f7ff ff8e 	bl	80019c8 <NVIC_EncodePriority>
 8001aac:	4602      	mov	r2, r0
 8001aae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff5d 	bl	8001974 <__NVIC_SetPriority>
}
 8001aba:	bf00      	nop
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffb0 	bl	8001a30 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b087      	sub	sp, #28
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e148      	b.n	8001d7e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2101      	movs	r1, #1
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	fa01 f303 	lsl.w	r3, r1, r3
 8001af8:	4013      	ands	r3, r2
 8001afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 813a 	beq.w	8001d78 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 0303 	and.w	r3, r3, #3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d005      	beq.n	8001b1c <HAL_GPIO_Init+0x40>
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d130      	bne.n	8001b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	2203      	movs	r2, #3
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	68da      	ldr	r2, [r3, #12]
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b52:	2201      	movs	r2, #1
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	091b      	lsrs	r3, r3, #4
 8001b68:	f003 0201 	and.w	r2, r3, #1
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4313      	orrs	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	693a      	ldr	r2, [r7, #16]
 8001b7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b03      	cmp	r3, #3
 8001b88:	d017      	beq.n	8001bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	68db      	ldr	r3, [r3, #12]
 8001b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	2203      	movs	r2, #3
 8001b96:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	693a      	ldr	r2, [r7, #16]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0303 	and.w	r3, r3, #3
 8001bc2:	2b02      	cmp	r3, #2
 8001bc4:	d123      	bne.n	8001c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	3208      	adds	r2, #8
 8001bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	220f      	movs	r2, #15
 8001bde:	fa02 f303 	lsl.w	r3, r2, r3
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	691a      	ldr	r2, [r3, #16]
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0307 	and.w	r3, r3, #7
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3208      	adds	r2, #8
 8001c08:	6939      	ldr	r1, [r7, #16]
 8001c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	2203      	movs	r2, #3
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0203 	and.w	r2, r3, #3
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 8094 	beq.w	8001d78 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c50:	4b52      	ldr	r3, [pc, #328]	; (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c54:	4a51      	ldr	r2, [pc, #324]	; (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c56:	f043 0301 	orr.w	r3, r3, #1
 8001c5a:	6613      	str	r3, [r2, #96]	; 0x60
 8001c5c:	4b4f      	ldr	r3, [pc, #316]	; (8001d9c <HAL_GPIO_Init+0x2c0>)
 8001c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c60:	f003 0301 	and.w	r3, r3, #1
 8001c64:	60bb      	str	r3, [r7, #8]
 8001c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c68:	4a4d      	ldr	r2, [pc, #308]	; (8001da0 <HAL_GPIO_Init+0x2c4>)
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	220f      	movs	r2, #15
 8001c80:	fa02 f303 	lsl.w	r3, r2, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	693a      	ldr	r2, [r7, #16]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c92:	d00d      	beq.n	8001cb0 <HAL_GPIO_Init+0x1d4>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a43      	ldr	r2, [pc, #268]	; (8001da4 <HAL_GPIO_Init+0x2c8>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d007      	beq.n	8001cac <HAL_GPIO_Init+0x1d0>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a42      	ldr	r2, [pc, #264]	; (8001da8 <HAL_GPIO_Init+0x2cc>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d101      	bne.n	8001ca8 <HAL_GPIO_Init+0x1cc>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e004      	b.n	8001cb2 <HAL_GPIO_Init+0x1d6>
 8001ca8:	2307      	movs	r3, #7
 8001caa:	e002      	b.n	8001cb2 <HAL_GPIO_Init+0x1d6>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <HAL_GPIO_Init+0x1d6>
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	f002 0203 	and.w	r2, r2, #3
 8001cb8:	0092      	lsls	r2, r2, #2
 8001cba:	4093      	lsls	r3, r2
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001cc2:	4937      	ldr	r1, [pc, #220]	; (8001da0 <HAL_GPIO_Init+0x2c4>)
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001cd0:	4b36      	ldr	r3, [pc, #216]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d003      	beq.n	8001cf4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001cf4:	4a2d      	ldr	r2, [pc, #180]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001cfa:	4b2c      	ldr	r3, [pc, #176]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4013      	ands	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d003      	beq.n	8001d1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d1e:	4a23      	ldr	r2, [pc, #140]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d24:	4b21      	ldr	r3, [pc, #132]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4013      	ands	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001d48:	4a18      	ldr	r2, [pc, #96]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d003      	beq.n	8001d72 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001d6a:	693a      	ldr	r2, [r7, #16]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001d72:	4a0e      	ldr	r2, [pc, #56]	; (8001dac <HAL_GPIO_Init+0x2d0>)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	fa22 f303 	lsr.w	r3, r2, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f47f aeaf 	bne.w	8001aec <HAL_GPIO_Init+0x10>
  }
}
 8001d8e:	bf00      	nop
 8001d90:	bf00      	nop
 8001d92:	371c      	adds	r7, #28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000
 8001da4:	48000400 	.word	0x48000400
 8001da8:	48000800 	.word	0x48000800
 8001dac:	40010400 	.word	0x40010400

08001db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b083      	sub	sp, #12
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	460b      	mov	r3, r1
 8001dba:	807b      	strh	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dc0:	787b      	ldrb	r3, [r7, #1]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dc6:	887a      	ldrh	r2, [r7, #2]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001dce:	887a      	ldrh	r2, [r7, #2]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de4:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a04      	ldr	r2, [pc, #16]	; (8001dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dee:	6013      	str	r3, [r2, #0]
}
 8001df0:	bf00      	nop
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40007000 	.word	0x40007000

08001e00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e04:	4b04      	ldr	r3, [pc, #16]	; (8001e18 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40007000 	.word	0x40007000

08001e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e2a:	d130      	bne.n	8001e8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e2c:	4b23      	ldr	r3, [pc, #140]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e38:	d038      	beq.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e42:	4a1e      	ldr	r2, [pc, #120]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2232      	movs	r2, #50	; 0x32
 8001e50:	fb02 f303 	mul.w	r3, r2, r3
 8001e54:	4a1b      	ldr	r2, [pc, #108]	; (8001ec4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e56:	fba2 2303 	umull	r2, r3, r2, r3
 8001e5a:	0c9b      	lsrs	r3, r3, #18
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e60:	e002      	b.n	8001e68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	3b01      	subs	r3, #1
 8001e66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e68:	4b14      	ldr	r3, [pc, #80]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e74:	d102      	bne.n	8001e7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f2      	bne.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e7c:	4b0f      	ldr	r3, [pc, #60]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7e:	695b      	ldr	r3, [r3, #20]
 8001e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e88:	d110      	bne.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e00f      	b.n	8001eae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e8e:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e9a:	d007      	beq.n	8001eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e9c:	4b07      	ldr	r3, [pc, #28]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ea4:	4a05      	ldr	r2, [pc, #20]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3714      	adds	r7, #20
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40007000 	.word	0x40007000
 8001ec0:	2000000c 	.word	0x2000000c
 8001ec4:	431bde83 	.word	0x431bde83

08001ec8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b088      	sub	sp, #32
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d102      	bne.n	8001edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	f000 bc02 	b.w	80026e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001ede:	689b      	ldr	r3, [r3, #8]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ee6:	4b94      	ldr	r3, [pc, #592]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	f003 0303 	and.w	r3, r3, #3
 8001eee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0310 	and.w	r3, r3, #16
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80e4 	beq.w	80020c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d007      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4c>
 8001f04:	69bb      	ldr	r3, [r7, #24]
 8001f06:	2b0c      	cmp	r3, #12
 8001f08:	f040 808b 	bne.w	8002022 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	f040 8087 	bne.w	8002022 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f14:	4b88      	ldr	r3, [pc, #544]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_OscConfig+0x64>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e3d9      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a1a      	ldr	r2, [r3, #32]
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0308 	and.w	r3, r3, #8
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d004      	beq.n	8001f46 <HAL_RCC_OscConfig+0x7e>
 8001f3c:	4b7e      	ldr	r3, [pc, #504]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f44:	e005      	b.n	8001f52 <HAL_RCC_OscConfig+0x8a>
 8001f46:	4b7c      	ldr	r3, [pc, #496]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d223      	bcs.n	8001f9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f000 fd8c 	bl	8002a78 <RCC_SetFlashLatencyFromMSIRange>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e3ba      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f6a:	4b73      	ldr	r3, [pc, #460]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a72      	ldr	r2, [pc, #456]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f70:	f043 0308 	orr.w	r3, r3, #8
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	4b70      	ldr	r3, [pc, #448]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	496d      	ldr	r1, [pc, #436]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f88:	4b6b      	ldr	r3, [pc, #428]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	021b      	lsls	r3, r3, #8
 8001f96:	4968      	ldr	r1, [pc, #416]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	604b      	str	r3, [r1, #4]
 8001f9c:	e025      	b.n	8001fea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f9e:	4b66      	ldr	r3, [pc, #408]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a65      	ldr	r2, [pc, #404]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fa4:	f043 0308 	orr.w	r3, r3, #8
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	4b63      	ldr	r3, [pc, #396]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	4960      	ldr	r1, [pc, #384]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fbc:	4b5e      	ldr	r3, [pc, #376]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	69db      	ldr	r3, [r3, #28]
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	495b      	ldr	r1, [pc, #364]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f000 fd4c 	bl	8002a78 <RCC_SetFlashLatencyFromMSIRange>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d001      	beq.n	8001fea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e37a      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fea:	f000 fc81 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4b51      	ldr	r3, [pc, #324]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	091b      	lsrs	r3, r3, #4
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	4950      	ldr	r1, [pc, #320]	; (800213c <HAL_RCC_OscConfig+0x274>)
 8001ffc:	5ccb      	ldrb	r3, [r1, r3]
 8001ffe:	f003 031f 	and.w	r3, r3, #31
 8002002:	fa22 f303 	lsr.w	r3, r2, r3
 8002006:	4a4e      	ldr	r2, [pc, #312]	; (8002140 <HAL_RCC_OscConfig+0x278>)
 8002008:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800200a:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <HAL_RCC_OscConfig+0x27c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fbfe 	bl	8001810 <HAL_InitTick>
 8002014:	4603      	mov	r3, r0
 8002016:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002018:	7bfb      	ldrb	r3, [r7, #15]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d052      	beq.n	80020c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800201e:	7bfb      	ldrb	r3, [r7, #15]
 8002020:	e35e      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d032      	beq.n	8002090 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800202a:	4b43      	ldr	r3, [pc, #268]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a42      	ldr	r2, [pc, #264]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002030:	f043 0301 	orr.w	r3, r3, #1
 8002034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002036:	f7ff fc3b 	bl	80018b0 <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800203e:	f7ff fc37 	bl	80018b0 <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e347      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002050:	4b39      	ldr	r3, [pc, #228]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800205c:	4b36      	ldr	r3, [pc, #216]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a35      	ldr	r2, [pc, #212]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002062:	f043 0308 	orr.w	r3, r3, #8
 8002066:	6013      	str	r3, [r2, #0]
 8002068:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	4930      	ldr	r1, [pc, #192]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800207a:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	492b      	ldr	r1, [pc, #172]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
 800208e:	e01a      	b.n	80020c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a28      	ldr	r2, [pc, #160]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002096:	f023 0301 	bic.w	r3, r3, #1
 800209a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800209c:	f7ff fc08 	bl	80018b0 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020a4:	f7ff fc04 	bl	80018b0 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e314      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020b6:	4b20      	ldr	r3, [pc, #128]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 0302 	and.w	r3, r3, #2
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d1f0      	bne.n	80020a4 <HAL_RCC_OscConfig+0x1dc>
 80020c2:	e000      	b.n	80020c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d073      	beq.n	80021ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d005      	beq.n	80020e4 <HAL_RCC_OscConfig+0x21c>
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d10e      	bne.n	80020fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	2b03      	cmp	r3, #3
 80020e2:	d10b      	bne.n	80020fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e4:	4b14      	ldr	r3, [pc, #80]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d063      	beq.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d15f      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e2f1      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002104:	d106      	bne.n	8002114 <HAL_RCC_OscConfig+0x24c>
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800210c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e025      	b.n	8002160 <HAL_RCC_OscConfig+0x298>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d114      	bne.n	8002148 <HAL_RCC_OscConfig+0x280>
 800211e:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a05      	ldr	r2, [pc, #20]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b03      	ldr	r3, [pc, #12]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a02      	ldr	r2, [pc, #8]	; (8002138 <HAL_RCC_OscConfig+0x270>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e013      	b.n	8002160 <HAL_RCC_OscConfig+0x298>
 8002138:	40021000 	.word	0x40021000
 800213c:	08009b3c 	.word	0x08009b3c
 8002140:	2000000c 	.word	0x2000000c
 8002144:	20000010 	.word	0x20000010
 8002148:	4ba0      	ldr	r3, [pc, #640]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a9f      	ldr	r2, [pc, #636]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800214e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002152:	6013      	str	r3, [r2, #0]
 8002154:	4b9d      	ldr	r3, [pc, #628]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a9c      	ldr	r2, [pc, #624]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800215a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800215e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d013      	beq.n	8002190 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff fba2 	bl	80018b0 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fb9e 	bl	80018b0 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b64      	cmp	r3, #100	; 0x64
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e2ae      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002182:	4b92      	ldr	r3, [pc, #584]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d0f0      	beq.n	8002170 <HAL_RCC_OscConfig+0x2a8>
 800218e:	e014      	b.n	80021ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002190:	f7ff fb8e 	bl	80018b0 <HAL_GetTick>
 8002194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002196:	e008      	b.n	80021aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002198:	f7ff fb8a 	bl	80018b0 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	693b      	ldr	r3, [r7, #16]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	2b64      	cmp	r3, #100	; 0x64
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e29a      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021aa:	4b88      	ldr	r3, [pc, #544]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f0      	bne.n	8002198 <HAL_RCC_OscConfig+0x2d0>
 80021b6:	e000      	b.n	80021ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d060      	beq.n	8002288 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x310>
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d119      	bne.n	8002206 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	2b02      	cmp	r3, #2
 80021d6:	d116      	bne.n	8002206 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021d8:	4b7c      	ldr	r3, [pc, #496]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d005      	beq.n	80021f0 <HAL_RCC_OscConfig+0x328>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e277      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f0:	4b76      	ldr	r3, [pc, #472]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	691b      	ldr	r3, [r3, #16]
 80021fc:	061b      	lsls	r3, r3, #24
 80021fe:	4973      	ldr	r1, [pc, #460]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002200:	4313      	orrs	r3, r2
 8002202:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	e040      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d023      	beq.n	8002256 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800220e:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6e      	ldr	r2, [pc, #440]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800221a:	f7ff fb49 	bl	80018b0 <HAL_GetTick>
 800221e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002220:	e008      	b.n	8002234 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002222:	f7ff fb45 	bl	80018b0 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	2b02      	cmp	r3, #2
 800222e:	d901      	bls.n	8002234 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e255      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002234:	4b65      	ldr	r3, [pc, #404]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800223c:	2b00      	cmp	r3, #0
 800223e:	d0f0      	beq.n	8002222 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002240:	4b62      	ldr	r3, [pc, #392]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	061b      	lsls	r3, r3, #24
 800224e:	495f      	ldr	r1, [pc, #380]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
 8002254:	e018      	b.n	8002288 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a5c      	ldr	r2, [pc, #368]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800225c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002262:	f7ff fb25 	bl	80018b0 <HAL_GetTick>
 8002266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002268:	e008      	b.n	800227c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226a:	f7ff fb21 	bl	80018b0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	2b02      	cmp	r3, #2
 8002276:	d901      	bls.n	800227c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002278:	2303      	movs	r3, #3
 800227a:	e231      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800227c:	4b53      	ldr	r3, [pc, #332]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002284:	2b00      	cmp	r3, #0
 8002286:	d1f0      	bne.n	800226a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 0308 	and.w	r3, r3, #8
 8002290:	2b00      	cmp	r3, #0
 8002292:	d03c      	beq.n	800230e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	695b      	ldr	r3, [r3, #20]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01c      	beq.n	80022d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800229c:	4b4b      	ldr	r3, [pc, #300]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800229e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a2:	4a4a      	ldr	r2, [pc, #296]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ac:	f7ff fb00 	bl	80018b0 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022b4:	f7ff fafc 	bl	80018b0 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e20c      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022c6:	4b41      	ldr	r3, [pc, #260]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ef      	beq.n	80022b4 <HAL_RCC_OscConfig+0x3ec>
 80022d4:	e01b      	b.n	800230e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022d6:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022dc:	4a3b      	ldr	r2, [pc, #236]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80022de:	f023 0301 	bic.w	r3, r3, #1
 80022e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022e6:	f7ff fae3 	bl	80018b0 <HAL_GetTick>
 80022ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022ec:	e008      	b.n	8002300 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022ee:	f7ff fadf 	bl	80018b0 <HAL_GetTick>
 80022f2:	4602      	mov	r2, r0
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	1ad3      	subs	r3, r2, r3
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d901      	bls.n	8002300 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80022fc:	2303      	movs	r3, #3
 80022fe:	e1ef      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002300:	4b32      	ldr	r3, [pc, #200]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1ef      	bne.n	80022ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	2b00      	cmp	r3, #0
 8002318:	f000 80a6 	beq.w	8002468 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800231c:	2300      	movs	r3, #0
 800231e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002320:	4b2a      	ldr	r3, [pc, #168]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10d      	bne.n	8002348 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800232c:	4b27      	ldr	r3, [pc, #156]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800232e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002330:	4a26      	ldr	r2, [pc, #152]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002336:	6593      	str	r3, [r2, #88]	; 0x58
 8002338:	4b24      	ldr	r3, [pc, #144]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002344:	2301      	movs	r3, #1
 8002346:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002348:	4b21      	ldr	r3, [pc, #132]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d118      	bne.n	8002386 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a1d      	ldr	r2, [pc, #116]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800235a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800235e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002360:	f7ff faa6 	bl	80018b0 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002368:	f7ff faa2 	bl	80018b0 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1b2      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800237a:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <HAL_RCC_OscConfig+0x508>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d108      	bne.n	80023a0 <HAL_RCC_OscConfig+0x4d8>
 800238e:	4b0f      	ldr	r3, [pc, #60]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002394:	4a0d      	ldr	r2, [pc, #52]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800239e:	e029      	b.n	80023f4 <HAL_RCC_OscConfig+0x52c>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	2b05      	cmp	r3, #5
 80023a6:	d115      	bne.n	80023d4 <HAL_RCC_OscConfig+0x50c>
 80023a8:	4b08      	ldr	r3, [pc, #32]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	4a07      	ldr	r2, [pc, #28]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023be:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_RCC_OscConfig+0x504>)
 80023c0:	f043 0301 	orr.w	r3, r3, #1
 80023c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023c8:	e014      	b.n	80023f4 <HAL_RCC_OscConfig+0x52c>
 80023ca:	bf00      	nop
 80023cc:	40021000 	.word	0x40021000
 80023d0:	40007000 	.word	0x40007000
 80023d4:	4b9a      	ldr	r3, [pc, #616]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	4a99      	ldr	r2, [pc, #612]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80023dc:	f023 0301 	bic.w	r3, r3, #1
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e4:	4b96      	ldr	r3, [pc, #600]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	4a95      	ldr	r2, [pc, #596]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80023ec:	f023 0304 	bic.w	r3, r3, #4
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d016      	beq.n	800242a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7ff fa58 	bl	80018b0 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7ff fa54 	bl	80018b0 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e162      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ed      	beq.n	8002404 <HAL_RCC_OscConfig+0x53c>
 8002428:	e015      	b.n	8002456 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800242a:	f7ff fa41 	bl	80018b0 <HAL_GetTick>
 800242e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002430:	e00a      	b.n	8002448 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002432:	f7ff fa3d 	bl	80018b0 <HAL_GetTick>
 8002436:	4602      	mov	r2, r0
 8002438:	693b      	ldr	r3, [r7, #16]
 800243a:	1ad3      	subs	r3, r2, r3
 800243c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002440:	4293      	cmp	r3, r2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e14b      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002448:	4b7d      	ldr	r3, [pc, #500]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ed      	bne.n	8002432 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002456:	7ffb      	ldrb	r3, [r7, #31]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b78      	ldr	r3, [pc, #480]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 800245e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002460:	4a77      	ldr	r2, [pc, #476]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 8002462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002466:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0320 	and.w	r3, r3, #32
 8002470:	2b00      	cmp	r3, #0
 8002472:	d03c      	beq.n	80024ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002478:	2b00      	cmp	r3, #0
 800247a:	d01c      	beq.n	80024b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 800247e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002482:	4a6f      	ldr	r2, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800248c:	f7ff fa10 	bl	80018b0 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002494:	f7ff fa0c 	bl	80018b0 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e11c      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024a6:	4b66      	ldr	r3, [pc, #408]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80024a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ac:	f003 0302 	and.w	r3, r3, #2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d0ef      	beq.n	8002494 <HAL_RCC_OscConfig+0x5cc>
 80024b4:	e01b      	b.n	80024ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024b6:	4b62      	ldr	r3, [pc, #392]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80024b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024bc:	4a60      	ldr	r2, [pc, #384]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80024be:	f023 0301 	bic.w	r3, r3, #1
 80024c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c6:	f7ff f9f3 	bl	80018b0 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ce:	f7ff f9ef 	bl	80018b0 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0ff      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e0:	4b57      	ldr	r3, [pc, #348]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80024e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1ef      	bne.n	80024ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	f000 80f3 	beq.w	80026de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	f040 80c9 	bne.w	8002694 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002502:	4b4f      	ldr	r3, [pc, #316]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	429a      	cmp	r2, r3
 8002514:	d12c      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	3b01      	subs	r3, #1
 8002522:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002524:	429a      	cmp	r2, r3
 8002526:	d123      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002532:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002534:	429a      	cmp	r2, r3
 8002536:	d11b      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002538:	697b      	ldr	r3, [r7, #20]
 800253a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002542:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d113      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	085b      	lsrs	r3, r3, #1
 8002554:	3b01      	subs	r3, #1
 8002556:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002558:	429a      	cmp	r2, r3
 800255a:	d109      	bne.n	8002570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	085b      	lsrs	r3, r3, #1
 8002568:	3b01      	subs	r3, #1
 800256a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d06b      	beq.n	8002648 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002570:	69bb      	ldr	r3, [r7, #24]
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d062      	beq.n	800263c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002576:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d001      	beq.n	8002586 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e0ac      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a2d      	ldr	r2, [pc, #180]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 800258c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002590:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002592:	f7ff f98d 	bl	80018b0 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800259a:	f7ff f989 	bl	80018b0 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e099      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1f0      	bne.n	800259a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025b8:	4b21      	ldr	r3, [pc, #132]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	4b21      	ldr	r3, [pc, #132]	; (8002644 <HAL_RCC_OscConfig+0x77c>)
 80025be:	4013      	ands	r3, r2
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025c8:	3a01      	subs	r2, #1
 80025ca:	0112      	lsls	r2, r2, #4
 80025cc:	4311      	orrs	r1, r2
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025d2:	0212      	lsls	r2, r2, #8
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80025da:	0852      	lsrs	r2, r2, #1
 80025dc:	3a01      	subs	r2, #1
 80025de:	0552      	lsls	r2, r2, #21
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025e6:	0852      	lsrs	r2, r2, #1
 80025e8:	3a01      	subs	r2, #1
 80025ea:	0652      	lsls	r2, r2, #25
 80025ec:	4311      	orrs	r1, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025f2:	06d2      	lsls	r2, r2, #27
 80025f4:	430a      	orrs	r2, r1
 80025f6:	4912      	ldr	r1, [pc, #72]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80025fc:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0f      	ldr	r2, [pc, #60]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 8002602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002606:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002608:	4b0d      	ldr	r3, [pc, #52]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	4a0c      	ldr	r2, [pc, #48]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 800260e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002614:	f7ff f94c 	bl	80018b0 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7ff f948 	bl	80018b0 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e058      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <HAL_RCC_OscConfig+0x778>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d0f0      	beq.n	800261c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800263a:	e050      	b.n	80026de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e04f      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
 8002640:	40021000 	.word	0x40021000
 8002644:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002648:	4b27      	ldr	r3, [pc, #156]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d144      	bne.n	80026de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002654:	4b24      	ldr	r3, [pc, #144]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a23      	ldr	r2, [pc, #140]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 800265a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800265e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002660:	4b21      	ldr	r3, [pc, #132]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a20      	ldr	r2, [pc, #128]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 8002666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800266a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800266c:	f7ff f920 	bl	80018b0 <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002674:	f7ff f91c 	bl	80018b0 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e02c      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002686:	4b18      	ldr	r3, [pc, #96]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x7ac>
 8002692:	e024      	b.n	80026de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	2b0c      	cmp	r3, #12
 8002698:	d01f      	beq.n	80026da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269a:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 80026a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a6:	f7ff f903 	bl	80018b0 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ae:	f7ff f8ff 	bl	80018b0 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e00f      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c0:	4b09      	ldr	r3, [pc, #36]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1f0      	bne.n	80026ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80026cc:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	4905      	ldr	r1, [pc, #20]	; (80026e8 <HAL_RCC_OscConfig+0x820>)
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <HAL_RCC_OscConfig+0x824>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	60cb      	str	r3, [r1, #12]
 80026d8:	e001      	b.n	80026de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80026de:	2300      	movs	r3, #0
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3720      	adds	r7, #32
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	40021000 	.word	0x40021000
 80026ec:	feeefffc 	.word	0xfeeefffc

080026f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
 80026f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e0e7      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002704:	4b75      	ldr	r3, [pc, #468]	; (80028dc <HAL_RCC_ClockConfig+0x1ec>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	683a      	ldr	r2, [r7, #0]
 800270e:	429a      	cmp	r2, r3
 8002710:	d910      	bls.n	8002734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002712:	4b72      	ldr	r3, [pc, #456]	; (80028dc <HAL_RCC_ClockConfig+0x1ec>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f023 0207 	bic.w	r2, r3, #7
 800271a:	4970      	ldr	r1, [pc, #448]	; (80028dc <HAL_RCC_ClockConfig+0x1ec>)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	4313      	orrs	r3, r2
 8002720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002722:	4b6e      	ldr	r3, [pc, #440]	; (80028dc <HAL_RCC_ClockConfig+0x1ec>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	429a      	cmp	r2, r3
 800272e:	d001      	beq.n	8002734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0cf      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	2b00      	cmp	r3, #0
 800273e:	d010      	beq.n	8002762 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	4b66      	ldr	r3, [pc, #408]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800274c:	429a      	cmp	r2, r3
 800274e:	d908      	bls.n	8002762 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	4960      	ldr	r1, [pc, #384]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d04c      	beq.n	8002808 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b03      	cmp	r3, #3
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002776:	4b5a      	ldr	r3, [pc, #360]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d121      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e0a6      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800278e:	4b54      	ldr	r3, [pc, #336]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d115      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e09a      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d107      	bne.n	80027b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a6:	4b4e      	ldr	r3, [pc, #312]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d109      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e08e      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b6:	4b4a      	ldr	r3, [pc, #296]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e086      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027c6:	4b46      	ldr	r3, [pc, #280]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	f023 0203 	bic.w	r2, r3, #3
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4943      	ldr	r1, [pc, #268]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027d8:	f7ff f86a 	bl	80018b0 <HAL_GetTick>
 80027dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	e00a      	b.n	80027f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027e0:	f7ff f866 	bl	80018b0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d901      	bls.n	80027f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e06e      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027f6:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 020c 	and.w	r2, r3, #12
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	429a      	cmp	r2, r3
 8002806:	d1eb      	bne.n	80027e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0302 	and.w	r3, r3, #2
 8002810:	2b00      	cmp	r3, #0
 8002812:	d010      	beq.n	8002836 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002820:	429a      	cmp	r2, r3
 8002822:	d208      	bcs.n	8002836 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002824:	4b2e      	ldr	r3, [pc, #184]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	492b      	ldr	r1, [pc, #172]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002836:	4b29      	ldr	r3, [pc, #164]	; (80028dc <HAL_RCC_ClockConfig+0x1ec>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0307 	and.w	r3, r3, #7
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d210      	bcs.n	8002866 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002844:	4b25      	ldr	r3, [pc, #148]	; (80028dc <HAL_RCC_ClockConfig+0x1ec>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 0207 	bic.w	r2, r3, #7
 800284c:	4923      	ldr	r1, [pc, #140]	; (80028dc <HAL_RCC_ClockConfig+0x1ec>)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	4313      	orrs	r3, r2
 8002852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002854:	4b21      	ldr	r3, [pc, #132]	; (80028dc <HAL_RCC_ClockConfig+0x1ec>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	429a      	cmp	r2, r3
 8002860:	d001      	beq.n	8002866 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e036      	b.n	80028d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0304 	and.w	r3, r3, #4
 800286e:	2b00      	cmp	r3, #0
 8002870:	d008      	beq.n	8002884 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002872:	4b1b      	ldr	r3, [pc, #108]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	4918      	ldr	r1, [pc, #96]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0308 	and.w	r3, r3, #8
 800288c:	2b00      	cmp	r3, #0
 800288e:	d009      	beq.n	80028a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	00db      	lsls	r3, r3, #3
 800289e:	4910      	ldr	r1, [pc, #64]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028a4:	f000 f824 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b0d      	ldr	r3, [pc, #52]	; (80028e0 <HAL_RCC_ClockConfig+0x1f0>)
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	f003 030f 	and.w	r3, r3, #15
 80028b4:	490b      	ldr	r1, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1f4>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	f003 031f 	and.w	r3, r3, #31
 80028bc:	fa22 f303 	lsr.w	r3, r2, r3
 80028c0:	4a09      	ldr	r2, [pc, #36]	; (80028e8 <HAL_RCC_ClockConfig+0x1f8>)
 80028c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80028c4:	4b09      	ldr	r3, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1fc>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7fe ffa1 	bl	8001810 <HAL_InitTick>
 80028ce:	4603      	mov	r3, r0
 80028d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80028d2:	7afb      	ldrb	r3, [r7, #11]
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40022000 	.word	0x40022000
 80028e0:	40021000 	.word	0x40021000
 80028e4:	08009b3c 	.word	0x08009b3c
 80028e8:	2000000c 	.word	0x2000000c
 80028ec:	20000010 	.word	0x20000010

080028f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b089      	sub	sp, #36	; 0x24
 80028f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	2300      	movs	r3, #0
 80028fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 030c 	and.w	r3, r3, #12
 8002906:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002908:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	f003 0303 	and.w	r3, r3, #3
 8002910:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_GetSysClockFreq+0x34>
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	2b0c      	cmp	r3, #12
 800291c:	d121      	bne.n	8002962 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d11e      	bne.n	8002962 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002924:	4b34      	ldr	r3, [pc, #208]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d107      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002930:	4b31      	ldr	r3, [pc, #196]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002936:	0a1b      	lsrs	r3, r3, #8
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	e005      	b.n	800294c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002940:	4b2d      	ldr	r3, [pc, #180]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800294c:	4a2b      	ldr	r2, [pc, #172]	; (80029fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800294e:	69fb      	ldr	r3, [r7, #28]
 8002950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002954:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d10d      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002960:	e00a      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	2b04      	cmp	r3, #4
 8002966:	d102      	bne.n	800296e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002968:	4b25      	ldr	r3, [pc, #148]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x110>)
 800296a:	61bb      	str	r3, [r7, #24]
 800296c:	e004      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	2b08      	cmp	r3, #8
 8002972:	d101      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002974:	4b23      	ldr	r3, [pc, #140]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002976:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	2b0c      	cmp	r3, #12
 800297c:	d134      	bne.n	80029e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800297e:	4b1e      	ldr	r3, [pc, #120]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	f003 0303 	and.w	r3, r3, #3
 8002986:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d003      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0xa6>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	2b03      	cmp	r3, #3
 8002992:	d003      	beq.n	800299c <HAL_RCC_GetSysClockFreq+0xac>
 8002994:	e005      	b.n	80029a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002996:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002998:	617b      	str	r3, [r7, #20]
      break;
 800299a:	e005      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800299c:	4b19      	ldr	r3, [pc, #100]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x114>)
 800299e:	617b      	str	r3, [r7, #20]
      break;
 80029a0:	e002      	b.n	80029a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	617b      	str	r3, [r7, #20]
      break;
 80029a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029a8:	4b13      	ldr	r3, [pc, #76]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 0307 	and.w	r3, r3, #7
 80029b2:	3301      	adds	r3, #1
 80029b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029b6:	4b10      	ldr	r3, [pc, #64]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	fb03 f202 	mul.w	r2, r3, r2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029ce:	4b0a      	ldr	r3, [pc, #40]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	0e5b      	lsrs	r3, r3, #25
 80029d4:	f003 0303 	and.w	r3, r3, #3
 80029d8:	3301      	adds	r3, #1
 80029da:	005b      	lsls	r3, r3, #1
 80029dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80029e8:	69bb      	ldr	r3, [r7, #24]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3724      	adds	r7, #36	; 0x24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08009b54 	.word	0x08009b54
 8002a00:	00f42400 	.word	0x00f42400
 8002a04:	007a1200 	.word	0x007a1200

08002a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a0c:	4b03      	ldr	r3, [pc, #12]	; (8002a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
 8002a1a:	bf00      	nop
 8002a1c:	2000000c 	.word	0x2000000c

08002a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a24:	f7ff fff0 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a28:	4602      	mov	r2, r0
 8002a2a:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	0a1b      	lsrs	r3, r3, #8
 8002a30:	f003 0307 	and.w	r3, r3, #7
 8002a34:	4904      	ldr	r1, [pc, #16]	; (8002a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a36:	5ccb      	ldrb	r3, [r1, r3]
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000
 8002a48:	08009b4c 	.word	0x08009b4c

08002a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a50:	f7ff ffda 	bl	8002a08 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0adb      	lsrs	r3, r3, #11
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4904      	ldr	r1, [pc, #16]	; (8002a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08009b4c 	.word	0x08009b4c

08002a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a84:	4b2a      	ldr	r3, [pc, #168]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002a90:	f7ff f9b6 	bl	8001e00 <HAL_PWREx_GetVoltageRange>
 8002a94:	6178      	str	r0, [r7, #20]
 8002a96:	e014      	b.n	8002ac2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a98:	4b25      	ldr	r3, [pc, #148]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9c:	4a24      	ldr	r2, [pc, #144]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8002aa4:	4b22      	ldr	r3, [pc, #136]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ab0:	f7ff f9a6 	bl	8001e00 <HAL_PWREx_GetVoltageRange>
 8002ab4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ab6:	4b1e      	ldr	r3, [pc, #120]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	4a1d      	ldr	r2, [pc, #116]	; (8002b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ac8:	d10b      	bne.n	8002ae2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2b80      	cmp	r3, #128	; 0x80
 8002ace:	d919      	bls.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2ba0      	cmp	r3, #160	; 0xa0
 8002ad4:	d902      	bls.n	8002adc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	e013      	b.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002adc:	2301      	movs	r3, #1
 8002ade:	613b      	str	r3, [r7, #16]
 8002ae0:	e010      	b.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b80      	cmp	r3, #128	; 0x80
 8002ae6:	d902      	bls.n	8002aee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ae8:	2303      	movs	r3, #3
 8002aea:	613b      	str	r3, [r7, #16]
 8002aec:	e00a      	b.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b80      	cmp	r3, #128	; 0x80
 8002af2:	d102      	bne.n	8002afa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002af4:	2302      	movs	r3, #2
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	e004      	b.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b70      	cmp	r3, #112	; 0x70
 8002afe:	d101      	bne.n	8002b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b00:	2301      	movs	r3, #1
 8002b02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f023 0207 	bic.w	r2, r3, #7
 8002b0c:	4909      	ldr	r1, [pc, #36]	; (8002b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b14:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d001      	beq.n	8002b26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e000      	b.n	8002b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b26:	2300      	movs	r3, #0
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3718      	adds	r7, #24
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40022000 	.word	0x40022000

08002b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b40:	2300      	movs	r3, #0
 8002b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b44:	2300      	movs	r3, #0
 8002b46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d031      	beq.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b5c:	d01a      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b62:	d814      	bhi.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d009      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002b68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002b6c:	d10f      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002b6e:	4b5d      	ldr	r3, [pc, #372]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	4a5c      	ldr	r2, [pc, #368]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b7a:	e00c      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	2100      	movs	r1, #0
 8002b82:	4618      	mov	r0, r3
 8002b84:	f000 f9de 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002b8c:	e003      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	74fb      	strb	r3, [r7, #19]
      break;
 8002b92:	e000      	b.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b96:	7cfb      	ldrb	r3, [r7, #19]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d10b      	bne.n	8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b9c:	4b51      	ldr	r3, [pc, #324]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ba2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002baa:	494e      	ldr	r1, [pc, #312]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bac:	4313      	orrs	r3, r2
 8002bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bb2:	e001      	b.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bb4:	7cfb      	ldrb	r3, [r7, #19]
 8002bb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 809e 	beq.w	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002bca:	4b46      	ldr	r3, [pc, #280]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e000      	b.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002bda:	2300      	movs	r3, #0
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d00d      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be0:	4b40      	ldr	r3, [pc, #256]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002be4:	4a3f      	ldr	r2, [pc, #252]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bea:	6593      	str	r3, [r2, #88]	; 0x58
 8002bec:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bfc:	4b3a      	ldr	r3, [pc, #232]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a39      	ldr	r2, [pc, #228]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c08:	f7fe fe52 	bl	80018b0 <HAL_GetTick>
 8002c0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c0e:	e009      	b.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c10:	f7fe fe4e 	bl	80018b0 <HAL_GetTick>
 8002c14:	4602      	mov	r2, r0
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	2b02      	cmp	r3, #2
 8002c1c:	d902      	bls.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	74fb      	strb	r3, [r7, #19]
        break;
 8002c22:	e005      	b.n	8002c30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ef      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c30:	7cfb      	ldrb	r3, [r7, #19]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d15a      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c36:	4b2b      	ldr	r3, [pc, #172]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d01e      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d019      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c52:	4b24      	ldr	r3, [pc, #144]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c5e:	4b21      	ldr	r3, [pc, #132]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c64:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c74:	4a1b      	ldr	r2, [pc, #108]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002c7e:	4a19      	ldr	r2, [pc, #100]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d016      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c90:	f7fe fe0e 	bl	80018b0 <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c96:	e00b      	b.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c98:	f7fe fe0a 	bl	80018b0 <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d902      	bls.n	8002cb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	74fb      	strb	r3, [r7, #19]
            break;
 8002cae:	e006      	b.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cb0:	4b0c      	ldr	r3, [pc, #48]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d0ec      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002cbe:	7cfb      	ldrb	r3, [r7, #19]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10b      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cc4:	4b07      	ldr	r3, [pc, #28]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd2:	4904      	ldr	r1, [pc, #16]	; (8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002cda:	e009      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002cdc:	7cfb      	ldrb	r3, [r7, #19]
 8002cde:	74bb      	strb	r3, [r7, #18]
 8002ce0:	e006      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002ce2:	bf00      	nop
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cec:	7cfb      	ldrb	r3, [r7, #19]
 8002cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cf0:	7c7b      	ldrb	r3, [r7, #17]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf6:	4b8a      	ldr	r3, [pc, #552]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cfa:	4a89      	ldr	r2, [pc, #548]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d0e:	4b84      	ldr	r3, [pc, #528]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d14:	f023 0203 	bic.w	r2, r3, #3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6a1b      	ldr	r3, [r3, #32]
 8002d1c:	4980      	ldr	r1, [pc, #512]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d30:	4b7b      	ldr	r3, [pc, #492]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d36:	f023 020c 	bic.w	r2, r3, #12
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	4978      	ldr	r1, [pc, #480]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d52:	4b73      	ldr	r3, [pc, #460]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	496f      	ldr	r1, [pc, #444]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d74:	4b6a      	ldr	r3, [pc, #424]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d82:	4967      	ldr	r1, [pc, #412]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d96:	4b62      	ldr	r3, [pc, #392]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da4:	495e      	ldr	r1, [pc, #376]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002db8:	4b59      	ldr	r3, [pc, #356]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	4956      	ldr	r1, [pc, #344]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002dda:	4b51      	ldr	r3, [pc, #324]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	494d      	ldr	r1, [pc, #308]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d028      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dfc:	4b48      	ldr	r3, [pc, #288]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	4945      	ldr	r1, [pc, #276]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e1a:	d106      	bne.n	8002e2a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e1c:	4b40      	ldr	r3, [pc, #256]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4a3f      	ldr	r2, [pc, #252]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e26:	60d3      	str	r3, [r2, #12]
 8002e28:	e011      	b.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e32:	d10c      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	3304      	adds	r3, #4
 8002e38:	2101      	movs	r1, #1
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 f882 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002e40:	4603      	mov	r3, r0
 8002e42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e44:	7cfb      	ldrb	r3, [r7, #19]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002e4a:	7cfb      	ldrb	r3, [r7, #19]
 8002e4c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d028      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e68:	492d      	ldr	r1, [pc, #180]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e78:	d106      	bne.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e7a:	4b29      	ldr	r3, [pc, #164]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e84:	60d3      	str	r3, [r2, #12]
 8002e86:	e011      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e90:	d10c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2101      	movs	r1, #1
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f000 f853 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ea2:	7cfb      	ldrb	r3, [r7, #19]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002ea8:	7cfb      	ldrb	r3, [r7, #19]
 8002eaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d01c      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002eb8:	4b19      	ldr	r3, [pc, #100]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec6:	4916      	ldr	r1, [pc, #88]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ed6:	d10c      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	3304      	adds	r3, #4
 8002edc:	2102      	movs	r1, #2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 f830 	bl	8002f44 <RCCEx_PLLSAI1_Config>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002eee:	7cfb      	ldrb	r3, [r7, #19]
 8002ef0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f14:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40021000 	.word	0x40021000

08002f24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002f28:	4b05      	ldr	r3, [pc, #20]	; (8002f40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a04      	ldr	r2, [pc, #16]	; (8002f40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002f2e:	f043 0304 	orr.w	r3, r3, #4
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
 8002f3e:	bf00      	nop
 8002f40:	40021000 	.word	0x40021000

08002f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b084      	sub	sp, #16
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f52:	4b74      	ldr	r3, [pc, #464]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f003 0303 	and.w	r3, r3, #3
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d018      	beq.n	8002f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f5e:	4b71      	ldr	r3, [pc, #452]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	f003 0203 	and.w	r2, r3, #3
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d10d      	bne.n	8002f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
       ||
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d009      	beq.n	8002f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f76:	4b6b      	ldr	r3, [pc, #428]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	091b      	lsrs	r3, r3, #4
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	1c5a      	adds	r2, r3, #1
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	685b      	ldr	r3, [r3, #4]
       ||
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d047      	beq.n	800301a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	73fb      	strb	r3, [r7, #15]
 8002f8e:	e044      	b.n	800301a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	2b03      	cmp	r3, #3
 8002f96:	d018      	beq.n	8002fca <RCCEx_PLLSAI1_Config+0x86>
 8002f98:	2b03      	cmp	r3, #3
 8002f9a:	d825      	bhi.n	8002fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d002      	beq.n	8002fa6 <RCCEx_PLLSAI1_Config+0x62>
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d009      	beq.n	8002fb8 <RCCEx_PLLSAI1_Config+0x74>
 8002fa4:	e020      	b.n	8002fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fa6:	4b5f      	ldr	r3, [pc, #380]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11d      	bne.n	8002fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb6:	e01a      	b.n	8002fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fb8:	4b5a      	ldr	r3, [pc, #360]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d116      	bne.n	8002ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fc8:	e013      	b.n	8002ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fca:	4b56      	ldr	r3, [pc, #344]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10f      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002fd6:	4b53      	ldr	r3, [pc, #332]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002fe6:	e006      	b.n	8002ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	73fb      	strb	r3, [r7, #15]
      break;
 8002fec:	e004      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002fee:	bf00      	nop
 8002ff0:	e002      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ff2:	bf00      	nop
 8002ff4:	e000      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10d      	bne.n	800301a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ffe:	4b49      	ldr	r3, [pc, #292]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6819      	ldr	r1, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	3b01      	subs	r3, #1
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	430b      	orrs	r3, r1
 8003014:	4943      	ldr	r1, [pc, #268]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003016:	4313      	orrs	r3, r2
 8003018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800301a:	7bfb      	ldrb	r3, [r7, #15]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d17c      	bne.n	800311a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003020:	4b40      	ldr	r3, [pc, #256]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a3f      	ldr	r2, [pc, #252]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800302a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302c:	f7fe fc40 	bl	80018b0 <HAL_GetTick>
 8003030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003032:	e009      	b.n	8003048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003034:	f7fe fc3c 	bl	80018b0 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d902      	bls.n	8003048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	73fb      	strb	r3, [r7, #15]
        break;
 8003046:	e005      	b.n	8003054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003048:	4b36      	ldr	r3, [pc, #216]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1ef      	bne.n	8003034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d15f      	bne.n	800311a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d110      	bne.n	8003082 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003060:	4b30      	ldr	r3, [pc, #192]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	6892      	ldr	r2, [r2, #8]
 8003070:	0211      	lsls	r1, r2, #8
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68d2      	ldr	r2, [r2, #12]
 8003076:	06d2      	lsls	r2, r2, #27
 8003078:	430a      	orrs	r2, r1
 800307a:	492a      	ldr	r1, [pc, #168]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800307c:	4313      	orrs	r3, r2
 800307e:	610b      	str	r3, [r1, #16]
 8003080:	e027      	b.n	80030d2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d112      	bne.n	80030ae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003088:	4b26      	ldr	r3, [pc, #152]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003090:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6892      	ldr	r2, [r2, #8]
 8003098:	0211      	lsls	r1, r2, #8
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	6912      	ldr	r2, [r2, #16]
 800309e:	0852      	lsrs	r2, r2, #1
 80030a0:	3a01      	subs	r2, #1
 80030a2:	0552      	lsls	r2, r2, #21
 80030a4:	430a      	orrs	r2, r1
 80030a6:	491f      	ldr	r1, [pc, #124]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	610b      	str	r3, [r1, #16]
 80030ac:	e011      	b.n	80030d2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ae:	4b1d      	ldr	r3, [pc, #116]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6892      	ldr	r2, [r2, #8]
 80030be:	0211      	lsls	r1, r2, #8
 80030c0:	687a      	ldr	r2, [r7, #4]
 80030c2:	6952      	ldr	r2, [r2, #20]
 80030c4:	0852      	lsrs	r2, r2, #1
 80030c6:	3a01      	subs	r2, #1
 80030c8:	0652      	lsls	r2, r2, #25
 80030ca:	430a      	orrs	r2, r1
 80030cc:	4915      	ldr	r1, [pc, #84]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030d2:	4b14      	ldr	r3, [pc, #80]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a13      	ldr	r2, [pc, #76]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030de:	f7fe fbe7 	bl	80018b0 <HAL_GetTick>
 80030e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030e4:	e009      	b.n	80030fa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80030e6:	f7fe fbe3 	bl	80018b0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d902      	bls.n	80030fa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	73fb      	strb	r3, [r7, #15]
          break;
 80030f8:	e005      	b.n	8003106 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80030fa:	4b0a      	ldr	r3, [pc, #40]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d0ef      	beq.n	80030e6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003106:	7bfb      	ldrb	r3, [r7, #15]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d106      	bne.n	800311a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800310c:	4b05      	ldr	r3, [pc, #20]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800310e:	691a      	ldr	r2, [r3, #16]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	699b      	ldr	r3, [r3, #24]
 8003114:	4903      	ldr	r1, [pc, #12]	; (8003124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003116:	4313      	orrs	r3, r2
 8003118:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800311a:	7bfb      	ldrb	r3, [r7, #15]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000

08003128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d101      	bne.n	800313a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	e095      	b.n	8003266 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	2b00      	cmp	r3, #0
 8003140:	d108      	bne.n	8003154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800314a:	d009      	beq.n	8003160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	61da      	str	r2, [r3, #28]
 8003152:	e005      	b.n	8003160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2200      	movs	r2, #0
 8003158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2200      	movs	r2, #0
 800315e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b00      	cmp	r3, #0
 8003170:	d106      	bne.n	8003180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f7fe f958 	bl	8001430 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2202      	movs	r2, #2
 8003184:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003196:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031a0:	d902      	bls.n	80031a8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
 80031a6:	e002      	b.n	80031ae <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031b6:	d007      	beq.n	80031c8 <HAL_SPI_Init+0xa0>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031c0:	d002      	beq.n	80031c8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031d8:	431a      	orrs	r2, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	699b      	ldr	r3, [r3, #24]
 80031f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003200:	431a      	orrs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320a:	ea42 0103 	orr.w	r1, r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	430a      	orrs	r2, r1
 800321c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	0c1b      	lsrs	r3, r3, #16
 8003224:	f003 0204 	and.w	r2, r3, #4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	f003 0310 	and.w	r3, r3, #16
 8003230:	431a      	orrs	r2, r3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	431a      	orrs	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	68db      	ldr	r3, [r3, #12]
 8003240:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003244:	ea42 0103 	orr.w	r1, r2, r3
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	430a      	orrs	r2, r1
 8003254:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800326e:	b580      	push	{r7, lr}
 8003270:	b088      	sub	sp, #32
 8003272:	af00      	add	r7, sp, #0
 8003274:	60f8      	str	r0, [r7, #12]
 8003276:	60b9      	str	r1, [r7, #8]
 8003278:	603b      	str	r3, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003288:	2b01      	cmp	r3, #1
 800328a:	d101      	bne.n	8003290 <HAL_SPI_Transmit+0x22>
 800328c:	2302      	movs	r3, #2
 800328e:	e158      	b.n	8003542 <HAL_SPI_Transmit+0x2d4>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003298:	f7fe fb0a 	bl	80018b0 <HAL_GetTick>
 800329c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800329e:	88fb      	ldrh	r3, [r7, #6]
 80032a0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d002      	beq.n	80032b4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80032ae:	2302      	movs	r3, #2
 80032b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032b2:	e13d      	b.n	8003530 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_SPI_Transmit+0x52>
 80032ba:	88fb      	ldrh	r3, [r7, #6]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d102      	bne.n	80032c6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80032c4:	e134      	b.n	8003530 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2203      	movs	r2, #3
 80032ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2200      	movs	r2, #0
 80032d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	88fa      	ldrh	r2, [r7, #6]
 80032e4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2200      	movs	r2, #0
 80032ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2200      	movs	r2, #0
 8003306:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003310:	d10f      	bne.n	8003332 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003320:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003330:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800333c:	2b40      	cmp	r3, #64	; 0x40
 800333e:	d007      	beq.n	8003350 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800334e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003358:	d94b      	bls.n	80033f2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d002      	beq.n	8003368 <HAL_SPI_Transmit+0xfa>
 8003362:	8afb      	ldrh	r3, [r7, #22]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d13e      	bne.n	80033e6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	881a      	ldrh	r2, [r3, #0]
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003378:	1c9a      	adds	r2, r3, #2
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003382:	b29b      	uxth	r3, r3
 8003384:	3b01      	subs	r3, #1
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800338c:	e02b      	b.n	80033e6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f003 0302 	and.w	r3, r3, #2
 8003398:	2b02      	cmp	r3, #2
 800339a:	d112      	bne.n	80033c2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a0:	881a      	ldrh	r2, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ac:	1c9a      	adds	r2, r3, #2
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	3b01      	subs	r3, #1
 80033ba:	b29a      	uxth	r2, r3
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033c0:	e011      	b.n	80033e6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033c2:	f7fe fa75 	bl	80018b0 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	683a      	ldr	r2, [r7, #0]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d803      	bhi.n	80033da <HAL_SPI_Transmit+0x16c>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d102      	bne.n	80033e0 <HAL_SPI_Transmit+0x172>
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d102      	bne.n	80033e6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80033e4:	e0a4      	b.n	8003530 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ce      	bne.n	800338e <HAL_SPI_Transmit+0x120>
 80033f0:	e07c      	b.n	80034ec <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d002      	beq.n	8003400 <HAL_SPI_Transmit+0x192>
 80033fa:	8afb      	ldrh	r3, [r7, #22]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d170      	bne.n	80034e2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003404:	b29b      	uxth	r3, r3
 8003406:	2b01      	cmp	r3, #1
 8003408:	d912      	bls.n	8003430 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800340e:	881a      	ldrh	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	1c9a      	adds	r2, r3, #2
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003424:	b29b      	uxth	r3, r3
 8003426:	3b02      	subs	r3, #2
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800342e:	e058      	b.n	80034e2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	330c      	adds	r3, #12
 800343a:	7812      	ldrb	r2, [r2, #0]
 800343c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800344c:	b29b      	uxth	r3, r3
 800344e:	3b01      	subs	r3, #1
 8003450:	b29a      	uxth	r2, r3
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003456:	e044      	b.n	80034e2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 0302 	and.w	r3, r3, #2
 8003462:	2b02      	cmp	r3, #2
 8003464:	d12b      	bne.n	80034be <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d912      	bls.n	8003496 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003474:	881a      	ldrh	r2, [r3, #0]
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	1c9a      	adds	r2, r3, #2
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b02      	subs	r3, #2
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003494:	e025      	b.n	80034e2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	7812      	ldrb	r2, [r2, #0]
 80034a2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a8:	1c5a      	adds	r2, r3, #1
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b2:	b29b      	uxth	r3, r3
 80034b4:	3b01      	subs	r3, #1
 80034b6:	b29a      	uxth	r2, r3
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034bc:	e011      	b.n	80034e2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034be:	f7fe f9f7 	bl	80018b0 <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	69bb      	ldr	r3, [r7, #24]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d803      	bhi.n	80034d6 <HAL_SPI_Transmit+0x268>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d102      	bne.n	80034dc <HAL_SPI_Transmit+0x26e>
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d102      	bne.n	80034e2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80034e0:	e026      	b.n	8003530 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d1b5      	bne.n	8003458 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	6839      	ldr	r1, [r7, #0]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 fce3 	bl	8003ebc <SPI_EndRxTxTransaction>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d002      	beq.n	8003502 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d10a      	bne.n	8003520 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800350a:	2300      	movs	r3, #0
 800350c:	613b      	str	r3, [r7, #16]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	613b      	str	r3, [r7, #16]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	77fb      	strb	r3, [r7, #31]
 800352c:	e000      	b.n	8003530 <HAL_SPI_Transmit+0x2c2>
  }

error:
 800352e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003540:	7ffb      	ldrb	r3, [r7, #31]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3720      	adds	r7, #32
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b088      	sub	sp, #32
 800354e:	af02      	add	r7, sp, #8
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	603b      	str	r3, [r7, #0]
 8003556:	4613      	mov	r3, r2
 8003558:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800355a:	2300      	movs	r3, #0
 800355c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003566:	d112      	bne.n	800358e <HAL_SPI_Receive+0x44>
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d10e      	bne.n	800358e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2204      	movs	r2, #4
 8003574:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003578:	88fa      	ldrh	r2, [r7, #6]
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	9300      	str	r3, [sp, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	68f8      	ldr	r0, [r7, #12]
 8003586:	f000 f910 	bl	80037aa <HAL_SPI_TransmitReceive>
 800358a:	4603      	mov	r3, r0
 800358c:	e109      	b.n	80037a2 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003594:	2b01      	cmp	r3, #1
 8003596:	d101      	bne.n	800359c <HAL_SPI_Receive+0x52>
 8003598:	2302      	movs	r3, #2
 800359a:	e102      	b.n	80037a2 <HAL_SPI_Receive+0x258>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035a4:	f7fe f984 	bl	80018b0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d002      	beq.n	80035bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80035b6:	2302      	movs	r3, #2
 80035b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035ba:	e0e9      	b.n	8003790 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <HAL_SPI_Receive+0x7e>
 80035c2:	88fb      	ldrh	r3, [r7, #6]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d102      	bne.n	80035ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035cc:	e0e0      	b.n	8003790 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2204      	movs	r2, #4
 80035d2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	68ba      	ldr	r2, [r7, #8]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	88fa      	ldrh	r2, [r7, #6]
 80035e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	88fa      	ldrh	r2, [r7, #6]
 80035ee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2200      	movs	r2, #0
 8003608:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	68db      	ldr	r3, [r3, #12]
 8003614:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003618:	d908      	bls.n	800362c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	685a      	ldr	r2, [r3, #4]
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003628:	605a      	str	r2, [r3, #4]
 800362a:	e007      	b.n	800363c <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800363a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003644:	d10f      	bne.n	8003666 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003654:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003664:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d007      	beq.n	8003684 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003682:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	68db      	ldr	r3, [r3, #12]
 8003688:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800368c:	d867      	bhi.n	800375e <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800368e:	e030      	b.n	80036f2 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b01      	cmp	r3, #1
 800369c:	d117      	bne.n	80036ce <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f103 020c 	add.w	r2, r3, #12
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036aa:	7812      	ldrb	r2, [r2, #0]
 80036ac:	b2d2      	uxtb	r2, r2
 80036ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	1c5a      	adds	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	3b01      	subs	r3, #1
 80036c4:	b29a      	uxth	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80036cc:	e011      	b.n	80036f2 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036ce:	f7fe f8ef 	bl	80018b0 <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	683a      	ldr	r2, [r7, #0]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d803      	bhi.n	80036e6 <HAL_SPI_Receive+0x19c>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d102      	bne.n	80036ec <HAL_SPI_Receive+0x1a2>
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	75fb      	strb	r3, [r7, #23]
          goto error;
 80036f0:	e04e      	b.n	8003790 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1c8      	bne.n	8003690 <HAL_SPI_Receive+0x146>
 80036fe:	e034      	b.n	800376a <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b01      	cmp	r3, #1
 800370c:	d115      	bne.n	800373a <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	b292      	uxth	r2, r2
 800371a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003738:	e011      	b.n	800375e <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800373a:	f7fe f8b9 	bl	80018b0 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	429a      	cmp	r2, r3
 8003748:	d803      	bhi.n	8003752 <HAL_SPI_Receive+0x208>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003750:	d102      	bne.n	8003758 <HAL_SPI_Receive+0x20e>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d102      	bne.n	800375e <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800375c:	e018      	b.n	8003790 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003764:	b29b      	uxth	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1ca      	bne.n	8003700 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800376a:	693a      	ldr	r2, [r7, #16]
 800376c:	6839      	ldr	r1, [r7, #0]
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f000 fb4c 	bl	8003e0c <SPI_EndRxTransaction>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d002      	beq.n	8003780 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2220      	movs	r2, #32
 800377e:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003784:	2b00      	cmp	r3, #0
 8003786:	d002      	beq.n	800378e <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	75fb      	strb	r3, [r7, #23]
 800378c:	e000      	b.n	8003790 <HAL_SPI_Receive+0x246>
  }

error :
 800378e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b08a      	sub	sp, #40	; 0x28
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	60f8      	str	r0, [r7, #12]
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80037b8:	2301      	movs	r3, #1
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x26>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e1fb      	b.n	8003bc8 <HAL_SPI_TransmitReceive+0x41e>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d8:	f7fe f86a 	bl	80018b0 <HAL_GetTick>
 80037dc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037e4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80037ec:	887b      	ldrh	r3, [r7, #2]
 80037ee:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80037f0:	887b      	ldrh	r3, [r7, #2]
 80037f2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037f4:	7efb      	ldrb	r3, [r7, #27]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d00e      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x6e>
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003800:	d106      	bne.n	8003810 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d102      	bne.n	8003810 <HAL_SPI_TransmitReceive+0x66>
 800380a:	7efb      	ldrb	r3, [r7, #27]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d003      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003810:	2302      	movs	r3, #2
 8003812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003816:	e1cd      	b.n	8003bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_SPI_TransmitReceive+0x80>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_SPI_TransmitReceive+0x80>
 8003824:	887b      	ldrh	r3, [r7, #2]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003830:	e1c0      	b.n	8003bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b04      	cmp	r3, #4
 800383c:	d003      	beq.n	8003846 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2205      	movs	r2, #5
 8003842:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	887a      	ldrh	r2, [r7, #2]
 8003856:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	887a      	ldrh	r2, [r7, #2]
 800385e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	887a      	ldrh	r2, [r7, #2]
 800386c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	887a      	ldrh	r2, [r7, #2]
 8003872:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003888:	d802      	bhi.n	8003890 <HAL_SPI_TransmitReceive+0xe6>
 800388a:	8a3b      	ldrh	r3, [r7, #16]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d908      	bls.n	80038a2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800389e:	605a      	str	r2, [r3, #4]
 80038a0:	e007      	b.n	80038b2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038b0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038bc:	2b40      	cmp	r3, #64	; 0x40
 80038be:	d007      	beq.n	80038d0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038d8:	d97c      	bls.n	80039d4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d002      	beq.n	80038e8 <HAL_SPI_TransmitReceive+0x13e>
 80038e2:	8a7b      	ldrh	r3, [r7, #18]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d169      	bne.n	80039bc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ec:	881a      	ldrh	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	1c9a      	adds	r2, r3, #2
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800390c:	e056      	b.n	80039bc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	d11b      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x1aa>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d016      	beq.n	8003954 <HAL_SPI_TransmitReceive+0x1aa>
 8003926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003928:	2b01      	cmp	r3, #1
 800392a:	d113      	bne.n	8003954 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800393c:	1c9a      	adds	r2, r3, #2
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003946:	b29b      	uxth	r3, r3
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003950:	2300      	movs	r3, #0
 8003952:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d11c      	bne.n	800399c <HAL_SPI_TransmitReceive+0x1f2>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003968:	b29b      	uxth	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d016      	beq.n	800399c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68da      	ldr	r2, [r3, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003978:	b292      	uxth	r2, r2
 800397a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	1c9a      	adds	r2, r3, #2
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800398c:	b29b      	uxth	r3, r3
 800398e:	3b01      	subs	r3, #1
 8003990:	b29a      	uxth	r2, r3
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003998:	2301      	movs	r3, #1
 800399a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800399c:	f7fd ff88 	bl	80018b0 <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d807      	bhi.n	80039bc <HAL_SPI_TransmitReceive+0x212>
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d003      	beq.n	80039bc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80039ba:	e0fb      	b.n	8003bb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1a3      	bne.n	800390e <HAL_SPI_TransmitReceive+0x164>
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039cc:	b29b      	uxth	r3, r3
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d19d      	bne.n	800390e <HAL_SPI_TransmitReceive+0x164>
 80039d2:	e0df      	b.n	8003b94 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d003      	beq.n	80039e4 <HAL_SPI_TransmitReceive+0x23a>
 80039dc:	8a7b      	ldrh	r3, [r7, #18]
 80039de:	2b01      	cmp	r3, #1
 80039e0:	f040 80cb 	bne.w	8003b7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d912      	bls.n	8003a14 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039f2:	881a      	ldrh	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	1c9a      	adds	r2, r3, #2
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b02      	subs	r3, #2
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a12:	e0b2      	b.n	8003b7a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	330c      	adds	r3, #12
 8003a1e:	7812      	ldrb	r2, [r2, #0]
 8003a20:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a26:	1c5a      	adds	r2, r3, #1
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	3b01      	subs	r3, #1
 8003a34:	b29a      	uxth	r2, r3
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a3a:	e09e      	b.n	8003b7a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f003 0302 	and.w	r3, r3, #2
 8003a46:	2b02      	cmp	r3, #2
 8003a48:	d134      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x30a>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d02f      	beq.n	8003ab4 <HAL_SPI_TransmitReceive+0x30a>
 8003a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d12c      	bne.n	8003ab4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d912      	bls.n	8003a8a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a74:	1c9a      	adds	r2, r3, #2
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	3b02      	subs	r3, #2
 8003a82:	b29a      	uxth	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a88:	e012      	b.n	8003ab0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	330c      	adds	r3, #12
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a9c:	1c5a      	adds	r2, r3, #1
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	b29a      	uxth	r2, r3
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d148      	bne.n	8003b54 <HAL_SPI_TransmitReceive+0x3aa>
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d042      	beq.n	8003b54 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d923      	bls.n	8003b22 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae4:	b292      	uxth	r2, r2
 8003ae6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	1c9a      	adds	r2, r3, #2
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003af8:	b29b      	uxth	r3, r3
 8003afa:	3b02      	subs	r3, #2
 8003afc:	b29a      	uxth	r2, r3
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d81f      	bhi.n	8003b50 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b1e:	605a      	str	r2, [r3, #4]
 8003b20:	e016      	b.n	8003b50 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f103 020c 	add.w	r2, r3, #12
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	7812      	ldrb	r2, [r2, #0]
 8003b30:	b2d2      	uxtb	r2, r2
 8003b32:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b38:	1c5a      	adds	r2, r3, #1
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b50:	2301      	movs	r3, #1
 8003b52:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b54:	f7fd feac 	bl	80018b0 <HAL_GetTick>
 8003b58:	4602      	mov	r2, r0
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	1ad3      	subs	r3, r2, r3
 8003b5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d803      	bhi.n	8003b6c <HAL_SPI_TransmitReceive+0x3c2>
 8003b64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b6a:	d102      	bne.n	8003b72 <HAL_SPI_TransmitReceive+0x3c8>
 8003b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d103      	bne.n	8003b7a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003b78:	e01c      	b.n	8003bb4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	f47f af5b 	bne.w	8003a3c <HAL_SPI_TransmitReceive+0x292>
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f47f af54 	bne.w	8003a3c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b94:	69fa      	ldr	r2, [r7, #28]
 8003b96:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f000 f98f 	bl	8003ebc <SPI_EndRxTxTransaction>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d006      	beq.n	8003bb2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2220      	movs	r2, #32
 8003bae:	661a      	str	r2, [r3, #96]	; 0x60
 8003bb0:	e000      	b.n	8003bb4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003bb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3728      	adds	r7, #40	; 0x28
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003be0:	f7fd fe66 	bl	80018b0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	4413      	add	r3, r2
 8003bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003bf0:	f7fd fe5e 	bl	80018b0 <HAL_GetTick>
 8003bf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bf6:	4b39      	ldr	r3, [pc, #228]	; (8003cdc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	015b      	lsls	r3, r3, #5
 8003bfc:	0d1b      	lsrs	r3, r3, #20
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	fb02 f303 	mul.w	r3, r2, r3
 8003c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c06:	e054      	b.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c0e:	d050      	beq.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c10:	f7fd fe4e 	bl	80018b0 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	69fa      	ldr	r2, [r7, #28]
 8003c1c:	429a      	cmp	r2, r3
 8003c1e:	d902      	bls.n	8003c26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d13d      	bne.n	8003ca2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c3e:	d111      	bne.n	8003c64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c48:	d004      	beq.n	8003c54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c52:	d107      	bne.n	8003c64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681a      	ldr	r2, [r3, #0]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c6c:	d10f      	bne.n	8003c8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e017      	b.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	689a      	ldr	r2, [r3, #8]
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	4013      	ands	r3, r2
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	bf0c      	ite	eq
 8003cc2:	2301      	moveq	r3, #1
 8003cc4:	2300      	movne	r3, #0
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d19b      	bne.n	8003c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3720      	adds	r7, #32
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	bf00      	nop
 8003cdc:	2000000c 	.word	0x2000000c

08003ce0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08a      	sub	sp, #40	; 0x28
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cf2:	f7fd fddd 	bl	80018b0 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	4413      	add	r3, r2
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003d02:	f7fd fdd5 	bl	80018b0 <HAL_GetTick>
 8003d06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	330c      	adds	r3, #12
 8003d0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d10:	4b3d      	ldr	r3, [pc, #244]	; (8003e08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	4413      	add	r3, r2
 8003d1a:	00da      	lsls	r2, r3, #3
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	0d1b      	lsrs	r3, r3, #20
 8003d20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d22:	fb02 f303 	mul.w	r3, r2, r3
 8003d26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d28:	e060      	b.n	8003dec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d30:	d107      	bne.n	8003d42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d104      	bne.n	8003d42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d48:	d050      	beq.n	8003dec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d4a:	f7fd fdb1 	bl	80018b0 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d902      	bls.n	8003d60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d13d      	bne.n	8003ddc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d78:	d111      	bne.n	8003d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d82:	d004      	beq.n	8003d8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d8c:	d107      	bne.n	8003d9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003da6:	d10f      	bne.n	8003dc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e010      	b.n	8003dfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	3b01      	subs	r3, #1
 8003dea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4013      	ands	r3, r2
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d196      	bne.n	8003d2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3728      	adds	r7, #40	; 0x28
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	2000000c 	.word	0x2000000c

08003e0c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e20:	d111      	bne.n	8003e46 <SPI_EndRxTransaction+0x3a>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e2a:	d004      	beq.n	8003e36 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e34:	d107      	bne.n	8003e46 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e44:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	2180      	movs	r1, #128	; 0x80
 8003e50:	68f8      	ldr	r0, [r7, #12]
 8003e52:	f7ff febd 	bl	8003bd0 <SPI_WaitFlagStateUntilTimeout>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e60:	f043 0220 	orr.w	r2, r3, #32
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e68:	2303      	movs	r3, #3
 8003e6a:	e023      	b.n	8003eb4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e74:	d11d      	bne.n	8003eb2 <SPI_EndRxTransaction+0xa6>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e7e:	d004      	beq.n	8003e8a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e88:	d113      	bne.n	8003eb2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f7ff ff22 	bl	8003ce0 <SPI_WaitFifoStateUntilTimeout>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d007      	beq.n	8003eb2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ea6:	f043 0220 	orr.w	r2, r3, #32
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003eae:	2303      	movs	r3, #3
 8003eb0:	e000      	b.n	8003eb4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af02      	add	r7, sp, #8
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff ff03 	bl	8003ce0 <SPI_WaitFifoStateUntilTimeout>
 8003eda:	4603      	mov	r3, r0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e027      	b.n	8003f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	2180      	movs	r1, #128	; 0x80
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fe68 	bl	8003bd0 <SPI_WaitFlagStateUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d007      	beq.n	8003f16 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f0a:	f043 0220 	orr.w	r2, r3, #32
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f12:	2303      	movs	r3, #3
 8003f14:	e014      	b.n	8003f40 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f22:	68f8      	ldr	r0, [r7, #12]
 8003f24:	f7ff fedc 	bl	8003ce0 <SPI_WaitFifoStateUntilTimeout>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d007      	beq.n	8003f3e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f32:	f043 0220 	orr.w	r2, r3, #32
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e000      	b.n	8003f40 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3710      	adds	r7, #16
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e040      	b.n	8003fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d106      	bne.n	8003f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f7fd faa2 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2224      	movs	r2, #36	; 0x24
 8003f74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0201 	bic.w	r2, r2, #1
 8003f84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 f8c0 	bl	800410c <UART_SetConfig>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e022      	b.n	8003fdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 fae0 	bl	8004564 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	689a      	ldr	r2, [r3, #8]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f042 0201 	orr.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fb67 	bl	80046a8 <UART_CheckIdleState>
 8003fda:	4603      	mov	r3, r0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af02      	add	r7, sp, #8
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	603b      	str	r3, [r7, #0]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	f040 8082 	bne.w	8004102 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d002      	beq.n	800400a <HAL_UART_Transmit+0x26>
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d101      	bne.n	800400e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e07a      	b.n	8004104 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004014:	2b01      	cmp	r3, #1
 8004016:	d101      	bne.n	800401c <HAL_UART_Transmit+0x38>
 8004018:	2302      	movs	r3, #2
 800401a:	e073      	b.n	8004104 <HAL_UART_Transmit+0x120>
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	2201      	movs	r2, #1
 8004020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2221      	movs	r2, #33	; 0x21
 8004030:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004032:	f7fd fc3d 	bl	80018b0 <HAL_GetTick>
 8004036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	88fa      	ldrh	r2, [r7, #6]
 800403c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	88fa      	ldrh	r2, [r7, #6]
 8004044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004050:	d108      	bne.n	8004064 <HAL_UART_Transmit+0x80>
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d104      	bne.n	8004064 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800405a:	2300      	movs	r3, #0
 800405c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	e003      	b.n	800406c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004068:	2300      	movs	r3, #0
 800406a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004074:	e02d      	b.n	80040d2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	2200      	movs	r2, #0
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f000 fb5a 	bl	800473a <UART_WaitOnFlagUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d001      	beq.n	8004090 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e039      	b.n	8004104 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8004090:	69fb      	ldr	r3, [r7, #28]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d10b      	bne.n	80040ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	881a      	ldrh	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80040a2:	b292      	uxth	r2, r2
 80040a4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	3302      	adds	r3, #2
 80040aa:	61bb      	str	r3, [r7, #24]
 80040ac:	e008      	b.n	80040c0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80040ae:	69fb      	ldr	r3, [r7, #28]
 80040b0:	781a      	ldrb	r2, [r3, #0]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	b292      	uxth	r2, r2
 80040b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	3301      	adds	r3, #1
 80040be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	3b01      	subs	r3, #1
 80040ca:	b29a      	uxth	r2, r3
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040d8:	b29b      	uxth	r3, r3
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d1cb      	bne.n	8004076 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	9300      	str	r3, [sp, #0]
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	2200      	movs	r2, #0
 80040e6:	2140      	movs	r1, #64	; 0x40
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fb26 	bl	800473a <UART_WaitOnFlagUntilTimeout>
 80040ee:	4603      	mov	r3, r0
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d001      	beq.n	80040f8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e005      	b.n	8004104 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2220      	movs	r2, #32
 80040fc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80040fe:	2300      	movs	r3, #0
 8004100:	e000      	b.n	8004104 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004102:	2302      	movs	r3, #2
  }
}
 8004104:	4618      	mov	r0, r3
 8004106:	3720      	adds	r7, #32
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800410c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004110:	b08a      	sub	sp, #40	; 0x28
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004116:	2300      	movs	r3, #0
 8004118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	689a      	ldr	r2, [r3, #8]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	691b      	ldr	r3, [r3, #16]
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	431a      	orrs	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	4313      	orrs	r3, r2
 8004132:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	4bb4      	ldr	r3, [pc, #720]	; (800440c <UART_SetConfig+0x300>)
 800413c:	4013      	ands	r3, r2
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	6812      	ldr	r2, [r2, #0]
 8004142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004144:	430b      	orrs	r3, r1
 8004146:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	430a      	orrs	r2, r1
 800415c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4aa9      	ldr	r2, [pc, #676]	; (8004410 <UART_SetConfig+0x304>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d004      	beq.n	8004178 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004174:	4313      	orrs	r3, r2
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004188:	430a      	orrs	r2, r1
 800418a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4aa0      	ldr	r2, [pc, #640]	; (8004414 <UART_SetConfig+0x308>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d126      	bne.n	80041e4 <UART_SetConfig+0xd8>
 8004196:	4ba0      	ldr	r3, [pc, #640]	; (8004418 <UART_SetConfig+0x30c>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f003 0303 	and.w	r3, r3, #3
 80041a0:	2b03      	cmp	r3, #3
 80041a2:	d81b      	bhi.n	80041dc <UART_SetConfig+0xd0>
 80041a4:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <UART_SetConfig+0xa0>)
 80041a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041aa:	bf00      	nop
 80041ac:	080041bd 	.word	0x080041bd
 80041b0:	080041cd 	.word	0x080041cd
 80041b4:	080041c5 	.word	0x080041c5
 80041b8:	080041d5 	.word	0x080041d5
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c2:	e080      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80041c4:	2302      	movs	r3, #2
 80041c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ca:	e07c      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80041cc:	2304      	movs	r3, #4
 80041ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041d2:	e078      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80041d4:	2308      	movs	r3, #8
 80041d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041da:	e074      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80041dc:	2310      	movs	r3, #16
 80041de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041e2:	e070      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a8c      	ldr	r2, [pc, #560]	; (800441c <UART_SetConfig+0x310>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d138      	bne.n	8004260 <UART_SetConfig+0x154>
 80041ee:	4b8a      	ldr	r3, [pc, #552]	; (8004418 <UART_SetConfig+0x30c>)
 80041f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b0c      	cmp	r3, #12
 80041fa:	d82d      	bhi.n	8004258 <UART_SetConfig+0x14c>
 80041fc:	a201      	add	r2, pc, #4	; (adr r2, 8004204 <UART_SetConfig+0xf8>)
 80041fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004202:	bf00      	nop
 8004204:	08004239 	.word	0x08004239
 8004208:	08004259 	.word	0x08004259
 800420c:	08004259 	.word	0x08004259
 8004210:	08004259 	.word	0x08004259
 8004214:	08004249 	.word	0x08004249
 8004218:	08004259 	.word	0x08004259
 800421c:	08004259 	.word	0x08004259
 8004220:	08004259 	.word	0x08004259
 8004224:	08004241 	.word	0x08004241
 8004228:	08004259 	.word	0x08004259
 800422c:	08004259 	.word	0x08004259
 8004230:	08004259 	.word	0x08004259
 8004234:	08004251 	.word	0x08004251
 8004238:	2300      	movs	r3, #0
 800423a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423e:	e042      	b.n	80042c6 <UART_SetConfig+0x1ba>
 8004240:	2302      	movs	r3, #2
 8004242:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004246:	e03e      	b.n	80042c6 <UART_SetConfig+0x1ba>
 8004248:	2304      	movs	r3, #4
 800424a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800424e:	e03a      	b.n	80042c6 <UART_SetConfig+0x1ba>
 8004250:	2308      	movs	r3, #8
 8004252:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004256:	e036      	b.n	80042c6 <UART_SetConfig+0x1ba>
 8004258:	2310      	movs	r3, #16
 800425a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800425e:	e032      	b.n	80042c6 <UART_SetConfig+0x1ba>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a6a      	ldr	r2, [pc, #424]	; (8004410 <UART_SetConfig+0x304>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d12a      	bne.n	80042c0 <UART_SetConfig+0x1b4>
 800426a:	4b6b      	ldr	r3, [pc, #428]	; (8004418 <UART_SetConfig+0x30c>)
 800426c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004270:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004278:	d01a      	beq.n	80042b0 <UART_SetConfig+0x1a4>
 800427a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800427e:	d81b      	bhi.n	80042b8 <UART_SetConfig+0x1ac>
 8004280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004284:	d00c      	beq.n	80042a0 <UART_SetConfig+0x194>
 8004286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800428a:	d815      	bhi.n	80042b8 <UART_SetConfig+0x1ac>
 800428c:	2b00      	cmp	r3, #0
 800428e:	d003      	beq.n	8004298 <UART_SetConfig+0x18c>
 8004290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004294:	d008      	beq.n	80042a8 <UART_SetConfig+0x19c>
 8004296:	e00f      	b.n	80042b8 <UART_SetConfig+0x1ac>
 8004298:	2300      	movs	r3, #0
 800429a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429e:	e012      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80042a0:	2302      	movs	r3, #2
 80042a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a6:	e00e      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80042a8:	2304      	movs	r3, #4
 80042aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042ae:	e00a      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80042b0:	2308      	movs	r3, #8
 80042b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042b6:	e006      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80042b8:	2310      	movs	r3, #16
 80042ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042be:	e002      	b.n	80042c6 <UART_SetConfig+0x1ba>
 80042c0:	2310      	movs	r3, #16
 80042c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a51      	ldr	r2, [pc, #324]	; (8004410 <UART_SetConfig+0x304>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d17a      	bne.n	80043c6 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d824      	bhi.n	8004322 <UART_SetConfig+0x216>
 80042d8:	a201      	add	r2, pc, #4	; (adr r2, 80042e0 <UART_SetConfig+0x1d4>)
 80042da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042de:	bf00      	nop
 80042e0:	08004305 	.word	0x08004305
 80042e4:	08004323 	.word	0x08004323
 80042e8:	0800430d 	.word	0x0800430d
 80042ec:	08004323 	.word	0x08004323
 80042f0:	08004313 	.word	0x08004313
 80042f4:	08004323 	.word	0x08004323
 80042f8:	08004323 	.word	0x08004323
 80042fc:	08004323 	.word	0x08004323
 8004300:	0800431b 	.word	0x0800431b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004304:	f7fe fb8c 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8004308:	61f8      	str	r0, [r7, #28]
        break;
 800430a:	e010      	b.n	800432e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800430c:	4b44      	ldr	r3, [pc, #272]	; (8004420 <UART_SetConfig+0x314>)
 800430e:	61fb      	str	r3, [r7, #28]
        break;
 8004310:	e00d      	b.n	800432e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004312:	f7fe faed 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8004316:	61f8      	str	r0, [r7, #28]
        break;
 8004318:	e009      	b.n	800432e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800431a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800431e:	61fb      	str	r3, [r7, #28]
        break;
 8004320:	e005      	b.n	800432e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800432c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 8107 	beq.w	8004544 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	4613      	mov	r3, r2
 800433c:	005b      	lsls	r3, r3, #1
 800433e:	4413      	add	r3, r2
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	429a      	cmp	r2, r3
 8004344:	d305      	bcc.n	8004352 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800434c:	69fa      	ldr	r2, [r7, #28]
 800434e:	429a      	cmp	r2, r3
 8004350:	d903      	bls.n	800435a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004358:	e0f4      	b.n	8004544 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	2200      	movs	r2, #0
 800435e:	461c      	mov	r4, r3
 8004360:	4615      	mov	r5, r2
 8004362:	f04f 0200 	mov.w	r2, #0
 8004366:	f04f 0300 	mov.w	r3, #0
 800436a:	022b      	lsls	r3, r5, #8
 800436c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004370:	0222      	lsls	r2, r4, #8
 8004372:	68f9      	ldr	r1, [r7, #12]
 8004374:	6849      	ldr	r1, [r1, #4]
 8004376:	0849      	lsrs	r1, r1, #1
 8004378:	2000      	movs	r0, #0
 800437a:	4688      	mov	r8, r1
 800437c:	4681      	mov	r9, r0
 800437e:	eb12 0a08 	adds.w	sl, r2, r8
 8004382:	eb43 0b09 	adc.w	fp, r3, r9
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	603b      	str	r3, [r7, #0]
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004394:	4650      	mov	r0, sl
 8004396:	4659      	mov	r1, fp
 8004398:	f7fc fc76 	bl	8000c88 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4613      	mov	r3, r2
 80043a2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80043aa:	d308      	bcc.n	80043be <UART_SetConfig+0x2b2>
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043b2:	d204      	bcs.n	80043be <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	69ba      	ldr	r2, [r7, #24]
 80043ba:	60da      	str	r2, [r3, #12]
 80043bc:	e0c2      	b.n	8004544 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043c4:	e0be      	b.n	8004544 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043ce:	d16a      	bne.n	80044a6 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80043d0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d834      	bhi.n	8004442 <UART_SetConfig+0x336>
 80043d8:	a201      	add	r2, pc, #4	; (adr r2, 80043e0 <UART_SetConfig+0x2d4>)
 80043da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043de:	bf00      	nop
 80043e0:	08004405 	.word	0x08004405
 80043e4:	08004425 	.word	0x08004425
 80043e8:	0800442d 	.word	0x0800442d
 80043ec:	08004443 	.word	0x08004443
 80043f0:	08004433 	.word	0x08004433
 80043f4:	08004443 	.word	0x08004443
 80043f8:	08004443 	.word	0x08004443
 80043fc:	08004443 	.word	0x08004443
 8004400:	0800443b 	.word	0x0800443b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004404:	f7fe fb0c 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 8004408:	61f8      	str	r0, [r7, #28]
        break;
 800440a:	e020      	b.n	800444e <UART_SetConfig+0x342>
 800440c:	efff69f3 	.word	0xefff69f3
 8004410:	40008000 	.word	0x40008000
 8004414:	40013800 	.word	0x40013800
 8004418:	40021000 	.word	0x40021000
 800441c:	40004400 	.word	0x40004400
 8004420:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004424:	f7fe fb12 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 8004428:	61f8      	str	r0, [r7, #28]
        break;
 800442a:	e010      	b.n	800444e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800442c:	4b4c      	ldr	r3, [pc, #304]	; (8004560 <UART_SetConfig+0x454>)
 800442e:	61fb      	str	r3, [r7, #28]
        break;
 8004430:	e00d      	b.n	800444e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004432:	f7fe fa5d 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 8004436:	61f8      	str	r0, [r7, #28]
        break;
 8004438:	e009      	b.n	800444e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800443a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800443e:	61fb      	str	r3, [r7, #28]
        break;
 8004440:	e005      	b.n	800444e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004442:	2300      	movs	r3, #0
 8004444:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800444c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d077      	beq.n	8004544 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005a      	lsls	r2, r3, #1
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	085b      	lsrs	r3, r3, #1
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	fbb2 f3f3 	udiv	r3, r2, r3
 8004468:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	2b0f      	cmp	r3, #15
 800446e:	d916      	bls.n	800449e <UART_SetConfig+0x392>
 8004470:	69bb      	ldr	r3, [r7, #24]
 8004472:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004476:	d212      	bcs.n	800449e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	b29b      	uxth	r3, r3
 800447c:	f023 030f 	bic.w	r3, r3, #15
 8004480:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	085b      	lsrs	r3, r3, #1
 8004486:	b29b      	uxth	r3, r3
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	b29a      	uxth	r2, r3
 800448e:	8afb      	ldrh	r3, [r7, #22]
 8004490:	4313      	orrs	r3, r2
 8004492:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	8afa      	ldrh	r2, [r7, #22]
 800449a:	60da      	str	r2, [r3, #12]
 800449c:	e052      	b.n	8004544 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80044a4:	e04e      	b.n	8004544 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80044a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d827      	bhi.n	80044fe <UART_SetConfig+0x3f2>
 80044ae:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <UART_SetConfig+0x3a8>)
 80044b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b4:	080044d9 	.word	0x080044d9
 80044b8:	080044e1 	.word	0x080044e1
 80044bc:	080044e9 	.word	0x080044e9
 80044c0:	080044ff 	.word	0x080044ff
 80044c4:	080044ef 	.word	0x080044ef
 80044c8:	080044ff 	.word	0x080044ff
 80044cc:	080044ff 	.word	0x080044ff
 80044d0:	080044ff 	.word	0x080044ff
 80044d4:	080044f7 	.word	0x080044f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d8:	f7fe faa2 	bl	8002a20 <HAL_RCC_GetPCLK1Freq>
 80044dc:	61f8      	str	r0, [r7, #28]
        break;
 80044de:	e014      	b.n	800450a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044e0:	f7fe fab4 	bl	8002a4c <HAL_RCC_GetPCLK2Freq>
 80044e4:	61f8      	str	r0, [r7, #28]
        break;
 80044e6:	e010      	b.n	800450a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044e8:	4b1d      	ldr	r3, [pc, #116]	; (8004560 <UART_SetConfig+0x454>)
 80044ea:	61fb      	str	r3, [r7, #28]
        break;
 80044ec:	e00d      	b.n	800450a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044ee:	f7fe f9ff 	bl	80028f0 <HAL_RCC_GetSysClockFreq>
 80044f2:	61f8      	str	r0, [r7, #28]
        break;
 80044f4:	e009      	b.n	800450a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044fa:	61fb      	str	r3, [r7, #28]
        break;
 80044fc:	e005      	b.n	800450a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004508:	bf00      	nop
    }

    if (pclk != 0U)
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d019      	beq.n	8004544 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	085a      	lsrs	r2, r3, #1
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	441a      	add	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004522:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	2b0f      	cmp	r3, #15
 8004528:	d909      	bls.n	800453e <UART_SetConfig+0x432>
 800452a:	69bb      	ldr	r3, [r7, #24]
 800452c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004530:	d205      	bcs.n	800453e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	b29a      	uxth	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	60da      	str	r2, [r3, #12]
 800453c:	e002      	b.n	8004544 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2200      	movs	r2, #0
 8004548:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004550:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004554:	4618      	mov	r0, r3
 8004556:	3728      	adds	r7, #40	; 0x28
 8004558:	46bd      	mov	sp, r7
 800455a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800455e:	bf00      	nop
 8004560:	00f42400 	.word	0x00f42400

08004564 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0301 	and.w	r3, r3, #1
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f003 0304 	and.w	r3, r3, #4
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d00a      	beq.n	80045d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	f003 0308 	and.w	r3, r3, #8
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f8:	f003 0310 	and.w	r3, r3, #16
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d00a      	beq.n	8004616 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	430a      	orrs	r2, r1
 8004614:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	f003 0320 	and.w	r3, r3, #32
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004640:	2b00      	cmp	r3, #0
 8004642:	d01a      	beq.n	800467a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004662:	d10a      	bne.n	800467a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	430a      	orrs	r2, r1
 8004678:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00a      	beq.n	800469c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	430a      	orrs	r2, r1
 800469a:	605a      	str	r2, [r3, #4]
  }
}
 800469c:	bf00      	nop
 800469e:	370c      	adds	r7, #12
 80046a0:	46bd      	mov	sp, r7
 80046a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a6:	4770      	bx	lr

080046a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b086      	sub	sp, #24
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b8:	f7fd f8fa 	bl	80018b0 <HAL_GetTick>
 80046bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b08      	cmp	r3, #8
 80046ca:	d10e      	bne.n	80046ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046d0:	9300      	str	r3, [sp, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f82d 	bl	800473a <UART_WaitOnFlagUntilTimeout>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e6:	2303      	movs	r3, #3
 80046e8:	e023      	b.n	8004732 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d10e      	bne.n	8004716 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046fc:	9300      	str	r3, [sp, #0]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004706:	6878      	ldr	r0, [r7, #4]
 8004708:	f000 f817 	bl	800473a <UART_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004712:	2303      	movs	r3, #3
 8004714:	e00d      	b.n	8004732 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2220      	movs	r2, #32
 800471a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3710      	adds	r7, #16
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b09c      	sub	sp, #112	; 0x70
 800473e:	af00      	add	r7, sp, #0
 8004740:	60f8      	str	r0, [r7, #12]
 8004742:	60b9      	str	r1, [r7, #8]
 8004744:	603b      	str	r3, [r7, #0]
 8004746:	4613      	mov	r3, r2
 8004748:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800474a:	e0a5      	b.n	8004898 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800474c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800474e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004752:	f000 80a1 	beq.w	8004898 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004756:	f7fd f8ab 	bl	80018b0 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004762:	429a      	cmp	r2, r3
 8004764:	d302      	bcc.n	800476c <UART_WaitOnFlagUntilTimeout+0x32>
 8004766:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004768:	2b00      	cmp	r3, #0
 800476a:	d13e      	bne.n	80047ea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004772:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004774:	e853 3f00 	ldrex	r3, [r3]
 8004778:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800477a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800477c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004780:	667b      	str	r3, [r7, #100]	; 0x64
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	461a      	mov	r2, r3
 8004788:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800478a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800478c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004790:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800479a:	2b00      	cmp	r3, #0
 800479c:	d1e6      	bne.n	800476c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	3308      	adds	r3, #8
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b0:	f023 0301 	bic.w	r3, r3, #1
 80047b4:	663b      	str	r3, [r7, #96]	; 0x60
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	3308      	adds	r3, #8
 80047bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80047be:	64ba      	str	r2, [r7, #72]	; 0x48
 80047c0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80047cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e5      	bne.n	800479e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2220      	movs	r2, #32
 80047d6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2220      	movs	r2, #32
 80047dc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e067      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f003 0304 	and.w	r3, r3, #4
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d04f      	beq.n	8004898 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004806:	d147      	bne.n	8004898 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004810:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004822:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004826:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
 8004832:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004836:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e6      	bne.n	8004812 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3308      	adds	r3, #8
 800484a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	613b      	str	r3, [r7, #16]
   return(result);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f023 0301 	bic.w	r3, r3, #1
 800485a:	66bb      	str	r3, [r7, #104]	; 0x68
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3308      	adds	r3, #8
 8004862:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004864:	623a      	str	r2, [r7, #32]
 8004866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	69f9      	ldr	r1, [r7, #28]
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	61bb      	str	r3, [r7, #24]
   return(result);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e5      	bne.n	8004844 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2220      	movs	r2, #32
 8004882:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2220      	movs	r2, #32
 8004888:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e010      	b.n	80048ba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	69da      	ldr	r2, [r3, #28]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4013      	ands	r3, r2
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	bf0c      	ite	eq
 80048a8:	2301      	moveq	r3, #1
 80048aa:	2300      	movne	r3, #0
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	79fb      	ldrb	r3, [r7, #7]
 80048b2:	429a      	cmp	r2, r3
 80048b4:	f43f af4a 	beq.w	800474c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3770      	adds	r7, #112	; 0x70
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <PMW3901_RegWrite>:

PMW3901_Descriptor_t *Descriptor; // Initialise notre port SPI


PMW3901_Status_t PMW3901_RegWrite(uint8_t reg, uint8_t val) // Méthode permettant d'écrire dans des registres en SPI
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	4603      	mov	r3, r0
 80048cc:	460a      	mov	r2, r1
 80048ce:	71fb      	strb	r3, [r7, #7]
 80048d0:	4613      	mov	r3, r2
 80048d2:	71bb      	strb	r3, [r7, #6]

	HAL_StatusTypeDef SPI_status;

	reg |= 0x80;
 80048d4:	79fb      	ldrb	r3, [r7, #7]
 80048d6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80048da:	71fb      	strb	r3, [r7, #7]
	uint8_t send[2]={reg,val};
 80048dc:	79fb      	ldrb	r3, [r7, #7]
 80048de:	733b      	strb	r3, [r7, #12]
 80048e0:	79bb      	ldrb	r3, [r7, #6]
 80048e2:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 80048e4:	4b14      	ldr	r3, [pc, #80]	; (8004938 <PMW3901_RegWrite+0x74>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6858      	ldr	r0, [r3, #4]
 80048ea:	4b13      	ldr	r3, [pc, #76]	; (8004938 <PMW3901_RegWrite+0x74>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	891b      	ldrh	r3, [r3, #8]
 80048f0:	2200      	movs	r2, #0
 80048f2:	4619      	mov	r1, r3
 80048f4:	f7fd fa5c 	bl	8001db0 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, send, 2, 1000);
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <PMW3901_RegWrite+0x74>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	f107 010c 	add.w	r1, r7, #12
 8004902:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004906:	2202      	movs	r2, #2
 8004908:	f7fe fcb1 	bl	800326e <HAL_SPI_Transmit>
 800490c:	4603      	mov	r3, r0
 800490e:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <PMW3901_RegWrite+0x56>
 8004916:	2302      	movs	r3, #2
 8004918:	e00a      	b.n	8004930 <PMW3901_RegWrite+0x6c>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 800491a:	4b07      	ldr	r3, [pc, #28]	; (8004938 <PMW3901_RegWrite+0x74>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	6858      	ldr	r0, [r3, #4]
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <PMW3901_RegWrite+0x74>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	891b      	ldrh	r3, [r3, #8]
 8004926:	2201      	movs	r2, #1
 8004928:	4619      	mov	r1, r3
 800492a:	f7fd fa41 	bl	8001db0 <HAL_GPIO_WritePin>

	return PMW3901_SUCCESS;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3710      	adds	r7, #16
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}
 8004938:	20000710 	.word	0x20000710

0800493c <PMW3901_RegRead>:

PMW3901_Status_t PMW3901_RegRead(uint8_t reg, uint8_t *dest) // Méthode permettant de lire des registres en SPI
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	4603      	mov	r3, r0
 8004944:	6039      	str	r1, [r7, #0]
 8004946:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef SPI_status;

	uint8_t value;

	reg &= ~0x80;
 8004948:	79fb      	ldrb	r3, [r7, #7]
 800494a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800494e:	b2db      	uxtb	r3, r3
 8004950:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_RESET);
 8004952:	4b1e      	ldr	r3, [pc, #120]	; (80049cc <PMW3901_RegRead+0x90>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6858      	ldr	r0, [r3, #4]
 8004958:	4b1c      	ldr	r3, [pc, #112]	; (80049cc <PMW3901_RegRead+0x90>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	891b      	ldrh	r3, [r3, #8]
 800495e:	2200      	movs	r2, #0
 8004960:	4619      	mov	r1, r3
 8004962:	f7fd fa25 	bl	8001db0 <HAL_GPIO_WritePin>

	SPI_status = HAL_SPI_Transmit(HSPI, &reg, 1, 1000);
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <PMW3901_RegRead+0x90>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	1df9      	adds	r1, r7, #7
 800496e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004972:	2201      	movs	r2, #1
 8004974:	f7fe fc7b 	bl	800326e <HAL_SPI_Transmit>
 8004978:	4603      	mov	r3, r0
 800497a:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 800497c:	7bfb      	ldrb	r3, [r7, #15]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <PMW3901_RegRead+0x4a>
 8004982:	2302      	movs	r3, #2
 8004984:	e01e      	b.n	80049c4 <PMW3901_RegRead+0x88>

	SPI_status = HAL_SPI_Receive(HSPI, &value, 1, 1000);
 8004986:	4b11      	ldr	r3, [pc, #68]	; (80049cc <PMW3901_RegRead+0x90>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	6818      	ldr	r0, [r3, #0]
 800498c:	f107 010e 	add.w	r1, r7, #14
 8004990:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004994:	2201      	movs	r2, #1
 8004996:	f7fe fdd8 	bl	800354a <HAL_SPI_Receive>
 800499a:	4603      	mov	r3, r0
 800499c:	73fb      	strb	r3, [r7, #15]
	if (SPI_status != HAL_OK) return PMW3901_ERROR_SPI;
 800499e:	7bfb      	ldrb	r3, [r7, #15]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <PMW3901_RegRead+0x6c>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e00d      	b.n	80049c4 <PMW3901_RegRead+0x88>

	HAL_GPIO_WritePin(CS_PORT, CS_PIN, GPIO_PIN_SET);
 80049a8:	4b08      	ldr	r3, [pc, #32]	; (80049cc <PMW3901_RegRead+0x90>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	6858      	ldr	r0, [r3, #4]
 80049ae:	4b07      	ldr	r3, [pc, #28]	; (80049cc <PMW3901_RegRead+0x90>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	891b      	ldrh	r3, [r3, #8]
 80049b4:	2201      	movs	r2, #1
 80049b6:	4619      	mov	r1, r3
 80049b8:	f7fd f9fa 	bl	8001db0 <HAL_GPIO_WritePin>

	*dest = value;
 80049bc:	7bba      	ldrb	r2, [r7, #14]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	701a      	strb	r2, [r3, #0]

	return PMW3901_SUCCESS;
 80049c2:	2300      	movs	r3, #0
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3710      	adds	r7, #16
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	20000710 	.word	0x20000710

080049d0 <PMW3901_SetLed>:

PMW3901_Status_t PMW3901_SetLed() // Fonction permettant d'allumer les leds du capteurs
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
	PMW3901_Status_t status;

	status = PMW3901_RegWrite(0x7f, 0x14);
 80049d6:	2114      	movs	r1, #20
 80049d8:	207f      	movs	r0, #127	; 0x7f
 80049da:	f7ff ff73 	bl	80048c4 <PMW3901_RegWrite>
 80049de:	4603      	mov	r3, r0
 80049e0:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 80049e2:	79fb      	ldrb	r3, [r7, #7]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <PMW3901_SetLed+0x1c>
 80049e8:	79fb      	ldrb	r3, [r7, #7]
 80049ea:	e011      	b.n	8004a10 <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x6f, 0x1c);
 80049ec:	211c      	movs	r1, #28
 80049ee:	206f      	movs	r0, #111	; 0x6f
 80049f0:	f7ff ff68 	bl	80048c4 <PMW3901_RegWrite>
 80049f4:	4603      	mov	r3, r0
 80049f6:	71fb      	strb	r3, [r7, #7]
	if (status) return status;
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d001      	beq.n	8004a02 <PMW3901_SetLed+0x32>
 80049fe:	79fb      	ldrb	r3, [r7, #7]
 8004a00:	e006      	b.n	8004a10 <PMW3901_SetLed+0x40>

	status = PMW3901_RegWrite(0x7f, 0x00);
 8004a02:	2100      	movs	r1, #0
 8004a04:	207f      	movs	r0, #127	; 0x7f
 8004a06:	f7ff ff5d 	bl	80048c4 <PMW3901_RegWrite>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	71fb      	strb	r3, [r7, #7]
	return status;
 8004a0e:	79fb      	ldrb	r3, [r7, #7]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <PMW3901_Init>:

PMW3901_Status_t PMW3901_Init(PMW3901_Descriptor_t *_Descriptor) // Permet d'initialiser le capteur
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
	PMW3901_Status_t status;

	uint8_t Product_ID;
	uint8_t Inverse_Product_ID;

	Descriptor = _Descriptor;
 8004a20:	4aad      	ldr	r2, [pc, #692]	; (8004cd8 <PMW3901_Init+0x2c0>)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6013      	str	r3, [r2, #0]

	status = PMW3901_RegRead(0x00, &Product_ID);
 8004a26:	f107 030e 	add.w	r3, r7, #14
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	2000      	movs	r0, #0
 8004a2e:	f7ff ff85 	bl	800493c <PMW3901_RegRead>
 8004a32:	4603      	mov	r3, r0
 8004a34:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <PMW3901_Init+0x28>
 8004a3c:	7bfb      	ldrb	r3, [r7, #15]
 8004a3e:	e34c      	b.n	80050da <PMW3901_Init+0x6c2>

	if(Product_ID != PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 8004a40:	7bbb      	ldrb	r3, [r7, #14]
 8004a42:	2b49      	cmp	r3, #73	; 0x49
 8004a44:	d001      	beq.n	8004a4a <PMW3901_Init+0x32>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e347      	b.n	80050da <PMW3901_Init+0x6c2>

	status = PMW3901_RegRead(0x5F, &Inverse_Product_ID);
 8004a4a:	f107 030d 	add.w	r3, r7, #13
 8004a4e:	4619      	mov	r1, r3
 8004a50:	205f      	movs	r0, #95	; 0x5f
 8004a52:	f7ff ff73 	bl	800493c <PMW3901_RegRead>
 8004a56:	4603      	mov	r3, r0
 8004a58:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8004a5a:	7bfb      	ldrb	r3, [r7, #15]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <PMW3901_Init+0x4c>
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	e33a      	b.n	80050da <PMW3901_Init+0x6c2>

	if(Inverse_Product_ID != INVERSE_PRODUCT_ID) return PMW3901_ERROR_UNKNOWN_ID;
 8004a64:	7b7b      	ldrb	r3, [r7, #13]
 8004a66:	2bb6      	cmp	r3, #182	; 0xb6
 8004a68:	d001      	beq.n	8004a6e <PMW3901_Init+0x56>
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e335      	b.n	80050da <PMW3901_Init+0x6c2>

	// Tout ça permet initialiser certains registres du capteur apparaissant dans la datasheet (on se sait pas à quoi ça correspond)
	status = PMW3901_RegWrite(0x3A, 0x00); if(status) return status; // Les if et return permettent de renvoyer un status afin de savoir si tout se passe bien, si status = 0 => tout est bon, si status = 1 => quelque chose fonctionne mal
 8004a6e:	2100      	movs	r1, #0
 8004a70:	203a      	movs	r0, #58	; 0x3a
 8004a72:	f7ff ff27 	bl	80048c4 <PMW3901_RegWrite>
 8004a76:	4603      	mov	r3, r0
 8004a78:	73fb      	strb	r3, [r7, #15]
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <PMW3901_Init+0x6c>
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	e32a      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8004a84:	2100      	movs	r1, #0
 8004a86:	207f      	movs	r0, #127	; 0x7f
 8004a88:	f7ff ff1c 	bl	80048c4 <PMW3901_RegWrite>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	73fb      	strb	r3, [r7, #15]
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <PMW3901_Init+0x82>
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	e31f      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0xAD); if(status) return status;
 8004a9a:	21ad      	movs	r1, #173	; 0xad
 8004a9c:	2061      	movs	r0, #97	; 0x61
 8004a9e:	f7ff ff11 	bl	80048c4 <PMW3901_RegWrite>
 8004aa2:	4603      	mov	r3, r0
 8004aa4:	73fb      	strb	r3, [r7, #15]
 8004aa6:	7bfb      	ldrb	r3, [r7, #15]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d001      	beq.n	8004ab0 <PMW3901_Init+0x98>
 8004aac:	7bfb      	ldrb	r3, [r7, #15]
 8004aae:	e314      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x03); if(status) return status;
 8004ab0:	2103      	movs	r1, #3
 8004ab2:	207f      	movs	r0, #127	; 0x7f
 8004ab4:	f7ff ff06 	bl	80048c4 <PMW3901_RegWrite>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	73fb      	strb	r3, [r7, #15]
 8004abc:	7bfb      	ldrb	r3, [r7, #15]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <PMW3901_Init+0xae>
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	e309      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x00); if(status) return status;
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	2040      	movs	r0, #64	; 0x40
 8004aca:	f7ff fefb 	bl	80048c4 <PMW3901_RegWrite>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	73fb      	strb	r3, [r7, #15]
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <PMW3901_Init+0xc4>
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	e2fe      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x05); if(status) return status;
 8004adc:	2105      	movs	r1, #5
 8004ade:	207f      	movs	r0, #127	; 0x7f
 8004ae0:	f7ff fef0 	bl	80048c4 <PMW3901_RegWrite>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	73fb      	strb	r3, [r7, #15]
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <PMW3901_Init+0xda>
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	e2f3      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0xB3); if(status) return status;
 8004af2:	21b3      	movs	r1, #179	; 0xb3
 8004af4:	2041      	movs	r0, #65	; 0x41
 8004af6:	f7ff fee5 	bl	80048c4 <PMW3901_RegWrite>
 8004afa:	4603      	mov	r3, r0
 8004afc:	73fb      	strb	r3, [r7, #15]
 8004afe:	7bfb      	ldrb	r3, [r7, #15]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <PMW3901_Init+0xf0>
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	e2e8      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0xF1); if(status) return status;
 8004b08:	21f1      	movs	r1, #241	; 0xf1
 8004b0a:	2043      	movs	r0, #67	; 0x43
 8004b0c:	f7ff feda 	bl	80048c4 <PMW3901_RegWrite>
 8004b10:	4603      	mov	r3, r0
 8004b12:	73fb      	strb	r3, [r7, #15]
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d001      	beq.n	8004b1e <PMW3901_Init+0x106>
 8004b1a:	7bfb      	ldrb	r3, [r7, #15]
 8004b1c:	e2dd      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x14); if(status) return status;
 8004b1e:	2114      	movs	r1, #20
 8004b20:	2045      	movs	r0, #69	; 0x45
 8004b22:	f7ff fecf 	bl	80048c4 <PMW3901_RegWrite>
 8004b26:	4603      	mov	r3, r0
 8004b28:	73fb      	strb	r3, [r7, #15]
 8004b2a:	7bfb      	ldrb	r3, [r7, #15]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d001      	beq.n	8004b34 <PMW3901_Init+0x11c>
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	e2d2      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x32); if(status) return status;
 8004b34:	2132      	movs	r1, #50	; 0x32
 8004b36:	205b      	movs	r0, #91	; 0x5b
 8004b38:	f7ff fec4 	bl	80048c4 <PMW3901_RegWrite>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	73fb      	strb	r3, [r7, #15]
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <PMW3901_Init+0x132>
 8004b46:	7bfb      	ldrb	r3, [r7, #15]
 8004b48:	e2c7      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x34); if(status) return status;
 8004b4a:	2134      	movs	r1, #52	; 0x34
 8004b4c:	205f      	movs	r0, #95	; 0x5f
 8004b4e:	f7ff feb9 	bl	80048c4 <PMW3901_RegWrite>
 8004b52:	4603      	mov	r3, r0
 8004b54:	73fb      	strb	r3, [r7, #15]
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d001      	beq.n	8004b60 <PMW3901_Init+0x148>
 8004b5c:	7bfb      	ldrb	r3, [r7, #15]
 8004b5e:	e2bc      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7B, 0x08); if(status) return status;
 8004b60:	2108      	movs	r1, #8
 8004b62:	207b      	movs	r0, #123	; 0x7b
 8004b64:	f7ff feae 	bl	80048c4 <PMW3901_RegWrite>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	73fb      	strb	r3, [r7, #15]
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <PMW3901_Init+0x15e>
 8004b72:	7bfb      	ldrb	r3, [r7, #15]
 8004b74:	e2b1      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 8004b76:	2106      	movs	r1, #6
 8004b78:	207f      	movs	r0, #127	; 0x7f
 8004b7a:	f7ff fea3 	bl	80048c4 <PMW3901_RegWrite>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	73fb      	strb	r3, [r7, #15]
 8004b82:	7bfb      	ldrb	r3, [r7, #15]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d001      	beq.n	8004b8c <PMW3901_Init+0x174>
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	e2a6      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x1B); if(status) return status;
 8004b8c:	211b      	movs	r1, #27
 8004b8e:	2044      	movs	r0, #68	; 0x44
 8004b90:	f7ff fe98 	bl	80048c4 <PMW3901_RegWrite>
 8004b94:	4603      	mov	r3, r0
 8004b96:	73fb      	strb	r3, [r7, #15]
 8004b98:	7bfb      	ldrb	r3, [r7, #15]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <PMW3901_Init+0x18a>
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	e29b      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0xBF); if(status) return status;
 8004ba2:	21bf      	movs	r1, #191	; 0xbf
 8004ba4:	2040      	movs	r0, #64	; 0x40
 8004ba6:	f7ff fe8d 	bl	80048c4 <PMW3901_RegWrite>
 8004baa:	4603      	mov	r3, r0
 8004bac:	73fb      	strb	r3, [r7, #15]
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <PMW3901_Init+0x1a0>
 8004bb4:	7bfb      	ldrb	r3, [r7, #15]
 8004bb6:	e290      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0x3F); if(status) return status;
 8004bb8:	213f      	movs	r1, #63	; 0x3f
 8004bba:	204e      	movs	r0, #78	; 0x4e
 8004bbc:	f7ff fe82 	bl	80048c4 <PMW3901_RegWrite>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	73fb      	strb	r3, [r7, #15]
 8004bc4:	7bfb      	ldrb	r3, [r7, #15]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d001      	beq.n	8004bce <PMW3901_Init+0x1b6>
 8004bca:	7bfb      	ldrb	r3, [r7, #15]
 8004bcc:	e285      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x08); if(status) return status;
 8004bce:	2108      	movs	r1, #8
 8004bd0:	207f      	movs	r0, #127	; 0x7f
 8004bd2:	f7ff fe77 	bl	80048c4 <PMW3901_RegWrite>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	73fb      	strb	r3, [r7, #15]
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <PMW3901_Init+0x1cc>
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
 8004be2:	e27a      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x20); if(status) return status;
 8004be4:	2120      	movs	r1, #32
 8004be6:	2065      	movs	r0, #101	; 0x65
 8004be8:	f7ff fe6c 	bl	80048c4 <PMW3901_RegWrite>
 8004bec:	4603      	mov	r3, r0
 8004bee:	73fb      	strb	r3, [r7, #15]
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d001      	beq.n	8004bfa <PMW3901_Init+0x1e2>
 8004bf6:	7bfb      	ldrb	r3, [r7, #15]
 8004bf8:	e26f      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6A, 0x18); if(status) return status;
 8004bfa:	2118      	movs	r1, #24
 8004bfc:	206a      	movs	r0, #106	; 0x6a
 8004bfe:	f7ff fe61 	bl	80048c4 <PMW3901_RegWrite>
 8004c02:	4603      	mov	r3, r0
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	7bfb      	ldrb	r3, [r7, #15]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d001      	beq.n	8004c10 <PMW3901_Init+0x1f8>
 8004c0c:	7bfb      	ldrb	r3, [r7, #15]
 8004c0e:	e264      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x09); if(status) return status;
 8004c10:	2109      	movs	r1, #9
 8004c12:	207f      	movs	r0, #127	; 0x7f
 8004c14:	f7ff fe56 	bl	80048c4 <PMW3901_RegWrite>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d001      	beq.n	8004c26 <PMW3901_Init+0x20e>
 8004c22:	7bfb      	ldrb	r3, [r7, #15]
 8004c24:	e259      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4F, 0xAF); if(status) return status;
 8004c26:	21af      	movs	r1, #175	; 0xaf
 8004c28:	204f      	movs	r0, #79	; 0x4f
 8004c2a:	f7ff fe4b 	bl	80048c4 <PMW3901_RegWrite>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d001      	beq.n	8004c3c <PMW3901_Init+0x224>
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	e24e      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5F, 0x40); if(status) return status;
 8004c3c:	2140      	movs	r1, #64	; 0x40
 8004c3e:	205f      	movs	r0, #95	; 0x5f
 8004c40:	f7ff fe40 	bl	80048c4 <PMW3901_RegWrite>
 8004c44:	4603      	mov	r3, r0
 8004c46:	73fb      	strb	r3, [r7, #15]
 8004c48:	7bfb      	ldrb	r3, [r7, #15]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <PMW3901_Init+0x23a>
 8004c4e:	7bfb      	ldrb	r3, [r7, #15]
 8004c50:	e243      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x80); if(status) return status;
 8004c52:	2180      	movs	r1, #128	; 0x80
 8004c54:	2048      	movs	r0, #72	; 0x48
 8004c56:	f7ff fe35 	bl	80048c4 <PMW3901_RegWrite>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	73fb      	strb	r3, [r7, #15]
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <PMW3901_Init+0x250>
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	e238      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x49, 0x80); if(status) return status;
 8004c68:	2180      	movs	r1, #128	; 0x80
 8004c6a:	2049      	movs	r0, #73	; 0x49
 8004c6c:	f7ff fe2a 	bl	80048c4 <PMW3901_RegWrite>
 8004c70:	4603      	mov	r3, r0
 8004c72:	73fb      	strb	r3, [r7, #15]
 8004c74:	7bfb      	ldrb	r3, [r7, #15]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <PMW3901_Init+0x266>
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	e22d      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x57, 0x77); if(status) return status;
 8004c7e:	2177      	movs	r1, #119	; 0x77
 8004c80:	2057      	movs	r0, #87	; 0x57
 8004c82:	f7ff fe1f 	bl	80048c4 <PMW3901_RegWrite>
 8004c86:	4603      	mov	r3, r0
 8004c88:	73fb      	strb	r3, [r7, #15]
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d001      	beq.n	8004c94 <PMW3901_Init+0x27c>
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
 8004c92:	e222      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x60, 0x78); if(status) return status;
 8004c94:	2178      	movs	r1, #120	; 0x78
 8004c96:	2060      	movs	r0, #96	; 0x60
 8004c98:	f7ff fe14 	bl	80048c4 <PMW3901_RegWrite>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	73fb      	strb	r3, [r7, #15]
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <PMW3901_Init+0x292>
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	e217      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x61, 0x78); if(status) return status;
 8004caa:	2178      	movs	r1, #120	; 0x78
 8004cac:	2061      	movs	r0, #97	; 0x61
 8004cae:	f7ff fe09 	bl	80048c4 <PMW3901_RegWrite>
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	73fb      	strb	r3, [r7, #15]
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d001      	beq.n	8004cc0 <PMW3901_Init+0x2a8>
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	e20c      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0x08); if(status) return status;
 8004cc0:	2108      	movs	r1, #8
 8004cc2:	2062      	movs	r0, #98	; 0x62
 8004cc4:	f7ff fdfe 	bl	80048c4 <PMW3901_RegWrite>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d004      	beq.n	8004cdc <PMW3901_Init+0x2c4>
 8004cd2:	7bfb      	ldrb	r3, [r7, #15]
 8004cd4:	e201      	b.n	80050da <PMW3901_Init+0x6c2>
 8004cd6:	bf00      	nop
 8004cd8:	20000710 	.word	0x20000710
	status = PMW3901_RegWrite(0x63, 0x50); if(status) return status;
 8004cdc:	2150      	movs	r1, #80	; 0x50
 8004cde:	2063      	movs	r0, #99	; 0x63
 8004ce0:	f7ff fdf0 	bl	80048c4 <PMW3901_RegWrite>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	73fb      	strb	r3, [r7, #15]
 8004ce8:	7bfb      	ldrb	r3, [r7, #15]
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d001      	beq.n	8004cf2 <PMW3901_Init+0x2da>
 8004cee:	7bfb      	ldrb	r3, [r7, #15]
 8004cf0:	e1f3      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0A); if(status) return status;
 8004cf2:	210a      	movs	r1, #10
 8004cf4:	207f      	movs	r0, #127	; 0x7f
 8004cf6:	f7ff fde5 	bl	80048c4 <PMW3901_RegWrite>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	73fb      	strb	r3, [r7, #15]
 8004cfe:	7bfb      	ldrb	r3, [r7, #15]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <PMW3901_Init+0x2f0>
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	e1e8      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x60); if(status) return status;
 8004d08:	2160      	movs	r1, #96	; 0x60
 8004d0a:	2045      	movs	r0, #69	; 0x45
 8004d0c:	f7ff fdda 	bl	80048c4 <PMW3901_RegWrite>
 8004d10:	4603      	mov	r3, r0
 8004d12:	73fb      	strb	r3, [r7, #15]
 8004d14:	7bfb      	ldrb	r3, [r7, #15]
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d001      	beq.n	8004d1e <PMW3901_Init+0x306>
 8004d1a:	7bfb      	ldrb	r3, [r7, #15]
 8004d1c:	e1dd      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8004d1e:	2100      	movs	r1, #0
 8004d20:	207f      	movs	r0, #127	; 0x7f
 8004d22:	f7ff fdcf 	bl	80048c4 <PMW3901_RegWrite>
 8004d26:	4603      	mov	r3, r0
 8004d28:	73fb      	strb	r3, [r7, #15]
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <PMW3901_Init+0x31c>
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
 8004d32:	e1d2      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4D, 0x11); if(status) return status;
 8004d34:	2111      	movs	r1, #17
 8004d36:	204d      	movs	r0, #77	; 0x4d
 8004d38:	f7ff fdc4 	bl	80048c4 <PMW3901_RegWrite>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d001      	beq.n	8004d4a <PMW3901_Init+0x332>
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
 8004d48:	e1c7      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x55, 0x80); if(status) return status;
 8004d4a:	2180      	movs	r1, #128	; 0x80
 8004d4c:	2055      	movs	r0, #85	; 0x55
 8004d4e:	f7ff fdb9 	bl	80048c4 <PMW3901_RegWrite>
 8004d52:	4603      	mov	r3, r0
 8004d54:	73fb      	strb	r3, [r7, #15]
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d001      	beq.n	8004d60 <PMW3901_Init+0x348>
 8004d5c:	7bfb      	ldrb	r3, [r7, #15]
 8004d5e:	e1bc      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x74, 0x1F); if(status) return status;
 8004d60:	211f      	movs	r1, #31
 8004d62:	2074      	movs	r0, #116	; 0x74
 8004d64:	f7ff fdae 	bl	80048c4 <PMW3901_RegWrite>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	73fb      	strb	r3, [r7, #15]
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d001      	beq.n	8004d76 <PMW3901_Init+0x35e>
 8004d72:	7bfb      	ldrb	r3, [r7, #15]
 8004d74:	e1b1      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x75, 0x1F); if(status) return status;
 8004d76:	211f      	movs	r1, #31
 8004d78:	2075      	movs	r0, #117	; 0x75
 8004d7a:	f7ff fda3 	bl	80048c4 <PMW3901_RegWrite>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	73fb      	strb	r3, [r7, #15]
 8004d82:	7bfb      	ldrb	r3, [r7, #15]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <PMW3901_Init+0x374>
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	e1a6      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4A, 0x78); if(status) return status;
 8004d8c:	2178      	movs	r1, #120	; 0x78
 8004d8e:	204a      	movs	r0, #74	; 0x4a
 8004d90:	f7ff fd98 	bl	80048c4 <PMW3901_RegWrite>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d001      	beq.n	8004da2 <PMW3901_Init+0x38a>
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	e19b      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x78); if(status) return status;
 8004da2:	2178      	movs	r1, #120	; 0x78
 8004da4:	204b      	movs	r0, #75	; 0x4b
 8004da6:	f7ff fd8d 	bl	80048c4 <PMW3901_RegWrite>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d001      	beq.n	8004db8 <PMW3901_Init+0x3a0>
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
 8004db6:	e190      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x08); if(status) return status;
 8004db8:	2108      	movs	r1, #8
 8004dba:	2044      	movs	r0, #68	; 0x44
 8004dbc:	f7ff fd82 	bl	80048c4 <PMW3901_RegWrite>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	73fb      	strb	r3, [r7, #15]
 8004dc4:	7bfb      	ldrb	r3, [r7, #15]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d001      	beq.n	8004dce <PMW3901_Init+0x3b6>
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	e185      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x50); if(status) return status;
 8004dce:	2150      	movs	r1, #80	; 0x50
 8004dd0:	2045      	movs	r0, #69	; 0x45
 8004dd2:	f7ff fd77 	bl	80048c4 <PMW3901_RegWrite>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	73fb      	strb	r3, [r7, #15]
 8004dda:	7bfb      	ldrb	r3, [r7, #15]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <PMW3901_Init+0x3cc>
 8004de0:	7bfb      	ldrb	r3, [r7, #15]
 8004de2:	e17a      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x64, 0xFF); if(status) return status;
 8004de4:	21ff      	movs	r1, #255	; 0xff
 8004de6:	2064      	movs	r0, #100	; 0x64
 8004de8:	f7ff fd6c 	bl	80048c4 <PMW3901_RegWrite>
 8004dec:	4603      	mov	r3, r0
 8004dee:	73fb      	strb	r3, [r7, #15]
 8004df0:	7bfb      	ldrb	r3, [r7, #15]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <PMW3901_Init+0x3e2>
 8004df6:	7bfb      	ldrb	r3, [r7, #15]
 8004df8:	e16f      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x1F); if(status) return status;
 8004dfa:	211f      	movs	r1, #31
 8004dfc:	2065      	movs	r0, #101	; 0x65
 8004dfe:	f7ff fd61 	bl	80048c4 <PMW3901_RegWrite>
 8004e02:	4603      	mov	r3, r0
 8004e04:	73fb      	strb	r3, [r7, #15]
 8004e06:	7bfb      	ldrb	r3, [r7, #15]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d001      	beq.n	8004e10 <PMW3901_Init+0x3f8>
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	e164      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x14); if(status) return status;
 8004e10:	2114      	movs	r1, #20
 8004e12:	207f      	movs	r0, #127	; 0x7f
 8004e14:	f7ff fd56 	bl	80048c4 <PMW3901_RegWrite>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	7bfb      	ldrb	r3, [r7, #15]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d001      	beq.n	8004e26 <PMW3901_Init+0x40e>
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	e159      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x65, 0x60); if(status) return status;
 8004e26:	2160      	movs	r1, #96	; 0x60
 8004e28:	2065      	movs	r0, #101	; 0x65
 8004e2a:	f7ff fd4b 	bl	80048c4 <PMW3901_RegWrite>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	73fb      	strb	r3, [r7, #15]
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d001      	beq.n	8004e3c <PMW3901_Init+0x424>
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
 8004e3a:	e14e      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x66, 0x08); if(status) return status;
 8004e3c:	2108      	movs	r1, #8
 8004e3e:	2066      	movs	r0, #102	; 0x66
 8004e40:	f7ff fd40 	bl	80048c4 <PMW3901_RegWrite>
 8004e44:	4603      	mov	r3, r0
 8004e46:	73fb      	strb	r3, [r7, #15]
 8004e48:	7bfb      	ldrb	r3, [r7, #15]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d001      	beq.n	8004e52 <PMW3901_Init+0x43a>
 8004e4e:	7bfb      	ldrb	r3, [r7, #15]
 8004e50:	e143      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x78); if(status) return status;
 8004e52:	2178      	movs	r1, #120	; 0x78
 8004e54:	2063      	movs	r0, #99	; 0x63
 8004e56:	f7ff fd35 	bl	80048c4 <PMW3901_RegWrite>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <PMW3901_Init+0x450>
 8004e64:	7bfb      	ldrb	r3, [r7, #15]
 8004e66:	e138      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x15); if(status) return status;
 8004e68:	2115      	movs	r1, #21
 8004e6a:	207f      	movs	r0, #127	; 0x7f
 8004e6c:	f7ff fd2a 	bl	80048c4 <PMW3901_RegWrite>
 8004e70:	4603      	mov	r3, r0
 8004e72:	73fb      	strb	r3, [r7, #15]
 8004e74:	7bfb      	ldrb	r3, [r7, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <PMW3901_Init+0x466>
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	e12d      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0x58); if(status) return status;
 8004e7e:	2158      	movs	r1, #88	; 0x58
 8004e80:	2048      	movs	r0, #72	; 0x48
 8004e82:	f7ff fd1f 	bl	80048c4 <PMW3901_RegWrite>
 8004e86:	4603      	mov	r3, r0
 8004e88:	73fb      	strb	r3, [r7, #15]
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d001      	beq.n	8004e94 <PMW3901_Init+0x47c>
 8004e90:	7bfb      	ldrb	r3, [r7, #15]
 8004e92:	e122      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8004e94:	2107      	movs	r1, #7
 8004e96:	207f      	movs	r0, #127	; 0x7f
 8004e98:	f7ff fd14 	bl	80048c4 <PMW3901_RegWrite>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	73fb      	strb	r3, [r7, #15]
 8004ea0:	7bfb      	ldrb	r3, [r7, #15]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <PMW3901_Init+0x492>
 8004ea6:	7bfb      	ldrb	r3, [r7, #15]
 8004ea8:	e117      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x41, 0x0D); if(status) return status;
 8004eaa:	210d      	movs	r1, #13
 8004eac:	2041      	movs	r0, #65	; 0x41
 8004eae:	f7ff fd09 	bl	80048c4 <PMW3901_RegWrite>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	73fb      	strb	r3, [r7, #15]
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d001      	beq.n	8004ec0 <PMW3901_Init+0x4a8>
 8004ebc:	7bfb      	ldrb	r3, [r7, #15]
 8004ebe:	e10c      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x43, 0x14); if(status) return status;
 8004ec0:	2114      	movs	r1, #20
 8004ec2:	2043      	movs	r0, #67	; 0x43
 8004ec4:	f7ff fcfe 	bl	80048c4 <PMW3901_RegWrite>
 8004ec8:	4603      	mov	r3, r0
 8004eca:	73fb      	strb	r3, [r7, #15]
 8004ecc:	7bfb      	ldrb	r3, [r7, #15]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d001      	beq.n	8004ed6 <PMW3901_Init+0x4be>
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
 8004ed4:	e101      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4B, 0x0E); if(status) return status;
 8004ed6:	210e      	movs	r1, #14
 8004ed8:	204b      	movs	r0, #75	; 0x4b
 8004eda:	f7ff fcf3 	bl	80048c4 <PMW3901_RegWrite>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	73fb      	strb	r3, [r7, #15]
 8004ee2:	7bfb      	ldrb	r3, [r7, #15]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <PMW3901_Init+0x4d4>
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
 8004eea:	e0f6      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x45, 0x0F); if(status) return status;
 8004eec:	210f      	movs	r1, #15
 8004eee:	2045      	movs	r0, #69	; 0x45
 8004ef0:	f7ff fce8 	bl	80048c4 <PMW3901_RegWrite>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	73fb      	strb	r3, [r7, #15]
 8004ef8:	7bfb      	ldrb	r3, [r7, #15]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <PMW3901_Init+0x4ea>
 8004efe:	7bfb      	ldrb	r3, [r7, #15]
 8004f00:	e0eb      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x44, 0x42); if(status) return status;
 8004f02:	2142      	movs	r1, #66	; 0x42
 8004f04:	2044      	movs	r0, #68	; 0x44
 8004f06:	f7ff fcdd 	bl	80048c4 <PMW3901_RegWrite>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	73fb      	strb	r3, [r7, #15]
 8004f0e:	7bfb      	ldrb	r3, [r7, #15]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d001      	beq.n	8004f18 <PMW3901_Init+0x500>
 8004f14:	7bfb      	ldrb	r3, [r7, #15]
 8004f16:	e0e0      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4C, 0x80); if(status) return status;
 8004f18:	2180      	movs	r1, #128	; 0x80
 8004f1a:	204c      	movs	r0, #76	; 0x4c
 8004f1c:	f7ff fcd2 	bl	80048c4 <PMW3901_RegWrite>
 8004f20:	4603      	mov	r3, r0
 8004f22:	73fb      	strb	r3, [r7, #15]
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <PMW3901_Init+0x516>
 8004f2a:	7bfb      	ldrb	r3, [r7, #15]
 8004f2c:	e0d5      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x10); if(status) return status;
 8004f2e:	2110      	movs	r1, #16
 8004f30:	207f      	movs	r0, #127	; 0x7f
 8004f32:	f7ff fcc7 	bl	80048c4 <PMW3901_RegWrite>
 8004f36:	4603      	mov	r3, r0
 8004f38:	73fb      	strb	r3, [r7, #15]
 8004f3a:	7bfb      	ldrb	r3, [r7, #15]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d001      	beq.n	8004f44 <PMW3901_Init+0x52c>
 8004f40:	7bfb      	ldrb	r3, [r7, #15]
 8004f42:	e0ca      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0x02); if(status) return status;
 8004f44:	2102      	movs	r1, #2
 8004f46:	205b      	movs	r0, #91	; 0x5b
 8004f48:	f7ff fcbc 	bl	80048c4 <PMW3901_RegWrite>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	73fb      	strb	r3, [r7, #15]
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d001      	beq.n	8004f5a <PMW3901_Init+0x542>
 8004f56:	7bfb      	ldrb	r3, [r7, #15]
 8004f58:	e0bf      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8004f5a:	2107      	movs	r1, #7
 8004f5c:	207f      	movs	r0, #127	; 0x7f
 8004f5e:	f7ff fcb1 	bl	80048c4 <PMW3901_RegWrite>
 8004f62:	4603      	mov	r3, r0
 8004f64:	73fb      	strb	r3, [r7, #15]
 8004f66:	7bfb      	ldrb	r3, [r7, #15]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d001      	beq.n	8004f70 <PMW3901_Init+0x558>
 8004f6c:	7bfb      	ldrb	r3, [r7, #15]
 8004f6e:	e0b4      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x41); if(status) return status;
 8004f70:	2141      	movs	r1, #65	; 0x41
 8004f72:	2040      	movs	r0, #64	; 0x40
 8004f74:	f7ff fca6 	bl	80048c4 <PMW3901_RegWrite>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	73fb      	strb	r3, [r7, #15]
 8004f7c:	7bfb      	ldrb	r3, [r7, #15]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d001      	beq.n	8004f86 <PMW3901_Init+0x56e>
 8004f82:	7bfb      	ldrb	r3, [r7, #15]
 8004f84:	e0a9      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x70, 0x00); if(status) return status;
 8004f86:	2100      	movs	r1, #0
 8004f88:	2070      	movs	r0, #112	; 0x70
 8004f8a:	f7ff fc9b 	bl	80048c4 <PMW3901_RegWrite>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	73fb      	strb	r3, [r7, #15]
 8004f92:	7bfb      	ldrb	r3, [r7, #15]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <PMW3901_Init+0x584>
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	e09e      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x32, 0x44); if(status) return status;
 8004f9c:	2144      	movs	r1, #68	; 0x44
 8004f9e:	2032      	movs	r0, #50	; 0x32
 8004fa0:	f7ff fc90 	bl	80048c4 <PMW3901_RegWrite>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	73fb      	strb	r3, [r7, #15]
 8004fa8:	7bfb      	ldrb	r3, [r7, #15]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <PMW3901_Init+0x59a>
 8004fae:	7bfb      	ldrb	r3, [r7, #15]
 8004fb0:	e093      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x07); if(status) return status;
 8004fb2:	2107      	movs	r1, #7
 8004fb4:	207f      	movs	r0, #127	; 0x7f
 8004fb6:	f7ff fc85 	bl	80048c4 <PMW3901_RegWrite>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	73fb      	strb	r3, [r7, #15]
 8004fbe:	7bfb      	ldrb	r3, [r7, #15]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d001      	beq.n	8004fc8 <PMW3901_Init+0x5b0>
 8004fc4:	7bfb      	ldrb	r3, [r7, #15]
 8004fc6:	e088      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x40); if(status) return status;
 8004fc8:	2140      	movs	r1, #64	; 0x40
 8004fca:	2040      	movs	r0, #64	; 0x40
 8004fcc:	f7ff fc7a 	bl	80048c4 <PMW3901_RegWrite>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	73fb      	strb	r3, [r7, #15]
 8004fd4:	7bfb      	ldrb	r3, [r7, #15]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d001      	beq.n	8004fde <PMW3901_Init+0x5c6>
 8004fda:	7bfb      	ldrb	r3, [r7, #15]
 8004fdc:	e07d      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x06); if(status) return status;
 8004fde:	2106      	movs	r1, #6
 8004fe0:	207f      	movs	r0, #127	; 0x7f
 8004fe2:	f7ff fc6f 	bl	80048c4 <PMW3901_RegWrite>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	73fb      	strb	r3, [r7, #15]
 8004fea:	7bfb      	ldrb	r3, [r7, #15]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d001      	beq.n	8004ff4 <PMW3901_Init+0x5dc>
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	e072      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x62, 0xf0); if(status) return status;
 8004ff4:	21f0      	movs	r1, #240	; 0xf0
 8004ff6:	2062      	movs	r0, #98	; 0x62
 8004ff8:	f7ff fc64 	bl	80048c4 <PMW3901_RegWrite>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d001      	beq.n	800500a <PMW3901_Init+0x5f2>
 8005006:	7bfb      	ldrb	r3, [r7, #15]
 8005008:	e067      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x63, 0x00); if(status) return status;
 800500a:	2100      	movs	r1, #0
 800500c:	2063      	movs	r0, #99	; 0x63
 800500e:	f7ff fc59 	bl	80048c4 <PMW3901_RegWrite>
 8005012:	4603      	mov	r3, r0
 8005014:	73fb      	strb	r3, [r7, #15]
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d001      	beq.n	8005020 <PMW3901_Init+0x608>
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	e05c      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x0D); if(status) return status;
 8005020:	210d      	movs	r1, #13
 8005022:	207f      	movs	r0, #127	; 0x7f
 8005024:	f7ff fc4e 	bl	80048c4 <PMW3901_RegWrite>
 8005028:	4603      	mov	r3, r0
 800502a:	73fb      	strb	r3, [r7, #15]
 800502c:	7bfb      	ldrb	r3, [r7, #15]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <PMW3901_Init+0x61e>
 8005032:	7bfb      	ldrb	r3, [r7, #15]
 8005034:	e051      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x48, 0xC0); if(status) return status;
 8005036:	21c0      	movs	r1, #192	; 0xc0
 8005038:	2048      	movs	r0, #72	; 0x48
 800503a:	f7ff fc43 	bl	80048c4 <PMW3901_RegWrite>
 800503e:	4603      	mov	r3, r0
 8005040:	73fb      	strb	r3, [r7, #15]
 8005042:	7bfb      	ldrb	r3, [r7, #15]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <PMW3901_Init+0x634>
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	e046      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x6F, 0xd5); if(status) return status;
 800504c:	21d5      	movs	r1, #213	; 0xd5
 800504e:	206f      	movs	r0, #111	; 0x6f
 8005050:	f7ff fc38 	bl	80048c4 <PMW3901_RegWrite>
 8005054:	4603      	mov	r3, r0
 8005056:	73fb      	strb	r3, [r7, #15]
 8005058:	7bfb      	ldrb	r3, [r7, #15]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <PMW3901_Init+0x64a>
 800505e:	7bfb      	ldrb	r3, [r7, #15]
 8005060:	e03b      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x7F, 0x00); if(status) return status;
 8005062:	2100      	movs	r1, #0
 8005064:	207f      	movs	r0, #127	; 0x7f
 8005066:	f7ff fc2d 	bl	80048c4 <PMW3901_RegWrite>
 800506a:	4603      	mov	r3, r0
 800506c:	73fb      	strb	r3, [r7, #15]
 800506e:	7bfb      	ldrb	r3, [r7, #15]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <PMW3901_Init+0x660>
 8005074:	7bfb      	ldrb	r3, [r7, #15]
 8005076:	e030      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5B, 0xa0); if(status) return status;
 8005078:	21a0      	movs	r1, #160	; 0xa0
 800507a:	205b      	movs	r0, #91	; 0x5b
 800507c:	f7ff fc22 	bl	80048c4 <PMW3901_RegWrite>
 8005080:	4603      	mov	r3, r0
 8005082:	73fb      	strb	r3, [r7, #15]
 8005084:	7bfb      	ldrb	r3, [r7, #15]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d001      	beq.n	800508e <PMW3901_Init+0x676>
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	e025      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x4E, 0xA8); if(status) return status;
 800508e:	21a8      	movs	r1, #168	; 0xa8
 8005090:	204e      	movs	r0, #78	; 0x4e
 8005092:	f7ff fc17 	bl	80048c4 <PMW3901_RegWrite>
 8005096:	4603      	mov	r3, r0
 8005098:	73fb      	strb	r3, [r7, #15]
 800509a:	7bfb      	ldrb	r3, [r7, #15]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d001      	beq.n	80050a4 <PMW3901_Init+0x68c>
 80050a0:	7bfb      	ldrb	r3, [r7, #15]
 80050a2:	e01a      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x5A, 0x50); if(status) return status;
 80050a4:	2150      	movs	r1, #80	; 0x50
 80050a6:	205a      	movs	r0, #90	; 0x5a
 80050a8:	f7ff fc0c 	bl	80048c4 <PMW3901_RegWrite>
 80050ac:	4603      	mov	r3, r0
 80050ae:	73fb      	strb	r3, [r7, #15]
 80050b0:	7bfb      	ldrb	r3, [r7, #15]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d001      	beq.n	80050ba <PMW3901_Init+0x6a2>
 80050b6:	7bfb      	ldrb	r3, [r7, #15]
 80050b8:	e00f      	b.n	80050da <PMW3901_Init+0x6c2>
	status = PMW3901_RegWrite(0x40, 0x80); if(status) return status;
 80050ba:	2180      	movs	r1, #128	; 0x80
 80050bc:	2040      	movs	r0, #64	; 0x40
 80050be:	f7ff fc01 	bl	80048c4 <PMW3901_RegWrite>
 80050c2:	4603      	mov	r3, r0
 80050c4:	73fb      	strb	r3, [r7, #15]
 80050c6:	7bfb      	ldrb	r3, [r7, #15]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d001      	beq.n	80050d0 <PMW3901_Init+0x6b8>
 80050cc:	7bfb      	ldrb	r3, [r7, #15]
 80050ce:	e004      	b.n	80050da <PMW3901_Init+0x6c2>

	status = PMW3901_SetLed();
 80050d0:	f7ff fc7e 	bl	80049d0 <PMW3901_SetLed>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]

	return status;
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop

080050e4 <PMW3901_Read_Variation>:

PMW3901_Status_t PMW3901_Read_Variation(int16_t *var_x, int16_t *var_y) // Fonction permettant de lire la valeur de la variation
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]

	PMW3901_Status_t status;
	PMW3901_Unify_2x8_to_16_t data;
	uint8_t Motion;

	status = PMW3901_RegRead(0x02, &Motion);
 80050ee:	f107 030b 	add.w	r3, r7, #11
 80050f2:	4619      	mov	r1, r3
 80050f4:	2002      	movs	r0, #2
 80050f6:	f7ff fc21 	bl	800493c <PMW3901_RegRead>
 80050fa:	4603      	mov	r3, r0
 80050fc:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 80050fe:	7bfb      	ldrb	r3, [r7, #15]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <PMW3901_Read_Variation+0x24>
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	e03e      	b.n	8005186 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_H, &data.raw[1]);
 8005108:	f107 030c 	add.w	r3, r7, #12
 800510c:	3301      	adds	r3, #1
 800510e:	4619      	mov	r1, r3
 8005110:	2004      	movs	r0, #4
 8005112:	f7ff fc13 	bl	800493c <PMW3901_RegRead>
 8005116:	4603      	mov	r3, r0
 8005118:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 800511a:	7bfb      	ldrb	r3, [r7, #15]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <PMW3901_Read_Variation+0x40>
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	e030      	b.n	8005186 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_X_L, &data.raw[0]);
 8005124:	f107 030c 	add.w	r3, r7, #12
 8005128:	4619      	mov	r1, r3
 800512a:	2003      	movs	r0, #3
 800512c:	f7ff fc06 	bl	800493c <PMW3901_RegRead>
 8005130:	4603      	mov	r3, r0
 8005132:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8005134:	7bfb      	ldrb	r3, [r7, #15]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <PMW3901_Read_Variation+0x5a>
 800513a:	7bfb      	ldrb	r3, [r7, #15]
 800513c:	e023      	b.n	8005186 <PMW3901_Read_Variation+0xa2>

	*var_x = data.unified;
 800513e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	801a      	strh	r2, [r3, #0]

	status = PMW3901_RegRead(DELTA_Y_H, &data.raw[1]);
 8005146:	f107 030c 	add.w	r3, r7, #12
 800514a:	3301      	adds	r3, #1
 800514c:	4619      	mov	r1, r3
 800514e:	2006      	movs	r0, #6
 8005150:	f7ff fbf4 	bl	800493c <PMW3901_RegRead>
 8005154:	4603      	mov	r3, r0
 8005156:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8005158:	7bfb      	ldrb	r3, [r7, #15]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <PMW3901_Read_Variation+0x7e>
 800515e:	7bfb      	ldrb	r3, [r7, #15]
 8005160:	e011      	b.n	8005186 <PMW3901_Read_Variation+0xa2>

	status = PMW3901_RegRead(DELTA_Y_L, &data.raw[0]);
 8005162:	f107 030c 	add.w	r3, r7, #12
 8005166:	4619      	mov	r1, r3
 8005168:	2005      	movs	r0, #5
 800516a:	f7ff fbe7 	bl	800493c <PMW3901_RegRead>
 800516e:	4603      	mov	r3, r0
 8005170:	73fb      	strb	r3, [r7, #15]
	if (status) return status;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d001      	beq.n	800517c <PMW3901_Read_Variation+0x98>
 8005178:	7bfb      	ldrb	r3, [r7, #15]
 800517a:	e004      	b.n	8005186 <PMW3901_Read_Variation+0xa2>

	*var_y = data.unified;
 800517c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	801a      	strh	r2, [r3, #0]

	return status;
 8005184:	7bfb      	ldrb	r3, [r7, #15]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
	...

08005190 <__errno>:
 8005190:	4b01      	ldr	r3, [pc, #4]	; (8005198 <__errno+0x8>)
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	20000018 	.word	0x20000018

0800519c <__libc_init_array>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	4d0d      	ldr	r5, [pc, #52]	; (80051d4 <__libc_init_array+0x38>)
 80051a0:	4c0d      	ldr	r4, [pc, #52]	; (80051d8 <__libc_init_array+0x3c>)
 80051a2:	1b64      	subs	r4, r4, r5
 80051a4:	10a4      	asrs	r4, r4, #2
 80051a6:	2600      	movs	r6, #0
 80051a8:	42a6      	cmp	r6, r4
 80051aa:	d109      	bne.n	80051c0 <__libc_init_array+0x24>
 80051ac:	4d0b      	ldr	r5, [pc, #44]	; (80051dc <__libc_init_array+0x40>)
 80051ae:	4c0c      	ldr	r4, [pc, #48]	; (80051e0 <__libc_init_array+0x44>)
 80051b0:	f004 fc92 	bl	8009ad8 <_init>
 80051b4:	1b64      	subs	r4, r4, r5
 80051b6:	10a4      	asrs	r4, r4, #2
 80051b8:	2600      	movs	r6, #0
 80051ba:	42a6      	cmp	r6, r4
 80051bc:	d105      	bne.n	80051ca <__libc_init_array+0x2e>
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c4:	4798      	blx	r3
 80051c6:	3601      	adds	r6, #1
 80051c8:	e7ee      	b.n	80051a8 <__libc_init_array+0xc>
 80051ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ce:	4798      	blx	r3
 80051d0:	3601      	adds	r6, #1
 80051d2:	e7f2      	b.n	80051ba <__libc_init_array+0x1e>
 80051d4:	0800a034 	.word	0x0800a034
 80051d8:	0800a034 	.word	0x0800a034
 80051dc:	0800a034 	.word	0x0800a034
 80051e0:	0800a038 	.word	0x0800a038

080051e4 <memset>:
 80051e4:	4402      	add	r2, r0
 80051e6:	4603      	mov	r3, r0
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d100      	bne.n	80051ee <memset+0xa>
 80051ec:	4770      	bx	lr
 80051ee:	f803 1b01 	strb.w	r1, [r3], #1
 80051f2:	e7f9      	b.n	80051e8 <memset+0x4>

080051f4 <__cvt>:
 80051f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80051f8:	ec55 4b10 	vmov	r4, r5, d0
 80051fc:	2d00      	cmp	r5, #0
 80051fe:	460e      	mov	r6, r1
 8005200:	4619      	mov	r1, r3
 8005202:	462b      	mov	r3, r5
 8005204:	bfbb      	ittet	lt
 8005206:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800520a:	461d      	movlt	r5, r3
 800520c:	2300      	movge	r3, #0
 800520e:	232d      	movlt	r3, #45	; 0x2d
 8005210:	700b      	strb	r3, [r1, #0]
 8005212:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005214:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005218:	4691      	mov	r9, r2
 800521a:	f023 0820 	bic.w	r8, r3, #32
 800521e:	bfbc      	itt	lt
 8005220:	4622      	movlt	r2, r4
 8005222:	4614      	movlt	r4, r2
 8005224:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005228:	d005      	beq.n	8005236 <__cvt+0x42>
 800522a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800522e:	d100      	bne.n	8005232 <__cvt+0x3e>
 8005230:	3601      	adds	r6, #1
 8005232:	2102      	movs	r1, #2
 8005234:	e000      	b.n	8005238 <__cvt+0x44>
 8005236:	2103      	movs	r1, #3
 8005238:	ab03      	add	r3, sp, #12
 800523a:	9301      	str	r3, [sp, #4]
 800523c:	ab02      	add	r3, sp, #8
 800523e:	9300      	str	r3, [sp, #0]
 8005240:	ec45 4b10 	vmov	d0, r4, r5
 8005244:	4653      	mov	r3, sl
 8005246:	4632      	mov	r2, r6
 8005248:	f001 fdae 	bl	8006da8 <_dtoa_r>
 800524c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005250:	4607      	mov	r7, r0
 8005252:	d102      	bne.n	800525a <__cvt+0x66>
 8005254:	f019 0f01 	tst.w	r9, #1
 8005258:	d022      	beq.n	80052a0 <__cvt+0xac>
 800525a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800525e:	eb07 0906 	add.w	r9, r7, r6
 8005262:	d110      	bne.n	8005286 <__cvt+0x92>
 8005264:	783b      	ldrb	r3, [r7, #0]
 8005266:	2b30      	cmp	r3, #48	; 0x30
 8005268:	d10a      	bne.n	8005280 <__cvt+0x8c>
 800526a:	2200      	movs	r2, #0
 800526c:	2300      	movs	r3, #0
 800526e:	4620      	mov	r0, r4
 8005270:	4629      	mov	r1, r5
 8005272:	f7fb fc29 	bl	8000ac8 <__aeabi_dcmpeq>
 8005276:	b918      	cbnz	r0, 8005280 <__cvt+0x8c>
 8005278:	f1c6 0601 	rsb	r6, r6, #1
 800527c:	f8ca 6000 	str.w	r6, [sl]
 8005280:	f8da 3000 	ldr.w	r3, [sl]
 8005284:	4499      	add	r9, r3
 8005286:	2200      	movs	r2, #0
 8005288:	2300      	movs	r3, #0
 800528a:	4620      	mov	r0, r4
 800528c:	4629      	mov	r1, r5
 800528e:	f7fb fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005292:	b108      	cbz	r0, 8005298 <__cvt+0xa4>
 8005294:	f8cd 900c 	str.w	r9, [sp, #12]
 8005298:	2230      	movs	r2, #48	; 0x30
 800529a:	9b03      	ldr	r3, [sp, #12]
 800529c:	454b      	cmp	r3, r9
 800529e:	d307      	bcc.n	80052b0 <__cvt+0xbc>
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80052a4:	1bdb      	subs	r3, r3, r7
 80052a6:	4638      	mov	r0, r7
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	b004      	add	sp, #16
 80052ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052b0:	1c59      	adds	r1, r3, #1
 80052b2:	9103      	str	r1, [sp, #12]
 80052b4:	701a      	strb	r2, [r3, #0]
 80052b6:	e7f0      	b.n	800529a <__cvt+0xa6>

080052b8 <__exponent>:
 80052b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052ba:	4603      	mov	r3, r0
 80052bc:	2900      	cmp	r1, #0
 80052be:	bfb8      	it	lt
 80052c0:	4249      	neglt	r1, r1
 80052c2:	f803 2b02 	strb.w	r2, [r3], #2
 80052c6:	bfb4      	ite	lt
 80052c8:	222d      	movlt	r2, #45	; 0x2d
 80052ca:	222b      	movge	r2, #43	; 0x2b
 80052cc:	2909      	cmp	r1, #9
 80052ce:	7042      	strb	r2, [r0, #1]
 80052d0:	dd2a      	ble.n	8005328 <__exponent+0x70>
 80052d2:	f10d 0407 	add.w	r4, sp, #7
 80052d6:	46a4      	mov	ip, r4
 80052d8:	270a      	movs	r7, #10
 80052da:	46a6      	mov	lr, r4
 80052dc:	460a      	mov	r2, r1
 80052de:	fb91 f6f7 	sdiv	r6, r1, r7
 80052e2:	fb07 1516 	mls	r5, r7, r6, r1
 80052e6:	3530      	adds	r5, #48	; 0x30
 80052e8:	2a63      	cmp	r2, #99	; 0x63
 80052ea:	f104 34ff 	add.w	r4, r4, #4294967295
 80052ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052f2:	4631      	mov	r1, r6
 80052f4:	dcf1      	bgt.n	80052da <__exponent+0x22>
 80052f6:	3130      	adds	r1, #48	; 0x30
 80052f8:	f1ae 0502 	sub.w	r5, lr, #2
 80052fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8005300:	1c44      	adds	r4, r0, #1
 8005302:	4629      	mov	r1, r5
 8005304:	4561      	cmp	r1, ip
 8005306:	d30a      	bcc.n	800531e <__exponent+0x66>
 8005308:	f10d 0209 	add.w	r2, sp, #9
 800530c:	eba2 020e 	sub.w	r2, r2, lr
 8005310:	4565      	cmp	r5, ip
 8005312:	bf88      	it	hi
 8005314:	2200      	movhi	r2, #0
 8005316:	4413      	add	r3, r2
 8005318:	1a18      	subs	r0, r3, r0
 800531a:	b003      	add	sp, #12
 800531c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800531e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005322:	f804 2f01 	strb.w	r2, [r4, #1]!
 8005326:	e7ed      	b.n	8005304 <__exponent+0x4c>
 8005328:	2330      	movs	r3, #48	; 0x30
 800532a:	3130      	adds	r1, #48	; 0x30
 800532c:	7083      	strb	r3, [r0, #2]
 800532e:	70c1      	strb	r1, [r0, #3]
 8005330:	1d03      	adds	r3, r0, #4
 8005332:	e7f1      	b.n	8005318 <__exponent+0x60>

08005334 <_printf_float>:
 8005334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005338:	ed2d 8b02 	vpush	{d8}
 800533c:	b08d      	sub	sp, #52	; 0x34
 800533e:	460c      	mov	r4, r1
 8005340:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005344:	4616      	mov	r6, r2
 8005346:	461f      	mov	r7, r3
 8005348:	4605      	mov	r5, r0
 800534a:	f002 fe8b 	bl	8008064 <_localeconv_r>
 800534e:	f8d0 a000 	ldr.w	sl, [r0]
 8005352:	4650      	mov	r0, sl
 8005354:	f7fa ff3c 	bl	80001d0 <strlen>
 8005358:	2300      	movs	r3, #0
 800535a:	930a      	str	r3, [sp, #40]	; 0x28
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	9305      	str	r3, [sp, #20]
 8005360:	f8d8 3000 	ldr.w	r3, [r8]
 8005364:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005368:	3307      	adds	r3, #7
 800536a:	f023 0307 	bic.w	r3, r3, #7
 800536e:	f103 0208 	add.w	r2, r3, #8
 8005372:	f8c8 2000 	str.w	r2, [r8]
 8005376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800537e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005382:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005386:	9307      	str	r3, [sp, #28]
 8005388:	f8cd 8018 	str.w	r8, [sp, #24]
 800538c:	ee08 0a10 	vmov	s16, r0
 8005390:	4b9f      	ldr	r3, [pc, #636]	; (8005610 <_printf_float+0x2dc>)
 8005392:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005396:	f04f 32ff 	mov.w	r2, #4294967295
 800539a:	f7fb fbc7 	bl	8000b2c <__aeabi_dcmpun>
 800539e:	bb88      	cbnz	r0, 8005404 <_printf_float+0xd0>
 80053a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053a4:	4b9a      	ldr	r3, [pc, #616]	; (8005610 <_printf_float+0x2dc>)
 80053a6:	f04f 32ff 	mov.w	r2, #4294967295
 80053aa:	f7fb fba1 	bl	8000af0 <__aeabi_dcmple>
 80053ae:	bb48      	cbnz	r0, 8005404 <_printf_float+0xd0>
 80053b0:	2200      	movs	r2, #0
 80053b2:	2300      	movs	r3, #0
 80053b4:	4640      	mov	r0, r8
 80053b6:	4649      	mov	r1, r9
 80053b8:	f7fb fb90 	bl	8000adc <__aeabi_dcmplt>
 80053bc:	b110      	cbz	r0, 80053c4 <_printf_float+0x90>
 80053be:	232d      	movs	r3, #45	; 0x2d
 80053c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c4:	4b93      	ldr	r3, [pc, #588]	; (8005614 <_printf_float+0x2e0>)
 80053c6:	4894      	ldr	r0, [pc, #592]	; (8005618 <_printf_float+0x2e4>)
 80053c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80053cc:	bf94      	ite	ls
 80053ce:	4698      	movls	r8, r3
 80053d0:	4680      	movhi	r8, r0
 80053d2:	2303      	movs	r3, #3
 80053d4:	6123      	str	r3, [r4, #16]
 80053d6:	9b05      	ldr	r3, [sp, #20]
 80053d8:	f023 0204 	bic.w	r2, r3, #4
 80053dc:	6022      	str	r2, [r4, #0]
 80053de:	f04f 0900 	mov.w	r9, #0
 80053e2:	9700      	str	r7, [sp, #0]
 80053e4:	4633      	mov	r3, r6
 80053e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80053e8:	4621      	mov	r1, r4
 80053ea:	4628      	mov	r0, r5
 80053ec:	f000 f9d8 	bl	80057a0 <_printf_common>
 80053f0:	3001      	adds	r0, #1
 80053f2:	f040 8090 	bne.w	8005516 <_printf_float+0x1e2>
 80053f6:	f04f 30ff 	mov.w	r0, #4294967295
 80053fa:	b00d      	add	sp, #52	; 0x34
 80053fc:	ecbd 8b02 	vpop	{d8}
 8005400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005404:	4642      	mov	r2, r8
 8005406:	464b      	mov	r3, r9
 8005408:	4640      	mov	r0, r8
 800540a:	4649      	mov	r1, r9
 800540c:	f7fb fb8e 	bl	8000b2c <__aeabi_dcmpun>
 8005410:	b140      	cbz	r0, 8005424 <_printf_float+0xf0>
 8005412:	464b      	mov	r3, r9
 8005414:	2b00      	cmp	r3, #0
 8005416:	bfbc      	itt	lt
 8005418:	232d      	movlt	r3, #45	; 0x2d
 800541a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800541e:	487f      	ldr	r0, [pc, #508]	; (800561c <_printf_float+0x2e8>)
 8005420:	4b7f      	ldr	r3, [pc, #508]	; (8005620 <_printf_float+0x2ec>)
 8005422:	e7d1      	b.n	80053c8 <_printf_float+0x94>
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800542a:	9206      	str	r2, [sp, #24]
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	d13f      	bne.n	80054b0 <_printf_float+0x17c>
 8005430:	2306      	movs	r3, #6
 8005432:	6063      	str	r3, [r4, #4]
 8005434:	9b05      	ldr	r3, [sp, #20]
 8005436:	6861      	ldr	r1, [r4, #4]
 8005438:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800543c:	2300      	movs	r3, #0
 800543e:	9303      	str	r3, [sp, #12]
 8005440:	ab0a      	add	r3, sp, #40	; 0x28
 8005442:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005446:	ab09      	add	r3, sp, #36	; 0x24
 8005448:	ec49 8b10 	vmov	d0, r8, r9
 800544c:	9300      	str	r3, [sp, #0]
 800544e:	6022      	str	r2, [r4, #0]
 8005450:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005454:	4628      	mov	r0, r5
 8005456:	f7ff fecd 	bl	80051f4 <__cvt>
 800545a:	9b06      	ldr	r3, [sp, #24]
 800545c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800545e:	2b47      	cmp	r3, #71	; 0x47
 8005460:	4680      	mov	r8, r0
 8005462:	d108      	bne.n	8005476 <_printf_float+0x142>
 8005464:	1cc8      	adds	r0, r1, #3
 8005466:	db02      	blt.n	800546e <_printf_float+0x13a>
 8005468:	6863      	ldr	r3, [r4, #4]
 800546a:	4299      	cmp	r1, r3
 800546c:	dd41      	ble.n	80054f2 <_printf_float+0x1be>
 800546e:	f1ab 0b02 	sub.w	fp, fp, #2
 8005472:	fa5f fb8b 	uxtb.w	fp, fp
 8005476:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800547a:	d820      	bhi.n	80054be <_printf_float+0x18a>
 800547c:	3901      	subs	r1, #1
 800547e:	465a      	mov	r2, fp
 8005480:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005484:	9109      	str	r1, [sp, #36]	; 0x24
 8005486:	f7ff ff17 	bl	80052b8 <__exponent>
 800548a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800548c:	1813      	adds	r3, r2, r0
 800548e:	2a01      	cmp	r2, #1
 8005490:	4681      	mov	r9, r0
 8005492:	6123      	str	r3, [r4, #16]
 8005494:	dc02      	bgt.n	800549c <_printf_float+0x168>
 8005496:	6822      	ldr	r2, [r4, #0]
 8005498:	07d2      	lsls	r2, r2, #31
 800549a:	d501      	bpl.n	80054a0 <_printf_float+0x16c>
 800549c:	3301      	adds	r3, #1
 800549e:	6123      	str	r3, [r4, #16]
 80054a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d09c      	beq.n	80053e2 <_printf_float+0xae>
 80054a8:	232d      	movs	r3, #45	; 0x2d
 80054aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ae:	e798      	b.n	80053e2 <_printf_float+0xae>
 80054b0:	9a06      	ldr	r2, [sp, #24]
 80054b2:	2a47      	cmp	r2, #71	; 0x47
 80054b4:	d1be      	bne.n	8005434 <_printf_float+0x100>
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1bc      	bne.n	8005434 <_printf_float+0x100>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e7b9      	b.n	8005432 <_printf_float+0xfe>
 80054be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80054c2:	d118      	bne.n	80054f6 <_printf_float+0x1c2>
 80054c4:	2900      	cmp	r1, #0
 80054c6:	6863      	ldr	r3, [r4, #4]
 80054c8:	dd0b      	ble.n	80054e2 <_printf_float+0x1ae>
 80054ca:	6121      	str	r1, [r4, #16]
 80054cc:	b913      	cbnz	r3, 80054d4 <_printf_float+0x1a0>
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	07d0      	lsls	r0, r2, #31
 80054d2:	d502      	bpl.n	80054da <_printf_float+0x1a6>
 80054d4:	3301      	adds	r3, #1
 80054d6:	440b      	add	r3, r1
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	65a1      	str	r1, [r4, #88]	; 0x58
 80054dc:	f04f 0900 	mov.w	r9, #0
 80054e0:	e7de      	b.n	80054a0 <_printf_float+0x16c>
 80054e2:	b913      	cbnz	r3, 80054ea <_printf_float+0x1b6>
 80054e4:	6822      	ldr	r2, [r4, #0]
 80054e6:	07d2      	lsls	r2, r2, #31
 80054e8:	d501      	bpl.n	80054ee <_printf_float+0x1ba>
 80054ea:	3302      	adds	r3, #2
 80054ec:	e7f4      	b.n	80054d8 <_printf_float+0x1a4>
 80054ee:	2301      	movs	r3, #1
 80054f0:	e7f2      	b.n	80054d8 <_printf_float+0x1a4>
 80054f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80054f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054f8:	4299      	cmp	r1, r3
 80054fa:	db05      	blt.n	8005508 <_printf_float+0x1d4>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	6121      	str	r1, [r4, #16]
 8005500:	07d8      	lsls	r0, r3, #31
 8005502:	d5ea      	bpl.n	80054da <_printf_float+0x1a6>
 8005504:	1c4b      	adds	r3, r1, #1
 8005506:	e7e7      	b.n	80054d8 <_printf_float+0x1a4>
 8005508:	2900      	cmp	r1, #0
 800550a:	bfd4      	ite	le
 800550c:	f1c1 0202 	rsble	r2, r1, #2
 8005510:	2201      	movgt	r2, #1
 8005512:	4413      	add	r3, r2
 8005514:	e7e0      	b.n	80054d8 <_printf_float+0x1a4>
 8005516:	6823      	ldr	r3, [r4, #0]
 8005518:	055a      	lsls	r2, r3, #21
 800551a:	d407      	bmi.n	800552c <_printf_float+0x1f8>
 800551c:	6923      	ldr	r3, [r4, #16]
 800551e:	4642      	mov	r2, r8
 8005520:	4631      	mov	r1, r6
 8005522:	4628      	mov	r0, r5
 8005524:	47b8      	blx	r7
 8005526:	3001      	adds	r0, #1
 8005528:	d12c      	bne.n	8005584 <_printf_float+0x250>
 800552a:	e764      	b.n	80053f6 <_printf_float+0xc2>
 800552c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005530:	f240 80e0 	bls.w	80056f4 <_printf_float+0x3c0>
 8005534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005538:	2200      	movs	r2, #0
 800553a:	2300      	movs	r3, #0
 800553c:	f7fb fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005540:	2800      	cmp	r0, #0
 8005542:	d034      	beq.n	80055ae <_printf_float+0x27a>
 8005544:	4a37      	ldr	r2, [pc, #220]	; (8005624 <_printf_float+0x2f0>)
 8005546:	2301      	movs	r3, #1
 8005548:	4631      	mov	r1, r6
 800554a:	4628      	mov	r0, r5
 800554c:	47b8      	blx	r7
 800554e:	3001      	adds	r0, #1
 8005550:	f43f af51 	beq.w	80053f6 <_printf_float+0xc2>
 8005554:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005558:	429a      	cmp	r2, r3
 800555a:	db02      	blt.n	8005562 <_printf_float+0x22e>
 800555c:	6823      	ldr	r3, [r4, #0]
 800555e:	07d8      	lsls	r0, r3, #31
 8005560:	d510      	bpl.n	8005584 <_printf_float+0x250>
 8005562:	ee18 3a10 	vmov	r3, s16
 8005566:	4652      	mov	r2, sl
 8005568:	4631      	mov	r1, r6
 800556a:	4628      	mov	r0, r5
 800556c:	47b8      	blx	r7
 800556e:	3001      	adds	r0, #1
 8005570:	f43f af41 	beq.w	80053f6 <_printf_float+0xc2>
 8005574:	f04f 0800 	mov.w	r8, #0
 8005578:	f104 091a 	add.w	r9, r4, #26
 800557c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800557e:	3b01      	subs	r3, #1
 8005580:	4543      	cmp	r3, r8
 8005582:	dc09      	bgt.n	8005598 <_printf_float+0x264>
 8005584:	6823      	ldr	r3, [r4, #0]
 8005586:	079b      	lsls	r3, r3, #30
 8005588:	f100 8105 	bmi.w	8005796 <_printf_float+0x462>
 800558c:	68e0      	ldr	r0, [r4, #12]
 800558e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005590:	4298      	cmp	r0, r3
 8005592:	bfb8      	it	lt
 8005594:	4618      	movlt	r0, r3
 8005596:	e730      	b.n	80053fa <_printf_float+0xc6>
 8005598:	2301      	movs	r3, #1
 800559a:	464a      	mov	r2, r9
 800559c:	4631      	mov	r1, r6
 800559e:	4628      	mov	r0, r5
 80055a0:	47b8      	blx	r7
 80055a2:	3001      	adds	r0, #1
 80055a4:	f43f af27 	beq.w	80053f6 <_printf_float+0xc2>
 80055a8:	f108 0801 	add.w	r8, r8, #1
 80055ac:	e7e6      	b.n	800557c <_printf_float+0x248>
 80055ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dc39      	bgt.n	8005628 <_printf_float+0x2f4>
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <_printf_float+0x2f0>)
 80055b6:	2301      	movs	r3, #1
 80055b8:	4631      	mov	r1, r6
 80055ba:	4628      	mov	r0, r5
 80055bc:	47b8      	blx	r7
 80055be:	3001      	adds	r0, #1
 80055c0:	f43f af19 	beq.w	80053f6 <_printf_float+0xc2>
 80055c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80055c8:	4313      	orrs	r3, r2
 80055ca:	d102      	bne.n	80055d2 <_printf_float+0x29e>
 80055cc:	6823      	ldr	r3, [r4, #0]
 80055ce:	07d9      	lsls	r1, r3, #31
 80055d0:	d5d8      	bpl.n	8005584 <_printf_float+0x250>
 80055d2:	ee18 3a10 	vmov	r3, s16
 80055d6:	4652      	mov	r2, sl
 80055d8:	4631      	mov	r1, r6
 80055da:	4628      	mov	r0, r5
 80055dc:	47b8      	blx	r7
 80055de:	3001      	adds	r0, #1
 80055e0:	f43f af09 	beq.w	80053f6 <_printf_float+0xc2>
 80055e4:	f04f 0900 	mov.w	r9, #0
 80055e8:	f104 0a1a 	add.w	sl, r4, #26
 80055ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ee:	425b      	negs	r3, r3
 80055f0:	454b      	cmp	r3, r9
 80055f2:	dc01      	bgt.n	80055f8 <_printf_float+0x2c4>
 80055f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055f6:	e792      	b.n	800551e <_printf_float+0x1ea>
 80055f8:	2301      	movs	r3, #1
 80055fa:	4652      	mov	r2, sl
 80055fc:	4631      	mov	r1, r6
 80055fe:	4628      	mov	r0, r5
 8005600:	47b8      	blx	r7
 8005602:	3001      	adds	r0, #1
 8005604:	f43f aef7 	beq.w	80053f6 <_printf_float+0xc2>
 8005608:	f109 0901 	add.w	r9, r9, #1
 800560c:	e7ee      	b.n	80055ec <_printf_float+0x2b8>
 800560e:	bf00      	nop
 8005610:	7fefffff 	.word	0x7fefffff
 8005614:	08009b88 	.word	0x08009b88
 8005618:	08009b8c 	.word	0x08009b8c
 800561c:	08009b94 	.word	0x08009b94
 8005620:	08009b90 	.word	0x08009b90
 8005624:	08009b98 	.word	0x08009b98
 8005628:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800562a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800562c:	429a      	cmp	r2, r3
 800562e:	bfa8      	it	ge
 8005630:	461a      	movge	r2, r3
 8005632:	2a00      	cmp	r2, #0
 8005634:	4691      	mov	r9, r2
 8005636:	dc37      	bgt.n	80056a8 <_printf_float+0x374>
 8005638:	f04f 0b00 	mov.w	fp, #0
 800563c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005640:	f104 021a 	add.w	r2, r4, #26
 8005644:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005646:	9305      	str	r3, [sp, #20]
 8005648:	eba3 0309 	sub.w	r3, r3, r9
 800564c:	455b      	cmp	r3, fp
 800564e:	dc33      	bgt.n	80056b8 <_printf_float+0x384>
 8005650:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005654:	429a      	cmp	r2, r3
 8005656:	db3b      	blt.n	80056d0 <_printf_float+0x39c>
 8005658:	6823      	ldr	r3, [r4, #0]
 800565a:	07da      	lsls	r2, r3, #31
 800565c:	d438      	bmi.n	80056d0 <_printf_float+0x39c>
 800565e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005660:	9a05      	ldr	r2, [sp, #20]
 8005662:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005664:	1a9a      	subs	r2, r3, r2
 8005666:	eba3 0901 	sub.w	r9, r3, r1
 800566a:	4591      	cmp	r9, r2
 800566c:	bfa8      	it	ge
 800566e:	4691      	movge	r9, r2
 8005670:	f1b9 0f00 	cmp.w	r9, #0
 8005674:	dc35      	bgt.n	80056e2 <_printf_float+0x3ae>
 8005676:	f04f 0800 	mov.w	r8, #0
 800567a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800567e:	f104 0a1a 	add.w	sl, r4, #26
 8005682:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005686:	1a9b      	subs	r3, r3, r2
 8005688:	eba3 0309 	sub.w	r3, r3, r9
 800568c:	4543      	cmp	r3, r8
 800568e:	f77f af79 	ble.w	8005584 <_printf_float+0x250>
 8005692:	2301      	movs	r3, #1
 8005694:	4652      	mov	r2, sl
 8005696:	4631      	mov	r1, r6
 8005698:	4628      	mov	r0, r5
 800569a:	47b8      	blx	r7
 800569c:	3001      	adds	r0, #1
 800569e:	f43f aeaa 	beq.w	80053f6 <_printf_float+0xc2>
 80056a2:	f108 0801 	add.w	r8, r8, #1
 80056a6:	e7ec      	b.n	8005682 <_printf_float+0x34e>
 80056a8:	4613      	mov	r3, r2
 80056aa:	4631      	mov	r1, r6
 80056ac:	4642      	mov	r2, r8
 80056ae:	4628      	mov	r0, r5
 80056b0:	47b8      	blx	r7
 80056b2:	3001      	adds	r0, #1
 80056b4:	d1c0      	bne.n	8005638 <_printf_float+0x304>
 80056b6:	e69e      	b.n	80053f6 <_printf_float+0xc2>
 80056b8:	2301      	movs	r3, #1
 80056ba:	4631      	mov	r1, r6
 80056bc:	4628      	mov	r0, r5
 80056be:	9205      	str	r2, [sp, #20]
 80056c0:	47b8      	blx	r7
 80056c2:	3001      	adds	r0, #1
 80056c4:	f43f ae97 	beq.w	80053f6 <_printf_float+0xc2>
 80056c8:	9a05      	ldr	r2, [sp, #20]
 80056ca:	f10b 0b01 	add.w	fp, fp, #1
 80056ce:	e7b9      	b.n	8005644 <_printf_float+0x310>
 80056d0:	ee18 3a10 	vmov	r3, s16
 80056d4:	4652      	mov	r2, sl
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	d1be      	bne.n	800565e <_printf_float+0x32a>
 80056e0:	e689      	b.n	80053f6 <_printf_float+0xc2>
 80056e2:	9a05      	ldr	r2, [sp, #20]
 80056e4:	464b      	mov	r3, r9
 80056e6:	4442      	add	r2, r8
 80056e8:	4631      	mov	r1, r6
 80056ea:	4628      	mov	r0, r5
 80056ec:	47b8      	blx	r7
 80056ee:	3001      	adds	r0, #1
 80056f0:	d1c1      	bne.n	8005676 <_printf_float+0x342>
 80056f2:	e680      	b.n	80053f6 <_printf_float+0xc2>
 80056f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80056f6:	2a01      	cmp	r2, #1
 80056f8:	dc01      	bgt.n	80056fe <_printf_float+0x3ca>
 80056fa:	07db      	lsls	r3, r3, #31
 80056fc:	d538      	bpl.n	8005770 <_printf_float+0x43c>
 80056fe:	2301      	movs	r3, #1
 8005700:	4642      	mov	r2, r8
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	f43f ae74 	beq.w	80053f6 <_printf_float+0xc2>
 800570e:	ee18 3a10 	vmov	r3, s16
 8005712:	4652      	mov	r2, sl
 8005714:	4631      	mov	r1, r6
 8005716:	4628      	mov	r0, r5
 8005718:	47b8      	blx	r7
 800571a:	3001      	adds	r0, #1
 800571c:	f43f ae6b 	beq.w	80053f6 <_printf_float+0xc2>
 8005720:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005724:	2200      	movs	r2, #0
 8005726:	2300      	movs	r3, #0
 8005728:	f7fb f9ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800572c:	b9d8      	cbnz	r0, 8005766 <_printf_float+0x432>
 800572e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005730:	f108 0201 	add.w	r2, r8, #1
 8005734:	3b01      	subs	r3, #1
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	d10e      	bne.n	800575e <_printf_float+0x42a>
 8005740:	e659      	b.n	80053f6 <_printf_float+0xc2>
 8005742:	2301      	movs	r3, #1
 8005744:	4652      	mov	r2, sl
 8005746:	4631      	mov	r1, r6
 8005748:	4628      	mov	r0, r5
 800574a:	47b8      	blx	r7
 800574c:	3001      	adds	r0, #1
 800574e:	f43f ae52 	beq.w	80053f6 <_printf_float+0xc2>
 8005752:	f108 0801 	add.w	r8, r8, #1
 8005756:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005758:	3b01      	subs	r3, #1
 800575a:	4543      	cmp	r3, r8
 800575c:	dcf1      	bgt.n	8005742 <_printf_float+0x40e>
 800575e:	464b      	mov	r3, r9
 8005760:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005764:	e6dc      	b.n	8005520 <_printf_float+0x1ec>
 8005766:	f04f 0800 	mov.w	r8, #0
 800576a:	f104 0a1a 	add.w	sl, r4, #26
 800576e:	e7f2      	b.n	8005756 <_printf_float+0x422>
 8005770:	2301      	movs	r3, #1
 8005772:	4642      	mov	r2, r8
 8005774:	e7df      	b.n	8005736 <_printf_float+0x402>
 8005776:	2301      	movs	r3, #1
 8005778:	464a      	mov	r2, r9
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	47b8      	blx	r7
 8005780:	3001      	adds	r0, #1
 8005782:	f43f ae38 	beq.w	80053f6 <_printf_float+0xc2>
 8005786:	f108 0801 	add.w	r8, r8, #1
 800578a:	68e3      	ldr	r3, [r4, #12]
 800578c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800578e:	1a5b      	subs	r3, r3, r1
 8005790:	4543      	cmp	r3, r8
 8005792:	dcf0      	bgt.n	8005776 <_printf_float+0x442>
 8005794:	e6fa      	b.n	800558c <_printf_float+0x258>
 8005796:	f04f 0800 	mov.w	r8, #0
 800579a:	f104 0919 	add.w	r9, r4, #25
 800579e:	e7f4      	b.n	800578a <_printf_float+0x456>

080057a0 <_printf_common>:
 80057a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a4:	4616      	mov	r6, r2
 80057a6:	4699      	mov	r9, r3
 80057a8:	688a      	ldr	r2, [r1, #8]
 80057aa:	690b      	ldr	r3, [r1, #16]
 80057ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80057b0:	4293      	cmp	r3, r2
 80057b2:	bfb8      	it	lt
 80057b4:	4613      	movlt	r3, r2
 80057b6:	6033      	str	r3, [r6, #0]
 80057b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80057bc:	4607      	mov	r7, r0
 80057be:	460c      	mov	r4, r1
 80057c0:	b10a      	cbz	r2, 80057c6 <_printf_common+0x26>
 80057c2:	3301      	adds	r3, #1
 80057c4:	6033      	str	r3, [r6, #0]
 80057c6:	6823      	ldr	r3, [r4, #0]
 80057c8:	0699      	lsls	r1, r3, #26
 80057ca:	bf42      	ittt	mi
 80057cc:	6833      	ldrmi	r3, [r6, #0]
 80057ce:	3302      	addmi	r3, #2
 80057d0:	6033      	strmi	r3, [r6, #0]
 80057d2:	6825      	ldr	r5, [r4, #0]
 80057d4:	f015 0506 	ands.w	r5, r5, #6
 80057d8:	d106      	bne.n	80057e8 <_printf_common+0x48>
 80057da:	f104 0a19 	add.w	sl, r4, #25
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	6832      	ldr	r2, [r6, #0]
 80057e2:	1a9b      	subs	r3, r3, r2
 80057e4:	42ab      	cmp	r3, r5
 80057e6:	dc26      	bgt.n	8005836 <_printf_common+0x96>
 80057e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80057ec:	1e13      	subs	r3, r2, #0
 80057ee:	6822      	ldr	r2, [r4, #0]
 80057f0:	bf18      	it	ne
 80057f2:	2301      	movne	r3, #1
 80057f4:	0692      	lsls	r2, r2, #26
 80057f6:	d42b      	bmi.n	8005850 <_printf_common+0xb0>
 80057f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057fc:	4649      	mov	r1, r9
 80057fe:	4638      	mov	r0, r7
 8005800:	47c0      	blx	r8
 8005802:	3001      	adds	r0, #1
 8005804:	d01e      	beq.n	8005844 <_printf_common+0xa4>
 8005806:	6823      	ldr	r3, [r4, #0]
 8005808:	68e5      	ldr	r5, [r4, #12]
 800580a:	6832      	ldr	r2, [r6, #0]
 800580c:	f003 0306 	and.w	r3, r3, #6
 8005810:	2b04      	cmp	r3, #4
 8005812:	bf08      	it	eq
 8005814:	1aad      	subeq	r5, r5, r2
 8005816:	68a3      	ldr	r3, [r4, #8]
 8005818:	6922      	ldr	r2, [r4, #16]
 800581a:	bf0c      	ite	eq
 800581c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005820:	2500      	movne	r5, #0
 8005822:	4293      	cmp	r3, r2
 8005824:	bfc4      	itt	gt
 8005826:	1a9b      	subgt	r3, r3, r2
 8005828:	18ed      	addgt	r5, r5, r3
 800582a:	2600      	movs	r6, #0
 800582c:	341a      	adds	r4, #26
 800582e:	42b5      	cmp	r5, r6
 8005830:	d11a      	bne.n	8005868 <_printf_common+0xc8>
 8005832:	2000      	movs	r0, #0
 8005834:	e008      	b.n	8005848 <_printf_common+0xa8>
 8005836:	2301      	movs	r3, #1
 8005838:	4652      	mov	r2, sl
 800583a:	4649      	mov	r1, r9
 800583c:	4638      	mov	r0, r7
 800583e:	47c0      	blx	r8
 8005840:	3001      	adds	r0, #1
 8005842:	d103      	bne.n	800584c <_printf_common+0xac>
 8005844:	f04f 30ff 	mov.w	r0, #4294967295
 8005848:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800584c:	3501      	adds	r5, #1
 800584e:	e7c6      	b.n	80057de <_printf_common+0x3e>
 8005850:	18e1      	adds	r1, r4, r3
 8005852:	1c5a      	adds	r2, r3, #1
 8005854:	2030      	movs	r0, #48	; 0x30
 8005856:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800585a:	4422      	add	r2, r4
 800585c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005860:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005864:	3302      	adds	r3, #2
 8005866:	e7c7      	b.n	80057f8 <_printf_common+0x58>
 8005868:	2301      	movs	r3, #1
 800586a:	4622      	mov	r2, r4
 800586c:	4649      	mov	r1, r9
 800586e:	4638      	mov	r0, r7
 8005870:	47c0      	blx	r8
 8005872:	3001      	adds	r0, #1
 8005874:	d0e6      	beq.n	8005844 <_printf_common+0xa4>
 8005876:	3601      	adds	r6, #1
 8005878:	e7d9      	b.n	800582e <_printf_common+0x8e>
	...

0800587c <_printf_i>:
 800587c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005880:	7e0f      	ldrb	r7, [r1, #24]
 8005882:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005884:	2f78      	cmp	r7, #120	; 0x78
 8005886:	4691      	mov	r9, r2
 8005888:	4680      	mov	r8, r0
 800588a:	460c      	mov	r4, r1
 800588c:	469a      	mov	sl, r3
 800588e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005892:	d807      	bhi.n	80058a4 <_printf_i+0x28>
 8005894:	2f62      	cmp	r7, #98	; 0x62
 8005896:	d80a      	bhi.n	80058ae <_printf_i+0x32>
 8005898:	2f00      	cmp	r7, #0
 800589a:	f000 80d8 	beq.w	8005a4e <_printf_i+0x1d2>
 800589e:	2f58      	cmp	r7, #88	; 0x58
 80058a0:	f000 80a3 	beq.w	80059ea <_printf_i+0x16e>
 80058a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80058a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80058ac:	e03a      	b.n	8005924 <_printf_i+0xa8>
 80058ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80058b2:	2b15      	cmp	r3, #21
 80058b4:	d8f6      	bhi.n	80058a4 <_printf_i+0x28>
 80058b6:	a101      	add	r1, pc, #4	; (adr r1, 80058bc <_printf_i+0x40>)
 80058b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80058bc:	08005915 	.word	0x08005915
 80058c0:	08005929 	.word	0x08005929
 80058c4:	080058a5 	.word	0x080058a5
 80058c8:	080058a5 	.word	0x080058a5
 80058cc:	080058a5 	.word	0x080058a5
 80058d0:	080058a5 	.word	0x080058a5
 80058d4:	08005929 	.word	0x08005929
 80058d8:	080058a5 	.word	0x080058a5
 80058dc:	080058a5 	.word	0x080058a5
 80058e0:	080058a5 	.word	0x080058a5
 80058e4:	080058a5 	.word	0x080058a5
 80058e8:	08005a35 	.word	0x08005a35
 80058ec:	08005959 	.word	0x08005959
 80058f0:	08005a17 	.word	0x08005a17
 80058f4:	080058a5 	.word	0x080058a5
 80058f8:	080058a5 	.word	0x080058a5
 80058fc:	08005a57 	.word	0x08005a57
 8005900:	080058a5 	.word	0x080058a5
 8005904:	08005959 	.word	0x08005959
 8005908:	080058a5 	.word	0x080058a5
 800590c:	080058a5 	.word	0x080058a5
 8005910:	08005a1f 	.word	0x08005a1f
 8005914:	682b      	ldr	r3, [r5, #0]
 8005916:	1d1a      	adds	r2, r3, #4
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	602a      	str	r2, [r5, #0]
 800591c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005920:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005924:	2301      	movs	r3, #1
 8005926:	e0a3      	b.n	8005a70 <_printf_i+0x1f4>
 8005928:	6820      	ldr	r0, [r4, #0]
 800592a:	6829      	ldr	r1, [r5, #0]
 800592c:	0606      	lsls	r6, r0, #24
 800592e:	f101 0304 	add.w	r3, r1, #4
 8005932:	d50a      	bpl.n	800594a <_printf_i+0xce>
 8005934:	680e      	ldr	r6, [r1, #0]
 8005936:	602b      	str	r3, [r5, #0]
 8005938:	2e00      	cmp	r6, #0
 800593a:	da03      	bge.n	8005944 <_printf_i+0xc8>
 800593c:	232d      	movs	r3, #45	; 0x2d
 800593e:	4276      	negs	r6, r6
 8005940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005944:	485e      	ldr	r0, [pc, #376]	; (8005ac0 <_printf_i+0x244>)
 8005946:	230a      	movs	r3, #10
 8005948:	e019      	b.n	800597e <_printf_i+0x102>
 800594a:	680e      	ldr	r6, [r1, #0]
 800594c:	602b      	str	r3, [r5, #0]
 800594e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005952:	bf18      	it	ne
 8005954:	b236      	sxthne	r6, r6
 8005956:	e7ef      	b.n	8005938 <_printf_i+0xbc>
 8005958:	682b      	ldr	r3, [r5, #0]
 800595a:	6820      	ldr	r0, [r4, #0]
 800595c:	1d19      	adds	r1, r3, #4
 800595e:	6029      	str	r1, [r5, #0]
 8005960:	0601      	lsls	r1, r0, #24
 8005962:	d501      	bpl.n	8005968 <_printf_i+0xec>
 8005964:	681e      	ldr	r6, [r3, #0]
 8005966:	e002      	b.n	800596e <_printf_i+0xf2>
 8005968:	0646      	lsls	r6, r0, #25
 800596a:	d5fb      	bpl.n	8005964 <_printf_i+0xe8>
 800596c:	881e      	ldrh	r6, [r3, #0]
 800596e:	4854      	ldr	r0, [pc, #336]	; (8005ac0 <_printf_i+0x244>)
 8005970:	2f6f      	cmp	r7, #111	; 0x6f
 8005972:	bf0c      	ite	eq
 8005974:	2308      	moveq	r3, #8
 8005976:	230a      	movne	r3, #10
 8005978:	2100      	movs	r1, #0
 800597a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800597e:	6865      	ldr	r5, [r4, #4]
 8005980:	60a5      	str	r5, [r4, #8]
 8005982:	2d00      	cmp	r5, #0
 8005984:	bfa2      	ittt	ge
 8005986:	6821      	ldrge	r1, [r4, #0]
 8005988:	f021 0104 	bicge.w	r1, r1, #4
 800598c:	6021      	strge	r1, [r4, #0]
 800598e:	b90e      	cbnz	r6, 8005994 <_printf_i+0x118>
 8005990:	2d00      	cmp	r5, #0
 8005992:	d04d      	beq.n	8005a30 <_printf_i+0x1b4>
 8005994:	4615      	mov	r5, r2
 8005996:	fbb6 f1f3 	udiv	r1, r6, r3
 800599a:	fb03 6711 	mls	r7, r3, r1, r6
 800599e:	5dc7      	ldrb	r7, [r0, r7]
 80059a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80059a4:	4637      	mov	r7, r6
 80059a6:	42bb      	cmp	r3, r7
 80059a8:	460e      	mov	r6, r1
 80059aa:	d9f4      	bls.n	8005996 <_printf_i+0x11a>
 80059ac:	2b08      	cmp	r3, #8
 80059ae:	d10b      	bne.n	80059c8 <_printf_i+0x14c>
 80059b0:	6823      	ldr	r3, [r4, #0]
 80059b2:	07de      	lsls	r6, r3, #31
 80059b4:	d508      	bpl.n	80059c8 <_printf_i+0x14c>
 80059b6:	6923      	ldr	r3, [r4, #16]
 80059b8:	6861      	ldr	r1, [r4, #4]
 80059ba:	4299      	cmp	r1, r3
 80059bc:	bfde      	ittt	le
 80059be:	2330      	movle	r3, #48	; 0x30
 80059c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80059c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80059c8:	1b52      	subs	r2, r2, r5
 80059ca:	6122      	str	r2, [r4, #16]
 80059cc:	f8cd a000 	str.w	sl, [sp]
 80059d0:	464b      	mov	r3, r9
 80059d2:	aa03      	add	r2, sp, #12
 80059d4:	4621      	mov	r1, r4
 80059d6:	4640      	mov	r0, r8
 80059d8:	f7ff fee2 	bl	80057a0 <_printf_common>
 80059dc:	3001      	adds	r0, #1
 80059de:	d14c      	bne.n	8005a7a <_printf_i+0x1fe>
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	b004      	add	sp, #16
 80059e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059ea:	4835      	ldr	r0, [pc, #212]	; (8005ac0 <_printf_i+0x244>)
 80059ec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80059f0:	6829      	ldr	r1, [r5, #0]
 80059f2:	6823      	ldr	r3, [r4, #0]
 80059f4:	f851 6b04 	ldr.w	r6, [r1], #4
 80059f8:	6029      	str	r1, [r5, #0]
 80059fa:	061d      	lsls	r5, r3, #24
 80059fc:	d514      	bpl.n	8005a28 <_printf_i+0x1ac>
 80059fe:	07df      	lsls	r7, r3, #31
 8005a00:	bf44      	itt	mi
 8005a02:	f043 0320 	orrmi.w	r3, r3, #32
 8005a06:	6023      	strmi	r3, [r4, #0]
 8005a08:	b91e      	cbnz	r6, 8005a12 <_printf_i+0x196>
 8005a0a:	6823      	ldr	r3, [r4, #0]
 8005a0c:	f023 0320 	bic.w	r3, r3, #32
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	2310      	movs	r3, #16
 8005a14:	e7b0      	b.n	8005978 <_printf_i+0xfc>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	f043 0320 	orr.w	r3, r3, #32
 8005a1c:	6023      	str	r3, [r4, #0]
 8005a1e:	2378      	movs	r3, #120	; 0x78
 8005a20:	4828      	ldr	r0, [pc, #160]	; (8005ac4 <_printf_i+0x248>)
 8005a22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005a26:	e7e3      	b.n	80059f0 <_printf_i+0x174>
 8005a28:	0659      	lsls	r1, r3, #25
 8005a2a:	bf48      	it	mi
 8005a2c:	b2b6      	uxthmi	r6, r6
 8005a2e:	e7e6      	b.n	80059fe <_printf_i+0x182>
 8005a30:	4615      	mov	r5, r2
 8005a32:	e7bb      	b.n	80059ac <_printf_i+0x130>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	6826      	ldr	r6, [r4, #0]
 8005a38:	6961      	ldr	r1, [r4, #20]
 8005a3a:	1d18      	adds	r0, r3, #4
 8005a3c:	6028      	str	r0, [r5, #0]
 8005a3e:	0635      	lsls	r5, r6, #24
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	d501      	bpl.n	8005a48 <_printf_i+0x1cc>
 8005a44:	6019      	str	r1, [r3, #0]
 8005a46:	e002      	b.n	8005a4e <_printf_i+0x1d2>
 8005a48:	0670      	lsls	r0, r6, #25
 8005a4a:	d5fb      	bpl.n	8005a44 <_printf_i+0x1c8>
 8005a4c:	8019      	strh	r1, [r3, #0]
 8005a4e:	2300      	movs	r3, #0
 8005a50:	6123      	str	r3, [r4, #16]
 8005a52:	4615      	mov	r5, r2
 8005a54:	e7ba      	b.n	80059cc <_printf_i+0x150>
 8005a56:	682b      	ldr	r3, [r5, #0]
 8005a58:	1d1a      	adds	r2, r3, #4
 8005a5a:	602a      	str	r2, [r5, #0]
 8005a5c:	681d      	ldr	r5, [r3, #0]
 8005a5e:	6862      	ldr	r2, [r4, #4]
 8005a60:	2100      	movs	r1, #0
 8005a62:	4628      	mov	r0, r5
 8005a64:	f7fa fbbc 	bl	80001e0 <memchr>
 8005a68:	b108      	cbz	r0, 8005a6e <_printf_i+0x1f2>
 8005a6a:	1b40      	subs	r0, r0, r5
 8005a6c:	6060      	str	r0, [r4, #4]
 8005a6e:	6863      	ldr	r3, [r4, #4]
 8005a70:	6123      	str	r3, [r4, #16]
 8005a72:	2300      	movs	r3, #0
 8005a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a78:	e7a8      	b.n	80059cc <_printf_i+0x150>
 8005a7a:	6923      	ldr	r3, [r4, #16]
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	4649      	mov	r1, r9
 8005a80:	4640      	mov	r0, r8
 8005a82:	47d0      	blx	sl
 8005a84:	3001      	adds	r0, #1
 8005a86:	d0ab      	beq.n	80059e0 <_printf_i+0x164>
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	079b      	lsls	r3, r3, #30
 8005a8c:	d413      	bmi.n	8005ab6 <_printf_i+0x23a>
 8005a8e:	68e0      	ldr	r0, [r4, #12]
 8005a90:	9b03      	ldr	r3, [sp, #12]
 8005a92:	4298      	cmp	r0, r3
 8005a94:	bfb8      	it	lt
 8005a96:	4618      	movlt	r0, r3
 8005a98:	e7a4      	b.n	80059e4 <_printf_i+0x168>
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	4632      	mov	r2, r6
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	4640      	mov	r0, r8
 8005aa2:	47d0      	blx	sl
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	d09b      	beq.n	80059e0 <_printf_i+0x164>
 8005aa8:	3501      	adds	r5, #1
 8005aaa:	68e3      	ldr	r3, [r4, #12]
 8005aac:	9903      	ldr	r1, [sp, #12]
 8005aae:	1a5b      	subs	r3, r3, r1
 8005ab0:	42ab      	cmp	r3, r5
 8005ab2:	dcf2      	bgt.n	8005a9a <_printf_i+0x21e>
 8005ab4:	e7eb      	b.n	8005a8e <_printf_i+0x212>
 8005ab6:	2500      	movs	r5, #0
 8005ab8:	f104 0619 	add.w	r6, r4, #25
 8005abc:	e7f5      	b.n	8005aaa <_printf_i+0x22e>
 8005abe:	bf00      	nop
 8005ac0:	08009b9a 	.word	0x08009b9a
 8005ac4:	08009bab 	.word	0x08009bab

08005ac8 <_scanf_float>:
 8005ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005acc:	b087      	sub	sp, #28
 8005ace:	4617      	mov	r7, r2
 8005ad0:	9303      	str	r3, [sp, #12]
 8005ad2:	688b      	ldr	r3, [r1, #8]
 8005ad4:	1e5a      	subs	r2, r3, #1
 8005ad6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005ada:	bf83      	ittte	hi
 8005adc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005ae0:	195b      	addhi	r3, r3, r5
 8005ae2:	9302      	strhi	r3, [sp, #8]
 8005ae4:	2300      	movls	r3, #0
 8005ae6:	bf86      	itte	hi
 8005ae8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005aec:	608b      	strhi	r3, [r1, #8]
 8005aee:	9302      	strls	r3, [sp, #8]
 8005af0:	680b      	ldr	r3, [r1, #0]
 8005af2:	468b      	mov	fp, r1
 8005af4:	2500      	movs	r5, #0
 8005af6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005afa:	f84b 3b1c 	str.w	r3, [fp], #28
 8005afe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005b02:	4680      	mov	r8, r0
 8005b04:	460c      	mov	r4, r1
 8005b06:	465e      	mov	r6, fp
 8005b08:	46aa      	mov	sl, r5
 8005b0a:	46a9      	mov	r9, r5
 8005b0c:	9501      	str	r5, [sp, #4]
 8005b0e:	68a2      	ldr	r2, [r4, #8]
 8005b10:	b152      	cbz	r2, 8005b28 <_scanf_float+0x60>
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	2b4e      	cmp	r3, #78	; 0x4e
 8005b18:	d864      	bhi.n	8005be4 <_scanf_float+0x11c>
 8005b1a:	2b40      	cmp	r3, #64	; 0x40
 8005b1c:	d83c      	bhi.n	8005b98 <_scanf_float+0xd0>
 8005b1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005b22:	b2c8      	uxtb	r0, r1
 8005b24:	280e      	cmp	r0, #14
 8005b26:	d93a      	bls.n	8005b9e <_scanf_float+0xd6>
 8005b28:	f1b9 0f00 	cmp.w	r9, #0
 8005b2c:	d003      	beq.n	8005b36 <_scanf_float+0x6e>
 8005b2e:	6823      	ldr	r3, [r4, #0]
 8005b30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b34:	6023      	str	r3, [r4, #0]
 8005b36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b3a:	f1ba 0f01 	cmp.w	sl, #1
 8005b3e:	f200 8113 	bhi.w	8005d68 <_scanf_float+0x2a0>
 8005b42:	455e      	cmp	r6, fp
 8005b44:	f200 8105 	bhi.w	8005d52 <_scanf_float+0x28a>
 8005b48:	2501      	movs	r5, #1
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	b007      	add	sp, #28
 8005b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005b56:	2a0d      	cmp	r2, #13
 8005b58:	d8e6      	bhi.n	8005b28 <_scanf_float+0x60>
 8005b5a:	a101      	add	r1, pc, #4	; (adr r1, 8005b60 <_scanf_float+0x98>)
 8005b5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005b60:	08005c9f 	.word	0x08005c9f
 8005b64:	08005b29 	.word	0x08005b29
 8005b68:	08005b29 	.word	0x08005b29
 8005b6c:	08005b29 	.word	0x08005b29
 8005b70:	08005cff 	.word	0x08005cff
 8005b74:	08005cd7 	.word	0x08005cd7
 8005b78:	08005b29 	.word	0x08005b29
 8005b7c:	08005b29 	.word	0x08005b29
 8005b80:	08005cad 	.word	0x08005cad
 8005b84:	08005b29 	.word	0x08005b29
 8005b88:	08005b29 	.word	0x08005b29
 8005b8c:	08005b29 	.word	0x08005b29
 8005b90:	08005b29 	.word	0x08005b29
 8005b94:	08005c65 	.word	0x08005c65
 8005b98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005b9c:	e7db      	b.n	8005b56 <_scanf_float+0x8e>
 8005b9e:	290e      	cmp	r1, #14
 8005ba0:	d8c2      	bhi.n	8005b28 <_scanf_float+0x60>
 8005ba2:	a001      	add	r0, pc, #4	; (adr r0, 8005ba8 <_scanf_float+0xe0>)
 8005ba4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005ba8:	08005c57 	.word	0x08005c57
 8005bac:	08005b29 	.word	0x08005b29
 8005bb0:	08005c57 	.word	0x08005c57
 8005bb4:	08005ceb 	.word	0x08005ceb
 8005bb8:	08005b29 	.word	0x08005b29
 8005bbc:	08005c05 	.word	0x08005c05
 8005bc0:	08005c41 	.word	0x08005c41
 8005bc4:	08005c41 	.word	0x08005c41
 8005bc8:	08005c41 	.word	0x08005c41
 8005bcc:	08005c41 	.word	0x08005c41
 8005bd0:	08005c41 	.word	0x08005c41
 8005bd4:	08005c41 	.word	0x08005c41
 8005bd8:	08005c41 	.word	0x08005c41
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005c41 	.word	0x08005c41
 8005be4:	2b6e      	cmp	r3, #110	; 0x6e
 8005be6:	d809      	bhi.n	8005bfc <_scanf_float+0x134>
 8005be8:	2b60      	cmp	r3, #96	; 0x60
 8005bea:	d8b2      	bhi.n	8005b52 <_scanf_float+0x8a>
 8005bec:	2b54      	cmp	r3, #84	; 0x54
 8005bee:	d077      	beq.n	8005ce0 <_scanf_float+0x218>
 8005bf0:	2b59      	cmp	r3, #89	; 0x59
 8005bf2:	d199      	bne.n	8005b28 <_scanf_float+0x60>
 8005bf4:	2d07      	cmp	r5, #7
 8005bf6:	d197      	bne.n	8005b28 <_scanf_float+0x60>
 8005bf8:	2508      	movs	r5, #8
 8005bfa:	e029      	b.n	8005c50 <_scanf_float+0x188>
 8005bfc:	2b74      	cmp	r3, #116	; 0x74
 8005bfe:	d06f      	beq.n	8005ce0 <_scanf_float+0x218>
 8005c00:	2b79      	cmp	r3, #121	; 0x79
 8005c02:	e7f6      	b.n	8005bf2 <_scanf_float+0x12a>
 8005c04:	6821      	ldr	r1, [r4, #0]
 8005c06:	05c8      	lsls	r0, r1, #23
 8005c08:	d51a      	bpl.n	8005c40 <_scanf_float+0x178>
 8005c0a:	9b02      	ldr	r3, [sp, #8]
 8005c0c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005c10:	6021      	str	r1, [r4, #0]
 8005c12:	f109 0901 	add.w	r9, r9, #1
 8005c16:	b11b      	cbz	r3, 8005c20 <_scanf_float+0x158>
 8005c18:	3b01      	subs	r3, #1
 8005c1a:	3201      	adds	r2, #1
 8005c1c:	9302      	str	r3, [sp, #8]
 8005c1e:	60a2      	str	r2, [r4, #8]
 8005c20:	68a3      	ldr	r3, [r4, #8]
 8005c22:	3b01      	subs	r3, #1
 8005c24:	60a3      	str	r3, [r4, #8]
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	6123      	str	r3, [r4, #16]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	607b      	str	r3, [r7, #4]
 8005c34:	f340 8084 	ble.w	8005d40 <_scanf_float+0x278>
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	e766      	b.n	8005b0e <_scanf_float+0x46>
 8005c40:	eb1a 0f05 	cmn.w	sl, r5
 8005c44:	f47f af70 	bne.w	8005b28 <_scanf_float+0x60>
 8005c48:	6822      	ldr	r2, [r4, #0]
 8005c4a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005c4e:	6022      	str	r2, [r4, #0]
 8005c50:	f806 3b01 	strb.w	r3, [r6], #1
 8005c54:	e7e4      	b.n	8005c20 <_scanf_float+0x158>
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	0610      	lsls	r0, r2, #24
 8005c5a:	f57f af65 	bpl.w	8005b28 <_scanf_float+0x60>
 8005c5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c62:	e7f4      	b.n	8005c4e <_scanf_float+0x186>
 8005c64:	f1ba 0f00 	cmp.w	sl, #0
 8005c68:	d10e      	bne.n	8005c88 <_scanf_float+0x1c0>
 8005c6a:	f1b9 0f00 	cmp.w	r9, #0
 8005c6e:	d10e      	bne.n	8005c8e <_scanf_float+0x1c6>
 8005c70:	6822      	ldr	r2, [r4, #0]
 8005c72:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c76:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c7a:	d108      	bne.n	8005c8e <_scanf_float+0x1c6>
 8005c7c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c80:	6022      	str	r2, [r4, #0]
 8005c82:	f04f 0a01 	mov.w	sl, #1
 8005c86:	e7e3      	b.n	8005c50 <_scanf_float+0x188>
 8005c88:	f1ba 0f02 	cmp.w	sl, #2
 8005c8c:	d055      	beq.n	8005d3a <_scanf_float+0x272>
 8005c8e:	2d01      	cmp	r5, #1
 8005c90:	d002      	beq.n	8005c98 <_scanf_float+0x1d0>
 8005c92:	2d04      	cmp	r5, #4
 8005c94:	f47f af48 	bne.w	8005b28 <_scanf_float+0x60>
 8005c98:	3501      	adds	r5, #1
 8005c9a:	b2ed      	uxtb	r5, r5
 8005c9c:	e7d8      	b.n	8005c50 <_scanf_float+0x188>
 8005c9e:	f1ba 0f01 	cmp.w	sl, #1
 8005ca2:	f47f af41 	bne.w	8005b28 <_scanf_float+0x60>
 8005ca6:	f04f 0a02 	mov.w	sl, #2
 8005caa:	e7d1      	b.n	8005c50 <_scanf_float+0x188>
 8005cac:	b97d      	cbnz	r5, 8005cce <_scanf_float+0x206>
 8005cae:	f1b9 0f00 	cmp.w	r9, #0
 8005cb2:	f47f af3c 	bne.w	8005b2e <_scanf_float+0x66>
 8005cb6:	6822      	ldr	r2, [r4, #0]
 8005cb8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005cbc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005cc0:	f47f af39 	bne.w	8005b36 <_scanf_float+0x6e>
 8005cc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005cc8:	6022      	str	r2, [r4, #0]
 8005cca:	2501      	movs	r5, #1
 8005ccc:	e7c0      	b.n	8005c50 <_scanf_float+0x188>
 8005cce:	2d03      	cmp	r5, #3
 8005cd0:	d0e2      	beq.n	8005c98 <_scanf_float+0x1d0>
 8005cd2:	2d05      	cmp	r5, #5
 8005cd4:	e7de      	b.n	8005c94 <_scanf_float+0x1cc>
 8005cd6:	2d02      	cmp	r5, #2
 8005cd8:	f47f af26 	bne.w	8005b28 <_scanf_float+0x60>
 8005cdc:	2503      	movs	r5, #3
 8005cde:	e7b7      	b.n	8005c50 <_scanf_float+0x188>
 8005ce0:	2d06      	cmp	r5, #6
 8005ce2:	f47f af21 	bne.w	8005b28 <_scanf_float+0x60>
 8005ce6:	2507      	movs	r5, #7
 8005ce8:	e7b2      	b.n	8005c50 <_scanf_float+0x188>
 8005cea:	6822      	ldr	r2, [r4, #0]
 8005cec:	0591      	lsls	r1, r2, #22
 8005cee:	f57f af1b 	bpl.w	8005b28 <_scanf_float+0x60>
 8005cf2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005cf6:	6022      	str	r2, [r4, #0]
 8005cf8:	f8cd 9004 	str.w	r9, [sp, #4]
 8005cfc:	e7a8      	b.n	8005c50 <_scanf_float+0x188>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005d04:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005d08:	d006      	beq.n	8005d18 <_scanf_float+0x250>
 8005d0a:	0550      	lsls	r0, r2, #21
 8005d0c:	f57f af0c 	bpl.w	8005b28 <_scanf_float+0x60>
 8005d10:	f1b9 0f00 	cmp.w	r9, #0
 8005d14:	f43f af0f 	beq.w	8005b36 <_scanf_float+0x6e>
 8005d18:	0591      	lsls	r1, r2, #22
 8005d1a:	bf58      	it	pl
 8005d1c:	9901      	ldrpl	r1, [sp, #4]
 8005d1e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005d22:	bf58      	it	pl
 8005d24:	eba9 0101 	subpl.w	r1, r9, r1
 8005d28:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005d2c:	bf58      	it	pl
 8005d2e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005d32:	6022      	str	r2, [r4, #0]
 8005d34:	f04f 0900 	mov.w	r9, #0
 8005d38:	e78a      	b.n	8005c50 <_scanf_float+0x188>
 8005d3a:	f04f 0a03 	mov.w	sl, #3
 8005d3e:	e787      	b.n	8005c50 <_scanf_float+0x188>
 8005d40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005d44:	4639      	mov	r1, r7
 8005d46:	4640      	mov	r0, r8
 8005d48:	4798      	blx	r3
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	f43f aedf 	beq.w	8005b0e <_scanf_float+0x46>
 8005d50:	e6ea      	b.n	8005b28 <_scanf_float+0x60>
 8005d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d5a:	463a      	mov	r2, r7
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4798      	blx	r3
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	3b01      	subs	r3, #1
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	e6ec      	b.n	8005b42 <_scanf_float+0x7a>
 8005d68:	1e6b      	subs	r3, r5, #1
 8005d6a:	2b06      	cmp	r3, #6
 8005d6c:	d825      	bhi.n	8005dba <_scanf_float+0x2f2>
 8005d6e:	2d02      	cmp	r5, #2
 8005d70:	d836      	bhi.n	8005de0 <_scanf_float+0x318>
 8005d72:	455e      	cmp	r6, fp
 8005d74:	f67f aee8 	bls.w	8005b48 <_scanf_float+0x80>
 8005d78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d7c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d80:	463a      	mov	r2, r7
 8005d82:	4640      	mov	r0, r8
 8005d84:	4798      	blx	r3
 8005d86:	6923      	ldr	r3, [r4, #16]
 8005d88:	3b01      	subs	r3, #1
 8005d8a:	6123      	str	r3, [r4, #16]
 8005d8c:	e7f1      	b.n	8005d72 <_scanf_float+0x2aa>
 8005d8e:	9802      	ldr	r0, [sp, #8]
 8005d90:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d94:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005d98:	9002      	str	r0, [sp, #8]
 8005d9a:	463a      	mov	r2, r7
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	4798      	blx	r3
 8005da0:	6923      	ldr	r3, [r4, #16]
 8005da2:	3b01      	subs	r3, #1
 8005da4:	6123      	str	r3, [r4, #16]
 8005da6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005daa:	fa5f fa8a 	uxtb.w	sl, sl
 8005dae:	f1ba 0f02 	cmp.w	sl, #2
 8005db2:	d1ec      	bne.n	8005d8e <_scanf_float+0x2c6>
 8005db4:	3d03      	subs	r5, #3
 8005db6:	b2ed      	uxtb	r5, r5
 8005db8:	1b76      	subs	r6, r6, r5
 8005dba:	6823      	ldr	r3, [r4, #0]
 8005dbc:	05da      	lsls	r2, r3, #23
 8005dbe:	d52f      	bpl.n	8005e20 <_scanf_float+0x358>
 8005dc0:	055b      	lsls	r3, r3, #21
 8005dc2:	d510      	bpl.n	8005de6 <_scanf_float+0x31e>
 8005dc4:	455e      	cmp	r6, fp
 8005dc6:	f67f aebf 	bls.w	8005b48 <_scanf_float+0x80>
 8005dca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005dce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005dd2:	463a      	mov	r2, r7
 8005dd4:	4640      	mov	r0, r8
 8005dd6:	4798      	blx	r3
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	3b01      	subs	r3, #1
 8005ddc:	6123      	str	r3, [r4, #16]
 8005dde:	e7f1      	b.n	8005dc4 <_scanf_float+0x2fc>
 8005de0:	46aa      	mov	sl, r5
 8005de2:	9602      	str	r6, [sp, #8]
 8005de4:	e7df      	b.n	8005da6 <_scanf_float+0x2de>
 8005de6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005dea:	6923      	ldr	r3, [r4, #16]
 8005dec:	2965      	cmp	r1, #101	; 0x65
 8005dee:	f103 33ff 	add.w	r3, r3, #4294967295
 8005df2:	f106 35ff 	add.w	r5, r6, #4294967295
 8005df6:	6123      	str	r3, [r4, #16]
 8005df8:	d00c      	beq.n	8005e14 <_scanf_float+0x34c>
 8005dfa:	2945      	cmp	r1, #69	; 0x45
 8005dfc:	d00a      	beq.n	8005e14 <_scanf_float+0x34c>
 8005dfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e02:	463a      	mov	r2, r7
 8005e04:	4640      	mov	r0, r8
 8005e06:	4798      	blx	r3
 8005e08:	6923      	ldr	r3, [r4, #16]
 8005e0a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	1eb5      	subs	r5, r6, #2
 8005e12:	6123      	str	r3, [r4, #16]
 8005e14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005e18:	463a      	mov	r2, r7
 8005e1a:	4640      	mov	r0, r8
 8005e1c:	4798      	blx	r3
 8005e1e:	462e      	mov	r6, r5
 8005e20:	6825      	ldr	r5, [r4, #0]
 8005e22:	f015 0510 	ands.w	r5, r5, #16
 8005e26:	d159      	bne.n	8005edc <_scanf_float+0x414>
 8005e28:	7035      	strb	r5, [r6, #0]
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e34:	d11b      	bne.n	8005e6e <_scanf_float+0x3a6>
 8005e36:	9b01      	ldr	r3, [sp, #4]
 8005e38:	454b      	cmp	r3, r9
 8005e3a:	eba3 0209 	sub.w	r2, r3, r9
 8005e3e:	d123      	bne.n	8005e88 <_scanf_float+0x3c0>
 8005e40:	2200      	movs	r2, #0
 8005e42:	4659      	mov	r1, fp
 8005e44:	4640      	mov	r0, r8
 8005e46:	f000 fe99 	bl	8006b7c <_strtod_r>
 8005e4a:	6822      	ldr	r2, [r4, #0]
 8005e4c:	9b03      	ldr	r3, [sp, #12]
 8005e4e:	f012 0f02 	tst.w	r2, #2
 8005e52:	ec57 6b10 	vmov	r6, r7, d0
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	d021      	beq.n	8005e9e <_scanf_float+0x3d6>
 8005e5a:	9903      	ldr	r1, [sp, #12]
 8005e5c:	1d1a      	adds	r2, r3, #4
 8005e5e:	600a      	str	r2, [r1, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	e9c3 6700 	strd	r6, r7, [r3]
 8005e66:	68e3      	ldr	r3, [r4, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60e3      	str	r3, [r4, #12]
 8005e6c:	e66d      	b.n	8005b4a <_scanf_float+0x82>
 8005e6e:	9b04      	ldr	r3, [sp, #16]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d0e5      	beq.n	8005e40 <_scanf_float+0x378>
 8005e74:	9905      	ldr	r1, [sp, #20]
 8005e76:	230a      	movs	r3, #10
 8005e78:	462a      	mov	r2, r5
 8005e7a:	3101      	adds	r1, #1
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	f000 ff05 	bl	8006c8c <_strtol_r>
 8005e82:	9b04      	ldr	r3, [sp, #16]
 8005e84:	9e05      	ldr	r6, [sp, #20]
 8005e86:	1ac2      	subs	r2, r0, r3
 8005e88:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005e8c:	429e      	cmp	r6, r3
 8005e8e:	bf28      	it	cs
 8005e90:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005e94:	4912      	ldr	r1, [pc, #72]	; (8005ee0 <_scanf_float+0x418>)
 8005e96:	4630      	mov	r0, r6
 8005e98:	f000 f82c 	bl	8005ef4 <siprintf>
 8005e9c:	e7d0      	b.n	8005e40 <_scanf_float+0x378>
 8005e9e:	9903      	ldr	r1, [sp, #12]
 8005ea0:	f012 0f04 	tst.w	r2, #4
 8005ea4:	f103 0204 	add.w	r2, r3, #4
 8005ea8:	600a      	str	r2, [r1, #0]
 8005eaa:	d1d9      	bne.n	8005e60 <_scanf_float+0x398>
 8005eac:	f8d3 8000 	ldr.w	r8, [r3]
 8005eb0:	ee10 2a10 	vmov	r2, s0
 8005eb4:	ee10 0a10 	vmov	r0, s0
 8005eb8:	463b      	mov	r3, r7
 8005eba:	4639      	mov	r1, r7
 8005ebc:	f7fa fe36 	bl	8000b2c <__aeabi_dcmpun>
 8005ec0:	b128      	cbz	r0, 8005ece <_scanf_float+0x406>
 8005ec2:	4808      	ldr	r0, [pc, #32]	; (8005ee4 <_scanf_float+0x41c>)
 8005ec4:	f000 f810 	bl	8005ee8 <nanf>
 8005ec8:	ed88 0a00 	vstr	s0, [r8]
 8005ecc:	e7cb      	b.n	8005e66 <_scanf_float+0x39e>
 8005ece:	4630      	mov	r0, r6
 8005ed0:	4639      	mov	r1, r7
 8005ed2:	f7fa fe89 	bl	8000be8 <__aeabi_d2f>
 8005ed6:	f8c8 0000 	str.w	r0, [r8]
 8005eda:	e7c4      	b.n	8005e66 <_scanf_float+0x39e>
 8005edc:	2500      	movs	r5, #0
 8005ede:	e634      	b.n	8005b4a <_scanf_float+0x82>
 8005ee0:	08009bbc 	.word	0x08009bbc
 8005ee4:	08009fc8 	.word	0x08009fc8

08005ee8 <nanf>:
 8005ee8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ef0 <nanf+0x8>
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	7fc00000 	.word	0x7fc00000

08005ef4 <siprintf>:
 8005ef4:	b40e      	push	{r1, r2, r3}
 8005ef6:	b500      	push	{lr}
 8005ef8:	b09c      	sub	sp, #112	; 0x70
 8005efa:	ab1d      	add	r3, sp, #116	; 0x74
 8005efc:	9002      	str	r0, [sp, #8]
 8005efe:	9006      	str	r0, [sp, #24]
 8005f00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f04:	4809      	ldr	r0, [pc, #36]	; (8005f2c <siprintf+0x38>)
 8005f06:	9107      	str	r1, [sp, #28]
 8005f08:	9104      	str	r1, [sp, #16]
 8005f0a:	4909      	ldr	r1, [pc, #36]	; (8005f30 <siprintf+0x3c>)
 8005f0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f10:	9105      	str	r1, [sp, #20]
 8005f12:	6800      	ldr	r0, [r0, #0]
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	a902      	add	r1, sp, #8
 8005f18:	f002 fee4 	bl	8008ce4 <_svfiprintf_r>
 8005f1c:	9b02      	ldr	r3, [sp, #8]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	701a      	strb	r2, [r3, #0]
 8005f22:	b01c      	add	sp, #112	; 0x70
 8005f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f28:	b003      	add	sp, #12
 8005f2a:	4770      	bx	lr
 8005f2c:	20000018 	.word	0x20000018
 8005f30:	ffff0208 	.word	0xffff0208

08005f34 <sulp>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	4604      	mov	r4, r0
 8005f38:	460d      	mov	r5, r1
 8005f3a:	ec45 4b10 	vmov	d0, r4, r5
 8005f3e:	4616      	mov	r6, r2
 8005f40:	f002 fc2e 	bl	80087a0 <__ulp>
 8005f44:	ec51 0b10 	vmov	r0, r1, d0
 8005f48:	b17e      	cbz	r6, 8005f6a <sulp+0x36>
 8005f4a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005f4e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dd09      	ble.n	8005f6a <sulp+0x36>
 8005f56:	051b      	lsls	r3, r3, #20
 8005f58:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005f5c:	2400      	movs	r4, #0
 8005f5e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8005f62:	4622      	mov	r2, r4
 8005f64:	462b      	mov	r3, r5
 8005f66:	f7fa fb47 	bl	80005f8 <__aeabi_dmul>
 8005f6a:	bd70      	pop	{r4, r5, r6, pc}
 8005f6c:	0000      	movs	r0, r0
	...

08005f70 <_strtod_l>:
 8005f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f74:	ed2d 8b02 	vpush	{d8}
 8005f78:	b09d      	sub	sp, #116	; 0x74
 8005f7a:	461f      	mov	r7, r3
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	9318      	str	r3, [sp, #96]	; 0x60
 8005f80:	4ba2      	ldr	r3, [pc, #648]	; (800620c <_strtod_l+0x29c>)
 8005f82:	9213      	str	r2, [sp, #76]	; 0x4c
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	9305      	str	r3, [sp, #20]
 8005f88:	4604      	mov	r4, r0
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	4688      	mov	r8, r1
 8005f8e:	f7fa f91f 	bl	80001d0 <strlen>
 8005f92:	f04f 0a00 	mov.w	sl, #0
 8005f96:	4605      	mov	r5, r0
 8005f98:	f04f 0b00 	mov.w	fp, #0
 8005f9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005fa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005fa2:	781a      	ldrb	r2, [r3, #0]
 8005fa4:	2a2b      	cmp	r2, #43	; 0x2b
 8005fa6:	d04e      	beq.n	8006046 <_strtod_l+0xd6>
 8005fa8:	d83b      	bhi.n	8006022 <_strtod_l+0xb2>
 8005faa:	2a0d      	cmp	r2, #13
 8005fac:	d834      	bhi.n	8006018 <_strtod_l+0xa8>
 8005fae:	2a08      	cmp	r2, #8
 8005fb0:	d834      	bhi.n	800601c <_strtod_l+0xac>
 8005fb2:	2a00      	cmp	r2, #0
 8005fb4:	d03e      	beq.n	8006034 <_strtod_l+0xc4>
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	930a      	str	r3, [sp, #40]	; 0x28
 8005fba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8005fbc:	7833      	ldrb	r3, [r6, #0]
 8005fbe:	2b30      	cmp	r3, #48	; 0x30
 8005fc0:	f040 80b0 	bne.w	8006124 <_strtod_l+0x1b4>
 8005fc4:	7873      	ldrb	r3, [r6, #1]
 8005fc6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005fca:	2b58      	cmp	r3, #88	; 0x58
 8005fcc:	d168      	bne.n	80060a0 <_strtod_l+0x130>
 8005fce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fd0:	9301      	str	r3, [sp, #4]
 8005fd2:	ab18      	add	r3, sp, #96	; 0x60
 8005fd4:	9702      	str	r7, [sp, #8]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	4a8d      	ldr	r2, [pc, #564]	; (8006210 <_strtod_l+0x2a0>)
 8005fda:	ab19      	add	r3, sp, #100	; 0x64
 8005fdc:	a917      	add	r1, sp, #92	; 0x5c
 8005fde:	4620      	mov	r0, r4
 8005fe0:	f001 fd38 	bl	8007a54 <__gethex>
 8005fe4:	f010 0707 	ands.w	r7, r0, #7
 8005fe8:	4605      	mov	r5, r0
 8005fea:	d005      	beq.n	8005ff8 <_strtod_l+0x88>
 8005fec:	2f06      	cmp	r7, #6
 8005fee:	d12c      	bne.n	800604a <_strtod_l+0xda>
 8005ff0:	3601      	adds	r6, #1
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9617      	str	r6, [sp, #92]	; 0x5c
 8005ff6:	930a      	str	r3, [sp, #40]	; 0x28
 8005ff8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	f040 8590 	bne.w	8006b20 <_strtod_l+0xbb0>
 8006000:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006002:	b1eb      	cbz	r3, 8006040 <_strtod_l+0xd0>
 8006004:	4652      	mov	r2, sl
 8006006:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800600a:	ec43 2b10 	vmov	d0, r2, r3
 800600e:	b01d      	add	sp, #116	; 0x74
 8006010:	ecbd 8b02 	vpop	{d8}
 8006014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006018:	2a20      	cmp	r2, #32
 800601a:	d1cc      	bne.n	8005fb6 <_strtod_l+0x46>
 800601c:	3301      	adds	r3, #1
 800601e:	9317      	str	r3, [sp, #92]	; 0x5c
 8006020:	e7be      	b.n	8005fa0 <_strtod_l+0x30>
 8006022:	2a2d      	cmp	r2, #45	; 0x2d
 8006024:	d1c7      	bne.n	8005fb6 <_strtod_l+0x46>
 8006026:	2201      	movs	r2, #1
 8006028:	920a      	str	r2, [sp, #40]	; 0x28
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	9217      	str	r2, [sp, #92]	; 0x5c
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d1c2      	bne.n	8005fba <_strtod_l+0x4a>
 8006034:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006036:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800603a:	2b00      	cmp	r3, #0
 800603c:	f040 856e 	bne.w	8006b1c <_strtod_l+0xbac>
 8006040:	4652      	mov	r2, sl
 8006042:	465b      	mov	r3, fp
 8006044:	e7e1      	b.n	800600a <_strtod_l+0x9a>
 8006046:	2200      	movs	r2, #0
 8006048:	e7ee      	b.n	8006028 <_strtod_l+0xb8>
 800604a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800604c:	b13a      	cbz	r2, 800605e <_strtod_l+0xee>
 800604e:	2135      	movs	r1, #53	; 0x35
 8006050:	a81a      	add	r0, sp, #104	; 0x68
 8006052:	f002 fcb0 	bl	80089b6 <__copybits>
 8006056:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006058:	4620      	mov	r0, r4
 800605a:	f002 f86f 	bl	800813c <_Bfree>
 800605e:	3f01      	subs	r7, #1
 8006060:	2f04      	cmp	r7, #4
 8006062:	d806      	bhi.n	8006072 <_strtod_l+0x102>
 8006064:	e8df f007 	tbb	[pc, r7]
 8006068:	1714030a 	.word	0x1714030a
 800606c:	0a          	.byte	0x0a
 800606d:	00          	.byte	0x00
 800606e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006072:	0728      	lsls	r0, r5, #28
 8006074:	d5c0      	bpl.n	8005ff8 <_strtod_l+0x88>
 8006076:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800607a:	e7bd      	b.n	8005ff8 <_strtod_l+0x88>
 800607c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006080:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006082:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006086:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800608a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800608e:	e7f0      	b.n	8006072 <_strtod_l+0x102>
 8006090:	f8df b180 	ldr.w	fp, [pc, #384]	; 8006214 <_strtod_l+0x2a4>
 8006094:	e7ed      	b.n	8006072 <_strtod_l+0x102>
 8006096:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800609a:	f04f 3aff 	mov.w	sl, #4294967295
 800609e:	e7e8      	b.n	8006072 <_strtod_l+0x102>
 80060a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060a2:	1c5a      	adds	r2, r3, #1
 80060a4:	9217      	str	r2, [sp, #92]	; 0x5c
 80060a6:	785b      	ldrb	r3, [r3, #1]
 80060a8:	2b30      	cmp	r3, #48	; 0x30
 80060aa:	d0f9      	beq.n	80060a0 <_strtod_l+0x130>
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0a3      	beq.n	8005ff8 <_strtod_l+0x88>
 80060b0:	2301      	movs	r3, #1
 80060b2:	f04f 0900 	mov.w	r9, #0
 80060b6:	9304      	str	r3, [sp, #16]
 80060b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80060ba:	9308      	str	r3, [sp, #32]
 80060bc:	f8cd 901c 	str.w	r9, [sp, #28]
 80060c0:	464f      	mov	r7, r9
 80060c2:	220a      	movs	r2, #10
 80060c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80060c6:	7806      	ldrb	r6, [r0, #0]
 80060c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80060cc:	b2d9      	uxtb	r1, r3
 80060ce:	2909      	cmp	r1, #9
 80060d0:	d92a      	bls.n	8006128 <_strtod_l+0x1b8>
 80060d2:	9905      	ldr	r1, [sp, #20]
 80060d4:	462a      	mov	r2, r5
 80060d6:	f002 ff1f 	bl	8008f18 <strncmp>
 80060da:	b398      	cbz	r0, 8006144 <_strtod_l+0x1d4>
 80060dc:	2000      	movs	r0, #0
 80060de:	4632      	mov	r2, r6
 80060e0:	463d      	mov	r5, r7
 80060e2:	9005      	str	r0, [sp, #20]
 80060e4:	4603      	mov	r3, r0
 80060e6:	2a65      	cmp	r2, #101	; 0x65
 80060e8:	d001      	beq.n	80060ee <_strtod_l+0x17e>
 80060ea:	2a45      	cmp	r2, #69	; 0x45
 80060ec:	d118      	bne.n	8006120 <_strtod_l+0x1b0>
 80060ee:	b91d      	cbnz	r5, 80060f8 <_strtod_l+0x188>
 80060f0:	9a04      	ldr	r2, [sp, #16]
 80060f2:	4302      	orrs	r2, r0
 80060f4:	d09e      	beq.n	8006034 <_strtod_l+0xc4>
 80060f6:	2500      	movs	r5, #0
 80060f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80060fc:	f108 0201 	add.w	r2, r8, #1
 8006100:	9217      	str	r2, [sp, #92]	; 0x5c
 8006102:	f898 2001 	ldrb.w	r2, [r8, #1]
 8006106:	2a2b      	cmp	r2, #43	; 0x2b
 8006108:	d075      	beq.n	80061f6 <_strtod_l+0x286>
 800610a:	2a2d      	cmp	r2, #45	; 0x2d
 800610c:	d07b      	beq.n	8006206 <_strtod_l+0x296>
 800610e:	f04f 0c00 	mov.w	ip, #0
 8006112:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006116:	2909      	cmp	r1, #9
 8006118:	f240 8082 	bls.w	8006220 <_strtod_l+0x2b0>
 800611c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006120:	2600      	movs	r6, #0
 8006122:	e09d      	b.n	8006260 <_strtod_l+0x2f0>
 8006124:	2300      	movs	r3, #0
 8006126:	e7c4      	b.n	80060b2 <_strtod_l+0x142>
 8006128:	2f08      	cmp	r7, #8
 800612a:	bfd8      	it	le
 800612c:	9907      	ldrle	r1, [sp, #28]
 800612e:	f100 0001 	add.w	r0, r0, #1
 8006132:	bfda      	itte	le
 8006134:	fb02 3301 	mlale	r3, r2, r1, r3
 8006138:	9307      	strle	r3, [sp, #28]
 800613a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800613e:	3701      	adds	r7, #1
 8006140:	9017      	str	r0, [sp, #92]	; 0x5c
 8006142:	e7bf      	b.n	80060c4 <_strtod_l+0x154>
 8006144:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006146:	195a      	adds	r2, r3, r5
 8006148:	9217      	str	r2, [sp, #92]	; 0x5c
 800614a:	5d5a      	ldrb	r2, [r3, r5]
 800614c:	2f00      	cmp	r7, #0
 800614e:	d037      	beq.n	80061c0 <_strtod_l+0x250>
 8006150:	9005      	str	r0, [sp, #20]
 8006152:	463d      	mov	r5, r7
 8006154:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006158:	2b09      	cmp	r3, #9
 800615a:	d912      	bls.n	8006182 <_strtod_l+0x212>
 800615c:	2301      	movs	r3, #1
 800615e:	e7c2      	b.n	80060e6 <_strtod_l+0x176>
 8006160:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006162:	1c5a      	adds	r2, r3, #1
 8006164:	9217      	str	r2, [sp, #92]	; 0x5c
 8006166:	785a      	ldrb	r2, [r3, #1]
 8006168:	3001      	adds	r0, #1
 800616a:	2a30      	cmp	r2, #48	; 0x30
 800616c:	d0f8      	beq.n	8006160 <_strtod_l+0x1f0>
 800616e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8006172:	2b08      	cmp	r3, #8
 8006174:	f200 84d9 	bhi.w	8006b2a <_strtod_l+0xbba>
 8006178:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800617a:	9005      	str	r0, [sp, #20]
 800617c:	2000      	movs	r0, #0
 800617e:	9308      	str	r3, [sp, #32]
 8006180:	4605      	mov	r5, r0
 8006182:	3a30      	subs	r2, #48	; 0x30
 8006184:	f100 0301 	add.w	r3, r0, #1
 8006188:	d014      	beq.n	80061b4 <_strtod_l+0x244>
 800618a:	9905      	ldr	r1, [sp, #20]
 800618c:	4419      	add	r1, r3
 800618e:	9105      	str	r1, [sp, #20]
 8006190:	462b      	mov	r3, r5
 8006192:	eb00 0e05 	add.w	lr, r0, r5
 8006196:	210a      	movs	r1, #10
 8006198:	4573      	cmp	r3, lr
 800619a:	d113      	bne.n	80061c4 <_strtod_l+0x254>
 800619c:	182b      	adds	r3, r5, r0
 800619e:	2b08      	cmp	r3, #8
 80061a0:	f105 0501 	add.w	r5, r5, #1
 80061a4:	4405      	add	r5, r0
 80061a6:	dc1c      	bgt.n	80061e2 <_strtod_l+0x272>
 80061a8:	9907      	ldr	r1, [sp, #28]
 80061aa:	230a      	movs	r3, #10
 80061ac:	fb03 2301 	mla	r3, r3, r1, r2
 80061b0:	9307      	str	r3, [sp, #28]
 80061b2:	2300      	movs	r3, #0
 80061b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80061b6:	1c51      	adds	r1, r2, #1
 80061b8:	9117      	str	r1, [sp, #92]	; 0x5c
 80061ba:	7852      	ldrb	r2, [r2, #1]
 80061bc:	4618      	mov	r0, r3
 80061be:	e7c9      	b.n	8006154 <_strtod_l+0x1e4>
 80061c0:	4638      	mov	r0, r7
 80061c2:	e7d2      	b.n	800616a <_strtod_l+0x1fa>
 80061c4:	2b08      	cmp	r3, #8
 80061c6:	dc04      	bgt.n	80061d2 <_strtod_l+0x262>
 80061c8:	9e07      	ldr	r6, [sp, #28]
 80061ca:	434e      	muls	r6, r1
 80061cc:	9607      	str	r6, [sp, #28]
 80061ce:	3301      	adds	r3, #1
 80061d0:	e7e2      	b.n	8006198 <_strtod_l+0x228>
 80061d2:	f103 0c01 	add.w	ip, r3, #1
 80061d6:	f1bc 0f10 	cmp.w	ip, #16
 80061da:	bfd8      	it	le
 80061dc:	fb01 f909 	mulle.w	r9, r1, r9
 80061e0:	e7f5      	b.n	80061ce <_strtod_l+0x25e>
 80061e2:	2d10      	cmp	r5, #16
 80061e4:	bfdc      	itt	le
 80061e6:	230a      	movle	r3, #10
 80061e8:	fb03 2909 	mlale	r9, r3, r9, r2
 80061ec:	e7e1      	b.n	80061b2 <_strtod_l+0x242>
 80061ee:	2300      	movs	r3, #0
 80061f0:	9305      	str	r3, [sp, #20]
 80061f2:	2301      	movs	r3, #1
 80061f4:	e77c      	b.n	80060f0 <_strtod_l+0x180>
 80061f6:	f04f 0c00 	mov.w	ip, #0
 80061fa:	f108 0202 	add.w	r2, r8, #2
 80061fe:	9217      	str	r2, [sp, #92]	; 0x5c
 8006200:	f898 2002 	ldrb.w	r2, [r8, #2]
 8006204:	e785      	b.n	8006112 <_strtod_l+0x1a2>
 8006206:	f04f 0c01 	mov.w	ip, #1
 800620a:	e7f6      	b.n	80061fa <_strtod_l+0x28a>
 800620c:	08009e10 	.word	0x08009e10
 8006210:	08009bc4 	.word	0x08009bc4
 8006214:	7ff00000 	.word	0x7ff00000
 8006218:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800621a:	1c51      	adds	r1, r2, #1
 800621c:	9117      	str	r1, [sp, #92]	; 0x5c
 800621e:	7852      	ldrb	r2, [r2, #1]
 8006220:	2a30      	cmp	r2, #48	; 0x30
 8006222:	d0f9      	beq.n	8006218 <_strtod_l+0x2a8>
 8006224:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006228:	2908      	cmp	r1, #8
 800622a:	f63f af79 	bhi.w	8006120 <_strtod_l+0x1b0>
 800622e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006232:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006234:	9206      	str	r2, [sp, #24]
 8006236:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006238:	1c51      	adds	r1, r2, #1
 800623a:	9117      	str	r1, [sp, #92]	; 0x5c
 800623c:	7852      	ldrb	r2, [r2, #1]
 800623e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8006242:	2e09      	cmp	r6, #9
 8006244:	d937      	bls.n	80062b6 <_strtod_l+0x346>
 8006246:	9e06      	ldr	r6, [sp, #24]
 8006248:	1b89      	subs	r1, r1, r6
 800624a:	2908      	cmp	r1, #8
 800624c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006250:	dc02      	bgt.n	8006258 <_strtod_l+0x2e8>
 8006252:	4576      	cmp	r6, lr
 8006254:	bfa8      	it	ge
 8006256:	4676      	movge	r6, lr
 8006258:	f1bc 0f00 	cmp.w	ip, #0
 800625c:	d000      	beq.n	8006260 <_strtod_l+0x2f0>
 800625e:	4276      	negs	r6, r6
 8006260:	2d00      	cmp	r5, #0
 8006262:	d14d      	bne.n	8006300 <_strtod_l+0x390>
 8006264:	9904      	ldr	r1, [sp, #16]
 8006266:	4301      	orrs	r1, r0
 8006268:	f47f aec6 	bne.w	8005ff8 <_strtod_l+0x88>
 800626c:	2b00      	cmp	r3, #0
 800626e:	f47f aee1 	bne.w	8006034 <_strtod_l+0xc4>
 8006272:	2a69      	cmp	r2, #105	; 0x69
 8006274:	d027      	beq.n	80062c6 <_strtod_l+0x356>
 8006276:	dc24      	bgt.n	80062c2 <_strtod_l+0x352>
 8006278:	2a49      	cmp	r2, #73	; 0x49
 800627a:	d024      	beq.n	80062c6 <_strtod_l+0x356>
 800627c:	2a4e      	cmp	r2, #78	; 0x4e
 800627e:	f47f aed9 	bne.w	8006034 <_strtod_l+0xc4>
 8006282:	499f      	ldr	r1, [pc, #636]	; (8006500 <_strtod_l+0x590>)
 8006284:	a817      	add	r0, sp, #92	; 0x5c
 8006286:	f001 fe3d 	bl	8007f04 <__match>
 800628a:	2800      	cmp	r0, #0
 800628c:	f43f aed2 	beq.w	8006034 <_strtod_l+0xc4>
 8006290:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b28      	cmp	r3, #40	; 0x28
 8006296:	d12d      	bne.n	80062f4 <_strtod_l+0x384>
 8006298:	499a      	ldr	r1, [pc, #616]	; (8006504 <_strtod_l+0x594>)
 800629a:	aa1a      	add	r2, sp, #104	; 0x68
 800629c:	a817      	add	r0, sp, #92	; 0x5c
 800629e:	f001 fe45 	bl	8007f2c <__hexnan>
 80062a2:	2805      	cmp	r0, #5
 80062a4:	d126      	bne.n	80062f4 <_strtod_l+0x384>
 80062a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80062a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80062ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80062b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80062b4:	e6a0      	b.n	8005ff8 <_strtod_l+0x88>
 80062b6:	210a      	movs	r1, #10
 80062b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 80062bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80062c0:	e7b9      	b.n	8006236 <_strtod_l+0x2c6>
 80062c2:	2a6e      	cmp	r2, #110	; 0x6e
 80062c4:	e7db      	b.n	800627e <_strtod_l+0x30e>
 80062c6:	4990      	ldr	r1, [pc, #576]	; (8006508 <_strtod_l+0x598>)
 80062c8:	a817      	add	r0, sp, #92	; 0x5c
 80062ca:	f001 fe1b 	bl	8007f04 <__match>
 80062ce:	2800      	cmp	r0, #0
 80062d0:	f43f aeb0 	beq.w	8006034 <_strtod_l+0xc4>
 80062d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062d6:	498d      	ldr	r1, [pc, #564]	; (800650c <_strtod_l+0x59c>)
 80062d8:	3b01      	subs	r3, #1
 80062da:	a817      	add	r0, sp, #92	; 0x5c
 80062dc:	9317      	str	r3, [sp, #92]	; 0x5c
 80062de:	f001 fe11 	bl	8007f04 <__match>
 80062e2:	b910      	cbnz	r0, 80062ea <_strtod_l+0x37a>
 80062e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80062e6:	3301      	adds	r3, #1
 80062e8:	9317      	str	r3, [sp, #92]	; 0x5c
 80062ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800651c <_strtod_l+0x5ac>
 80062ee:	f04f 0a00 	mov.w	sl, #0
 80062f2:	e681      	b.n	8005ff8 <_strtod_l+0x88>
 80062f4:	4886      	ldr	r0, [pc, #536]	; (8006510 <_strtod_l+0x5a0>)
 80062f6:	f002 fdf7 	bl	8008ee8 <nan>
 80062fa:	ec5b ab10 	vmov	sl, fp, d0
 80062fe:	e67b      	b.n	8005ff8 <_strtod_l+0x88>
 8006300:	9b05      	ldr	r3, [sp, #20]
 8006302:	9807      	ldr	r0, [sp, #28]
 8006304:	1af3      	subs	r3, r6, r3
 8006306:	2f00      	cmp	r7, #0
 8006308:	bf08      	it	eq
 800630a:	462f      	moveq	r7, r5
 800630c:	2d10      	cmp	r5, #16
 800630e:	9306      	str	r3, [sp, #24]
 8006310:	46a8      	mov	r8, r5
 8006312:	bfa8      	it	ge
 8006314:	f04f 0810 	movge.w	r8, #16
 8006318:	f7fa f8f4 	bl	8000504 <__aeabi_ui2d>
 800631c:	2d09      	cmp	r5, #9
 800631e:	4682      	mov	sl, r0
 8006320:	468b      	mov	fp, r1
 8006322:	dd13      	ble.n	800634c <_strtod_l+0x3dc>
 8006324:	4b7b      	ldr	r3, [pc, #492]	; (8006514 <_strtod_l+0x5a4>)
 8006326:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800632a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800632e:	f7fa f963 	bl	80005f8 <__aeabi_dmul>
 8006332:	4682      	mov	sl, r0
 8006334:	4648      	mov	r0, r9
 8006336:	468b      	mov	fp, r1
 8006338:	f7fa f8e4 	bl	8000504 <__aeabi_ui2d>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	4650      	mov	r0, sl
 8006342:	4659      	mov	r1, fp
 8006344:	f7f9 ffa2 	bl	800028c <__adddf3>
 8006348:	4682      	mov	sl, r0
 800634a:	468b      	mov	fp, r1
 800634c:	2d0f      	cmp	r5, #15
 800634e:	dc38      	bgt.n	80063c2 <_strtod_l+0x452>
 8006350:	9b06      	ldr	r3, [sp, #24]
 8006352:	2b00      	cmp	r3, #0
 8006354:	f43f ae50 	beq.w	8005ff8 <_strtod_l+0x88>
 8006358:	dd24      	ble.n	80063a4 <_strtod_l+0x434>
 800635a:	2b16      	cmp	r3, #22
 800635c:	dc0b      	bgt.n	8006376 <_strtod_l+0x406>
 800635e:	496d      	ldr	r1, [pc, #436]	; (8006514 <_strtod_l+0x5a4>)
 8006360:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006368:	4652      	mov	r2, sl
 800636a:	465b      	mov	r3, fp
 800636c:	f7fa f944 	bl	80005f8 <__aeabi_dmul>
 8006370:	4682      	mov	sl, r0
 8006372:	468b      	mov	fp, r1
 8006374:	e640      	b.n	8005ff8 <_strtod_l+0x88>
 8006376:	9a06      	ldr	r2, [sp, #24]
 8006378:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800637c:	4293      	cmp	r3, r2
 800637e:	db20      	blt.n	80063c2 <_strtod_l+0x452>
 8006380:	4c64      	ldr	r4, [pc, #400]	; (8006514 <_strtod_l+0x5a4>)
 8006382:	f1c5 050f 	rsb	r5, r5, #15
 8006386:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800638a:	4652      	mov	r2, sl
 800638c:	465b      	mov	r3, fp
 800638e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006392:	f7fa f931 	bl	80005f8 <__aeabi_dmul>
 8006396:	9b06      	ldr	r3, [sp, #24]
 8006398:	1b5d      	subs	r5, r3, r5
 800639a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800639e:	e9d4 2300 	ldrd	r2, r3, [r4]
 80063a2:	e7e3      	b.n	800636c <_strtod_l+0x3fc>
 80063a4:	9b06      	ldr	r3, [sp, #24]
 80063a6:	3316      	adds	r3, #22
 80063a8:	db0b      	blt.n	80063c2 <_strtod_l+0x452>
 80063aa:	9b05      	ldr	r3, [sp, #20]
 80063ac:	1b9e      	subs	r6, r3, r6
 80063ae:	4b59      	ldr	r3, [pc, #356]	; (8006514 <_strtod_l+0x5a4>)
 80063b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80063b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80063b8:	4650      	mov	r0, sl
 80063ba:	4659      	mov	r1, fp
 80063bc:	f7fa fa46 	bl	800084c <__aeabi_ddiv>
 80063c0:	e7d6      	b.n	8006370 <_strtod_l+0x400>
 80063c2:	9b06      	ldr	r3, [sp, #24]
 80063c4:	eba5 0808 	sub.w	r8, r5, r8
 80063c8:	4498      	add	r8, r3
 80063ca:	f1b8 0f00 	cmp.w	r8, #0
 80063ce:	dd74      	ble.n	80064ba <_strtod_l+0x54a>
 80063d0:	f018 030f 	ands.w	r3, r8, #15
 80063d4:	d00a      	beq.n	80063ec <_strtod_l+0x47c>
 80063d6:	494f      	ldr	r1, [pc, #316]	; (8006514 <_strtod_l+0x5a4>)
 80063d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80063dc:	4652      	mov	r2, sl
 80063de:	465b      	mov	r3, fp
 80063e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063e4:	f7fa f908 	bl	80005f8 <__aeabi_dmul>
 80063e8:	4682      	mov	sl, r0
 80063ea:	468b      	mov	fp, r1
 80063ec:	f038 080f 	bics.w	r8, r8, #15
 80063f0:	d04f      	beq.n	8006492 <_strtod_l+0x522>
 80063f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80063f6:	dd22      	ble.n	800643e <_strtod_l+0x4ce>
 80063f8:	2500      	movs	r5, #0
 80063fa:	462e      	mov	r6, r5
 80063fc:	9507      	str	r5, [sp, #28]
 80063fe:	9505      	str	r5, [sp, #20]
 8006400:	2322      	movs	r3, #34	; 0x22
 8006402:	f8df b118 	ldr.w	fp, [pc, #280]	; 800651c <_strtod_l+0x5ac>
 8006406:	6023      	str	r3, [r4, #0]
 8006408:	f04f 0a00 	mov.w	sl, #0
 800640c:	9b07      	ldr	r3, [sp, #28]
 800640e:	2b00      	cmp	r3, #0
 8006410:	f43f adf2 	beq.w	8005ff8 <_strtod_l+0x88>
 8006414:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006416:	4620      	mov	r0, r4
 8006418:	f001 fe90 	bl	800813c <_Bfree>
 800641c:	9905      	ldr	r1, [sp, #20]
 800641e:	4620      	mov	r0, r4
 8006420:	f001 fe8c 	bl	800813c <_Bfree>
 8006424:	4631      	mov	r1, r6
 8006426:	4620      	mov	r0, r4
 8006428:	f001 fe88 	bl	800813c <_Bfree>
 800642c:	9907      	ldr	r1, [sp, #28]
 800642e:	4620      	mov	r0, r4
 8006430:	f001 fe84 	bl	800813c <_Bfree>
 8006434:	4629      	mov	r1, r5
 8006436:	4620      	mov	r0, r4
 8006438:	f001 fe80 	bl	800813c <_Bfree>
 800643c:	e5dc      	b.n	8005ff8 <_strtod_l+0x88>
 800643e:	4b36      	ldr	r3, [pc, #216]	; (8006518 <_strtod_l+0x5a8>)
 8006440:	9304      	str	r3, [sp, #16]
 8006442:	2300      	movs	r3, #0
 8006444:	ea4f 1828 	mov.w	r8, r8, asr #4
 8006448:	4650      	mov	r0, sl
 800644a:	4659      	mov	r1, fp
 800644c:	4699      	mov	r9, r3
 800644e:	f1b8 0f01 	cmp.w	r8, #1
 8006452:	dc21      	bgt.n	8006498 <_strtod_l+0x528>
 8006454:	b10b      	cbz	r3, 800645a <_strtod_l+0x4ea>
 8006456:	4682      	mov	sl, r0
 8006458:	468b      	mov	fp, r1
 800645a:	4b2f      	ldr	r3, [pc, #188]	; (8006518 <_strtod_l+0x5a8>)
 800645c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006460:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006464:	4652      	mov	r2, sl
 8006466:	465b      	mov	r3, fp
 8006468:	e9d9 0100 	ldrd	r0, r1, [r9]
 800646c:	f7fa f8c4 	bl	80005f8 <__aeabi_dmul>
 8006470:	4b2a      	ldr	r3, [pc, #168]	; (800651c <_strtod_l+0x5ac>)
 8006472:	460a      	mov	r2, r1
 8006474:	400b      	ands	r3, r1
 8006476:	492a      	ldr	r1, [pc, #168]	; (8006520 <_strtod_l+0x5b0>)
 8006478:	428b      	cmp	r3, r1
 800647a:	4682      	mov	sl, r0
 800647c:	d8bc      	bhi.n	80063f8 <_strtod_l+0x488>
 800647e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006482:	428b      	cmp	r3, r1
 8006484:	bf86      	itte	hi
 8006486:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8006524 <_strtod_l+0x5b4>
 800648a:	f04f 3aff 	movhi.w	sl, #4294967295
 800648e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006492:	2300      	movs	r3, #0
 8006494:	9304      	str	r3, [sp, #16]
 8006496:	e084      	b.n	80065a2 <_strtod_l+0x632>
 8006498:	f018 0f01 	tst.w	r8, #1
 800649c:	d005      	beq.n	80064aa <_strtod_l+0x53a>
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f8a8 	bl	80005f8 <__aeabi_dmul>
 80064a8:	2301      	movs	r3, #1
 80064aa:	9a04      	ldr	r2, [sp, #16]
 80064ac:	3208      	adds	r2, #8
 80064ae:	f109 0901 	add.w	r9, r9, #1
 80064b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80064b6:	9204      	str	r2, [sp, #16]
 80064b8:	e7c9      	b.n	800644e <_strtod_l+0x4de>
 80064ba:	d0ea      	beq.n	8006492 <_strtod_l+0x522>
 80064bc:	f1c8 0800 	rsb	r8, r8, #0
 80064c0:	f018 020f 	ands.w	r2, r8, #15
 80064c4:	d00a      	beq.n	80064dc <_strtod_l+0x56c>
 80064c6:	4b13      	ldr	r3, [pc, #76]	; (8006514 <_strtod_l+0x5a4>)
 80064c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064cc:	4650      	mov	r0, sl
 80064ce:	4659      	mov	r1, fp
 80064d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064d4:	f7fa f9ba 	bl	800084c <__aeabi_ddiv>
 80064d8:	4682      	mov	sl, r0
 80064da:	468b      	mov	fp, r1
 80064dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 80064e0:	d0d7      	beq.n	8006492 <_strtod_l+0x522>
 80064e2:	f1b8 0f1f 	cmp.w	r8, #31
 80064e6:	dd1f      	ble.n	8006528 <_strtod_l+0x5b8>
 80064e8:	2500      	movs	r5, #0
 80064ea:	462e      	mov	r6, r5
 80064ec:	9507      	str	r5, [sp, #28]
 80064ee:	9505      	str	r5, [sp, #20]
 80064f0:	2322      	movs	r3, #34	; 0x22
 80064f2:	f04f 0a00 	mov.w	sl, #0
 80064f6:	f04f 0b00 	mov.w	fp, #0
 80064fa:	6023      	str	r3, [r4, #0]
 80064fc:	e786      	b.n	800640c <_strtod_l+0x49c>
 80064fe:	bf00      	nop
 8006500:	08009b95 	.word	0x08009b95
 8006504:	08009bd8 	.word	0x08009bd8
 8006508:	08009b8d 	.word	0x08009b8d
 800650c:	08009d1c 	.word	0x08009d1c
 8006510:	08009fc8 	.word	0x08009fc8
 8006514:	08009ea8 	.word	0x08009ea8
 8006518:	08009e80 	.word	0x08009e80
 800651c:	7ff00000 	.word	0x7ff00000
 8006520:	7ca00000 	.word	0x7ca00000
 8006524:	7fefffff 	.word	0x7fefffff
 8006528:	f018 0310 	ands.w	r3, r8, #16
 800652c:	bf18      	it	ne
 800652e:	236a      	movne	r3, #106	; 0x6a
 8006530:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80068e0 <_strtod_l+0x970>
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	4650      	mov	r0, sl
 8006538:	4659      	mov	r1, fp
 800653a:	2300      	movs	r3, #0
 800653c:	f018 0f01 	tst.w	r8, #1
 8006540:	d004      	beq.n	800654c <_strtod_l+0x5dc>
 8006542:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006546:	f7fa f857 	bl	80005f8 <__aeabi_dmul>
 800654a:	2301      	movs	r3, #1
 800654c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006550:	f109 0908 	add.w	r9, r9, #8
 8006554:	d1f2      	bne.n	800653c <_strtod_l+0x5cc>
 8006556:	b10b      	cbz	r3, 800655c <_strtod_l+0x5ec>
 8006558:	4682      	mov	sl, r0
 800655a:	468b      	mov	fp, r1
 800655c:	9b04      	ldr	r3, [sp, #16]
 800655e:	b1c3      	cbz	r3, 8006592 <_strtod_l+0x622>
 8006560:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006564:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006568:	2b00      	cmp	r3, #0
 800656a:	4659      	mov	r1, fp
 800656c:	dd11      	ble.n	8006592 <_strtod_l+0x622>
 800656e:	2b1f      	cmp	r3, #31
 8006570:	f340 8124 	ble.w	80067bc <_strtod_l+0x84c>
 8006574:	2b34      	cmp	r3, #52	; 0x34
 8006576:	bfde      	ittt	le
 8006578:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800657c:	f04f 33ff 	movle.w	r3, #4294967295
 8006580:	fa03 f202 	lslle.w	r2, r3, r2
 8006584:	f04f 0a00 	mov.w	sl, #0
 8006588:	bfcc      	ite	gt
 800658a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800658e:	ea02 0b01 	andle.w	fp, r2, r1
 8006592:	2200      	movs	r2, #0
 8006594:	2300      	movs	r3, #0
 8006596:	4650      	mov	r0, sl
 8006598:	4659      	mov	r1, fp
 800659a:	f7fa fa95 	bl	8000ac8 <__aeabi_dcmpeq>
 800659e:	2800      	cmp	r0, #0
 80065a0:	d1a2      	bne.n	80064e8 <_strtod_l+0x578>
 80065a2:	9b07      	ldr	r3, [sp, #28]
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	9908      	ldr	r1, [sp, #32]
 80065a8:	462b      	mov	r3, r5
 80065aa:	463a      	mov	r2, r7
 80065ac:	4620      	mov	r0, r4
 80065ae:	f001 fe2d 	bl	800820c <__s2b>
 80065b2:	9007      	str	r0, [sp, #28]
 80065b4:	2800      	cmp	r0, #0
 80065b6:	f43f af1f 	beq.w	80063f8 <_strtod_l+0x488>
 80065ba:	9b05      	ldr	r3, [sp, #20]
 80065bc:	1b9e      	subs	r6, r3, r6
 80065be:	9b06      	ldr	r3, [sp, #24]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	bfb4      	ite	lt
 80065c4:	4633      	movlt	r3, r6
 80065c6:	2300      	movge	r3, #0
 80065c8:	930c      	str	r3, [sp, #48]	; 0x30
 80065ca:	9b06      	ldr	r3, [sp, #24]
 80065cc:	2500      	movs	r5, #0
 80065ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80065d2:	9312      	str	r3, [sp, #72]	; 0x48
 80065d4:	462e      	mov	r6, r5
 80065d6:	9b07      	ldr	r3, [sp, #28]
 80065d8:	4620      	mov	r0, r4
 80065da:	6859      	ldr	r1, [r3, #4]
 80065dc:	f001 fd6e 	bl	80080bc <_Balloc>
 80065e0:	9005      	str	r0, [sp, #20]
 80065e2:	2800      	cmp	r0, #0
 80065e4:	f43f af0c 	beq.w	8006400 <_strtod_l+0x490>
 80065e8:	9b07      	ldr	r3, [sp, #28]
 80065ea:	691a      	ldr	r2, [r3, #16]
 80065ec:	3202      	adds	r2, #2
 80065ee:	f103 010c 	add.w	r1, r3, #12
 80065f2:	0092      	lsls	r2, r2, #2
 80065f4:	300c      	adds	r0, #12
 80065f6:	f001 fd53 	bl	80080a0 <memcpy>
 80065fa:	ec4b ab10 	vmov	d0, sl, fp
 80065fe:	aa1a      	add	r2, sp, #104	; 0x68
 8006600:	a919      	add	r1, sp, #100	; 0x64
 8006602:	4620      	mov	r0, r4
 8006604:	f002 f948 	bl	8008898 <__d2b>
 8006608:	ec4b ab18 	vmov	d8, sl, fp
 800660c:	9018      	str	r0, [sp, #96]	; 0x60
 800660e:	2800      	cmp	r0, #0
 8006610:	f43f aef6 	beq.w	8006400 <_strtod_l+0x490>
 8006614:	2101      	movs	r1, #1
 8006616:	4620      	mov	r0, r4
 8006618:	f001 fe92 	bl	8008340 <__i2b>
 800661c:	4606      	mov	r6, r0
 800661e:	2800      	cmp	r0, #0
 8006620:	f43f aeee 	beq.w	8006400 <_strtod_l+0x490>
 8006624:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006626:	9904      	ldr	r1, [sp, #16]
 8006628:	2b00      	cmp	r3, #0
 800662a:	bfab      	itete	ge
 800662c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800662e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006630:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006632:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006636:	bfac      	ite	ge
 8006638:	eb03 0902 	addge.w	r9, r3, r2
 800663c:	1ad7      	sublt	r7, r2, r3
 800663e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006640:	eba3 0801 	sub.w	r8, r3, r1
 8006644:	4490      	add	r8, r2
 8006646:	4ba1      	ldr	r3, [pc, #644]	; (80068cc <_strtod_l+0x95c>)
 8006648:	f108 38ff 	add.w	r8, r8, #4294967295
 800664c:	4598      	cmp	r8, r3
 800664e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006652:	f280 80c7 	bge.w	80067e4 <_strtod_l+0x874>
 8006656:	eba3 0308 	sub.w	r3, r3, r8
 800665a:	2b1f      	cmp	r3, #31
 800665c:	eba2 0203 	sub.w	r2, r2, r3
 8006660:	f04f 0101 	mov.w	r1, #1
 8006664:	f300 80b1 	bgt.w	80067ca <_strtod_l+0x85a>
 8006668:	fa01 f303 	lsl.w	r3, r1, r3
 800666c:	930d      	str	r3, [sp, #52]	; 0x34
 800666e:	2300      	movs	r3, #0
 8006670:	9308      	str	r3, [sp, #32]
 8006672:	eb09 0802 	add.w	r8, r9, r2
 8006676:	9b04      	ldr	r3, [sp, #16]
 8006678:	45c1      	cmp	r9, r8
 800667a:	4417      	add	r7, r2
 800667c:	441f      	add	r7, r3
 800667e:	464b      	mov	r3, r9
 8006680:	bfa8      	it	ge
 8006682:	4643      	movge	r3, r8
 8006684:	42bb      	cmp	r3, r7
 8006686:	bfa8      	it	ge
 8006688:	463b      	movge	r3, r7
 800668a:	2b00      	cmp	r3, #0
 800668c:	bfc2      	ittt	gt
 800668e:	eba8 0803 	subgt.w	r8, r8, r3
 8006692:	1aff      	subgt	r7, r7, r3
 8006694:	eba9 0903 	subgt.w	r9, r9, r3
 8006698:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800669a:	2b00      	cmp	r3, #0
 800669c:	dd17      	ble.n	80066ce <_strtod_l+0x75e>
 800669e:	4631      	mov	r1, r6
 80066a0:	461a      	mov	r2, r3
 80066a2:	4620      	mov	r0, r4
 80066a4:	f001 ff0c 	bl	80084c0 <__pow5mult>
 80066a8:	4606      	mov	r6, r0
 80066aa:	2800      	cmp	r0, #0
 80066ac:	f43f aea8 	beq.w	8006400 <_strtod_l+0x490>
 80066b0:	4601      	mov	r1, r0
 80066b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80066b4:	4620      	mov	r0, r4
 80066b6:	f001 fe59 	bl	800836c <__multiply>
 80066ba:	900b      	str	r0, [sp, #44]	; 0x2c
 80066bc:	2800      	cmp	r0, #0
 80066be:	f43f ae9f 	beq.w	8006400 <_strtod_l+0x490>
 80066c2:	9918      	ldr	r1, [sp, #96]	; 0x60
 80066c4:	4620      	mov	r0, r4
 80066c6:	f001 fd39 	bl	800813c <_Bfree>
 80066ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066cc:	9318      	str	r3, [sp, #96]	; 0x60
 80066ce:	f1b8 0f00 	cmp.w	r8, #0
 80066d2:	f300 808c 	bgt.w	80067ee <_strtod_l+0x87e>
 80066d6:	9b06      	ldr	r3, [sp, #24]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	dd08      	ble.n	80066ee <_strtod_l+0x77e>
 80066dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80066de:	9905      	ldr	r1, [sp, #20]
 80066e0:	4620      	mov	r0, r4
 80066e2:	f001 feed 	bl	80084c0 <__pow5mult>
 80066e6:	9005      	str	r0, [sp, #20]
 80066e8:	2800      	cmp	r0, #0
 80066ea:	f43f ae89 	beq.w	8006400 <_strtod_l+0x490>
 80066ee:	2f00      	cmp	r7, #0
 80066f0:	dd08      	ble.n	8006704 <_strtod_l+0x794>
 80066f2:	9905      	ldr	r1, [sp, #20]
 80066f4:	463a      	mov	r2, r7
 80066f6:	4620      	mov	r0, r4
 80066f8:	f001 ff3c 	bl	8008574 <__lshift>
 80066fc:	9005      	str	r0, [sp, #20]
 80066fe:	2800      	cmp	r0, #0
 8006700:	f43f ae7e 	beq.w	8006400 <_strtod_l+0x490>
 8006704:	f1b9 0f00 	cmp.w	r9, #0
 8006708:	dd08      	ble.n	800671c <_strtod_l+0x7ac>
 800670a:	4631      	mov	r1, r6
 800670c:	464a      	mov	r2, r9
 800670e:	4620      	mov	r0, r4
 8006710:	f001 ff30 	bl	8008574 <__lshift>
 8006714:	4606      	mov	r6, r0
 8006716:	2800      	cmp	r0, #0
 8006718:	f43f ae72 	beq.w	8006400 <_strtod_l+0x490>
 800671c:	9a05      	ldr	r2, [sp, #20]
 800671e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006720:	4620      	mov	r0, r4
 8006722:	f001 ffb3 	bl	800868c <__mdiff>
 8006726:	4605      	mov	r5, r0
 8006728:	2800      	cmp	r0, #0
 800672a:	f43f ae69 	beq.w	8006400 <_strtod_l+0x490>
 800672e:	68c3      	ldr	r3, [r0, #12]
 8006730:	930b      	str	r3, [sp, #44]	; 0x2c
 8006732:	2300      	movs	r3, #0
 8006734:	60c3      	str	r3, [r0, #12]
 8006736:	4631      	mov	r1, r6
 8006738:	f001 ff8c 	bl	8008654 <__mcmp>
 800673c:	2800      	cmp	r0, #0
 800673e:	da60      	bge.n	8006802 <_strtod_l+0x892>
 8006740:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006742:	ea53 030a 	orrs.w	r3, r3, sl
 8006746:	f040 8082 	bne.w	800684e <_strtod_l+0x8de>
 800674a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800674e:	2b00      	cmp	r3, #0
 8006750:	d17d      	bne.n	800684e <_strtod_l+0x8de>
 8006752:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006756:	0d1b      	lsrs	r3, r3, #20
 8006758:	051b      	lsls	r3, r3, #20
 800675a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800675e:	d976      	bls.n	800684e <_strtod_l+0x8de>
 8006760:	696b      	ldr	r3, [r5, #20]
 8006762:	b913      	cbnz	r3, 800676a <_strtod_l+0x7fa>
 8006764:	692b      	ldr	r3, [r5, #16]
 8006766:	2b01      	cmp	r3, #1
 8006768:	dd71      	ble.n	800684e <_strtod_l+0x8de>
 800676a:	4629      	mov	r1, r5
 800676c:	2201      	movs	r2, #1
 800676e:	4620      	mov	r0, r4
 8006770:	f001 ff00 	bl	8008574 <__lshift>
 8006774:	4631      	mov	r1, r6
 8006776:	4605      	mov	r5, r0
 8006778:	f001 ff6c 	bl	8008654 <__mcmp>
 800677c:	2800      	cmp	r0, #0
 800677e:	dd66      	ble.n	800684e <_strtod_l+0x8de>
 8006780:	9904      	ldr	r1, [sp, #16]
 8006782:	4a53      	ldr	r2, [pc, #332]	; (80068d0 <_strtod_l+0x960>)
 8006784:	465b      	mov	r3, fp
 8006786:	2900      	cmp	r1, #0
 8006788:	f000 8081 	beq.w	800688e <_strtod_l+0x91e>
 800678c:	ea02 010b 	and.w	r1, r2, fp
 8006790:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006794:	dc7b      	bgt.n	800688e <_strtod_l+0x91e>
 8006796:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800679a:	f77f aea9 	ble.w	80064f0 <_strtod_l+0x580>
 800679e:	4b4d      	ldr	r3, [pc, #308]	; (80068d4 <_strtod_l+0x964>)
 80067a0:	4650      	mov	r0, sl
 80067a2:	4659      	mov	r1, fp
 80067a4:	2200      	movs	r2, #0
 80067a6:	f7f9 ff27 	bl	80005f8 <__aeabi_dmul>
 80067aa:	460b      	mov	r3, r1
 80067ac:	4303      	orrs	r3, r0
 80067ae:	bf08      	it	eq
 80067b0:	2322      	moveq	r3, #34	; 0x22
 80067b2:	4682      	mov	sl, r0
 80067b4:	468b      	mov	fp, r1
 80067b6:	bf08      	it	eq
 80067b8:	6023      	streq	r3, [r4, #0]
 80067ba:	e62b      	b.n	8006414 <_strtod_l+0x4a4>
 80067bc:	f04f 32ff 	mov.w	r2, #4294967295
 80067c0:	fa02 f303 	lsl.w	r3, r2, r3
 80067c4:	ea03 0a0a 	and.w	sl, r3, sl
 80067c8:	e6e3      	b.n	8006592 <_strtod_l+0x622>
 80067ca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80067ce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80067d2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80067d6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80067da:	fa01 f308 	lsl.w	r3, r1, r8
 80067de:	9308      	str	r3, [sp, #32]
 80067e0:	910d      	str	r1, [sp, #52]	; 0x34
 80067e2:	e746      	b.n	8006672 <_strtod_l+0x702>
 80067e4:	2300      	movs	r3, #0
 80067e6:	9308      	str	r3, [sp, #32]
 80067e8:	2301      	movs	r3, #1
 80067ea:	930d      	str	r3, [sp, #52]	; 0x34
 80067ec:	e741      	b.n	8006672 <_strtod_l+0x702>
 80067ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 80067f0:	4642      	mov	r2, r8
 80067f2:	4620      	mov	r0, r4
 80067f4:	f001 febe 	bl	8008574 <__lshift>
 80067f8:	9018      	str	r0, [sp, #96]	; 0x60
 80067fa:	2800      	cmp	r0, #0
 80067fc:	f47f af6b 	bne.w	80066d6 <_strtod_l+0x766>
 8006800:	e5fe      	b.n	8006400 <_strtod_l+0x490>
 8006802:	465f      	mov	r7, fp
 8006804:	d16e      	bne.n	80068e4 <_strtod_l+0x974>
 8006806:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006808:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800680c:	b342      	cbz	r2, 8006860 <_strtod_l+0x8f0>
 800680e:	4a32      	ldr	r2, [pc, #200]	; (80068d8 <_strtod_l+0x968>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d128      	bne.n	8006866 <_strtod_l+0x8f6>
 8006814:	9b04      	ldr	r3, [sp, #16]
 8006816:	4651      	mov	r1, sl
 8006818:	b1eb      	cbz	r3, 8006856 <_strtod_l+0x8e6>
 800681a:	4b2d      	ldr	r3, [pc, #180]	; (80068d0 <_strtod_l+0x960>)
 800681c:	403b      	ands	r3, r7
 800681e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006822:	f04f 32ff 	mov.w	r2, #4294967295
 8006826:	d819      	bhi.n	800685c <_strtod_l+0x8ec>
 8006828:	0d1b      	lsrs	r3, r3, #20
 800682a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800682e:	fa02 f303 	lsl.w	r3, r2, r3
 8006832:	4299      	cmp	r1, r3
 8006834:	d117      	bne.n	8006866 <_strtod_l+0x8f6>
 8006836:	4b29      	ldr	r3, [pc, #164]	; (80068dc <_strtod_l+0x96c>)
 8006838:	429f      	cmp	r7, r3
 800683a:	d102      	bne.n	8006842 <_strtod_l+0x8d2>
 800683c:	3101      	adds	r1, #1
 800683e:	f43f addf 	beq.w	8006400 <_strtod_l+0x490>
 8006842:	4b23      	ldr	r3, [pc, #140]	; (80068d0 <_strtod_l+0x960>)
 8006844:	403b      	ands	r3, r7
 8006846:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800684a:	f04f 0a00 	mov.w	sl, #0
 800684e:	9b04      	ldr	r3, [sp, #16]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1a4      	bne.n	800679e <_strtod_l+0x82e>
 8006854:	e5de      	b.n	8006414 <_strtod_l+0x4a4>
 8006856:	f04f 33ff 	mov.w	r3, #4294967295
 800685a:	e7ea      	b.n	8006832 <_strtod_l+0x8c2>
 800685c:	4613      	mov	r3, r2
 800685e:	e7e8      	b.n	8006832 <_strtod_l+0x8c2>
 8006860:	ea53 030a 	orrs.w	r3, r3, sl
 8006864:	d08c      	beq.n	8006780 <_strtod_l+0x810>
 8006866:	9b08      	ldr	r3, [sp, #32]
 8006868:	b1db      	cbz	r3, 80068a2 <_strtod_l+0x932>
 800686a:	423b      	tst	r3, r7
 800686c:	d0ef      	beq.n	800684e <_strtod_l+0x8de>
 800686e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006870:	9a04      	ldr	r2, [sp, #16]
 8006872:	4650      	mov	r0, sl
 8006874:	4659      	mov	r1, fp
 8006876:	b1c3      	cbz	r3, 80068aa <_strtod_l+0x93a>
 8006878:	f7ff fb5c 	bl	8005f34 <sulp>
 800687c:	4602      	mov	r2, r0
 800687e:	460b      	mov	r3, r1
 8006880:	ec51 0b18 	vmov	r0, r1, d8
 8006884:	f7f9 fd02 	bl	800028c <__adddf3>
 8006888:	4682      	mov	sl, r0
 800688a:	468b      	mov	fp, r1
 800688c:	e7df      	b.n	800684e <_strtod_l+0x8de>
 800688e:	4013      	ands	r3, r2
 8006890:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006894:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006898:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800689c:	f04f 3aff 	mov.w	sl, #4294967295
 80068a0:	e7d5      	b.n	800684e <_strtod_l+0x8de>
 80068a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068a4:	ea13 0f0a 	tst.w	r3, sl
 80068a8:	e7e0      	b.n	800686c <_strtod_l+0x8fc>
 80068aa:	f7ff fb43 	bl	8005f34 <sulp>
 80068ae:	4602      	mov	r2, r0
 80068b0:	460b      	mov	r3, r1
 80068b2:	ec51 0b18 	vmov	r0, r1, d8
 80068b6:	f7f9 fce7 	bl	8000288 <__aeabi_dsub>
 80068ba:	2200      	movs	r2, #0
 80068bc:	2300      	movs	r3, #0
 80068be:	4682      	mov	sl, r0
 80068c0:	468b      	mov	fp, r1
 80068c2:	f7fa f901 	bl	8000ac8 <__aeabi_dcmpeq>
 80068c6:	2800      	cmp	r0, #0
 80068c8:	d0c1      	beq.n	800684e <_strtod_l+0x8de>
 80068ca:	e611      	b.n	80064f0 <_strtod_l+0x580>
 80068cc:	fffffc02 	.word	0xfffffc02
 80068d0:	7ff00000 	.word	0x7ff00000
 80068d4:	39500000 	.word	0x39500000
 80068d8:	000fffff 	.word	0x000fffff
 80068dc:	7fefffff 	.word	0x7fefffff
 80068e0:	08009bf0 	.word	0x08009bf0
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	f002 f832 	bl	8008950 <__ratio>
 80068ec:	ec59 8b10 	vmov	r8, r9, d0
 80068f0:	ee10 0a10 	vmov	r0, s0
 80068f4:	2200      	movs	r2, #0
 80068f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80068fa:	4649      	mov	r1, r9
 80068fc:	f7fa f8f8 	bl	8000af0 <__aeabi_dcmple>
 8006900:	2800      	cmp	r0, #0
 8006902:	d07a      	beq.n	80069fa <_strtod_l+0xa8a>
 8006904:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006906:	2b00      	cmp	r3, #0
 8006908:	d04a      	beq.n	80069a0 <_strtod_l+0xa30>
 800690a:	4b95      	ldr	r3, [pc, #596]	; (8006b60 <_strtod_l+0xbf0>)
 800690c:	2200      	movs	r2, #0
 800690e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006912:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006b60 <_strtod_l+0xbf0>
 8006916:	f04f 0800 	mov.w	r8, #0
 800691a:	4b92      	ldr	r3, [pc, #584]	; (8006b64 <_strtod_l+0xbf4>)
 800691c:	403b      	ands	r3, r7
 800691e:	930d      	str	r3, [sp, #52]	; 0x34
 8006920:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006922:	4b91      	ldr	r3, [pc, #580]	; (8006b68 <_strtod_l+0xbf8>)
 8006924:	429a      	cmp	r2, r3
 8006926:	f040 80b0 	bne.w	8006a8a <_strtod_l+0xb1a>
 800692a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800692e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006932:	ec4b ab10 	vmov	d0, sl, fp
 8006936:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800693a:	f001 ff31 	bl	80087a0 <__ulp>
 800693e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006942:	ec53 2b10 	vmov	r2, r3, d0
 8006946:	f7f9 fe57 	bl	80005f8 <__aeabi_dmul>
 800694a:	4652      	mov	r2, sl
 800694c:	465b      	mov	r3, fp
 800694e:	f7f9 fc9d 	bl	800028c <__adddf3>
 8006952:	460b      	mov	r3, r1
 8006954:	4983      	ldr	r1, [pc, #524]	; (8006b64 <_strtod_l+0xbf4>)
 8006956:	4a85      	ldr	r2, [pc, #532]	; (8006b6c <_strtod_l+0xbfc>)
 8006958:	4019      	ands	r1, r3
 800695a:	4291      	cmp	r1, r2
 800695c:	4682      	mov	sl, r0
 800695e:	d960      	bls.n	8006a22 <_strtod_l+0xab2>
 8006960:	ee18 3a90 	vmov	r3, s17
 8006964:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006968:	4293      	cmp	r3, r2
 800696a:	d104      	bne.n	8006976 <_strtod_l+0xa06>
 800696c:	ee18 3a10 	vmov	r3, s16
 8006970:	3301      	adds	r3, #1
 8006972:	f43f ad45 	beq.w	8006400 <_strtod_l+0x490>
 8006976:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006b78 <_strtod_l+0xc08>
 800697a:	f04f 3aff 	mov.w	sl, #4294967295
 800697e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006980:	4620      	mov	r0, r4
 8006982:	f001 fbdb 	bl	800813c <_Bfree>
 8006986:	9905      	ldr	r1, [sp, #20]
 8006988:	4620      	mov	r0, r4
 800698a:	f001 fbd7 	bl	800813c <_Bfree>
 800698e:	4631      	mov	r1, r6
 8006990:	4620      	mov	r0, r4
 8006992:	f001 fbd3 	bl	800813c <_Bfree>
 8006996:	4629      	mov	r1, r5
 8006998:	4620      	mov	r0, r4
 800699a:	f001 fbcf 	bl	800813c <_Bfree>
 800699e:	e61a      	b.n	80065d6 <_strtod_l+0x666>
 80069a0:	f1ba 0f00 	cmp.w	sl, #0
 80069a4:	d11b      	bne.n	80069de <_strtod_l+0xa6e>
 80069a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80069aa:	b9f3      	cbnz	r3, 80069ea <_strtod_l+0xa7a>
 80069ac:	4b6c      	ldr	r3, [pc, #432]	; (8006b60 <_strtod_l+0xbf0>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	4640      	mov	r0, r8
 80069b2:	4649      	mov	r1, r9
 80069b4:	f7fa f892 	bl	8000adc <__aeabi_dcmplt>
 80069b8:	b9d0      	cbnz	r0, 80069f0 <_strtod_l+0xa80>
 80069ba:	4640      	mov	r0, r8
 80069bc:	4649      	mov	r1, r9
 80069be:	4b6c      	ldr	r3, [pc, #432]	; (8006b70 <_strtod_l+0xc00>)
 80069c0:	2200      	movs	r2, #0
 80069c2:	f7f9 fe19 	bl	80005f8 <__aeabi_dmul>
 80069c6:	4680      	mov	r8, r0
 80069c8:	4689      	mov	r9, r1
 80069ca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80069ce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80069d2:	9315      	str	r3, [sp, #84]	; 0x54
 80069d4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80069d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80069dc:	e79d      	b.n	800691a <_strtod_l+0x9aa>
 80069de:	f1ba 0f01 	cmp.w	sl, #1
 80069e2:	d102      	bne.n	80069ea <_strtod_l+0xa7a>
 80069e4:	2f00      	cmp	r7, #0
 80069e6:	f43f ad83 	beq.w	80064f0 <_strtod_l+0x580>
 80069ea:	4b62      	ldr	r3, [pc, #392]	; (8006b74 <_strtod_l+0xc04>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	e78e      	b.n	800690e <_strtod_l+0x99e>
 80069f0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006b70 <_strtod_l+0xc00>
 80069f4:	f04f 0800 	mov.w	r8, #0
 80069f8:	e7e7      	b.n	80069ca <_strtod_l+0xa5a>
 80069fa:	4b5d      	ldr	r3, [pc, #372]	; (8006b70 <_strtod_l+0xc00>)
 80069fc:	4640      	mov	r0, r8
 80069fe:	4649      	mov	r1, r9
 8006a00:	2200      	movs	r2, #0
 8006a02:	f7f9 fdf9 	bl	80005f8 <__aeabi_dmul>
 8006a06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a08:	4680      	mov	r8, r0
 8006a0a:	4689      	mov	r9, r1
 8006a0c:	b933      	cbnz	r3, 8006a1c <_strtod_l+0xaac>
 8006a0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a12:	900e      	str	r0, [sp, #56]	; 0x38
 8006a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006a1a:	e7dd      	b.n	80069d8 <_strtod_l+0xa68>
 8006a1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006a20:	e7f9      	b.n	8006a16 <_strtod_l+0xaa6>
 8006a22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006a26:	9b04      	ldr	r3, [sp, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1a8      	bne.n	800697e <_strtod_l+0xa0e>
 8006a2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006a32:	0d1b      	lsrs	r3, r3, #20
 8006a34:	051b      	lsls	r3, r3, #20
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d1a1      	bne.n	800697e <_strtod_l+0xa0e>
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	4649      	mov	r1, r9
 8006a3e:	f7fa f93b 	bl	8000cb8 <__aeabi_d2lz>
 8006a42:	f7f9 fdab 	bl	800059c <__aeabi_l2d>
 8006a46:	4602      	mov	r2, r0
 8006a48:	460b      	mov	r3, r1
 8006a4a:	4640      	mov	r0, r8
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	f7f9 fc1b 	bl	8000288 <__aeabi_dsub>
 8006a52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006a54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a58:	ea43 030a 	orr.w	r3, r3, sl
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	4680      	mov	r8, r0
 8006a60:	4689      	mov	r9, r1
 8006a62:	d055      	beq.n	8006b10 <_strtod_l+0xba0>
 8006a64:	a336      	add	r3, pc, #216	; (adr r3, 8006b40 <_strtod_l+0xbd0>)
 8006a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a6a:	f7fa f837 	bl	8000adc <__aeabi_dcmplt>
 8006a6e:	2800      	cmp	r0, #0
 8006a70:	f47f acd0 	bne.w	8006414 <_strtod_l+0x4a4>
 8006a74:	a334      	add	r3, pc, #208	; (adr r3, 8006b48 <_strtod_l+0xbd8>)
 8006a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a7a:	4640      	mov	r0, r8
 8006a7c:	4649      	mov	r1, r9
 8006a7e:	f7fa f84b 	bl	8000b18 <__aeabi_dcmpgt>
 8006a82:	2800      	cmp	r0, #0
 8006a84:	f43f af7b 	beq.w	800697e <_strtod_l+0xa0e>
 8006a88:	e4c4      	b.n	8006414 <_strtod_l+0x4a4>
 8006a8a:	9b04      	ldr	r3, [sp, #16]
 8006a8c:	b333      	cbz	r3, 8006adc <_strtod_l+0xb6c>
 8006a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006a94:	d822      	bhi.n	8006adc <_strtod_l+0xb6c>
 8006a96:	a32e      	add	r3, pc, #184	; (adr r3, 8006b50 <_strtod_l+0xbe0>)
 8006a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a9c:	4640      	mov	r0, r8
 8006a9e:	4649      	mov	r1, r9
 8006aa0:	f7fa f826 	bl	8000af0 <__aeabi_dcmple>
 8006aa4:	b1a0      	cbz	r0, 8006ad0 <_strtod_l+0xb60>
 8006aa6:	4649      	mov	r1, r9
 8006aa8:	4640      	mov	r0, r8
 8006aaa:	f7fa f87d 	bl	8000ba8 <__aeabi_d2uiz>
 8006aae:	2801      	cmp	r0, #1
 8006ab0:	bf38      	it	cc
 8006ab2:	2001      	movcc	r0, #1
 8006ab4:	f7f9 fd26 	bl	8000504 <__aeabi_ui2d>
 8006ab8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006aba:	4680      	mov	r8, r0
 8006abc:	4689      	mov	r9, r1
 8006abe:	bb23      	cbnz	r3, 8006b0a <_strtod_l+0xb9a>
 8006ac0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ac4:	9010      	str	r0, [sp, #64]	; 0x40
 8006ac6:	9311      	str	r3, [sp, #68]	; 0x44
 8006ac8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006acc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006ad0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ad2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006ad4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006ad8:	1a9b      	subs	r3, r3, r2
 8006ada:	9309      	str	r3, [sp, #36]	; 0x24
 8006adc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8006ae4:	eef0 0a68 	vmov.f32	s1, s17
 8006ae8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006aec:	f001 fe58 	bl	80087a0 <__ulp>
 8006af0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006af4:	ec53 2b10 	vmov	r2, r3, d0
 8006af8:	f7f9 fd7e 	bl	80005f8 <__aeabi_dmul>
 8006afc:	ec53 2b18 	vmov	r2, r3, d8
 8006b00:	f7f9 fbc4 	bl	800028c <__adddf3>
 8006b04:	4682      	mov	sl, r0
 8006b06:	468b      	mov	fp, r1
 8006b08:	e78d      	b.n	8006a26 <_strtod_l+0xab6>
 8006b0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8006b0e:	e7db      	b.n	8006ac8 <_strtod_l+0xb58>
 8006b10:	a311      	add	r3, pc, #68	; (adr r3, 8006b58 <_strtod_l+0xbe8>)
 8006b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b16:	f7f9 ffe1 	bl	8000adc <__aeabi_dcmplt>
 8006b1a:	e7b2      	b.n	8006a82 <_strtod_l+0xb12>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8006b20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	f7ff ba6b 	b.w	8006000 <_strtod_l+0x90>
 8006b2a:	2a65      	cmp	r2, #101	; 0x65
 8006b2c:	f43f ab5f 	beq.w	80061ee <_strtod_l+0x27e>
 8006b30:	2a45      	cmp	r2, #69	; 0x45
 8006b32:	f43f ab5c 	beq.w	80061ee <_strtod_l+0x27e>
 8006b36:	2301      	movs	r3, #1
 8006b38:	f7ff bb94 	b.w	8006264 <_strtod_l+0x2f4>
 8006b3c:	f3af 8000 	nop.w
 8006b40:	94a03595 	.word	0x94a03595
 8006b44:	3fdfffff 	.word	0x3fdfffff
 8006b48:	35afe535 	.word	0x35afe535
 8006b4c:	3fe00000 	.word	0x3fe00000
 8006b50:	ffc00000 	.word	0xffc00000
 8006b54:	41dfffff 	.word	0x41dfffff
 8006b58:	94a03595 	.word	0x94a03595
 8006b5c:	3fcfffff 	.word	0x3fcfffff
 8006b60:	3ff00000 	.word	0x3ff00000
 8006b64:	7ff00000 	.word	0x7ff00000
 8006b68:	7fe00000 	.word	0x7fe00000
 8006b6c:	7c9fffff 	.word	0x7c9fffff
 8006b70:	3fe00000 	.word	0x3fe00000
 8006b74:	bff00000 	.word	0xbff00000
 8006b78:	7fefffff 	.word	0x7fefffff

08006b7c <_strtod_r>:
 8006b7c:	4b01      	ldr	r3, [pc, #4]	; (8006b84 <_strtod_r+0x8>)
 8006b7e:	f7ff b9f7 	b.w	8005f70 <_strtod_l>
 8006b82:	bf00      	nop
 8006b84:	20000080 	.word	0x20000080

08006b88 <_strtol_l.constprop.0>:
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b8e:	d001      	beq.n	8006b94 <_strtol_l.constprop.0+0xc>
 8006b90:	2b24      	cmp	r3, #36	; 0x24
 8006b92:	d906      	bls.n	8006ba2 <_strtol_l.constprop.0+0x1a>
 8006b94:	f7fe fafc 	bl	8005190 <__errno>
 8006b98:	2316      	movs	r3, #22
 8006b9a:	6003      	str	r3, [r0, #0]
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006c88 <_strtol_l.constprop.0+0x100>
 8006ba6:	460d      	mov	r5, r1
 8006ba8:	462e      	mov	r6, r5
 8006baa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006bae:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006bb2:	f017 0708 	ands.w	r7, r7, #8
 8006bb6:	d1f7      	bne.n	8006ba8 <_strtol_l.constprop.0+0x20>
 8006bb8:	2c2d      	cmp	r4, #45	; 0x2d
 8006bba:	d132      	bne.n	8006c22 <_strtol_l.constprop.0+0x9a>
 8006bbc:	782c      	ldrb	r4, [r5, #0]
 8006bbe:	2701      	movs	r7, #1
 8006bc0:	1cb5      	adds	r5, r6, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d05b      	beq.n	8006c7e <_strtol_l.constprop.0+0xf6>
 8006bc6:	2b10      	cmp	r3, #16
 8006bc8:	d109      	bne.n	8006bde <_strtol_l.constprop.0+0x56>
 8006bca:	2c30      	cmp	r4, #48	; 0x30
 8006bcc:	d107      	bne.n	8006bde <_strtol_l.constprop.0+0x56>
 8006bce:	782c      	ldrb	r4, [r5, #0]
 8006bd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006bd4:	2c58      	cmp	r4, #88	; 0x58
 8006bd6:	d14d      	bne.n	8006c74 <_strtol_l.constprop.0+0xec>
 8006bd8:	786c      	ldrb	r4, [r5, #1]
 8006bda:	2310      	movs	r3, #16
 8006bdc:	3502      	adds	r5, #2
 8006bde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006be2:	f108 38ff 	add.w	r8, r8, #4294967295
 8006be6:	f04f 0c00 	mov.w	ip, #0
 8006bea:	fbb8 f9f3 	udiv	r9, r8, r3
 8006bee:	4666      	mov	r6, ip
 8006bf0:	fb03 8a19 	mls	sl, r3, r9, r8
 8006bf4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006bf8:	f1be 0f09 	cmp.w	lr, #9
 8006bfc:	d816      	bhi.n	8006c2c <_strtol_l.constprop.0+0xa4>
 8006bfe:	4674      	mov	r4, lr
 8006c00:	42a3      	cmp	r3, r4
 8006c02:	dd24      	ble.n	8006c4e <_strtol_l.constprop.0+0xc6>
 8006c04:	f1bc 0f00 	cmp.w	ip, #0
 8006c08:	db1e      	blt.n	8006c48 <_strtol_l.constprop.0+0xc0>
 8006c0a:	45b1      	cmp	r9, r6
 8006c0c:	d31c      	bcc.n	8006c48 <_strtol_l.constprop.0+0xc0>
 8006c0e:	d101      	bne.n	8006c14 <_strtol_l.constprop.0+0x8c>
 8006c10:	45a2      	cmp	sl, r4
 8006c12:	db19      	blt.n	8006c48 <_strtol_l.constprop.0+0xc0>
 8006c14:	fb06 4603 	mla	r6, r6, r3, r4
 8006c18:	f04f 0c01 	mov.w	ip, #1
 8006c1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006c20:	e7e8      	b.n	8006bf4 <_strtol_l.constprop.0+0x6c>
 8006c22:	2c2b      	cmp	r4, #43	; 0x2b
 8006c24:	bf04      	itt	eq
 8006c26:	782c      	ldrbeq	r4, [r5, #0]
 8006c28:	1cb5      	addeq	r5, r6, #2
 8006c2a:	e7ca      	b.n	8006bc2 <_strtol_l.constprop.0+0x3a>
 8006c2c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006c30:	f1be 0f19 	cmp.w	lr, #25
 8006c34:	d801      	bhi.n	8006c3a <_strtol_l.constprop.0+0xb2>
 8006c36:	3c37      	subs	r4, #55	; 0x37
 8006c38:	e7e2      	b.n	8006c00 <_strtol_l.constprop.0+0x78>
 8006c3a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006c3e:	f1be 0f19 	cmp.w	lr, #25
 8006c42:	d804      	bhi.n	8006c4e <_strtol_l.constprop.0+0xc6>
 8006c44:	3c57      	subs	r4, #87	; 0x57
 8006c46:	e7db      	b.n	8006c00 <_strtol_l.constprop.0+0x78>
 8006c48:	f04f 3cff 	mov.w	ip, #4294967295
 8006c4c:	e7e6      	b.n	8006c1c <_strtol_l.constprop.0+0x94>
 8006c4e:	f1bc 0f00 	cmp.w	ip, #0
 8006c52:	da05      	bge.n	8006c60 <_strtol_l.constprop.0+0xd8>
 8006c54:	2322      	movs	r3, #34	; 0x22
 8006c56:	6003      	str	r3, [r0, #0]
 8006c58:	4646      	mov	r6, r8
 8006c5a:	b942      	cbnz	r2, 8006c6e <_strtol_l.constprop.0+0xe6>
 8006c5c:	4630      	mov	r0, r6
 8006c5e:	e79e      	b.n	8006b9e <_strtol_l.constprop.0+0x16>
 8006c60:	b107      	cbz	r7, 8006c64 <_strtol_l.constprop.0+0xdc>
 8006c62:	4276      	negs	r6, r6
 8006c64:	2a00      	cmp	r2, #0
 8006c66:	d0f9      	beq.n	8006c5c <_strtol_l.constprop.0+0xd4>
 8006c68:	f1bc 0f00 	cmp.w	ip, #0
 8006c6c:	d000      	beq.n	8006c70 <_strtol_l.constprop.0+0xe8>
 8006c6e:	1e69      	subs	r1, r5, #1
 8006c70:	6011      	str	r1, [r2, #0]
 8006c72:	e7f3      	b.n	8006c5c <_strtol_l.constprop.0+0xd4>
 8006c74:	2430      	movs	r4, #48	; 0x30
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d1b1      	bne.n	8006bde <_strtol_l.constprop.0+0x56>
 8006c7a:	2308      	movs	r3, #8
 8006c7c:	e7af      	b.n	8006bde <_strtol_l.constprop.0+0x56>
 8006c7e:	2c30      	cmp	r4, #48	; 0x30
 8006c80:	d0a5      	beq.n	8006bce <_strtol_l.constprop.0+0x46>
 8006c82:	230a      	movs	r3, #10
 8006c84:	e7ab      	b.n	8006bde <_strtol_l.constprop.0+0x56>
 8006c86:	bf00      	nop
 8006c88:	08009c19 	.word	0x08009c19

08006c8c <_strtol_r>:
 8006c8c:	f7ff bf7c 	b.w	8006b88 <_strtol_l.constprop.0>

08006c90 <quorem>:
 8006c90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c94:	6903      	ldr	r3, [r0, #16]
 8006c96:	690c      	ldr	r4, [r1, #16]
 8006c98:	42a3      	cmp	r3, r4
 8006c9a:	4607      	mov	r7, r0
 8006c9c:	f2c0 8081 	blt.w	8006da2 <quorem+0x112>
 8006ca0:	3c01      	subs	r4, #1
 8006ca2:	f101 0814 	add.w	r8, r1, #20
 8006ca6:	f100 0514 	add.w	r5, r0, #20
 8006caa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cae:	9301      	str	r3, [sp, #4]
 8006cb0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006cb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006cb8:	3301      	adds	r3, #1
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006cc0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006cc4:	fbb2 f6f3 	udiv	r6, r2, r3
 8006cc8:	d331      	bcc.n	8006d2e <quorem+0x9e>
 8006cca:	f04f 0e00 	mov.w	lr, #0
 8006cce:	4640      	mov	r0, r8
 8006cd0:	46ac      	mov	ip, r5
 8006cd2:	46f2      	mov	sl, lr
 8006cd4:	f850 2b04 	ldr.w	r2, [r0], #4
 8006cd8:	b293      	uxth	r3, r2
 8006cda:	fb06 e303 	mla	r3, r6, r3, lr
 8006cde:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006ce2:	b29b      	uxth	r3, r3
 8006ce4:	ebaa 0303 	sub.w	r3, sl, r3
 8006ce8:	f8dc a000 	ldr.w	sl, [ip]
 8006cec:	0c12      	lsrs	r2, r2, #16
 8006cee:	fa13 f38a 	uxtah	r3, r3, sl
 8006cf2:	fb06 e202 	mla	r2, r6, r2, lr
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	9b00      	ldr	r3, [sp, #0]
 8006cfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006cfe:	b292      	uxth	r2, r2
 8006d00:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d08:	f8bd 3000 	ldrh.w	r3, [sp]
 8006d0c:	4581      	cmp	r9, r0
 8006d0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d12:	f84c 3b04 	str.w	r3, [ip], #4
 8006d16:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006d1a:	d2db      	bcs.n	8006cd4 <quorem+0x44>
 8006d1c:	f855 300b 	ldr.w	r3, [r5, fp]
 8006d20:	b92b      	cbnz	r3, 8006d2e <quorem+0x9e>
 8006d22:	9b01      	ldr	r3, [sp, #4]
 8006d24:	3b04      	subs	r3, #4
 8006d26:	429d      	cmp	r5, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	d32e      	bcc.n	8006d8a <quorem+0xfa>
 8006d2c:	613c      	str	r4, [r7, #16]
 8006d2e:	4638      	mov	r0, r7
 8006d30:	f001 fc90 	bl	8008654 <__mcmp>
 8006d34:	2800      	cmp	r0, #0
 8006d36:	db24      	blt.n	8006d82 <quorem+0xf2>
 8006d38:	3601      	adds	r6, #1
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	f04f 0c00 	mov.w	ip, #0
 8006d40:	f858 2b04 	ldr.w	r2, [r8], #4
 8006d44:	f8d0 e000 	ldr.w	lr, [r0]
 8006d48:	b293      	uxth	r3, r2
 8006d4a:	ebac 0303 	sub.w	r3, ip, r3
 8006d4e:	0c12      	lsrs	r2, r2, #16
 8006d50:	fa13 f38e 	uxtah	r3, r3, lr
 8006d54:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006d58:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006d5c:	b29b      	uxth	r3, r3
 8006d5e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006d62:	45c1      	cmp	r9, r8
 8006d64:	f840 3b04 	str.w	r3, [r0], #4
 8006d68:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006d6c:	d2e8      	bcs.n	8006d40 <quorem+0xb0>
 8006d6e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006d72:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006d76:	b922      	cbnz	r2, 8006d82 <quorem+0xf2>
 8006d78:	3b04      	subs	r3, #4
 8006d7a:	429d      	cmp	r5, r3
 8006d7c:	461a      	mov	r2, r3
 8006d7e:	d30a      	bcc.n	8006d96 <quorem+0x106>
 8006d80:	613c      	str	r4, [r7, #16]
 8006d82:	4630      	mov	r0, r6
 8006d84:	b003      	add	sp, #12
 8006d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d8a:	6812      	ldr	r2, [r2, #0]
 8006d8c:	3b04      	subs	r3, #4
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	d1cc      	bne.n	8006d2c <quorem+0x9c>
 8006d92:	3c01      	subs	r4, #1
 8006d94:	e7c7      	b.n	8006d26 <quorem+0x96>
 8006d96:	6812      	ldr	r2, [r2, #0]
 8006d98:	3b04      	subs	r3, #4
 8006d9a:	2a00      	cmp	r2, #0
 8006d9c:	d1f0      	bne.n	8006d80 <quorem+0xf0>
 8006d9e:	3c01      	subs	r4, #1
 8006da0:	e7eb      	b.n	8006d7a <quorem+0xea>
 8006da2:	2000      	movs	r0, #0
 8006da4:	e7ee      	b.n	8006d84 <quorem+0xf4>
	...

08006da8 <_dtoa_r>:
 8006da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dac:	ed2d 8b04 	vpush	{d8-d9}
 8006db0:	ec57 6b10 	vmov	r6, r7, d0
 8006db4:	b093      	sub	sp, #76	; 0x4c
 8006db6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006db8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006dbc:	9106      	str	r1, [sp, #24]
 8006dbe:	ee10 aa10 	vmov	sl, s0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8006dc6:	930c      	str	r3, [sp, #48]	; 0x30
 8006dc8:	46bb      	mov	fp, r7
 8006dca:	b975      	cbnz	r5, 8006dea <_dtoa_r+0x42>
 8006dcc:	2010      	movs	r0, #16
 8006dce:	f001 f94d 	bl	800806c <malloc>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	6260      	str	r0, [r4, #36]	; 0x24
 8006dd6:	b920      	cbnz	r0, 8006de2 <_dtoa_r+0x3a>
 8006dd8:	4ba7      	ldr	r3, [pc, #668]	; (8007078 <_dtoa_r+0x2d0>)
 8006dda:	21ea      	movs	r1, #234	; 0xea
 8006ddc:	48a7      	ldr	r0, [pc, #668]	; (800707c <_dtoa_r+0x2d4>)
 8006dde:	f002 f8bd 	bl	8008f5c <__assert_func>
 8006de2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006de6:	6005      	str	r5, [r0, #0]
 8006de8:	60c5      	str	r5, [r0, #12]
 8006dea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006dec:	6819      	ldr	r1, [r3, #0]
 8006dee:	b151      	cbz	r1, 8006e06 <_dtoa_r+0x5e>
 8006df0:	685a      	ldr	r2, [r3, #4]
 8006df2:	604a      	str	r2, [r1, #4]
 8006df4:	2301      	movs	r3, #1
 8006df6:	4093      	lsls	r3, r2
 8006df8:	608b      	str	r3, [r1, #8]
 8006dfa:	4620      	mov	r0, r4
 8006dfc:	f001 f99e 	bl	800813c <_Bfree>
 8006e00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
 8006e06:	1e3b      	subs	r3, r7, #0
 8006e08:	bfaa      	itet	ge
 8006e0a:	2300      	movge	r3, #0
 8006e0c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006e10:	f8c8 3000 	strge.w	r3, [r8]
 8006e14:	4b9a      	ldr	r3, [pc, #616]	; (8007080 <_dtoa_r+0x2d8>)
 8006e16:	bfbc      	itt	lt
 8006e18:	2201      	movlt	r2, #1
 8006e1a:	f8c8 2000 	strlt.w	r2, [r8]
 8006e1e:	ea33 030b 	bics.w	r3, r3, fp
 8006e22:	d11b      	bne.n	8006e5c <_dtoa_r+0xb4>
 8006e24:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e26:	f242 730f 	movw	r3, #9999	; 0x270f
 8006e2a:	6013      	str	r3, [r2, #0]
 8006e2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006e30:	4333      	orrs	r3, r6
 8006e32:	f000 8592 	beq.w	800795a <_dtoa_r+0xbb2>
 8006e36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e38:	b963      	cbnz	r3, 8006e54 <_dtoa_r+0xac>
 8006e3a:	4b92      	ldr	r3, [pc, #584]	; (8007084 <_dtoa_r+0x2dc>)
 8006e3c:	e022      	b.n	8006e84 <_dtoa_r+0xdc>
 8006e3e:	4b92      	ldr	r3, [pc, #584]	; (8007088 <_dtoa_r+0x2e0>)
 8006e40:	9301      	str	r3, [sp, #4]
 8006e42:	3308      	adds	r3, #8
 8006e44:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006e46:	6013      	str	r3, [r2, #0]
 8006e48:	9801      	ldr	r0, [sp, #4]
 8006e4a:	b013      	add	sp, #76	; 0x4c
 8006e4c:	ecbd 8b04 	vpop	{d8-d9}
 8006e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e54:	4b8b      	ldr	r3, [pc, #556]	; (8007084 <_dtoa_r+0x2dc>)
 8006e56:	9301      	str	r3, [sp, #4]
 8006e58:	3303      	adds	r3, #3
 8006e5a:	e7f3      	b.n	8006e44 <_dtoa_r+0x9c>
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2300      	movs	r3, #0
 8006e60:	4650      	mov	r0, sl
 8006e62:	4659      	mov	r1, fp
 8006e64:	f7f9 fe30 	bl	8000ac8 <__aeabi_dcmpeq>
 8006e68:	ec4b ab19 	vmov	d9, sl, fp
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	b158      	cbz	r0, 8006e88 <_dtoa_r+0xe0>
 8006e70:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006e72:	2301      	movs	r3, #1
 8006e74:	6013      	str	r3, [r2, #0]
 8006e76:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	f000 856b 	beq.w	8007954 <_dtoa_r+0xbac>
 8006e7e:	4883      	ldr	r0, [pc, #524]	; (800708c <_dtoa_r+0x2e4>)
 8006e80:	6018      	str	r0, [r3, #0]
 8006e82:	1e43      	subs	r3, r0, #1
 8006e84:	9301      	str	r3, [sp, #4]
 8006e86:	e7df      	b.n	8006e48 <_dtoa_r+0xa0>
 8006e88:	ec4b ab10 	vmov	d0, sl, fp
 8006e8c:	aa10      	add	r2, sp, #64	; 0x40
 8006e8e:	a911      	add	r1, sp, #68	; 0x44
 8006e90:	4620      	mov	r0, r4
 8006e92:	f001 fd01 	bl	8008898 <__d2b>
 8006e96:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006e9a:	ee08 0a10 	vmov	s16, r0
 8006e9e:	2d00      	cmp	r5, #0
 8006ea0:	f000 8084 	beq.w	8006fac <_dtoa_r+0x204>
 8006ea4:	ee19 3a90 	vmov	r3, s19
 8006ea8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006eac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006eb0:	4656      	mov	r6, sl
 8006eb2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8006eb6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006eba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006ebe:	4b74      	ldr	r3, [pc, #464]	; (8007090 <_dtoa_r+0x2e8>)
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	f7f9 f9df 	bl	8000288 <__aeabi_dsub>
 8006eca:	a365      	add	r3, pc, #404	; (adr r3, 8007060 <_dtoa_r+0x2b8>)
 8006ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ed0:	f7f9 fb92 	bl	80005f8 <__aeabi_dmul>
 8006ed4:	a364      	add	r3, pc, #400	; (adr r3, 8007068 <_dtoa_r+0x2c0>)
 8006ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eda:	f7f9 f9d7 	bl	800028c <__adddf3>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	4628      	mov	r0, r5
 8006ee2:	460f      	mov	r7, r1
 8006ee4:	f7f9 fb1e 	bl	8000524 <__aeabi_i2d>
 8006ee8:	a361      	add	r3, pc, #388	; (adr r3, 8007070 <_dtoa_r+0x2c8>)
 8006eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eee:	f7f9 fb83 	bl	80005f8 <__aeabi_dmul>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	460b      	mov	r3, r1
 8006ef6:	4630      	mov	r0, r6
 8006ef8:	4639      	mov	r1, r7
 8006efa:	f7f9 f9c7 	bl	800028c <__adddf3>
 8006efe:	4606      	mov	r6, r0
 8006f00:	460f      	mov	r7, r1
 8006f02:	f7f9 fe29 	bl	8000b58 <__aeabi_d2iz>
 8006f06:	2200      	movs	r2, #0
 8006f08:	9000      	str	r0, [sp, #0]
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	4630      	mov	r0, r6
 8006f0e:	4639      	mov	r1, r7
 8006f10:	f7f9 fde4 	bl	8000adc <__aeabi_dcmplt>
 8006f14:	b150      	cbz	r0, 8006f2c <_dtoa_r+0x184>
 8006f16:	9800      	ldr	r0, [sp, #0]
 8006f18:	f7f9 fb04 	bl	8000524 <__aeabi_i2d>
 8006f1c:	4632      	mov	r2, r6
 8006f1e:	463b      	mov	r3, r7
 8006f20:	f7f9 fdd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f24:	b910      	cbnz	r0, 8006f2c <_dtoa_r+0x184>
 8006f26:	9b00      	ldr	r3, [sp, #0]
 8006f28:	3b01      	subs	r3, #1
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	9b00      	ldr	r3, [sp, #0]
 8006f2e:	2b16      	cmp	r3, #22
 8006f30:	d85a      	bhi.n	8006fe8 <_dtoa_r+0x240>
 8006f32:	9a00      	ldr	r2, [sp, #0]
 8006f34:	4b57      	ldr	r3, [pc, #348]	; (8007094 <_dtoa_r+0x2ec>)
 8006f36:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	ec51 0b19 	vmov	r0, r1, d9
 8006f42:	f7f9 fdcb 	bl	8000adc <__aeabi_dcmplt>
 8006f46:	2800      	cmp	r0, #0
 8006f48:	d050      	beq.n	8006fec <_dtoa_r+0x244>
 8006f4a:	9b00      	ldr	r3, [sp, #0]
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	9300      	str	r3, [sp, #0]
 8006f50:	2300      	movs	r3, #0
 8006f52:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006f56:	1b5d      	subs	r5, r3, r5
 8006f58:	1e6b      	subs	r3, r5, #1
 8006f5a:	9305      	str	r3, [sp, #20]
 8006f5c:	bf45      	ittet	mi
 8006f5e:	f1c5 0301 	rsbmi	r3, r5, #1
 8006f62:	9304      	strmi	r3, [sp, #16]
 8006f64:	2300      	movpl	r3, #0
 8006f66:	2300      	movmi	r3, #0
 8006f68:	bf4c      	ite	mi
 8006f6a:	9305      	strmi	r3, [sp, #20]
 8006f6c:	9304      	strpl	r3, [sp, #16]
 8006f6e:	9b00      	ldr	r3, [sp, #0]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	db3d      	blt.n	8006ff0 <_dtoa_r+0x248>
 8006f74:	9b05      	ldr	r3, [sp, #20]
 8006f76:	9a00      	ldr	r2, [sp, #0]
 8006f78:	920a      	str	r2, [sp, #40]	; 0x28
 8006f7a:	4413      	add	r3, r2
 8006f7c:	9305      	str	r3, [sp, #20]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	9307      	str	r3, [sp, #28]
 8006f82:	9b06      	ldr	r3, [sp, #24]
 8006f84:	2b09      	cmp	r3, #9
 8006f86:	f200 8089 	bhi.w	800709c <_dtoa_r+0x2f4>
 8006f8a:	2b05      	cmp	r3, #5
 8006f8c:	bfc4      	itt	gt
 8006f8e:	3b04      	subgt	r3, #4
 8006f90:	9306      	strgt	r3, [sp, #24]
 8006f92:	9b06      	ldr	r3, [sp, #24]
 8006f94:	f1a3 0302 	sub.w	r3, r3, #2
 8006f98:	bfcc      	ite	gt
 8006f9a:	2500      	movgt	r5, #0
 8006f9c:	2501      	movle	r5, #1
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	f200 8087 	bhi.w	80070b2 <_dtoa_r+0x30a>
 8006fa4:	e8df f003 	tbb	[pc, r3]
 8006fa8:	59383a2d 	.word	0x59383a2d
 8006fac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006fb0:	441d      	add	r5, r3
 8006fb2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006fb6:	2b20      	cmp	r3, #32
 8006fb8:	bfc1      	itttt	gt
 8006fba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006fbe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8006fc2:	fa0b f303 	lslgt.w	r3, fp, r3
 8006fc6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006fca:	bfda      	itte	le
 8006fcc:	f1c3 0320 	rsble	r3, r3, #32
 8006fd0:	fa06 f003 	lslle.w	r0, r6, r3
 8006fd4:	4318      	orrgt	r0, r3
 8006fd6:	f7f9 fa95 	bl	8000504 <__aeabi_ui2d>
 8006fda:	2301      	movs	r3, #1
 8006fdc:	4606      	mov	r6, r0
 8006fde:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8006fe2:	3d01      	subs	r5, #1
 8006fe4:	930e      	str	r3, [sp, #56]	; 0x38
 8006fe6:	e76a      	b.n	8006ebe <_dtoa_r+0x116>
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e7b2      	b.n	8006f52 <_dtoa_r+0x1aa>
 8006fec:	900b      	str	r0, [sp, #44]	; 0x2c
 8006fee:	e7b1      	b.n	8006f54 <_dtoa_r+0x1ac>
 8006ff0:	9b04      	ldr	r3, [sp, #16]
 8006ff2:	9a00      	ldr	r2, [sp, #0]
 8006ff4:	1a9b      	subs	r3, r3, r2
 8006ff6:	9304      	str	r3, [sp, #16]
 8006ff8:	4253      	negs	r3, r2
 8006ffa:	9307      	str	r3, [sp, #28]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8007000:	e7bf      	b.n	8006f82 <_dtoa_r+0x1da>
 8007002:	2300      	movs	r3, #0
 8007004:	9308      	str	r3, [sp, #32]
 8007006:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	dc55      	bgt.n	80070b8 <_dtoa_r+0x310>
 800700c:	2301      	movs	r3, #1
 800700e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007012:	461a      	mov	r2, r3
 8007014:	9209      	str	r2, [sp, #36]	; 0x24
 8007016:	e00c      	b.n	8007032 <_dtoa_r+0x28a>
 8007018:	2301      	movs	r3, #1
 800701a:	e7f3      	b.n	8007004 <_dtoa_r+0x25c>
 800701c:	2300      	movs	r3, #0
 800701e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007020:	9308      	str	r3, [sp, #32]
 8007022:	9b00      	ldr	r3, [sp, #0]
 8007024:	4413      	add	r3, r2
 8007026:	9302      	str	r3, [sp, #8]
 8007028:	3301      	adds	r3, #1
 800702a:	2b01      	cmp	r3, #1
 800702c:	9303      	str	r3, [sp, #12]
 800702e:	bfb8      	it	lt
 8007030:	2301      	movlt	r3, #1
 8007032:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007034:	2200      	movs	r2, #0
 8007036:	6042      	str	r2, [r0, #4]
 8007038:	2204      	movs	r2, #4
 800703a:	f102 0614 	add.w	r6, r2, #20
 800703e:	429e      	cmp	r6, r3
 8007040:	6841      	ldr	r1, [r0, #4]
 8007042:	d93d      	bls.n	80070c0 <_dtoa_r+0x318>
 8007044:	4620      	mov	r0, r4
 8007046:	f001 f839 	bl	80080bc <_Balloc>
 800704a:	9001      	str	r0, [sp, #4]
 800704c:	2800      	cmp	r0, #0
 800704e:	d13b      	bne.n	80070c8 <_dtoa_r+0x320>
 8007050:	4b11      	ldr	r3, [pc, #68]	; (8007098 <_dtoa_r+0x2f0>)
 8007052:	4602      	mov	r2, r0
 8007054:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007058:	e6c0      	b.n	8006ddc <_dtoa_r+0x34>
 800705a:	2301      	movs	r3, #1
 800705c:	e7df      	b.n	800701e <_dtoa_r+0x276>
 800705e:	bf00      	nop
 8007060:	636f4361 	.word	0x636f4361
 8007064:	3fd287a7 	.word	0x3fd287a7
 8007068:	8b60c8b3 	.word	0x8b60c8b3
 800706c:	3fc68a28 	.word	0x3fc68a28
 8007070:	509f79fb 	.word	0x509f79fb
 8007074:	3fd34413 	.word	0x3fd34413
 8007078:	08009d26 	.word	0x08009d26
 800707c:	08009d3d 	.word	0x08009d3d
 8007080:	7ff00000 	.word	0x7ff00000
 8007084:	08009d22 	.word	0x08009d22
 8007088:	08009d19 	.word	0x08009d19
 800708c:	08009b99 	.word	0x08009b99
 8007090:	3ff80000 	.word	0x3ff80000
 8007094:	08009ea8 	.word	0x08009ea8
 8007098:	08009d98 	.word	0x08009d98
 800709c:	2501      	movs	r5, #1
 800709e:	2300      	movs	r3, #0
 80070a0:	9306      	str	r3, [sp, #24]
 80070a2:	9508      	str	r5, [sp, #32]
 80070a4:	f04f 33ff 	mov.w	r3, #4294967295
 80070a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070ac:	2200      	movs	r2, #0
 80070ae:	2312      	movs	r3, #18
 80070b0:	e7b0      	b.n	8007014 <_dtoa_r+0x26c>
 80070b2:	2301      	movs	r3, #1
 80070b4:	9308      	str	r3, [sp, #32]
 80070b6:	e7f5      	b.n	80070a4 <_dtoa_r+0x2fc>
 80070b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80070be:	e7b8      	b.n	8007032 <_dtoa_r+0x28a>
 80070c0:	3101      	adds	r1, #1
 80070c2:	6041      	str	r1, [r0, #4]
 80070c4:	0052      	lsls	r2, r2, #1
 80070c6:	e7b8      	b.n	800703a <_dtoa_r+0x292>
 80070c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ca:	9a01      	ldr	r2, [sp, #4]
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	9b03      	ldr	r3, [sp, #12]
 80070d0:	2b0e      	cmp	r3, #14
 80070d2:	f200 809d 	bhi.w	8007210 <_dtoa_r+0x468>
 80070d6:	2d00      	cmp	r5, #0
 80070d8:	f000 809a 	beq.w	8007210 <_dtoa_r+0x468>
 80070dc:	9b00      	ldr	r3, [sp, #0]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	dd32      	ble.n	8007148 <_dtoa_r+0x3a0>
 80070e2:	4ab7      	ldr	r2, [pc, #732]	; (80073c0 <_dtoa_r+0x618>)
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80070ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070f0:	9b00      	ldr	r3, [sp, #0]
 80070f2:	05d8      	lsls	r0, r3, #23
 80070f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80070f8:	d516      	bpl.n	8007128 <_dtoa_r+0x380>
 80070fa:	4bb2      	ldr	r3, [pc, #712]	; (80073c4 <_dtoa_r+0x61c>)
 80070fc:	ec51 0b19 	vmov	r0, r1, d9
 8007100:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007104:	f7f9 fba2 	bl	800084c <__aeabi_ddiv>
 8007108:	f007 070f 	and.w	r7, r7, #15
 800710c:	4682      	mov	sl, r0
 800710e:	468b      	mov	fp, r1
 8007110:	2503      	movs	r5, #3
 8007112:	4eac      	ldr	r6, [pc, #688]	; (80073c4 <_dtoa_r+0x61c>)
 8007114:	b957      	cbnz	r7, 800712c <_dtoa_r+0x384>
 8007116:	4642      	mov	r2, r8
 8007118:	464b      	mov	r3, r9
 800711a:	4650      	mov	r0, sl
 800711c:	4659      	mov	r1, fp
 800711e:	f7f9 fb95 	bl	800084c <__aeabi_ddiv>
 8007122:	4682      	mov	sl, r0
 8007124:	468b      	mov	fp, r1
 8007126:	e028      	b.n	800717a <_dtoa_r+0x3d2>
 8007128:	2502      	movs	r5, #2
 800712a:	e7f2      	b.n	8007112 <_dtoa_r+0x36a>
 800712c:	07f9      	lsls	r1, r7, #31
 800712e:	d508      	bpl.n	8007142 <_dtoa_r+0x39a>
 8007130:	4640      	mov	r0, r8
 8007132:	4649      	mov	r1, r9
 8007134:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007138:	f7f9 fa5e 	bl	80005f8 <__aeabi_dmul>
 800713c:	3501      	adds	r5, #1
 800713e:	4680      	mov	r8, r0
 8007140:	4689      	mov	r9, r1
 8007142:	107f      	asrs	r7, r7, #1
 8007144:	3608      	adds	r6, #8
 8007146:	e7e5      	b.n	8007114 <_dtoa_r+0x36c>
 8007148:	f000 809b 	beq.w	8007282 <_dtoa_r+0x4da>
 800714c:	9b00      	ldr	r3, [sp, #0]
 800714e:	4f9d      	ldr	r7, [pc, #628]	; (80073c4 <_dtoa_r+0x61c>)
 8007150:	425e      	negs	r6, r3
 8007152:	4b9b      	ldr	r3, [pc, #620]	; (80073c0 <_dtoa_r+0x618>)
 8007154:	f006 020f 	and.w	r2, r6, #15
 8007158:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800715c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007160:	ec51 0b19 	vmov	r0, r1, d9
 8007164:	f7f9 fa48 	bl	80005f8 <__aeabi_dmul>
 8007168:	1136      	asrs	r6, r6, #4
 800716a:	4682      	mov	sl, r0
 800716c:	468b      	mov	fp, r1
 800716e:	2300      	movs	r3, #0
 8007170:	2502      	movs	r5, #2
 8007172:	2e00      	cmp	r6, #0
 8007174:	d17a      	bne.n	800726c <_dtoa_r+0x4c4>
 8007176:	2b00      	cmp	r3, #0
 8007178:	d1d3      	bne.n	8007122 <_dtoa_r+0x37a>
 800717a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800717c:	2b00      	cmp	r3, #0
 800717e:	f000 8082 	beq.w	8007286 <_dtoa_r+0x4de>
 8007182:	4b91      	ldr	r3, [pc, #580]	; (80073c8 <_dtoa_r+0x620>)
 8007184:	2200      	movs	r2, #0
 8007186:	4650      	mov	r0, sl
 8007188:	4659      	mov	r1, fp
 800718a:	f7f9 fca7 	bl	8000adc <__aeabi_dcmplt>
 800718e:	2800      	cmp	r0, #0
 8007190:	d079      	beq.n	8007286 <_dtoa_r+0x4de>
 8007192:	9b03      	ldr	r3, [sp, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d076      	beq.n	8007286 <_dtoa_r+0x4de>
 8007198:	9b02      	ldr	r3, [sp, #8]
 800719a:	2b00      	cmp	r3, #0
 800719c:	dd36      	ble.n	800720c <_dtoa_r+0x464>
 800719e:	9b00      	ldr	r3, [sp, #0]
 80071a0:	4650      	mov	r0, sl
 80071a2:	4659      	mov	r1, fp
 80071a4:	1e5f      	subs	r7, r3, #1
 80071a6:	2200      	movs	r2, #0
 80071a8:	4b88      	ldr	r3, [pc, #544]	; (80073cc <_dtoa_r+0x624>)
 80071aa:	f7f9 fa25 	bl	80005f8 <__aeabi_dmul>
 80071ae:	9e02      	ldr	r6, [sp, #8]
 80071b0:	4682      	mov	sl, r0
 80071b2:	468b      	mov	fp, r1
 80071b4:	3501      	adds	r5, #1
 80071b6:	4628      	mov	r0, r5
 80071b8:	f7f9 f9b4 	bl	8000524 <__aeabi_i2d>
 80071bc:	4652      	mov	r2, sl
 80071be:	465b      	mov	r3, fp
 80071c0:	f7f9 fa1a 	bl	80005f8 <__aeabi_dmul>
 80071c4:	4b82      	ldr	r3, [pc, #520]	; (80073d0 <_dtoa_r+0x628>)
 80071c6:	2200      	movs	r2, #0
 80071c8:	f7f9 f860 	bl	800028c <__adddf3>
 80071cc:	46d0      	mov	r8, sl
 80071ce:	46d9      	mov	r9, fp
 80071d0:	4682      	mov	sl, r0
 80071d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80071d6:	2e00      	cmp	r6, #0
 80071d8:	d158      	bne.n	800728c <_dtoa_r+0x4e4>
 80071da:	4b7e      	ldr	r3, [pc, #504]	; (80073d4 <_dtoa_r+0x62c>)
 80071dc:	2200      	movs	r2, #0
 80071de:	4640      	mov	r0, r8
 80071e0:	4649      	mov	r1, r9
 80071e2:	f7f9 f851 	bl	8000288 <__aeabi_dsub>
 80071e6:	4652      	mov	r2, sl
 80071e8:	465b      	mov	r3, fp
 80071ea:	4680      	mov	r8, r0
 80071ec:	4689      	mov	r9, r1
 80071ee:	f7f9 fc93 	bl	8000b18 <__aeabi_dcmpgt>
 80071f2:	2800      	cmp	r0, #0
 80071f4:	f040 8295 	bne.w	8007722 <_dtoa_r+0x97a>
 80071f8:	4652      	mov	r2, sl
 80071fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80071fe:	4640      	mov	r0, r8
 8007200:	4649      	mov	r1, r9
 8007202:	f7f9 fc6b 	bl	8000adc <__aeabi_dcmplt>
 8007206:	2800      	cmp	r0, #0
 8007208:	f040 8289 	bne.w	800771e <_dtoa_r+0x976>
 800720c:	ec5b ab19 	vmov	sl, fp, d9
 8007210:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007212:	2b00      	cmp	r3, #0
 8007214:	f2c0 8148 	blt.w	80074a8 <_dtoa_r+0x700>
 8007218:	9a00      	ldr	r2, [sp, #0]
 800721a:	2a0e      	cmp	r2, #14
 800721c:	f300 8144 	bgt.w	80074a8 <_dtoa_r+0x700>
 8007220:	4b67      	ldr	r3, [pc, #412]	; (80073c0 <_dtoa_r+0x618>)
 8007222:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007226:	e9d3 8900 	ldrd	r8, r9, [r3]
 800722a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800722c:	2b00      	cmp	r3, #0
 800722e:	f280 80d5 	bge.w	80073dc <_dtoa_r+0x634>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	2b00      	cmp	r3, #0
 8007236:	f300 80d1 	bgt.w	80073dc <_dtoa_r+0x634>
 800723a:	f040 826f 	bne.w	800771c <_dtoa_r+0x974>
 800723e:	4b65      	ldr	r3, [pc, #404]	; (80073d4 <_dtoa_r+0x62c>)
 8007240:	2200      	movs	r2, #0
 8007242:	4640      	mov	r0, r8
 8007244:	4649      	mov	r1, r9
 8007246:	f7f9 f9d7 	bl	80005f8 <__aeabi_dmul>
 800724a:	4652      	mov	r2, sl
 800724c:	465b      	mov	r3, fp
 800724e:	f7f9 fc59 	bl	8000b04 <__aeabi_dcmpge>
 8007252:	9e03      	ldr	r6, [sp, #12]
 8007254:	4637      	mov	r7, r6
 8007256:	2800      	cmp	r0, #0
 8007258:	f040 8245 	bne.w	80076e6 <_dtoa_r+0x93e>
 800725c:	9d01      	ldr	r5, [sp, #4]
 800725e:	2331      	movs	r3, #49	; 0x31
 8007260:	f805 3b01 	strb.w	r3, [r5], #1
 8007264:	9b00      	ldr	r3, [sp, #0]
 8007266:	3301      	adds	r3, #1
 8007268:	9300      	str	r3, [sp, #0]
 800726a:	e240      	b.n	80076ee <_dtoa_r+0x946>
 800726c:	07f2      	lsls	r2, r6, #31
 800726e:	d505      	bpl.n	800727c <_dtoa_r+0x4d4>
 8007270:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007274:	f7f9 f9c0 	bl	80005f8 <__aeabi_dmul>
 8007278:	3501      	adds	r5, #1
 800727a:	2301      	movs	r3, #1
 800727c:	1076      	asrs	r6, r6, #1
 800727e:	3708      	adds	r7, #8
 8007280:	e777      	b.n	8007172 <_dtoa_r+0x3ca>
 8007282:	2502      	movs	r5, #2
 8007284:	e779      	b.n	800717a <_dtoa_r+0x3d2>
 8007286:	9f00      	ldr	r7, [sp, #0]
 8007288:	9e03      	ldr	r6, [sp, #12]
 800728a:	e794      	b.n	80071b6 <_dtoa_r+0x40e>
 800728c:	9901      	ldr	r1, [sp, #4]
 800728e:	4b4c      	ldr	r3, [pc, #304]	; (80073c0 <_dtoa_r+0x618>)
 8007290:	4431      	add	r1, r6
 8007292:	910d      	str	r1, [sp, #52]	; 0x34
 8007294:	9908      	ldr	r1, [sp, #32]
 8007296:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800729a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800729e:	2900      	cmp	r1, #0
 80072a0:	d043      	beq.n	800732a <_dtoa_r+0x582>
 80072a2:	494d      	ldr	r1, [pc, #308]	; (80073d8 <_dtoa_r+0x630>)
 80072a4:	2000      	movs	r0, #0
 80072a6:	f7f9 fad1 	bl	800084c <__aeabi_ddiv>
 80072aa:	4652      	mov	r2, sl
 80072ac:	465b      	mov	r3, fp
 80072ae:	f7f8 ffeb 	bl	8000288 <__aeabi_dsub>
 80072b2:	9d01      	ldr	r5, [sp, #4]
 80072b4:	4682      	mov	sl, r0
 80072b6:	468b      	mov	fp, r1
 80072b8:	4649      	mov	r1, r9
 80072ba:	4640      	mov	r0, r8
 80072bc:	f7f9 fc4c 	bl	8000b58 <__aeabi_d2iz>
 80072c0:	4606      	mov	r6, r0
 80072c2:	f7f9 f92f 	bl	8000524 <__aeabi_i2d>
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4640      	mov	r0, r8
 80072cc:	4649      	mov	r1, r9
 80072ce:	f7f8 ffdb 	bl	8000288 <__aeabi_dsub>
 80072d2:	3630      	adds	r6, #48	; 0x30
 80072d4:	f805 6b01 	strb.w	r6, [r5], #1
 80072d8:	4652      	mov	r2, sl
 80072da:	465b      	mov	r3, fp
 80072dc:	4680      	mov	r8, r0
 80072de:	4689      	mov	r9, r1
 80072e0:	f7f9 fbfc 	bl	8000adc <__aeabi_dcmplt>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	d163      	bne.n	80073b0 <_dtoa_r+0x608>
 80072e8:	4642      	mov	r2, r8
 80072ea:	464b      	mov	r3, r9
 80072ec:	4936      	ldr	r1, [pc, #216]	; (80073c8 <_dtoa_r+0x620>)
 80072ee:	2000      	movs	r0, #0
 80072f0:	f7f8 ffca 	bl	8000288 <__aeabi_dsub>
 80072f4:	4652      	mov	r2, sl
 80072f6:	465b      	mov	r3, fp
 80072f8:	f7f9 fbf0 	bl	8000adc <__aeabi_dcmplt>
 80072fc:	2800      	cmp	r0, #0
 80072fe:	f040 80b5 	bne.w	800746c <_dtoa_r+0x6c4>
 8007302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007304:	429d      	cmp	r5, r3
 8007306:	d081      	beq.n	800720c <_dtoa_r+0x464>
 8007308:	4b30      	ldr	r3, [pc, #192]	; (80073cc <_dtoa_r+0x624>)
 800730a:	2200      	movs	r2, #0
 800730c:	4650      	mov	r0, sl
 800730e:	4659      	mov	r1, fp
 8007310:	f7f9 f972 	bl	80005f8 <__aeabi_dmul>
 8007314:	4b2d      	ldr	r3, [pc, #180]	; (80073cc <_dtoa_r+0x624>)
 8007316:	4682      	mov	sl, r0
 8007318:	468b      	mov	fp, r1
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	2200      	movs	r2, #0
 8007320:	f7f9 f96a 	bl	80005f8 <__aeabi_dmul>
 8007324:	4680      	mov	r8, r0
 8007326:	4689      	mov	r9, r1
 8007328:	e7c6      	b.n	80072b8 <_dtoa_r+0x510>
 800732a:	4650      	mov	r0, sl
 800732c:	4659      	mov	r1, fp
 800732e:	f7f9 f963 	bl	80005f8 <__aeabi_dmul>
 8007332:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007334:	9d01      	ldr	r5, [sp, #4]
 8007336:	930f      	str	r3, [sp, #60]	; 0x3c
 8007338:	4682      	mov	sl, r0
 800733a:	468b      	mov	fp, r1
 800733c:	4649      	mov	r1, r9
 800733e:	4640      	mov	r0, r8
 8007340:	f7f9 fc0a 	bl	8000b58 <__aeabi_d2iz>
 8007344:	4606      	mov	r6, r0
 8007346:	f7f9 f8ed 	bl	8000524 <__aeabi_i2d>
 800734a:	3630      	adds	r6, #48	; 0x30
 800734c:	4602      	mov	r2, r0
 800734e:	460b      	mov	r3, r1
 8007350:	4640      	mov	r0, r8
 8007352:	4649      	mov	r1, r9
 8007354:	f7f8 ff98 	bl	8000288 <__aeabi_dsub>
 8007358:	f805 6b01 	strb.w	r6, [r5], #1
 800735c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800735e:	429d      	cmp	r5, r3
 8007360:	4680      	mov	r8, r0
 8007362:	4689      	mov	r9, r1
 8007364:	f04f 0200 	mov.w	r2, #0
 8007368:	d124      	bne.n	80073b4 <_dtoa_r+0x60c>
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <_dtoa_r+0x630>)
 800736c:	4650      	mov	r0, sl
 800736e:	4659      	mov	r1, fp
 8007370:	f7f8 ff8c 	bl	800028c <__adddf3>
 8007374:	4602      	mov	r2, r0
 8007376:	460b      	mov	r3, r1
 8007378:	4640      	mov	r0, r8
 800737a:	4649      	mov	r1, r9
 800737c:	f7f9 fbcc 	bl	8000b18 <__aeabi_dcmpgt>
 8007380:	2800      	cmp	r0, #0
 8007382:	d173      	bne.n	800746c <_dtoa_r+0x6c4>
 8007384:	4652      	mov	r2, sl
 8007386:	465b      	mov	r3, fp
 8007388:	4913      	ldr	r1, [pc, #76]	; (80073d8 <_dtoa_r+0x630>)
 800738a:	2000      	movs	r0, #0
 800738c:	f7f8 ff7c 	bl	8000288 <__aeabi_dsub>
 8007390:	4602      	mov	r2, r0
 8007392:	460b      	mov	r3, r1
 8007394:	4640      	mov	r0, r8
 8007396:	4649      	mov	r1, r9
 8007398:	f7f9 fba0 	bl	8000adc <__aeabi_dcmplt>
 800739c:	2800      	cmp	r0, #0
 800739e:	f43f af35 	beq.w	800720c <_dtoa_r+0x464>
 80073a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80073a4:	1e6b      	subs	r3, r5, #1
 80073a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80073a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80073ac:	2b30      	cmp	r3, #48	; 0x30
 80073ae:	d0f8      	beq.n	80073a2 <_dtoa_r+0x5fa>
 80073b0:	9700      	str	r7, [sp, #0]
 80073b2:	e049      	b.n	8007448 <_dtoa_r+0x6a0>
 80073b4:	4b05      	ldr	r3, [pc, #20]	; (80073cc <_dtoa_r+0x624>)
 80073b6:	f7f9 f91f 	bl	80005f8 <__aeabi_dmul>
 80073ba:	4680      	mov	r8, r0
 80073bc:	4689      	mov	r9, r1
 80073be:	e7bd      	b.n	800733c <_dtoa_r+0x594>
 80073c0:	08009ea8 	.word	0x08009ea8
 80073c4:	08009e80 	.word	0x08009e80
 80073c8:	3ff00000 	.word	0x3ff00000
 80073cc:	40240000 	.word	0x40240000
 80073d0:	401c0000 	.word	0x401c0000
 80073d4:	40140000 	.word	0x40140000
 80073d8:	3fe00000 	.word	0x3fe00000
 80073dc:	9d01      	ldr	r5, [sp, #4]
 80073de:	4656      	mov	r6, sl
 80073e0:	465f      	mov	r7, fp
 80073e2:	4642      	mov	r2, r8
 80073e4:	464b      	mov	r3, r9
 80073e6:	4630      	mov	r0, r6
 80073e8:	4639      	mov	r1, r7
 80073ea:	f7f9 fa2f 	bl	800084c <__aeabi_ddiv>
 80073ee:	f7f9 fbb3 	bl	8000b58 <__aeabi_d2iz>
 80073f2:	4682      	mov	sl, r0
 80073f4:	f7f9 f896 	bl	8000524 <__aeabi_i2d>
 80073f8:	4642      	mov	r2, r8
 80073fa:	464b      	mov	r3, r9
 80073fc:	f7f9 f8fc 	bl	80005f8 <__aeabi_dmul>
 8007400:	4602      	mov	r2, r0
 8007402:	460b      	mov	r3, r1
 8007404:	4630      	mov	r0, r6
 8007406:	4639      	mov	r1, r7
 8007408:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800740c:	f7f8 ff3c 	bl	8000288 <__aeabi_dsub>
 8007410:	f805 6b01 	strb.w	r6, [r5], #1
 8007414:	9e01      	ldr	r6, [sp, #4]
 8007416:	9f03      	ldr	r7, [sp, #12]
 8007418:	1bae      	subs	r6, r5, r6
 800741a:	42b7      	cmp	r7, r6
 800741c:	4602      	mov	r2, r0
 800741e:	460b      	mov	r3, r1
 8007420:	d135      	bne.n	800748e <_dtoa_r+0x6e6>
 8007422:	f7f8 ff33 	bl	800028c <__adddf3>
 8007426:	4642      	mov	r2, r8
 8007428:	464b      	mov	r3, r9
 800742a:	4606      	mov	r6, r0
 800742c:	460f      	mov	r7, r1
 800742e:	f7f9 fb73 	bl	8000b18 <__aeabi_dcmpgt>
 8007432:	b9d0      	cbnz	r0, 800746a <_dtoa_r+0x6c2>
 8007434:	4642      	mov	r2, r8
 8007436:	464b      	mov	r3, r9
 8007438:	4630      	mov	r0, r6
 800743a:	4639      	mov	r1, r7
 800743c:	f7f9 fb44 	bl	8000ac8 <__aeabi_dcmpeq>
 8007440:	b110      	cbz	r0, 8007448 <_dtoa_r+0x6a0>
 8007442:	f01a 0f01 	tst.w	sl, #1
 8007446:	d110      	bne.n	800746a <_dtoa_r+0x6c2>
 8007448:	4620      	mov	r0, r4
 800744a:	ee18 1a10 	vmov	r1, s16
 800744e:	f000 fe75 	bl	800813c <_Bfree>
 8007452:	2300      	movs	r3, #0
 8007454:	9800      	ldr	r0, [sp, #0]
 8007456:	702b      	strb	r3, [r5, #0]
 8007458:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800745a:	3001      	adds	r0, #1
 800745c:	6018      	str	r0, [r3, #0]
 800745e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007460:	2b00      	cmp	r3, #0
 8007462:	f43f acf1 	beq.w	8006e48 <_dtoa_r+0xa0>
 8007466:	601d      	str	r5, [r3, #0]
 8007468:	e4ee      	b.n	8006e48 <_dtoa_r+0xa0>
 800746a:	9f00      	ldr	r7, [sp, #0]
 800746c:	462b      	mov	r3, r5
 800746e:	461d      	mov	r5, r3
 8007470:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007474:	2a39      	cmp	r2, #57	; 0x39
 8007476:	d106      	bne.n	8007486 <_dtoa_r+0x6de>
 8007478:	9a01      	ldr	r2, [sp, #4]
 800747a:	429a      	cmp	r2, r3
 800747c:	d1f7      	bne.n	800746e <_dtoa_r+0x6c6>
 800747e:	9901      	ldr	r1, [sp, #4]
 8007480:	2230      	movs	r2, #48	; 0x30
 8007482:	3701      	adds	r7, #1
 8007484:	700a      	strb	r2, [r1, #0]
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	3201      	adds	r2, #1
 800748a:	701a      	strb	r2, [r3, #0]
 800748c:	e790      	b.n	80073b0 <_dtoa_r+0x608>
 800748e:	4ba6      	ldr	r3, [pc, #664]	; (8007728 <_dtoa_r+0x980>)
 8007490:	2200      	movs	r2, #0
 8007492:	f7f9 f8b1 	bl	80005f8 <__aeabi_dmul>
 8007496:	2200      	movs	r2, #0
 8007498:	2300      	movs	r3, #0
 800749a:	4606      	mov	r6, r0
 800749c:	460f      	mov	r7, r1
 800749e:	f7f9 fb13 	bl	8000ac8 <__aeabi_dcmpeq>
 80074a2:	2800      	cmp	r0, #0
 80074a4:	d09d      	beq.n	80073e2 <_dtoa_r+0x63a>
 80074a6:	e7cf      	b.n	8007448 <_dtoa_r+0x6a0>
 80074a8:	9a08      	ldr	r2, [sp, #32]
 80074aa:	2a00      	cmp	r2, #0
 80074ac:	f000 80d7 	beq.w	800765e <_dtoa_r+0x8b6>
 80074b0:	9a06      	ldr	r2, [sp, #24]
 80074b2:	2a01      	cmp	r2, #1
 80074b4:	f300 80ba 	bgt.w	800762c <_dtoa_r+0x884>
 80074b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074ba:	2a00      	cmp	r2, #0
 80074bc:	f000 80b2 	beq.w	8007624 <_dtoa_r+0x87c>
 80074c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80074c4:	9e07      	ldr	r6, [sp, #28]
 80074c6:	9d04      	ldr	r5, [sp, #16]
 80074c8:	9a04      	ldr	r2, [sp, #16]
 80074ca:	441a      	add	r2, r3
 80074cc:	9204      	str	r2, [sp, #16]
 80074ce:	9a05      	ldr	r2, [sp, #20]
 80074d0:	2101      	movs	r1, #1
 80074d2:	441a      	add	r2, r3
 80074d4:	4620      	mov	r0, r4
 80074d6:	9205      	str	r2, [sp, #20]
 80074d8:	f000 ff32 	bl	8008340 <__i2b>
 80074dc:	4607      	mov	r7, r0
 80074de:	2d00      	cmp	r5, #0
 80074e0:	dd0c      	ble.n	80074fc <_dtoa_r+0x754>
 80074e2:	9b05      	ldr	r3, [sp, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	dd09      	ble.n	80074fc <_dtoa_r+0x754>
 80074e8:	42ab      	cmp	r3, r5
 80074ea:	9a04      	ldr	r2, [sp, #16]
 80074ec:	bfa8      	it	ge
 80074ee:	462b      	movge	r3, r5
 80074f0:	1ad2      	subs	r2, r2, r3
 80074f2:	9204      	str	r2, [sp, #16]
 80074f4:	9a05      	ldr	r2, [sp, #20]
 80074f6:	1aed      	subs	r5, r5, r3
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	9305      	str	r3, [sp, #20]
 80074fc:	9b07      	ldr	r3, [sp, #28]
 80074fe:	b31b      	cbz	r3, 8007548 <_dtoa_r+0x7a0>
 8007500:	9b08      	ldr	r3, [sp, #32]
 8007502:	2b00      	cmp	r3, #0
 8007504:	f000 80af 	beq.w	8007666 <_dtoa_r+0x8be>
 8007508:	2e00      	cmp	r6, #0
 800750a:	dd13      	ble.n	8007534 <_dtoa_r+0x78c>
 800750c:	4639      	mov	r1, r7
 800750e:	4632      	mov	r2, r6
 8007510:	4620      	mov	r0, r4
 8007512:	f000 ffd5 	bl	80084c0 <__pow5mult>
 8007516:	ee18 2a10 	vmov	r2, s16
 800751a:	4601      	mov	r1, r0
 800751c:	4607      	mov	r7, r0
 800751e:	4620      	mov	r0, r4
 8007520:	f000 ff24 	bl	800836c <__multiply>
 8007524:	ee18 1a10 	vmov	r1, s16
 8007528:	4680      	mov	r8, r0
 800752a:	4620      	mov	r0, r4
 800752c:	f000 fe06 	bl	800813c <_Bfree>
 8007530:	ee08 8a10 	vmov	s16, r8
 8007534:	9b07      	ldr	r3, [sp, #28]
 8007536:	1b9a      	subs	r2, r3, r6
 8007538:	d006      	beq.n	8007548 <_dtoa_r+0x7a0>
 800753a:	ee18 1a10 	vmov	r1, s16
 800753e:	4620      	mov	r0, r4
 8007540:	f000 ffbe 	bl	80084c0 <__pow5mult>
 8007544:	ee08 0a10 	vmov	s16, r0
 8007548:	2101      	movs	r1, #1
 800754a:	4620      	mov	r0, r4
 800754c:	f000 fef8 	bl	8008340 <__i2b>
 8007550:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007552:	2b00      	cmp	r3, #0
 8007554:	4606      	mov	r6, r0
 8007556:	f340 8088 	ble.w	800766a <_dtoa_r+0x8c2>
 800755a:	461a      	mov	r2, r3
 800755c:	4601      	mov	r1, r0
 800755e:	4620      	mov	r0, r4
 8007560:	f000 ffae 	bl	80084c0 <__pow5mult>
 8007564:	9b06      	ldr	r3, [sp, #24]
 8007566:	2b01      	cmp	r3, #1
 8007568:	4606      	mov	r6, r0
 800756a:	f340 8081 	ble.w	8007670 <_dtoa_r+0x8c8>
 800756e:	f04f 0800 	mov.w	r8, #0
 8007572:	6933      	ldr	r3, [r6, #16]
 8007574:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007578:	6918      	ldr	r0, [r3, #16]
 800757a:	f000 fe91 	bl	80082a0 <__hi0bits>
 800757e:	f1c0 0020 	rsb	r0, r0, #32
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	4418      	add	r0, r3
 8007586:	f010 001f 	ands.w	r0, r0, #31
 800758a:	f000 8092 	beq.w	80076b2 <_dtoa_r+0x90a>
 800758e:	f1c0 0320 	rsb	r3, r0, #32
 8007592:	2b04      	cmp	r3, #4
 8007594:	f340 808a 	ble.w	80076ac <_dtoa_r+0x904>
 8007598:	f1c0 001c 	rsb	r0, r0, #28
 800759c:	9b04      	ldr	r3, [sp, #16]
 800759e:	4403      	add	r3, r0
 80075a0:	9304      	str	r3, [sp, #16]
 80075a2:	9b05      	ldr	r3, [sp, #20]
 80075a4:	4403      	add	r3, r0
 80075a6:	4405      	add	r5, r0
 80075a8:	9305      	str	r3, [sp, #20]
 80075aa:	9b04      	ldr	r3, [sp, #16]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	dd07      	ble.n	80075c0 <_dtoa_r+0x818>
 80075b0:	ee18 1a10 	vmov	r1, s16
 80075b4:	461a      	mov	r2, r3
 80075b6:	4620      	mov	r0, r4
 80075b8:	f000 ffdc 	bl	8008574 <__lshift>
 80075bc:	ee08 0a10 	vmov	s16, r0
 80075c0:	9b05      	ldr	r3, [sp, #20]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	dd05      	ble.n	80075d2 <_dtoa_r+0x82a>
 80075c6:	4631      	mov	r1, r6
 80075c8:	461a      	mov	r2, r3
 80075ca:	4620      	mov	r0, r4
 80075cc:	f000 ffd2 	bl	8008574 <__lshift>
 80075d0:	4606      	mov	r6, r0
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d06e      	beq.n	80076b6 <_dtoa_r+0x90e>
 80075d8:	ee18 0a10 	vmov	r0, s16
 80075dc:	4631      	mov	r1, r6
 80075de:	f001 f839 	bl	8008654 <__mcmp>
 80075e2:	2800      	cmp	r0, #0
 80075e4:	da67      	bge.n	80076b6 <_dtoa_r+0x90e>
 80075e6:	9b00      	ldr	r3, [sp, #0]
 80075e8:	3b01      	subs	r3, #1
 80075ea:	ee18 1a10 	vmov	r1, s16
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	220a      	movs	r2, #10
 80075f2:	2300      	movs	r3, #0
 80075f4:	4620      	mov	r0, r4
 80075f6:	f000 fdc3 	bl	8008180 <__multadd>
 80075fa:	9b08      	ldr	r3, [sp, #32]
 80075fc:	ee08 0a10 	vmov	s16, r0
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 81b1 	beq.w	8007968 <_dtoa_r+0xbc0>
 8007606:	2300      	movs	r3, #0
 8007608:	4639      	mov	r1, r7
 800760a:	220a      	movs	r2, #10
 800760c:	4620      	mov	r0, r4
 800760e:	f000 fdb7 	bl	8008180 <__multadd>
 8007612:	9b02      	ldr	r3, [sp, #8]
 8007614:	2b00      	cmp	r3, #0
 8007616:	4607      	mov	r7, r0
 8007618:	f300 808e 	bgt.w	8007738 <_dtoa_r+0x990>
 800761c:	9b06      	ldr	r3, [sp, #24]
 800761e:	2b02      	cmp	r3, #2
 8007620:	dc51      	bgt.n	80076c6 <_dtoa_r+0x91e>
 8007622:	e089      	b.n	8007738 <_dtoa_r+0x990>
 8007624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007626:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800762a:	e74b      	b.n	80074c4 <_dtoa_r+0x71c>
 800762c:	9b03      	ldr	r3, [sp, #12]
 800762e:	1e5e      	subs	r6, r3, #1
 8007630:	9b07      	ldr	r3, [sp, #28]
 8007632:	42b3      	cmp	r3, r6
 8007634:	bfbf      	itttt	lt
 8007636:	9b07      	ldrlt	r3, [sp, #28]
 8007638:	9607      	strlt	r6, [sp, #28]
 800763a:	1af2      	sublt	r2, r6, r3
 800763c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800763e:	bfb6      	itet	lt
 8007640:	189b      	addlt	r3, r3, r2
 8007642:	1b9e      	subge	r6, r3, r6
 8007644:	930a      	strlt	r3, [sp, #40]	; 0x28
 8007646:	9b03      	ldr	r3, [sp, #12]
 8007648:	bfb8      	it	lt
 800764a:	2600      	movlt	r6, #0
 800764c:	2b00      	cmp	r3, #0
 800764e:	bfb7      	itett	lt
 8007650:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8007654:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007658:	1a9d      	sublt	r5, r3, r2
 800765a:	2300      	movlt	r3, #0
 800765c:	e734      	b.n	80074c8 <_dtoa_r+0x720>
 800765e:	9e07      	ldr	r6, [sp, #28]
 8007660:	9d04      	ldr	r5, [sp, #16]
 8007662:	9f08      	ldr	r7, [sp, #32]
 8007664:	e73b      	b.n	80074de <_dtoa_r+0x736>
 8007666:	9a07      	ldr	r2, [sp, #28]
 8007668:	e767      	b.n	800753a <_dtoa_r+0x792>
 800766a:	9b06      	ldr	r3, [sp, #24]
 800766c:	2b01      	cmp	r3, #1
 800766e:	dc18      	bgt.n	80076a2 <_dtoa_r+0x8fa>
 8007670:	f1ba 0f00 	cmp.w	sl, #0
 8007674:	d115      	bne.n	80076a2 <_dtoa_r+0x8fa>
 8007676:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800767a:	b993      	cbnz	r3, 80076a2 <_dtoa_r+0x8fa>
 800767c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007680:	0d1b      	lsrs	r3, r3, #20
 8007682:	051b      	lsls	r3, r3, #20
 8007684:	b183      	cbz	r3, 80076a8 <_dtoa_r+0x900>
 8007686:	9b04      	ldr	r3, [sp, #16]
 8007688:	3301      	adds	r3, #1
 800768a:	9304      	str	r3, [sp, #16]
 800768c:	9b05      	ldr	r3, [sp, #20]
 800768e:	3301      	adds	r3, #1
 8007690:	9305      	str	r3, [sp, #20]
 8007692:	f04f 0801 	mov.w	r8, #1
 8007696:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007698:	2b00      	cmp	r3, #0
 800769a:	f47f af6a 	bne.w	8007572 <_dtoa_r+0x7ca>
 800769e:	2001      	movs	r0, #1
 80076a0:	e76f      	b.n	8007582 <_dtoa_r+0x7da>
 80076a2:	f04f 0800 	mov.w	r8, #0
 80076a6:	e7f6      	b.n	8007696 <_dtoa_r+0x8ee>
 80076a8:	4698      	mov	r8, r3
 80076aa:	e7f4      	b.n	8007696 <_dtoa_r+0x8ee>
 80076ac:	f43f af7d 	beq.w	80075aa <_dtoa_r+0x802>
 80076b0:	4618      	mov	r0, r3
 80076b2:	301c      	adds	r0, #28
 80076b4:	e772      	b.n	800759c <_dtoa_r+0x7f4>
 80076b6:	9b03      	ldr	r3, [sp, #12]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	dc37      	bgt.n	800772c <_dtoa_r+0x984>
 80076bc:	9b06      	ldr	r3, [sp, #24]
 80076be:	2b02      	cmp	r3, #2
 80076c0:	dd34      	ble.n	800772c <_dtoa_r+0x984>
 80076c2:	9b03      	ldr	r3, [sp, #12]
 80076c4:	9302      	str	r3, [sp, #8]
 80076c6:	9b02      	ldr	r3, [sp, #8]
 80076c8:	b96b      	cbnz	r3, 80076e6 <_dtoa_r+0x93e>
 80076ca:	4631      	mov	r1, r6
 80076cc:	2205      	movs	r2, #5
 80076ce:	4620      	mov	r0, r4
 80076d0:	f000 fd56 	bl	8008180 <__multadd>
 80076d4:	4601      	mov	r1, r0
 80076d6:	4606      	mov	r6, r0
 80076d8:	ee18 0a10 	vmov	r0, s16
 80076dc:	f000 ffba 	bl	8008654 <__mcmp>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f73f adbb 	bgt.w	800725c <_dtoa_r+0x4b4>
 80076e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e8:	9d01      	ldr	r5, [sp, #4]
 80076ea:	43db      	mvns	r3, r3
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	4631      	mov	r1, r6
 80076f4:	4620      	mov	r0, r4
 80076f6:	f000 fd21 	bl	800813c <_Bfree>
 80076fa:	2f00      	cmp	r7, #0
 80076fc:	f43f aea4 	beq.w	8007448 <_dtoa_r+0x6a0>
 8007700:	f1b8 0f00 	cmp.w	r8, #0
 8007704:	d005      	beq.n	8007712 <_dtoa_r+0x96a>
 8007706:	45b8      	cmp	r8, r7
 8007708:	d003      	beq.n	8007712 <_dtoa_r+0x96a>
 800770a:	4641      	mov	r1, r8
 800770c:	4620      	mov	r0, r4
 800770e:	f000 fd15 	bl	800813c <_Bfree>
 8007712:	4639      	mov	r1, r7
 8007714:	4620      	mov	r0, r4
 8007716:	f000 fd11 	bl	800813c <_Bfree>
 800771a:	e695      	b.n	8007448 <_dtoa_r+0x6a0>
 800771c:	2600      	movs	r6, #0
 800771e:	4637      	mov	r7, r6
 8007720:	e7e1      	b.n	80076e6 <_dtoa_r+0x93e>
 8007722:	9700      	str	r7, [sp, #0]
 8007724:	4637      	mov	r7, r6
 8007726:	e599      	b.n	800725c <_dtoa_r+0x4b4>
 8007728:	40240000 	.word	0x40240000
 800772c:	9b08      	ldr	r3, [sp, #32]
 800772e:	2b00      	cmp	r3, #0
 8007730:	f000 80ca 	beq.w	80078c8 <_dtoa_r+0xb20>
 8007734:	9b03      	ldr	r3, [sp, #12]
 8007736:	9302      	str	r3, [sp, #8]
 8007738:	2d00      	cmp	r5, #0
 800773a:	dd05      	ble.n	8007748 <_dtoa_r+0x9a0>
 800773c:	4639      	mov	r1, r7
 800773e:	462a      	mov	r2, r5
 8007740:	4620      	mov	r0, r4
 8007742:	f000 ff17 	bl	8008574 <__lshift>
 8007746:	4607      	mov	r7, r0
 8007748:	f1b8 0f00 	cmp.w	r8, #0
 800774c:	d05b      	beq.n	8007806 <_dtoa_r+0xa5e>
 800774e:	6879      	ldr	r1, [r7, #4]
 8007750:	4620      	mov	r0, r4
 8007752:	f000 fcb3 	bl	80080bc <_Balloc>
 8007756:	4605      	mov	r5, r0
 8007758:	b928      	cbnz	r0, 8007766 <_dtoa_r+0x9be>
 800775a:	4b87      	ldr	r3, [pc, #540]	; (8007978 <_dtoa_r+0xbd0>)
 800775c:	4602      	mov	r2, r0
 800775e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007762:	f7ff bb3b 	b.w	8006ddc <_dtoa_r+0x34>
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	3202      	adds	r2, #2
 800776a:	0092      	lsls	r2, r2, #2
 800776c:	f107 010c 	add.w	r1, r7, #12
 8007770:	300c      	adds	r0, #12
 8007772:	f000 fc95 	bl	80080a0 <memcpy>
 8007776:	2201      	movs	r2, #1
 8007778:	4629      	mov	r1, r5
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fefa 	bl	8008574 <__lshift>
 8007780:	9b01      	ldr	r3, [sp, #4]
 8007782:	f103 0901 	add.w	r9, r3, #1
 8007786:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800778a:	4413      	add	r3, r2
 800778c:	9305      	str	r3, [sp, #20]
 800778e:	f00a 0301 	and.w	r3, sl, #1
 8007792:	46b8      	mov	r8, r7
 8007794:	9304      	str	r3, [sp, #16]
 8007796:	4607      	mov	r7, r0
 8007798:	4631      	mov	r1, r6
 800779a:	ee18 0a10 	vmov	r0, s16
 800779e:	f7ff fa77 	bl	8006c90 <quorem>
 80077a2:	4641      	mov	r1, r8
 80077a4:	9002      	str	r0, [sp, #8]
 80077a6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80077aa:	ee18 0a10 	vmov	r0, s16
 80077ae:	f000 ff51 	bl	8008654 <__mcmp>
 80077b2:	463a      	mov	r2, r7
 80077b4:	9003      	str	r0, [sp, #12]
 80077b6:	4631      	mov	r1, r6
 80077b8:	4620      	mov	r0, r4
 80077ba:	f000 ff67 	bl	800868c <__mdiff>
 80077be:	68c2      	ldr	r2, [r0, #12]
 80077c0:	f109 3bff 	add.w	fp, r9, #4294967295
 80077c4:	4605      	mov	r5, r0
 80077c6:	bb02      	cbnz	r2, 800780a <_dtoa_r+0xa62>
 80077c8:	4601      	mov	r1, r0
 80077ca:	ee18 0a10 	vmov	r0, s16
 80077ce:	f000 ff41 	bl	8008654 <__mcmp>
 80077d2:	4602      	mov	r2, r0
 80077d4:	4629      	mov	r1, r5
 80077d6:	4620      	mov	r0, r4
 80077d8:	9207      	str	r2, [sp, #28]
 80077da:	f000 fcaf 	bl	800813c <_Bfree>
 80077de:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80077e2:	ea43 0102 	orr.w	r1, r3, r2
 80077e6:	9b04      	ldr	r3, [sp, #16]
 80077e8:	430b      	orrs	r3, r1
 80077ea:	464d      	mov	r5, r9
 80077ec:	d10f      	bne.n	800780e <_dtoa_r+0xa66>
 80077ee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80077f2:	d02a      	beq.n	800784a <_dtoa_r+0xaa2>
 80077f4:	9b03      	ldr	r3, [sp, #12]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	dd02      	ble.n	8007800 <_dtoa_r+0xa58>
 80077fa:	9b02      	ldr	r3, [sp, #8]
 80077fc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8007800:	f88b a000 	strb.w	sl, [fp]
 8007804:	e775      	b.n	80076f2 <_dtoa_r+0x94a>
 8007806:	4638      	mov	r0, r7
 8007808:	e7ba      	b.n	8007780 <_dtoa_r+0x9d8>
 800780a:	2201      	movs	r2, #1
 800780c:	e7e2      	b.n	80077d4 <_dtoa_r+0xa2c>
 800780e:	9b03      	ldr	r3, [sp, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	db04      	blt.n	800781e <_dtoa_r+0xa76>
 8007814:	9906      	ldr	r1, [sp, #24]
 8007816:	430b      	orrs	r3, r1
 8007818:	9904      	ldr	r1, [sp, #16]
 800781a:	430b      	orrs	r3, r1
 800781c:	d122      	bne.n	8007864 <_dtoa_r+0xabc>
 800781e:	2a00      	cmp	r2, #0
 8007820:	ddee      	ble.n	8007800 <_dtoa_r+0xa58>
 8007822:	ee18 1a10 	vmov	r1, s16
 8007826:	2201      	movs	r2, #1
 8007828:	4620      	mov	r0, r4
 800782a:	f000 fea3 	bl	8008574 <__lshift>
 800782e:	4631      	mov	r1, r6
 8007830:	ee08 0a10 	vmov	s16, r0
 8007834:	f000 ff0e 	bl	8008654 <__mcmp>
 8007838:	2800      	cmp	r0, #0
 800783a:	dc03      	bgt.n	8007844 <_dtoa_r+0xa9c>
 800783c:	d1e0      	bne.n	8007800 <_dtoa_r+0xa58>
 800783e:	f01a 0f01 	tst.w	sl, #1
 8007842:	d0dd      	beq.n	8007800 <_dtoa_r+0xa58>
 8007844:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007848:	d1d7      	bne.n	80077fa <_dtoa_r+0xa52>
 800784a:	2339      	movs	r3, #57	; 0x39
 800784c:	f88b 3000 	strb.w	r3, [fp]
 8007850:	462b      	mov	r3, r5
 8007852:	461d      	mov	r5, r3
 8007854:	3b01      	subs	r3, #1
 8007856:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800785a:	2a39      	cmp	r2, #57	; 0x39
 800785c:	d071      	beq.n	8007942 <_dtoa_r+0xb9a>
 800785e:	3201      	adds	r2, #1
 8007860:	701a      	strb	r2, [r3, #0]
 8007862:	e746      	b.n	80076f2 <_dtoa_r+0x94a>
 8007864:	2a00      	cmp	r2, #0
 8007866:	dd07      	ble.n	8007878 <_dtoa_r+0xad0>
 8007868:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800786c:	d0ed      	beq.n	800784a <_dtoa_r+0xaa2>
 800786e:	f10a 0301 	add.w	r3, sl, #1
 8007872:	f88b 3000 	strb.w	r3, [fp]
 8007876:	e73c      	b.n	80076f2 <_dtoa_r+0x94a>
 8007878:	9b05      	ldr	r3, [sp, #20]
 800787a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800787e:	4599      	cmp	r9, r3
 8007880:	d047      	beq.n	8007912 <_dtoa_r+0xb6a>
 8007882:	ee18 1a10 	vmov	r1, s16
 8007886:	2300      	movs	r3, #0
 8007888:	220a      	movs	r2, #10
 800788a:	4620      	mov	r0, r4
 800788c:	f000 fc78 	bl	8008180 <__multadd>
 8007890:	45b8      	cmp	r8, r7
 8007892:	ee08 0a10 	vmov	s16, r0
 8007896:	f04f 0300 	mov.w	r3, #0
 800789a:	f04f 020a 	mov.w	r2, #10
 800789e:	4641      	mov	r1, r8
 80078a0:	4620      	mov	r0, r4
 80078a2:	d106      	bne.n	80078b2 <_dtoa_r+0xb0a>
 80078a4:	f000 fc6c 	bl	8008180 <__multadd>
 80078a8:	4680      	mov	r8, r0
 80078aa:	4607      	mov	r7, r0
 80078ac:	f109 0901 	add.w	r9, r9, #1
 80078b0:	e772      	b.n	8007798 <_dtoa_r+0x9f0>
 80078b2:	f000 fc65 	bl	8008180 <__multadd>
 80078b6:	4639      	mov	r1, r7
 80078b8:	4680      	mov	r8, r0
 80078ba:	2300      	movs	r3, #0
 80078bc:	220a      	movs	r2, #10
 80078be:	4620      	mov	r0, r4
 80078c0:	f000 fc5e 	bl	8008180 <__multadd>
 80078c4:	4607      	mov	r7, r0
 80078c6:	e7f1      	b.n	80078ac <_dtoa_r+0xb04>
 80078c8:	9b03      	ldr	r3, [sp, #12]
 80078ca:	9302      	str	r3, [sp, #8]
 80078cc:	9d01      	ldr	r5, [sp, #4]
 80078ce:	ee18 0a10 	vmov	r0, s16
 80078d2:	4631      	mov	r1, r6
 80078d4:	f7ff f9dc 	bl	8006c90 <quorem>
 80078d8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80078dc:	9b01      	ldr	r3, [sp, #4]
 80078de:	f805 ab01 	strb.w	sl, [r5], #1
 80078e2:	1aea      	subs	r2, r5, r3
 80078e4:	9b02      	ldr	r3, [sp, #8]
 80078e6:	4293      	cmp	r3, r2
 80078e8:	dd09      	ble.n	80078fe <_dtoa_r+0xb56>
 80078ea:	ee18 1a10 	vmov	r1, s16
 80078ee:	2300      	movs	r3, #0
 80078f0:	220a      	movs	r2, #10
 80078f2:	4620      	mov	r0, r4
 80078f4:	f000 fc44 	bl	8008180 <__multadd>
 80078f8:	ee08 0a10 	vmov	s16, r0
 80078fc:	e7e7      	b.n	80078ce <_dtoa_r+0xb26>
 80078fe:	9b02      	ldr	r3, [sp, #8]
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfc8      	it	gt
 8007904:	461d      	movgt	r5, r3
 8007906:	9b01      	ldr	r3, [sp, #4]
 8007908:	bfd8      	it	le
 800790a:	2501      	movle	r5, #1
 800790c:	441d      	add	r5, r3
 800790e:	f04f 0800 	mov.w	r8, #0
 8007912:	ee18 1a10 	vmov	r1, s16
 8007916:	2201      	movs	r2, #1
 8007918:	4620      	mov	r0, r4
 800791a:	f000 fe2b 	bl	8008574 <__lshift>
 800791e:	4631      	mov	r1, r6
 8007920:	ee08 0a10 	vmov	s16, r0
 8007924:	f000 fe96 	bl	8008654 <__mcmp>
 8007928:	2800      	cmp	r0, #0
 800792a:	dc91      	bgt.n	8007850 <_dtoa_r+0xaa8>
 800792c:	d102      	bne.n	8007934 <_dtoa_r+0xb8c>
 800792e:	f01a 0f01 	tst.w	sl, #1
 8007932:	d18d      	bne.n	8007850 <_dtoa_r+0xaa8>
 8007934:	462b      	mov	r3, r5
 8007936:	461d      	mov	r5, r3
 8007938:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800793c:	2a30      	cmp	r2, #48	; 0x30
 800793e:	d0fa      	beq.n	8007936 <_dtoa_r+0xb8e>
 8007940:	e6d7      	b.n	80076f2 <_dtoa_r+0x94a>
 8007942:	9a01      	ldr	r2, [sp, #4]
 8007944:	429a      	cmp	r2, r3
 8007946:	d184      	bne.n	8007852 <_dtoa_r+0xaaa>
 8007948:	9b00      	ldr	r3, [sp, #0]
 800794a:	3301      	adds	r3, #1
 800794c:	9300      	str	r3, [sp, #0]
 800794e:	2331      	movs	r3, #49	; 0x31
 8007950:	7013      	strb	r3, [r2, #0]
 8007952:	e6ce      	b.n	80076f2 <_dtoa_r+0x94a>
 8007954:	4b09      	ldr	r3, [pc, #36]	; (800797c <_dtoa_r+0xbd4>)
 8007956:	f7ff ba95 	b.w	8006e84 <_dtoa_r+0xdc>
 800795a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800795c:	2b00      	cmp	r3, #0
 800795e:	f47f aa6e 	bne.w	8006e3e <_dtoa_r+0x96>
 8007962:	4b07      	ldr	r3, [pc, #28]	; (8007980 <_dtoa_r+0xbd8>)
 8007964:	f7ff ba8e 	b.w	8006e84 <_dtoa_r+0xdc>
 8007968:	9b02      	ldr	r3, [sp, #8]
 800796a:	2b00      	cmp	r3, #0
 800796c:	dcae      	bgt.n	80078cc <_dtoa_r+0xb24>
 800796e:	9b06      	ldr	r3, [sp, #24]
 8007970:	2b02      	cmp	r3, #2
 8007972:	f73f aea8 	bgt.w	80076c6 <_dtoa_r+0x91e>
 8007976:	e7a9      	b.n	80078cc <_dtoa_r+0xb24>
 8007978:	08009d98 	.word	0x08009d98
 800797c:	08009b98 	.word	0x08009b98
 8007980:	08009d19 	.word	0x08009d19

08007984 <rshift>:
 8007984:	6903      	ldr	r3, [r0, #16]
 8007986:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800798a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800798e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007992:	f100 0414 	add.w	r4, r0, #20
 8007996:	dd45      	ble.n	8007a24 <rshift+0xa0>
 8007998:	f011 011f 	ands.w	r1, r1, #31
 800799c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80079a0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80079a4:	d10c      	bne.n	80079c0 <rshift+0x3c>
 80079a6:	f100 0710 	add.w	r7, r0, #16
 80079aa:	4629      	mov	r1, r5
 80079ac:	42b1      	cmp	r1, r6
 80079ae:	d334      	bcc.n	8007a1a <rshift+0x96>
 80079b0:	1a9b      	subs	r3, r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	1eea      	subs	r2, r5, #3
 80079b6:	4296      	cmp	r6, r2
 80079b8:	bf38      	it	cc
 80079ba:	2300      	movcc	r3, #0
 80079bc:	4423      	add	r3, r4
 80079be:	e015      	b.n	80079ec <rshift+0x68>
 80079c0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80079c4:	f1c1 0820 	rsb	r8, r1, #32
 80079c8:	40cf      	lsrs	r7, r1
 80079ca:	f105 0e04 	add.w	lr, r5, #4
 80079ce:	46a1      	mov	r9, r4
 80079d0:	4576      	cmp	r6, lr
 80079d2:	46f4      	mov	ip, lr
 80079d4:	d815      	bhi.n	8007a02 <rshift+0x7e>
 80079d6:	1a9a      	subs	r2, r3, r2
 80079d8:	0092      	lsls	r2, r2, #2
 80079da:	3a04      	subs	r2, #4
 80079dc:	3501      	adds	r5, #1
 80079de:	42ae      	cmp	r6, r5
 80079e0:	bf38      	it	cc
 80079e2:	2200      	movcc	r2, #0
 80079e4:	18a3      	adds	r3, r4, r2
 80079e6:	50a7      	str	r7, [r4, r2]
 80079e8:	b107      	cbz	r7, 80079ec <rshift+0x68>
 80079ea:	3304      	adds	r3, #4
 80079ec:	1b1a      	subs	r2, r3, r4
 80079ee:	42a3      	cmp	r3, r4
 80079f0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80079f4:	bf08      	it	eq
 80079f6:	2300      	moveq	r3, #0
 80079f8:	6102      	str	r2, [r0, #16]
 80079fa:	bf08      	it	eq
 80079fc:	6143      	streq	r3, [r0, #20]
 80079fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a02:	f8dc c000 	ldr.w	ip, [ip]
 8007a06:	fa0c fc08 	lsl.w	ip, ip, r8
 8007a0a:	ea4c 0707 	orr.w	r7, ip, r7
 8007a0e:	f849 7b04 	str.w	r7, [r9], #4
 8007a12:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007a16:	40cf      	lsrs	r7, r1
 8007a18:	e7da      	b.n	80079d0 <rshift+0x4c>
 8007a1a:	f851 cb04 	ldr.w	ip, [r1], #4
 8007a1e:	f847 cf04 	str.w	ip, [r7, #4]!
 8007a22:	e7c3      	b.n	80079ac <rshift+0x28>
 8007a24:	4623      	mov	r3, r4
 8007a26:	e7e1      	b.n	80079ec <rshift+0x68>

08007a28 <__hexdig_fun>:
 8007a28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007a2c:	2b09      	cmp	r3, #9
 8007a2e:	d802      	bhi.n	8007a36 <__hexdig_fun+0xe>
 8007a30:	3820      	subs	r0, #32
 8007a32:	b2c0      	uxtb	r0, r0
 8007a34:	4770      	bx	lr
 8007a36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007a3a:	2b05      	cmp	r3, #5
 8007a3c:	d801      	bhi.n	8007a42 <__hexdig_fun+0x1a>
 8007a3e:	3847      	subs	r0, #71	; 0x47
 8007a40:	e7f7      	b.n	8007a32 <__hexdig_fun+0xa>
 8007a42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007a46:	2b05      	cmp	r3, #5
 8007a48:	d801      	bhi.n	8007a4e <__hexdig_fun+0x26>
 8007a4a:	3827      	subs	r0, #39	; 0x27
 8007a4c:	e7f1      	b.n	8007a32 <__hexdig_fun+0xa>
 8007a4e:	2000      	movs	r0, #0
 8007a50:	4770      	bx	lr
	...

08007a54 <__gethex>:
 8007a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a58:	ed2d 8b02 	vpush	{d8}
 8007a5c:	b089      	sub	sp, #36	; 0x24
 8007a5e:	ee08 0a10 	vmov	s16, r0
 8007a62:	9304      	str	r3, [sp, #16]
 8007a64:	4bb4      	ldr	r3, [pc, #720]	; (8007d38 <__gethex+0x2e4>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	9301      	str	r3, [sp, #4]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	468b      	mov	fp, r1
 8007a6e:	4690      	mov	r8, r2
 8007a70:	f7f8 fbae 	bl	80001d0 <strlen>
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	f8db 2000 	ldr.w	r2, [fp]
 8007a7a:	4403      	add	r3, r0
 8007a7c:	4682      	mov	sl, r0
 8007a7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	1c93      	adds	r3, r2, #2
 8007a86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007a8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007a8e:	32fe      	adds	r2, #254	; 0xfe
 8007a90:	18d1      	adds	r1, r2, r3
 8007a92:	461f      	mov	r7, r3
 8007a94:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a98:	9100      	str	r1, [sp, #0]
 8007a9a:	2830      	cmp	r0, #48	; 0x30
 8007a9c:	d0f8      	beq.n	8007a90 <__gethex+0x3c>
 8007a9e:	f7ff ffc3 	bl	8007a28 <__hexdig_fun>
 8007aa2:	4604      	mov	r4, r0
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	d13a      	bne.n	8007b1e <__gethex+0xca>
 8007aa8:	9901      	ldr	r1, [sp, #4]
 8007aaa:	4652      	mov	r2, sl
 8007aac:	4638      	mov	r0, r7
 8007aae:	f001 fa33 	bl	8008f18 <strncmp>
 8007ab2:	4605      	mov	r5, r0
 8007ab4:	2800      	cmp	r0, #0
 8007ab6:	d168      	bne.n	8007b8a <__gethex+0x136>
 8007ab8:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007abc:	eb07 060a 	add.w	r6, r7, sl
 8007ac0:	f7ff ffb2 	bl	8007a28 <__hexdig_fun>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	d062      	beq.n	8007b8e <__gethex+0x13a>
 8007ac8:	4633      	mov	r3, r6
 8007aca:	7818      	ldrb	r0, [r3, #0]
 8007acc:	2830      	cmp	r0, #48	; 0x30
 8007ace:	461f      	mov	r7, r3
 8007ad0:	f103 0301 	add.w	r3, r3, #1
 8007ad4:	d0f9      	beq.n	8007aca <__gethex+0x76>
 8007ad6:	f7ff ffa7 	bl	8007a28 <__hexdig_fun>
 8007ada:	2301      	movs	r3, #1
 8007adc:	fab0 f480 	clz	r4, r0
 8007ae0:	0964      	lsrs	r4, r4, #5
 8007ae2:	4635      	mov	r5, r6
 8007ae4:	9300      	str	r3, [sp, #0]
 8007ae6:	463a      	mov	r2, r7
 8007ae8:	4616      	mov	r6, r2
 8007aea:	3201      	adds	r2, #1
 8007aec:	7830      	ldrb	r0, [r6, #0]
 8007aee:	f7ff ff9b 	bl	8007a28 <__hexdig_fun>
 8007af2:	2800      	cmp	r0, #0
 8007af4:	d1f8      	bne.n	8007ae8 <__gethex+0x94>
 8007af6:	9901      	ldr	r1, [sp, #4]
 8007af8:	4652      	mov	r2, sl
 8007afa:	4630      	mov	r0, r6
 8007afc:	f001 fa0c 	bl	8008f18 <strncmp>
 8007b00:	b980      	cbnz	r0, 8007b24 <__gethex+0xd0>
 8007b02:	b94d      	cbnz	r5, 8007b18 <__gethex+0xc4>
 8007b04:	eb06 050a 	add.w	r5, r6, sl
 8007b08:	462a      	mov	r2, r5
 8007b0a:	4616      	mov	r6, r2
 8007b0c:	3201      	adds	r2, #1
 8007b0e:	7830      	ldrb	r0, [r6, #0]
 8007b10:	f7ff ff8a 	bl	8007a28 <__hexdig_fun>
 8007b14:	2800      	cmp	r0, #0
 8007b16:	d1f8      	bne.n	8007b0a <__gethex+0xb6>
 8007b18:	1bad      	subs	r5, r5, r6
 8007b1a:	00ad      	lsls	r5, r5, #2
 8007b1c:	e004      	b.n	8007b28 <__gethex+0xd4>
 8007b1e:	2400      	movs	r4, #0
 8007b20:	4625      	mov	r5, r4
 8007b22:	e7e0      	b.n	8007ae6 <__gethex+0x92>
 8007b24:	2d00      	cmp	r5, #0
 8007b26:	d1f7      	bne.n	8007b18 <__gethex+0xc4>
 8007b28:	7833      	ldrb	r3, [r6, #0]
 8007b2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007b2e:	2b50      	cmp	r3, #80	; 0x50
 8007b30:	d13b      	bne.n	8007baa <__gethex+0x156>
 8007b32:	7873      	ldrb	r3, [r6, #1]
 8007b34:	2b2b      	cmp	r3, #43	; 0x2b
 8007b36:	d02c      	beq.n	8007b92 <__gethex+0x13e>
 8007b38:	2b2d      	cmp	r3, #45	; 0x2d
 8007b3a:	d02e      	beq.n	8007b9a <__gethex+0x146>
 8007b3c:	1c71      	adds	r1, r6, #1
 8007b3e:	f04f 0900 	mov.w	r9, #0
 8007b42:	7808      	ldrb	r0, [r1, #0]
 8007b44:	f7ff ff70 	bl	8007a28 <__hexdig_fun>
 8007b48:	1e43      	subs	r3, r0, #1
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b18      	cmp	r3, #24
 8007b4e:	d82c      	bhi.n	8007baa <__gethex+0x156>
 8007b50:	f1a0 0210 	sub.w	r2, r0, #16
 8007b54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007b58:	f7ff ff66 	bl	8007a28 <__hexdig_fun>
 8007b5c:	1e43      	subs	r3, r0, #1
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b18      	cmp	r3, #24
 8007b62:	d91d      	bls.n	8007ba0 <__gethex+0x14c>
 8007b64:	f1b9 0f00 	cmp.w	r9, #0
 8007b68:	d000      	beq.n	8007b6c <__gethex+0x118>
 8007b6a:	4252      	negs	r2, r2
 8007b6c:	4415      	add	r5, r2
 8007b6e:	f8cb 1000 	str.w	r1, [fp]
 8007b72:	b1e4      	cbz	r4, 8007bae <__gethex+0x15a>
 8007b74:	9b00      	ldr	r3, [sp, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	bf14      	ite	ne
 8007b7a:	2700      	movne	r7, #0
 8007b7c:	2706      	moveq	r7, #6
 8007b7e:	4638      	mov	r0, r7
 8007b80:	b009      	add	sp, #36	; 0x24
 8007b82:	ecbd 8b02 	vpop	{d8}
 8007b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b8a:	463e      	mov	r6, r7
 8007b8c:	4625      	mov	r5, r4
 8007b8e:	2401      	movs	r4, #1
 8007b90:	e7ca      	b.n	8007b28 <__gethex+0xd4>
 8007b92:	f04f 0900 	mov.w	r9, #0
 8007b96:	1cb1      	adds	r1, r6, #2
 8007b98:	e7d3      	b.n	8007b42 <__gethex+0xee>
 8007b9a:	f04f 0901 	mov.w	r9, #1
 8007b9e:	e7fa      	b.n	8007b96 <__gethex+0x142>
 8007ba0:	230a      	movs	r3, #10
 8007ba2:	fb03 0202 	mla	r2, r3, r2, r0
 8007ba6:	3a10      	subs	r2, #16
 8007ba8:	e7d4      	b.n	8007b54 <__gethex+0x100>
 8007baa:	4631      	mov	r1, r6
 8007bac:	e7df      	b.n	8007b6e <__gethex+0x11a>
 8007bae:	1bf3      	subs	r3, r6, r7
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	4621      	mov	r1, r4
 8007bb4:	2b07      	cmp	r3, #7
 8007bb6:	dc0b      	bgt.n	8007bd0 <__gethex+0x17c>
 8007bb8:	ee18 0a10 	vmov	r0, s16
 8007bbc:	f000 fa7e 	bl	80080bc <_Balloc>
 8007bc0:	4604      	mov	r4, r0
 8007bc2:	b940      	cbnz	r0, 8007bd6 <__gethex+0x182>
 8007bc4:	4b5d      	ldr	r3, [pc, #372]	; (8007d3c <__gethex+0x2e8>)
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	21de      	movs	r1, #222	; 0xde
 8007bca:	485d      	ldr	r0, [pc, #372]	; (8007d40 <__gethex+0x2ec>)
 8007bcc:	f001 f9c6 	bl	8008f5c <__assert_func>
 8007bd0:	3101      	adds	r1, #1
 8007bd2:	105b      	asrs	r3, r3, #1
 8007bd4:	e7ee      	b.n	8007bb4 <__gethex+0x160>
 8007bd6:	f100 0914 	add.w	r9, r0, #20
 8007bda:	f04f 0b00 	mov.w	fp, #0
 8007bde:	f1ca 0301 	rsb	r3, sl, #1
 8007be2:	f8cd 9008 	str.w	r9, [sp, #8]
 8007be6:	f8cd b000 	str.w	fp, [sp]
 8007bea:	9306      	str	r3, [sp, #24]
 8007bec:	42b7      	cmp	r7, r6
 8007bee:	d340      	bcc.n	8007c72 <__gethex+0x21e>
 8007bf0:	9802      	ldr	r0, [sp, #8]
 8007bf2:	9b00      	ldr	r3, [sp, #0]
 8007bf4:	f840 3b04 	str.w	r3, [r0], #4
 8007bf8:	eba0 0009 	sub.w	r0, r0, r9
 8007bfc:	1080      	asrs	r0, r0, #2
 8007bfe:	0146      	lsls	r6, r0, #5
 8007c00:	6120      	str	r0, [r4, #16]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 fb4c 	bl	80082a0 <__hi0bits>
 8007c08:	1a30      	subs	r0, r6, r0
 8007c0a:	f8d8 6000 	ldr.w	r6, [r8]
 8007c0e:	42b0      	cmp	r0, r6
 8007c10:	dd63      	ble.n	8007cda <__gethex+0x286>
 8007c12:	1b87      	subs	r7, r0, r6
 8007c14:	4639      	mov	r1, r7
 8007c16:	4620      	mov	r0, r4
 8007c18:	f000 fef0 	bl	80089fc <__any_on>
 8007c1c:	4682      	mov	sl, r0
 8007c1e:	b1a8      	cbz	r0, 8007c4c <__gethex+0x1f8>
 8007c20:	1e7b      	subs	r3, r7, #1
 8007c22:	1159      	asrs	r1, r3, #5
 8007c24:	f003 021f 	and.w	r2, r3, #31
 8007c28:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007c2c:	f04f 0a01 	mov.w	sl, #1
 8007c30:	fa0a f202 	lsl.w	r2, sl, r2
 8007c34:	420a      	tst	r2, r1
 8007c36:	d009      	beq.n	8007c4c <__gethex+0x1f8>
 8007c38:	4553      	cmp	r3, sl
 8007c3a:	dd05      	ble.n	8007c48 <__gethex+0x1f4>
 8007c3c:	1eb9      	subs	r1, r7, #2
 8007c3e:	4620      	mov	r0, r4
 8007c40:	f000 fedc 	bl	80089fc <__any_on>
 8007c44:	2800      	cmp	r0, #0
 8007c46:	d145      	bne.n	8007cd4 <__gethex+0x280>
 8007c48:	f04f 0a02 	mov.w	sl, #2
 8007c4c:	4639      	mov	r1, r7
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f7ff fe98 	bl	8007984 <rshift>
 8007c54:	443d      	add	r5, r7
 8007c56:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c5a:	42ab      	cmp	r3, r5
 8007c5c:	da4c      	bge.n	8007cf8 <__gethex+0x2a4>
 8007c5e:	ee18 0a10 	vmov	r0, s16
 8007c62:	4621      	mov	r1, r4
 8007c64:	f000 fa6a 	bl	800813c <_Bfree>
 8007c68:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	6013      	str	r3, [r2, #0]
 8007c6e:	27a3      	movs	r7, #163	; 0xa3
 8007c70:	e785      	b.n	8007b7e <__gethex+0x12a>
 8007c72:	1e73      	subs	r3, r6, #1
 8007c74:	9a05      	ldr	r2, [sp, #20]
 8007c76:	9303      	str	r3, [sp, #12]
 8007c78:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c7c:	4293      	cmp	r3, r2
 8007c7e:	d019      	beq.n	8007cb4 <__gethex+0x260>
 8007c80:	f1bb 0f20 	cmp.w	fp, #32
 8007c84:	d107      	bne.n	8007c96 <__gethex+0x242>
 8007c86:	9b02      	ldr	r3, [sp, #8]
 8007c88:	9a00      	ldr	r2, [sp, #0]
 8007c8a:	f843 2b04 	str.w	r2, [r3], #4
 8007c8e:	9302      	str	r3, [sp, #8]
 8007c90:	2300      	movs	r3, #0
 8007c92:	9300      	str	r3, [sp, #0]
 8007c94:	469b      	mov	fp, r3
 8007c96:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007c9a:	f7ff fec5 	bl	8007a28 <__hexdig_fun>
 8007c9e:	9b00      	ldr	r3, [sp, #0]
 8007ca0:	f000 000f 	and.w	r0, r0, #15
 8007ca4:	fa00 f00b 	lsl.w	r0, r0, fp
 8007ca8:	4303      	orrs	r3, r0
 8007caa:	9300      	str	r3, [sp, #0]
 8007cac:	f10b 0b04 	add.w	fp, fp, #4
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	e00d      	b.n	8007cd0 <__gethex+0x27c>
 8007cb4:	9b03      	ldr	r3, [sp, #12]
 8007cb6:	9a06      	ldr	r2, [sp, #24]
 8007cb8:	4413      	add	r3, r2
 8007cba:	42bb      	cmp	r3, r7
 8007cbc:	d3e0      	bcc.n	8007c80 <__gethex+0x22c>
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	9901      	ldr	r1, [sp, #4]
 8007cc2:	9307      	str	r3, [sp, #28]
 8007cc4:	4652      	mov	r2, sl
 8007cc6:	f001 f927 	bl	8008f18 <strncmp>
 8007cca:	9b07      	ldr	r3, [sp, #28]
 8007ccc:	2800      	cmp	r0, #0
 8007cce:	d1d7      	bne.n	8007c80 <__gethex+0x22c>
 8007cd0:	461e      	mov	r6, r3
 8007cd2:	e78b      	b.n	8007bec <__gethex+0x198>
 8007cd4:	f04f 0a03 	mov.w	sl, #3
 8007cd8:	e7b8      	b.n	8007c4c <__gethex+0x1f8>
 8007cda:	da0a      	bge.n	8007cf2 <__gethex+0x29e>
 8007cdc:	1a37      	subs	r7, r6, r0
 8007cde:	4621      	mov	r1, r4
 8007ce0:	ee18 0a10 	vmov	r0, s16
 8007ce4:	463a      	mov	r2, r7
 8007ce6:	f000 fc45 	bl	8008574 <__lshift>
 8007cea:	1bed      	subs	r5, r5, r7
 8007cec:	4604      	mov	r4, r0
 8007cee:	f100 0914 	add.w	r9, r0, #20
 8007cf2:	f04f 0a00 	mov.w	sl, #0
 8007cf6:	e7ae      	b.n	8007c56 <__gethex+0x202>
 8007cf8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8007cfc:	42a8      	cmp	r0, r5
 8007cfe:	dd72      	ble.n	8007de6 <__gethex+0x392>
 8007d00:	1b45      	subs	r5, r0, r5
 8007d02:	42ae      	cmp	r6, r5
 8007d04:	dc36      	bgt.n	8007d74 <__gethex+0x320>
 8007d06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007d0a:	2b02      	cmp	r3, #2
 8007d0c:	d02a      	beq.n	8007d64 <__gethex+0x310>
 8007d0e:	2b03      	cmp	r3, #3
 8007d10:	d02c      	beq.n	8007d6c <__gethex+0x318>
 8007d12:	2b01      	cmp	r3, #1
 8007d14:	d11c      	bne.n	8007d50 <__gethex+0x2fc>
 8007d16:	42ae      	cmp	r6, r5
 8007d18:	d11a      	bne.n	8007d50 <__gethex+0x2fc>
 8007d1a:	2e01      	cmp	r6, #1
 8007d1c:	d112      	bne.n	8007d44 <__gethex+0x2f0>
 8007d1e:	9a04      	ldr	r2, [sp, #16]
 8007d20:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007d24:	6013      	str	r3, [r2, #0]
 8007d26:	2301      	movs	r3, #1
 8007d28:	6123      	str	r3, [r4, #16]
 8007d2a:	f8c9 3000 	str.w	r3, [r9]
 8007d2e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007d30:	2762      	movs	r7, #98	; 0x62
 8007d32:	601c      	str	r4, [r3, #0]
 8007d34:	e723      	b.n	8007b7e <__gethex+0x12a>
 8007d36:	bf00      	nop
 8007d38:	08009e10 	.word	0x08009e10
 8007d3c:	08009d98 	.word	0x08009d98
 8007d40:	08009da9 	.word	0x08009da9
 8007d44:	1e71      	subs	r1, r6, #1
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 fe58 	bl	80089fc <__any_on>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d1e6      	bne.n	8007d1e <__gethex+0x2ca>
 8007d50:	ee18 0a10 	vmov	r0, s16
 8007d54:	4621      	mov	r1, r4
 8007d56:	f000 f9f1 	bl	800813c <_Bfree>
 8007d5a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	2750      	movs	r7, #80	; 0x50
 8007d62:	e70c      	b.n	8007b7e <__gethex+0x12a>
 8007d64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f2      	bne.n	8007d50 <__gethex+0x2fc>
 8007d6a:	e7d8      	b.n	8007d1e <__gethex+0x2ca>
 8007d6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d1d5      	bne.n	8007d1e <__gethex+0x2ca>
 8007d72:	e7ed      	b.n	8007d50 <__gethex+0x2fc>
 8007d74:	1e6f      	subs	r7, r5, #1
 8007d76:	f1ba 0f00 	cmp.w	sl, #0
 8007d7a:	d131      	bne.n	8007de0 <__gethex+0x38c>
 8007d7c:	b127      	cbz	r7, 8007d88 <__gethex+0x334>
 8007d7e:	4639      	mov	r1, r7
 8007d80:	4620      	mov	r0, r4
 8007d82:	f000 fe3b 	bl	80089fc <__any_on>
 8007d86:	4682      	mov	sl, r0
 8007d88:	117b      	asrs	r3, r7, #5
 8007d8a:	2101      	movs	r1, #1
 8007d8c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007d90:	f007 071f 	and.w	r7, r7, #31
 8007d94:	fa01 f707 	lsl.w	r7, r1, r7
 8007d98:	421f      	tst	r7, r3
 8007d9a:	4629      	mov	r1, r5
 8007d9c:	4620      	mov	r0, r4
 8007d9e:	bf18      	it	ne
 8007da0:	f04a 0a02 	orrne.w	sl, sl, #2
 8007da4:	1b76      	subs	r6, r6, r5
 8007da6:	f7ff fded 	bl	8007984 <rshift>
 8007daa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007dae:	2702      	movs	r7, #2
 8007db0:	f1ba 0f00 	cmp.w	sl, #0
 8007db4:	d048      	beq.n	8007e48 <__gethex+0x3f4>
 8007db6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007dba:	2b02      	cmp	r3, #2
 8007dbc:	d015      	beq.n	8007dea <__gethex+0x396>
 8007dbe:	2b03      	cmp	r3, #3
 8007dc0:	d017      	beq.n	8007df2 <__gethex+0x39e>
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d109      	bne.n	8007dda <__gethex+0x386>
 8007dc6:	f01a 0f02 	tst.w	sl, #2
 8007dca:	d006      	beq.n	8007dda <__gethex+0x386>
 8007dcc:	f8d9 0000 	ldr.w	r0, [r9]
 8007dd0:	ea4a 0a00 	orr.w	sl, sl, r0
 8007dd4:	f01a 0f01 	tst.w	sl, #1
 8007dd8:	d10e      	bne.n	8007df8 <__gethex+0x3a4>
 8007dda:	f047 0710 	orr.w	r7, r7, #16
 8007dde:	e033      	b.n	8007e48 <__gethex+0x3f4>
 8007de0:	f04f 0a01 	mov.w	sl, #1
 8007de4:	e7d0      	b.n	8007d88 <__gethex+0x334>
 8007de6:	2701      	movs	r7, #1
 8007de8:	e7e2      	b.n	8007db0 <__gethex+0x35c>
 8007dea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007dec:	f1c3 0301 	rsb	r3, r3, #1
 8007df0:	9315      	str	r3, [sp, #84]	; 0x54
 8007df2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d0f0      	beq.n	8007dda <__gethex+0x386>
 8007df8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007dfc:	f104 0314 	add.w	r3, r4, #20
 8007e00:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007e04:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007e08:	f04f 0c00 	mov.w	ip, #0
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e12:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007e16:	d01c      	beq.n	8007e52 <__gethex+0x3fe>
 8007e18:	3201      	adds	r2, #1
 8007e1a:	6002      	str	r2, [r0, #0]
 8007e1c:	2f02      	cmp	r7, #2
 8007e1e:	f104 0314 	add.w	r3, r4, #20
 8007e22:	d13f      	bne.n	8007ea4 <__gethex+0x450>
 8007e24:	f8d8 2000 	ldr.w	r2, [r8]
 8007e28:	3a01      	subs	r2, #1
 8007e2a:	42b2      	cmp	r2, r6
 8007e2c:	d10a      	bne.n	8007e44 <__gethex+0x3f0>
 8007e2e:	1171      	asrs	r1, r6, #5
 8007e30:	2201      	movs	r2, #1
 8007e32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007e36:	f006 061f 	and.w	r6, r6, #31
 8007e3a:	fa02 f606 	lsl.w	r6, r2, r6
 8007e3e:	421e      	tst	r6, r3
 8007e40:	bf18      	it	ne
 8007e42:	4617      	movne	r7, r2
 8007e44:	f047 0720 	orr.w	r7, r7, #32
 8007e48:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007e4a:	601c      	str	r4, [r3, #0]
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	601d      	str	r5, [r3, #0]
 8007e50:	e695      	b.n	8007b7e <__gethex+0x12a>
 8007e52:	4299      	cmp	r1, r3
 8007e54:	f843 cc04 	str.w	ip, [r3, #-4]
 8007e58:	d8d8      	bhi.n	8007e0c <__gethex+0x3b8>
 8007e5a:	68a3      	ldr	r3, [r4, #8]
 8007e5c:	459b      	cmp	fp, r3
 8007e5e:	db19      	blt.n	8007e94 <__gethex+0x440>
 8007e60:	6861      	ldr	r1, [r4, #4]
 8007e62:	ee18 0a10 	vmov	r0, s16
 8007e66:	3101      	adds	r1, #1
 8007e68:	f000 f928 	bl	80080bc <_Balloc>
 8007e6c:	4681      	mov	r9, r0
 8007e6e:	b918      	cbnz	r0, 8007e78 <__gethex+0x424>
 8007e70:	4b1a      	ldr	r3, [pc, #104]	; (8007edc <__gethex+0x488>)
 8007e72:	4602      	mov	r2, r0
 8007e74:	2184      	movs	r1, #132	; 0x84
 8007e76:	e6a8      	b.n	8007bca <__gethex+0x176>
 8007e78:	6922      	ldr	r2, [r4, #16]
 8007e7a:	3202      	adds	r2, #2
 8007e7c:	f104 010c 	add.w	r1, r4, #12
 8007e80:	0092      	lsls	r2, r2, #2
 8007e82:	300c      	adds	r0, #12
 8007e84:	f000 f90c 	bl	80080a0 <memcpy>
 8007e88:	4621      	mov	r1, r4
 8007e8a:	ee18 0a10 	vmov	r0, s16
 8007e8e:	f000 f955 	bl	800813c <_Bfree>
 8007e92:	464c      	mov	r4, r9
 8007e94:	6923      	ldr	r3, [r4, #16]
 8007e96:	1c5a      	adds	r2, r3, #1
 8007e98:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007e9c:	6122      	str	r2, [r4, #16]
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	615a      	str	r2, [r3, #20]
 8007ea2:	e7bb      	b.n	8007e1c <__gethex+0x3c8>
 8007ea4:	6922      	ldr	r2, [r4, #16]
 8007ea6:	455a      	cmp	r2, fp
 8007ea8:	dd0b      	ble.n	8007ec2 <__gethex+0x46e>
 8007eaa:	2101      	movs	r1, #1
 8007eac:	4620      	mov	r0, r4
 8007eae:	f7ff fd69 	bl	8007984 <rshift>
 8007eb2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007eb6:	3501      	adds	r5, #1
 8007eb8:	42ab      	cmp	r3, r5
 8007eba:	f6ff aed0 	blt.w	8007c5e <__gethex+0x20a>
 8007ebe:	2701      	movs	r7, #1
 8007ec0:	e7c0      	b.n	8007e44 <__gethex+0x3f0>
 8007ec2:	f016 061f 	ands.w	r6, r6, #31
 8007ec6:	d0fa      	beq.n	8007ebe <__gethex+0x46a>
 8007ec8:	4453      	add	r3, sl
 8007eca:	f1c6 0620 	rsb	r6, r6, #32
 8007ece:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007ed2:	f000 f9e5 	bl	80082a0 <__hi0bits>
 8007ed6:	42b0      	cmp	r0, r6
 8007ed8:	dbe7      	blt.n	8007eaa <__gethex+0x456>
 8007eda:	e7f0      	b.n	8007ebe <__gethex+0x46a>
 8007edc:	08009d98 	.word	0x08009d98

08007ee0 <L_shift>:
 8007ee0:	f1c2 0208 	rsb	r2, r2, #8
 8007ee4:	0092      	lsls	r2, r2, #2
 8007ee6:	b570      	push	{r4, r5, r6, lr}
 8007ee8:	f1c2 0620 	rsb	r6, r2, #32
 8007eec:	6843      	ldr	r3, [r0, #4]
 8007eee:	6804      	ldr	r4, [r0, #0]
 8007ef0:	fa03 f506 	lsl.w	r5, r3, r6
 8007ef4:	432c      	orrs	r4, r5
 8007ef6:	40d3      	lsrs	r3, r2
 8007ef8:	6004      	str	r4, [r0, #0]
 8007efa:	f840 3f04 	str.w	r3, [r0, #4]!
 8007efe:	4288      	cmp	r0, r1
 8007f00:	d3f4      	bcc.n	8007eec <L_shift+0xc>
 8007f02:	bd70      	pop	{r4, r5, r6, pc}

08007f04 <__match>:
 8007f04:	b530      	push	{r4, r5, lr}
 8007f06:	6803      	ldr	r3, [r0, #0]
 8007f08:	3301      	adds	r3, #1
 8007f0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f0e:	b914      	cbnz	r4, 8007f16 <__match+0x12>
 8007f10:	6003      	str	r3, [r0, #0]
 8007f12:	2001      	movs	r0, #1
 8007f14:	bd30      	pop	{r4, r5, pc}
 8007f16:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f1a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007f1e:	2d19      	cmp	r5, #25
 8007f20:	bf98      	it	ls
 8007f22:	3220      	addls	r2, #32
 8007f24:	42a2      	cmp	r2, r4
 8007f26:	d0f0      	beq.n	8007f0a <__match+0x6>
 8007f28:	2000      	movs	r0, #0
 8007f2a:	e7f3      	b.n	8007f14 <__match+0x10>

08007f2c <__hexnan>:
 8007f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f30:	680b      	ldr	r3, [r1, #0]
 8007f32:	115e      	asrs	r6, r3, #5
 8007f34:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007f38:	f013 031f 	ands.w	r3, r3, #31
 8007f3c:	b087      	sub	sp, #28
 8007f3e:	bf18      	it	ne
 8007f40:	3604      	addne	r6, #4
 8007f42:	2500      	movs	r5, #0
 8007f44:	1f37      	subs	r7, r6, #4
 8007f46:	4690      	mov	r8, r2
 8007f48:	6802      	ldr	r2, [r0, #0]
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	4682      	mov	sl, r0
 8007f4e:	f846 5c04 	str.w	r5, [r6, #-4]
 8007f52:	46b9      	mov	r9, r7
 8007f54:	463c      	mov	r4, r7
 8007f56:	9502      	str	r5, [sp, #8]
 8007f58:	46ab      	mov	fp, r5
 8007f5a:	7851      	ldrb	r1, [r2, #1]
 8007f5c:	1c53      	adds	r3, r2, #1
 8007f5e:	9303      	str	r3, [sp, #12]
 8007f60:	b341      	cbz	r1, 8007fb4 <__hexnan+0x88>
 8007f62:	4608      	mov	r0, r1
 8007f64:	9205      	str	r2, [sp, #20]
 8007f66:	9104      	str	r1, [sp, #16]
 8007f68:	f7ff fd5e 	bl	8007a28 <__hexdig_fun>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d14f      	bne.n	8008010 <__hexnan+0xe4>
 8007f70:	9904      	ldr	r1, [sp, #16]
 8007f72:	9a05      	ldr	r2, [sp, #20]
 8007f74:	2920      	cmp	r1, #32
 8007f76:	d818      	bhi.n	8007faa <__hexnan+0x7e>
 8007f78:	9b02      	ldr	r3, [sp, #8]
 8007f7a:	459b      	cmp	fp, r3
 8007f7c:	dd13      	ble.n	8007fa6 <__hexnan+0x7a>
 8007f7e:	454c      	cmp	r4, r9
 8007f80:	d206      	bcs.n	8007f90 <__hexnan+0x64>
 8007f82:	2d07      	cmp	r5, #7
 8007f84:	dc04      	bgt.n	8007f90 <__hexnan+0x64>
 8007f86:	462a      	mov	r2, r5
 8007f88:	4649      	mov	r1, r9
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff ffa8 	bl	8007ee0 <L_shift>
 8007f90:	4544      	cmp	r4, r8
 8007f92:	d950      	bls.n	8008036 <__hexnan+0x10a>
 8007f94:	2300      	movs	r3, #0
 8007f96:	f1a4 0904 	sub.w	r9, r4, #4
 8007f9a:	f844 3c04 	str.w	r3, [r4, #-4]
 8007f9e:	f8cd b008 	str.w	fp, [sp, #8]
 8007fa2:	464c      	mov	r4, r9
 8007fa4:	461d      	mov	r5, r3
 8007fa6:	9a03      	ldr	r2, [sp, #12]
 8007fa8:	e7d7      	b.n	8007f5a <__hexnan+0x2e>
 8007faa:	2929      	cmp	r1, #41	; 0x29
 8007fac:	d156      	bne.n	800805c <__hexnan+0x130>
 8007fae:	3202      	adds	r2, #2
 8007fb0:	f8ca 2000 	str.w	r2, [sl]
 8007fb4:	f1bb 0f00 	cmp.w	fp, #0
 8007fb8:	d050      	beq.n	800805c <__hexnan+0x130>
 8007fba:	454c      	cmp	r4, r9
 8007fbc:	d206      	bcs.n	8007fcc <__hexnan+0xa0>
 8007fbe:	2d07      	cmp	r5, #7
 8007fc0:	dc04      	bgt.n	8007fcc <__hexnan+0xa0>
 8007fc2:	462a      	mov	r2, r5
 8007fc4:	4649      	mov	r1, r9
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f7ff ff8a 	bl	8007ee0 <L_shift>
 8007fcc:	4544      	cmp	r4, r8
 8007fce:	d934      	bls.n	800803a <__hexnan+0x10e>
 8007fd0:	f1a8 0204 	sub.w	r2, r8, #4
 8007fd4:	4623      	mov	r3, r4
 8007fd6:	f853 1b04 	ldr.w	r1, [r3], #4
 8007fda:	f842 1f04 	str.w	r1, [r2, #4]!
 8007fde:	429f      	cmp	r7, r3
 8007fe0:	d2f9      	bcs.n	8007fd6 <__hexnan+0xaa>
 8007fe2:	1b3b      	subs	r3, r7, r4
 8007fe4:	f023 0303 	bic.w	r3, r3, #3
 8007fe8:	3304      	adds	r3, #4
 8007fea:	3401      	adds	r4, #1
 8007fec:	3e03      	subs	r6, #3
 8007fee:	42b4      	cmp	r4, r6
 8007ff0:	bf88      	it	hi
 8007ff2:	2304      	movhi	r3, #4
 8007ff4:	4443      	add	r3, r8
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	f843 2b04 	str.w	r2, [r3], #4
 8007ffc:	429f      	cmp	r7, r3
 8007ffe:	d2fb      	bcs.n	8007ff8 <__hexnan+0xcc>
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	b91b      	cbnz	r3, 800800c <__hexnan+0xe0>
 8008004:	4547      	cmp	r7, r8
 8008006:	d127      	bne.n	8008058 <__hexnan+0x12c>
 8008008:	2301      	movs	r3, #1
 800800a:	603b      	str	r3, [r7, #0]
 800800c:	2005      	movs	r0, #5
 800800e:	e026      	b.n	800805e <__hexnan+0x132>
 8008010:	3501      	adds	r5, #1
 8008012:	2d08      	cmp	r5, #8
 8008014:	f10b 0b01 	add.w	fp, fp, #1
 8008018:	dd06      	ble.n	8008028 <__hexnan+0xfc>
 800801a:	4544      	cmp	r4, r8
 800801c:	d9c3      	bls.n	8007fa6 <__hexnan+0x7a>
 800801e:	2300      	movs	r3, #0
 8008020:	f844 3c04 	str.w	r3, [r4, #-4]
 8008024:	2501      	movs	r5, #1
 8008026:	3c04      	subs	r4, #4
 8008028:	6822      	ldr	r2, [r4, #0]
 800802a:	f000 000f 	and.w	r0, r0, #15
 800802e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008032:	6022      	str	r2, [r4, #0]
 8008034:	e7b7      	b.n	8007fa6 <__hexnan+0x7a>
 8008036:	2508      	movs	r5, #8
 8008038:	e7b5      	b.n	8007fa6 <__hexnan+0x7a>
 800803a:	9b01      	ldr	r3, [sp, #4]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d0df      	beq.n	8008000 <__hexnan+0xd4>
 8008040:	f04f 32ff 	mov.w	r2, #4294967295
 8008044:	f1c3 0320 	rsb	r3, r3, #32
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
 800804c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008050:	401a      	ands	r2, r3
 8008052:	f846 2c04 	str.w	r2, [r6, #-4]
 8008056:	e7d3      	b.n	8008000 <__hexnan+0xd4>
 8008058:	3f04      	subs	r7, #4
 800805a:	e7d1      	b.n	8008000 <__hexnan+0xd4>
 800805c:	2004      	movs	r0, #4
 800805e:	b007      	add	sp, #28
 8008060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008064 <_localeconv_r>:
 8008064:	4800      	ldr	r0, [pc, #0]	; (8008068 <_localeconv_r+0x4>)
 8008066:	4770      	bx	lr
 8008068:	20000170 	.word	0x20000170

0800806c <malloc>:
 800806c:	4b02      	ldr	r3, [pc, #8]	; (8008078 <malloc+0xc>)
 800806e:	4601      	mov	r1, r0
 8008070:	6818      	ldr	r0, [r3, #0]
 8008072:	f000 bd67 	b.w	8008b44 <_malloc_r>
 8008076:	bf00      	nop
 8008078:	20000018 	.word	0x20000018

0800807c <__ascii_mbtowc>:
 800807c:	b082      	sub	sp, #8
 800807e:	b901      	cbnz	r1, 8008082 <__ascii_mbtowc+0x6>
 8008080:	a901      	add	r1, sp, #4
 8008082:	b142      	cbz	r2, 8008096 <__ascii_mbtowc+0x1a>
 8008084:	b14b      	cbz	r3, 800809a <__ascii_mbtowc+0x1e>
 8008086:	7813      	ldrb	r3, [r2, #0]
 8008088:	600b      	str	r3, [r1, #0]
 800808a:	7812      	ldrb	r2, [r2, #0]
 800808c:	1e10      	subs	r0, r2, #0
 800808e:	bf18      	it	ne
 8008090:	2001      	movne	r0, #1
 8008092:	b002      	add	sp, #8
 8008094:	4770      	bx	lr
 8008096:	4610      	mov	r0, r2
 8008098:	e7fb      	b.n	8008092 <__ascii_mbtowc+0x16>
 800809a:	f06f 0001 	mvn.w	r0, #1
 800809e:	e7f8      	b.n	8008092 <__ascii_mbtowc+0x16>

080080a0 <memcpy>:
 80080a0:	440a      	add	r2, r1
 80080a2:	4291      	cmp	r1, r2
 80080a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a8:	d100      	bne.n	80080ac <memcpy+0xc>
 80080aa:	4770      	bx	lr
 80080ac:	b510      	push	{r4, lr}
 80080ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b6:	4291      	cmp	r1, r2
 80080b8:	d1f9      	bne.n	80080ae <memcpy+0xe>
 80080ba:	bd10      	pop	{r4, pc}

080080bc <_Balloc>:
 80080bc:	b570      	push	{r4, r5, r6, lr}
 80080be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80080c0:	4604      	mov	r4, r0
 80080c2:	460d      	mov	r5, r1
 80080c4:	b976      	cbnz	r6, 80080e4 <_Balloc+0x28>
 80080c6:	2010      	movs	r0, #16
 80080c8:	f7ff ffd0 	bl	800806c <malloc>
 80080cc:	4602      	mov	r2, r0
 80080ce:	6260      	str	r0, [r4, #36]	; 0x24
 80080d0:	b920      	cbnz	r0, 80080dc <_Balloc+0x20>
 80080d2:	4b18      	ldr	r3, [pc, #96]	; (8008134 <_Balloc+0x78>)
 80080d4:	4818      	ldr	r0, [pc, #96]	; (8008138 <_Balloc+0x7c>)
 80080d6:	2166      	movs	r1, #102	; 0x66
 80080d8:	f000 ff40 	bl	8008f5c <__assert_func>
 80080dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80080e0:	6006      	str	r6, [r0, #0]
 80080e2:	60c6      	str	r6, [r0, #12]
 80080e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80080e6:	68f3      	ldr	r3, [r6, #12]
 80080e8:	b183      	cbz	r3, 800810c <_Balloc+0x50>
 80080ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080f2:	b9b8      	cbnz	r0, 8008124 <_Balloc+0x68>
 80080f4:	2101      	movs	r1, #1
 80080f6:	fa01 f605 	lsl.w	r6, r1, r5
 80080fa:	1d72      	adds	r2, r6, #5
 80080fc:	0092      	lsls	r2, r2, #2
 80080fe:	4620      	mov	r0, r4
 8008100:	f000 fc9d 	bl	8008a3e <_calloc_r>
 8008104:	b160      	cbz	r0, 8008120 <_Balloc+0x64>
 8008106:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800810a:	e00e      	b.n	800812a <_Balloc+0x6e>
 800810c:	2221      	movs	r2, #33	; 0x21
 800810e:	2104      	movs	r1, #4
 8008110:	4620      	mov	r0, r4
 8008112:	f000 fc94 	bl	8008a3e <_calloc_r>
 8008116:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008118:	60f0      	str	r0, [r6, #12]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d1e4      	bne.n	80080ea <_Balloc+0x2e>
 8008120:	2000      	movs	r0, #0
 8008122:	bd70      	pop	{r4, r5, r6, pc}
 8008124:	6802      	ldr	r2, [r0, #0]
 8008126:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800812a:	2300      	movs	r3, #0
 800812c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008130:	e7f7      	b.n	8008122 <_Balloc+0x66>
 8008132:	bf00      	nop
 8008134:	08009d26 	.word	0x08009d26
 8008138:	08009e24 	.word	0x08009e24

0800813c <_Bfree>:
 800813c:	b570      	push	{r4, r5, r6, lr}
 800813e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008140:	4605      	mov	r5, r0
 8008142:	460c      	mov	r4, r1
 8008144:	b976      	cbnz	r6, 8008164 <_Bfree+0x28>
 8008146:	2010      	movs	r0, #16
 8008148:	f7ff ff90 	bl	800806c <malloc>
 800814c:	4602      	mov	r2, r0
 800814e:	6268      	str	r0, [r5, #36]	; 0x24
 8008150:	b920      	cbnz	r0, 800815c <_Bfree+0x20>
 8008152:	4b09      	ldr	r3, [pc, #36]	; (8008178 <_Bfree+0x3c>)
 8008154:	4809      	ldr	r0, [pc, #36]	; (800817c <_Bfree+0x40>)
 8008156:	218a      	movs	r1, #138	; 0x8a
 8008158:	f000 ff00 	bl	8008f5c <__assert_func>
 800815c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008160:	6006      	str	r6, [r0, #0]
 8008162:	60c6      	str	r6, [r0, #12]
 8008164:	b13c      	cbz	r4, 8008176 <_Bfree+0x3a>
 8008166:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008168:	6862      	ldr	r2, [r4, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008170:	6021      	str	r1, [r4, #0]
 8008172:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008176:	bd70      	pop	{r4, r5, r6, pc}
 8008178:	08009d26 	.word	0x08009d26
 800817c:	08009e24 	.word	0x08009e24

08008180 <__multadd>:
 8008180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008184:	690d      	ldr	r5, [r1, #16]
 8008186:	4607      	mov	r7, r0
 8008188:	460c      	mov	r4, r1
 800818a:	461e      	mov	r6, r3
 800818c:	f101 0c14 	add.w	ip, r1, #20
 8008190:	2000      	movs	r0, #0
 8008192:	f8dc 3000 	ldr.w	r3, [ip]
 8008196:	b299      	uxth	r1, r3
 8008198:	fb02 6101 	mla	r1, r2, r1, r6
 800819c:	0c1e      	lsrs	r6, r3, #16
 800819e:	0c0b      	lsrs	r3, r1, #16
 80081a0:	fb02 3306 	mla	r3, r2, r6, r3
 80081a4:	b289      	uxth	r1, r1
 80081a6:	3001      	adds	r0, #1
 80081a8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80081ac:	4285      	cmp	r5, r0
 80081ae:	f84c 1b04 	str.w	r1, [ip], #4
 80081b2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80081b6:	dcec      	bgt.n	8008192 <__multadd+0x12>
 80081b8:	b30e      	cbz	r6, 80081fe <__multadd+0x7e>
 80081ba:	68a3      	ldr	r3, [r4, #8]
 80081bc:	42ab      	cmp	r3, r5
 80081be:	dc19      	bgt.n	80081f4 <__multadd+0x74>
 80081c0:	6861      	ldr	r1, [r4, #4]
 80081c2:	4638      	mov	r0, r7
 80081c4:	3101      	adds	r1, #1
 80081c6:	f7ff ff79 	bl	80080bc <_Balloc>
 80081ca:	4680      	mov	r8, r0
 80081cc:	b928      	cbnz	r0, 80081da <__multadd+0x5a>
 80081ce:	4602      	mov	r2, r0
 80081d0:	4b0c      	ldr	r3, [pc, #48]	; (8008204 <__multadd+0x84>)
 80081d2:	480d      	ldr	r0, [pc, #52]	; (8008208 <__multadd+0x88>)
 80081d4:	21b5      	movs	r1, #181	; 0xb5
 80081d6:	f000 fec1 	bl	8008f5c <__assert_func>
 80081da:	6922      	ldr	r2, [r4, #16]
 80081dc:	3202      	adds	r2, #2
 80081de:	f104 010c 	add.w	r1, r4, #12
 80081e2:	0092      	lsls	r2, r2, #2
 80081e4:	300c      	adds	r0, #12
 80081e6:	f7ff ff5b 	bl	80080a0 <memcpy>
 80081ea:	4621      	mov	r1, r4
 80081ec:	4638      	mov	r0, r7
 80081ee:	f7ff ffa5 	bl	800813c <_Bfree>
 80081f2:	4644      	mov	r4, r8
 80081f4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081f8:	3501      	adds	r5, #1
 80081fa:	615e      	str	r6, [r3, #20]
 80081fc:	6125      	str	r5, [r4, #16]
 80081fe:	4620      	mov	r0, r4
 8008200:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008204:	08009d98 	.word	0x08009d98
 8008208:	08009e24 	.word	0x08009e24

0800820c <__s2b>:
 800820c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008210:	460c      	mov	r4, r1
 8008212:	4615      	mov	r5, r2
 8008214:	461f      	mov	r7, r3
 8008216:	2209      	movs	r2, #9
 8008218:	3308      	adds	r3, #8
 800821a:	4606      	mov	r6, r0
 800821c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008220:	2100      	movs	r1, #0
 8008222:	2201      	movs	r2, #1
 8008224:	429a      	cmp	r2, r3
 8008226:	db09      	blt.n	800823c <__s2b+0x30>
 8008228:	4630      	mov	r0, r6
 800822a:	f7ff ff47 	bl	80080bc <_Balloc>
 800822e:	b940      	cbnz	r0, 8008242 <__s2b+0x36>
 8008230:	4602      	mov	r2, r0
 8008232:	4b19      	ldr	r3, [pc, #100]	; (8008298 <__s2b+0x8c>)
 8008234:	4819      	ldr	r0, [pc, #100]	; (800829c <__s2b+0x90>)
 8008236:	21ce      	movs	r1, #206	; 0xce
 8008238:	f000 fe90 	bl	8008f5c <__assert_func>
 800823c:	0052      	lsls	r2, r2, #1
 800823e:	3101      	adds	r1, #1
 8008240:	e7f0      	b.n	8008224 <__s2b+0x18>
 8008242:	9b08      	ldr	r3, [sp, #32]
 8008244:	6143      	str	r3, [r0, #20]
 8008246:	2d09      	cmp	r5, #9
 8008248:	f04f 0301 	mov.w	r3, #1
 800824c:	6103      	str	r3, [r0, #16]
 800824e:	dd16      	ble.n	800827e <__s2b+0x72>
 8008250:	f104 0909 	add.w	r9, r4, #9
 8008254:	46c8      	mov	r8, r9
 8008256:	442c      	add	r4, r5
 8008258:	f818 3b01 	ldrb.w	r3, [r8], #1
 800825c:	4601      	mov	r1, r0
 800825e:	3b30      	subs	r3, #48	; 0x30
 8008260:	220a      	movs	r2, #10
 8008262:	4630      	mov	r0, r6
 8008264:	f7ff ff8c 	bl	8008180 <__multadd>
 8008268:	45a0      	cmp	r8, r4
 800826a:	d1f5      	bne.n	8008258 <__s2b+0x4c>
 800826c:	f1a5 0408 	sub.w	r4, r5, #8
 8008270:	444c      	add	r4, r9
 8008272:	1b2d      	subs	r5, r5, r4
 8008274:	1963      	adds	r3, r4, r5
 8008276:	42bb      	cmp	r3, r7
 8008278:	db04      	blt.n	8008284 <__s2b+0x78>
 800827a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800827e:	340a      	adds	r4, #10
 8008280:	2509      	movs	r5, #9
 8008282:	e7f6      	b.n	8008272 <__s2b+0x66>
 8008284:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008288:	4601      	mov	r1, r0
 800828a:	3b30      	subs	r3, #48	; 0x30
 800828c:	220a      	movs	r2, #10
 800828e:	4630      	mov	r0, r6
 8008290:	f7ff ff76 	bl	8008180 <__multadd>
 8008294:	e7ee      	b.n	8008274 <__s2b+0x68>
 8008296:	bf00      	nop
 8008298:	08009d98 	.word	0x08009d98
 800829c:	08009e24 	.word	0x08009e24

080082a0 <__hi0bits>:
 80082a0:	0c03      	lsrs	r3, r0, #16
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	b9d3      	cbnz	r3, 80082dc <__hi0bits+0x3c>
 80082a6:	0400      	lsls	r0, r0, #16
 80082a8:	2310      	movs	r3, #16
 80082aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80082ae:	bf04      	itt	eq
 80082b0:	0200      	lsleq	r0, r0, #8
 80082b2:	3308      	addeq	r3, #8
 80082b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80082b8:	bf04      	itt	eq
 80082ba:	0100      	lsleq	r0, r0, #4
 80082bc:	3304      	addeq	r3, #4
 80082be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80082c2:	bf04      	itt	eq
 80082c4:	0080      	lsleq	r0, r0, #2
 80082c6:	3302      	addeq	r3, #2
 80082c8:	2800      	cmp	r0, #0
 80082ca:	db05      	blt.n	80082d8 <__hi0bits+0x38>
 80082cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80082d0:	f103 0301 	add.w	r3, r3, #1
 80082d4:	bf08      	it	eq
 80082d6:	2320      	moveq	r3, #32
 80082d8:	4618      	mov	r0, r3
 80082da:	4770      	bx	lr
 80082dc:	2300      	movs	r3, #0
 80082de:	e7e4      	b.n	80082aa <__hi0bits+0xa>

080082e0 <__lo0bits>:
 80082e0:	6803      	ldr	r3, [r0, #0]
 80082e2:	f013 0207 	ands.w	r2, r3, #7
 80082e6:	4601      	mov	r1, r0
 80082e8:	d00b      	beq.n	8008302 <__lo0bits+0x22>
 80082ea:	07da      	lsls	r2, r3, #31
 80082ec:	d423      	bmi.n	8008336 <__lo0bits+0x56>
 80082ee:	0798      	lsls	r0, r3, #30
 80082f0:	bf49      	itett	mi
 80082f2:	085b      	lsrmi	r3, r3, #1
 80082f4:	089b      	lsrpl	r3, r3, #2
 80082f6:	2001      	movmi	r0, #1
 80082f8:	600b      	strmi	r3, [r1, #0]
 80082fa:	bf5c      	itt	pl
 80082fc:	600b      	strpl	r3, [r1, #0]
 80082fe:	2002      	movpl	r0, #2
 8008300:	4770      	bx	lr
 8008302:	b298      	uxth	r0, r3
 8008304:	b9a8      	cbnz	r0, 8008332 <__lo0bits+0x52>
 8008306:	0c1b      	lsrs	r3, r3, #16
 8008308:	2010      	movs	r0, #16
 800830a:	b2da      	uxtb	r2, r3
 800830c:	b90a      	cbnz	r2, 8008312 <__lo0bits+0x32>
 800830e:	3008      	adds	r0, #8
 8008310:	0a1b      	lsrs	r3, r3, #8
 8008312:	071a      	lsls	r2, r3, #28
 8008314:	bf04      	itt	eq
 8008316:	091b      	lsreq	r3, r3, #4
 8008318:	3004      	addeq	r0, #4
 800831a:	079a      	lsls	r2, r3, #30
 800831c:	bf04      	itt	eq
 800831e:	089b      	lsreq	r3, r3, #2
 8008320:	3002      	addeq	r0, #2
 8008322:	07da      	lsls	r2, r3, #31
 8008324:	d403      	bmi.n	800832e <__lo0bits+0x4e>
 8008326:	085b      	lsrs	r3, r3, #1
 8008328:	f100 0001 	add.w	r0, r0, #1
 800832c:	d005      	beq.n	800833a <__lo0bits+0x5a>
 800832e:	600b      	str	r3, [r1, #0]
 8008330:	4770      	bx	lr
 8008332:	4610      	mov	r0, r2
 8008334:	e7e9      	b.n	800830a <__lo0bits+0x2a>
 8008336:	2000      	movs	r0, #0
 8008338:	4770      	bx	lr
 800833a:	2020      	movs	r0, #32
 800833c:	4770      	bx	lr
	...

08008340 <__i2b>:
 8008340:	b510      	push	{r4, lr}
 8008342:	460c      	mov	r4, r1
 8008344:	2101      	movs	r1, #1
 8008346:	f7ff feb9 	bl	80080bc <_Balloc>
 800834a:	4602      	mov	r2, r0
 800834c:	b928      	cbnz	r0, 800835a <__i2b+0x1a>
 800834e:	4b05      	ldr	r3, [pc, #20]	; (8008364 <__i2b+0x24>)
 8008350:	4805      	ldr	r0, [pc, #20]	; (8008368 <__i2b+0x28>)
 8008352:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008356:	f000 fe01 	bl	8008f5c <__assert_func>
 800835a:	2301      	movs	r3, #1
 800835c:	6144      	str	r4, [r0, #20]
 800835e:	6103      	str	r3, [r0, #16]
 8008360:	bd10      	pop	{r4, pc}
 8008362:	bf00      	nop
 8008364:	08009d98 	.word	0x08009d98
 8008368:	08009e24 	.word	0x08009e24

0800836c <__multiply>:
 800836c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008370:	4691      	mov	r9, r2
 8008372:	690a      	ldr	r2, [r1, #16]
 8008374:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008378:	429a      	cmp	r2, r3
 800837a:	bfb8      	it	lt
 800837c:	460b      	movlt	r3, r1
 800837e:	460c      	mov	r4, r1
 8008380:	bfbc      	itt	lt
 8008382:	464c      	movlt	r4, r9
 8008384:	4699      	movlt	r9, r3
 8008386:	6927      	ldr	r7, [r4, #16]
 8008388:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800838c:	68a3      	ldr	r3, [r4, #8]
 800838e:	6861      	ldr	r1, [r4, #4]
 8008390:	eb07 060a 	add.w	r6, r7, sl
 8008394:	42b3      	cmp	r3, r6
 8008396:	b085      	sub	sp, #20
 8008398:	bfb8      	it	lt
 800839a:	3101      	addlt	r1, #1
 800839c:	f7ff fe8e 	bl	80080bc <_Balloc>
 80083a0:	b930      	cbnz	r0, 80083b0 <__multiply+0x44>
 80083a2:	4602      	mov	r2, r0
 80083a4:	4b44      	ldr	r3, [pc, #272]	; (80084b8 <__multiply+0x14c>)
 80083a6:	4845      	ldr	r0, [pc, #276]	; (80084bc <__multiply+0x150>)
 80083a8:	f240 115d 	movw	r1, #349	; 0x15d
 80083ac:	f000 fdd6 	bl	8008f5c <__assert_func>
 80083b0:	f100 0514 	add.w	r5, r0, #20
 80083b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80083b8:	462b      	mov	r3, r5
 80083ba:	2200      	movs	r2, #0
 80083bc:	4543      	cmp	r3, r8
 80083be:	d321      	bcc.n	8008404 <__multiply+0x98>
 80083c0:	f104 0314 	add.w	r3, r4, #20
 80083c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80083c8:	f109 0314 	add.w	r3, r9, #20
 80083cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80083d0:	9202      	str	r2, [sp, #8]
 80083d2:	1b3a      	subs	r2, r7, r4
 80083d4:	3a15      	subs	r2, #21
 80083d6:	f022 0203 	bic.w	r2, r2, #3
 80083da:	3204      	adds	r2, #4
 80083dc:	f104 0115 	add.w	r1, r4, #21
 80083e0:	428f      	cmp	r7, r1
 80083e2:	bf38      	it	cc
 80083e4:	2204      	movcc	r2, #4
 80083e6:	9201      	str	r2, [sp, #4]
 80083e8:	9a02      	ldr	r2, [sp, #8]
 80083ea:	9303      	str	r3, [sp, #12]
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d80c      	bhi.n	800840a <__multiply+0x9e>
 80083f0:	2e00      	cmp	r6, #0
 80083f2:	dd03      	ble.n	80083fc <__multiply+0x90>
 80083f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d05a      	beq.n	80084b2 <__multiply+0x146>
 80083fc:	6106      	str	r6, [r0, #16]
 80083fe:	b005      	add	sp, #20
 8008400:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008404:	f843 2b04 	str.w	r2, [r3], #4
 8008408:	e7d8      	b.n	80083bc <__multiply+0x50>
 800840a:	f8b3 a000 	ldrh.w	sl, [r3]
 800840e:	f1ba 0f00 	cmp.w	sl, #0
 8008412:	d024      	beq.n	800845e <__multiply+0xf2>
 8008414:	f104 0e14 	add.w	lr, r4, #20
 8008418:	46a9      	mov	r9, r5
 800841a:	f04f 0c00 	mov.w	ip, #0
 800841e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008422:	f8d9 1000 	ldr.w	r1, [r9]
 8008426:	fa1f fb82 	uxth.w	fp, r2
 800842a:	b289      	uxth	r1, r1
 800842c:	fb0a 110b 	mla	r1, sl, fp, r1
 8008430:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008434:	f8d9 2000 	ldr.w	r2, [r9]
 8008438:	4461      	add	r1, ip
 800843a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800843e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008442:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008446:	b289      	uxth	r1, r1
 8008448:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800844c:	4577      	cmp	r7, lr
 800844e:	f849 1b04 	str.w	r1, [r9], #4
 8008452:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008456:	d8e2      	bhi.n	800841e <__multiply+0xb2>
 8008458:	9a01      	ldr	r2, [sp, #4]
 800845a:	f845 c002 	str.w	ip, [r5, r2]
 800845e:	9a03      	ldr	r2, [sp, #12]
 8008460:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008464:	3304      	adds	r3, #4
 8008466:	f1b9 0f00 	cmp.w	r9, #0
 800846a:	d020      	beq.n	80084ae <__multiply+0x142>
 800846c:	6829      	ldr	r1, [r5, #0]
 800846e:	f104 0c14 	add.w	ip, r4, #20
 8008472:	46ae      	mov	lr, r5
 8008474:	f04f 0a00 	mov.w	sl, #0
 8008478:	f8bc b000 	ldrh.w	fp, [ip]
 800847c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008480:	fb09 220b 	mla	r2, r9, fp, r2
 8008484:	4492      	add	sl, r2
 8008486:	b289      	uxth	r1, r1
 8008488:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800848c:	f84e 1b04 	str.w	r1, [lr], #4
 8008490:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008494:	f8be 1000 	ldrh.w	r1, [lr]
 8008498:	0c12      	lsrs	r2, r2, #16
 800849a:	fb09 1102 	mla	r1, r9, r2, r1
 800849e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80084a2:	4567      	cmp	r7, ip
 80084a4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80084a8:	d8e6      	bhi.n	8008478 <__multiply+0x10c>
 80084aa:	9a01      	ldr	r2, [sp, #4]
 80084ac:	50a9      	str	r1, [r5, r2]
 80084ae:	3504      	adds	r5, #4
 80084b0:	e79a      	b.n	80083e8 <__multiply+0x7c>
 80084b2:	3e01      	subs	r6, #1
 80084b4:	e79c      	b.n	80083f0 <__multiply+0x84>
 80084b6:	bf00      	nop
 80084b8:	08009d98 	.word	0x08009d98
 80084bc:	08009e24 	.word	0x08009e24

080084c0 <__pow5mult>:
 80084c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084c4:	4615      	mov	r5, r2
 80084c6:	f012 0203 	ands.w	r2, r2, #3
 80084ca:	4606      	mov	r6, r0
 80084cc:	460f      	mov	r7, r1
 80084ce:	d007      	beq.n	80084e0 <__pow5mult+0x20>
 80084d0:	4c25      	ldr	r4, [pc, #148]	; (8008568 <__pow5mult+0xa8>)
 80084d2:	3a01      	subs	r2, #1
 80084d4:	2300      	movs	r3, #0
 80084d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80084da:	f7ff fe51 	bl	8008180 <__multadd>
 80084de:	4607      	mov	r7, r0
 80084e0:	10ad      	asrs	r5, r5, #2
 80084e2:	d03d      	beq.n	8008560 <__pow5mult+0xa0>
 80084e4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80084e6:	b97c      	cbnz	r4, 8008508 <__pow5mult+0x48>
 80084e8:	2010      	movs	r0, #16
 80084ea:	f7ff fdbf 	bl	800806c <malloc>
 80084ee:	4602      	mov	r2, r0
 80084f0:	6270      	str	r0, [r6, #36]	; 0x24
 80084f2:	b928      	cbnz	r0, 8008500 <__pow5mult+0x40>
 80084f4:	4b1d      	ldr	r3, [pc, #116]	; (800856c <__pow5mult+0xac>)
 80084f6:	481e      	ldr	r0, [pc, #120]	; (8008570 <__pow5mult+0xb0>)
 80084f8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80084fc:	f000 fd2e 	bl	8008f5c <__assert_func>
 8008500:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008504:	6004      	str	r4, [r0, #0]
 8008506:	60c4      	str	r4, [r0, #12]
 8008508:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800850c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008510:	b94c      	cbnz	r4, 8008526 <__pow5mult+0x66>
 8008512:	f240 2171 	movw	r1, #625	; 0x271
 8008516:	4630      	mov	r0, r6
 8008518:	f7ff ff12 	bl	8008340 <__i2b>
 800851c:	2300      	movs	r3, #0
 800851e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008522:	4604      	mov	r4, r0
 8008524:	6003      	str	r3, [r0, #0]
 8008526:	f04f 0900 	mov.w	r9, #0
 800852a:	07eb      	lsls	r3, r5, #31
 800852c:	d50a      	bpl.n	8008544 <__pow5mult+0x84>
 800852e:	4639      	mov	r1, r7
 8008530:	4622      	mov	r2, r4
 8008532:	4630      	mov	r0, r6
 8008534:	f7ff ff1a 	bl	800836c <__multiply>
 8008538:	4639      	mov	r1, r7
 800853a:	4680      	mov	r8, r0
 800853c:	4630      	mov	r0, r6
 800853e:	f7ff fdfd 	bl	800813c <_Bfree>
 8008542:	4647      	mov	r7, r8
 8008544:	106d      	asrs	r5, r5, #1
 8008546:	d00b      	beq.n	8008560 <__pow5mult+0xa0>
 8008548:	6820      	ldr	r0, [r4, #0]
 800854a:	b938      	cbnz	r0, 800855c <__pow5mult+0x9c>
 800854c:	4622      	mov	r2, r4
 800854e:	4621      	mov	r1, r4
 8008550:	4630      	mov	r0, r6
 8008552:	f7ff ff0b 	bl	800836c <__multiply>
 8008556:	6020      	str	r0, [r4, #0]
 8008558:	f8c0 9000 	str.w	r9, [r0]
 800855c:	4604      	mov	r4, r0
 800855e:	e7e4      	b.n	800852a <__pow5mult+0x6a>
 8008560:	4638      	mov	r0, r7
 8008562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008566:	bf00      	nop
 8008568:	08009f70 	.word	0x08009f70
 800856c:	08009d26 	.word	0x08009d26
 8008570:	08009e24 	.word	0x08009e24

08008574 <__lshift>:
 8008574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	460c      	mov	r4, r1
 800857a:	6849      	ldr	r1, [r1, #4]
 800857c:	6923      	ldr	r3, [r4, #16]
 800857e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008582:	68a3      	ldr	r3, [r4, #8]
 8008584:	4607      	mov	r7, r0
 8008586:	4691      	mov	r9, r2
 8008588:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800858c:	f108 0601 	add.w	r6, r8, #1
 8008590:	42b3      	cmp	r3, r6
 8008592:	db0b      	blt.n	80085ac <__lshift+0x38>
 8008594:	4638      	mov	r0, r7
 8008596:	f7ff fd91 	bl	80080bc <_Balloc>
 800859a:	4605      	mov	r5, r0
 800859c:	b948      	cbnz	r0, 80085b2 <__lshift+0x3e>
 800859e:	4602      	mov	r2, r0
 80085a0:	4b2a      	ldr	r3, [pc, #168]	; (800864c <__lshift+0xd8>)
 80085a2:	482b      	ldr	r0, [pc, #172]	; (8008650 <__lshift+0xdc>)
 80085a4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80085a8:	f000 fcd8 	bl	8008f5c <__assert_func>
 80085ac:	3101      	adds	r1, #1
 80085ae:	005b      	lsls	r3, r3, #1
 80085b0:	e7ee      	b.n	8008590 <__lshift+0x1c>
 80085b2:	2300      	movs	r3, #0
 80085b4:	f100 0114 	add.w	r1, r0, #20
 80085b8:	f100 0210 	add.w	r2, r0, #16
 80085bc:	4618      	mov	r0, r3
 80085be:	4553      	cmp	r3, sl
 80085c0:	db37      	blt.n	8008632 <__lshift+0xbe>
 80085c2:	6920      	ldr	r0, [r4, #16]
 80085c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80085c8:	f104 0314 	add.w	r3, r4, #20
 80085cc:	f019 091f 	ands.w	r9, r9, #31
 80085d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80085d4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80085d8:	d02f      	beq.n	800863a <__lshift+0xc6>
 80085da:	f1c9 0e20 	rsb	lr, r9, #32
 80085de:	468a      	mov	sl, r1
 80085e0:	f04f 0c00 	mov.w	ip, #0
 80085e4:	681a      	ldr	r2, [r3, #0]
 80085e6:	fa02 f209 	lsl.w	r2, r2, r9
 80085ea:	ea42 020c 	orr.w	r2, r2, ip
 80085ee:	f84a 2b04 	str.w	r2, [sl], #4
 80085f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085f6:	4298      	cmp	r0, r3
 80085f8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80085fc:	d8f2      	bhi.n	80085e4 <__lshift+0x70>
 80085fe:	1b03      	subs	r3, r0, r4
 8008600:	3b15      	subs	r3, #21
 8008602:	f023 0303 	bic.w	r3, r3, #3
 8008606:	3304      	adds	r3, #4
 8008608:	f104 0215 	add.w	r2, r4, #21
 800860c:	4290      	cmp	r0, r2
 800860e:	bf38      	it	cc
 8008610:	2304      	movcc	r3, #4
 8008612:	f841 c003 	str.w	ip, [r1, r3]
 8008616:	f1bc 0f00 	cmp.w	ip, #0
 800861a:	d001      	beq.n	8008620 <__lshift+0xac>
 800861c:	f108 0602 	add.w	r6, r8, #2
 8008620:	3e01      	subs	r6, #1
 8008622:	4638      	mov	r0, r7
 8008624:	612e      	str	r6, [r5, #16]
 8008626:	4621      	mov	r1, r4
 8008628:	f7ff fd88 	bl	800813c <_Bfree>
 800862c:	4628      	mov	r0, r5
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	f842 0f04 	str.w	r0, [r2, #4]!
 8008636:	3301      	adds	r3, #1
 8008638:	e7c1      	b.n	80085be <__lshift+0x4a>
 800863a:	3904      	subs	r1, #4
 800863c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008640:	f841 2f04 	str.w	r2, [r1, #4]!
 8008644:	4298      	cmp	r0, r3
 8008646:	d8f9      	bhi.n	800863c <__lshift+0xc8>
 8008648:	e7ea      	b.n	8008620 <__lshift+0xac>
 800864a:	bf00      	nop
 800864c:	08009d98 	.word	0x08009d98
 8008650:	08009e24 	.word	0x08009e24

08008654 <__mcmp>:
 8008654:	b530      	push	{r4, r5, lr}
 8008656:	6902      	ldr	r2, [r0, #16]
 8008658:	690c      	ldr	r4, [r1, #16]
 800865a:	1b12      	subs	r2, r2, r4
 800865c:	d10e      	bne.n	800867c <__mcmp+0x28>
 800865e:	f100 0314 	add.w	r3, r0, #20
 8008662:	3114      	adds	r1, #20
 8008664:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008668:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800866c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008670:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008674:	42a5      	cmp	r5, r4
 8008676:	d003      	beq.n	8008680 <__mcmp+0x2c>
 8008678:	d305      	bcc.n	8008686 <__mcmp+0x32>
 800867a:	2201      	movs	r2, #1
 800867c:	4610      	mov	r0, r2
 800867e:	bd30      	pop	{r4, r5, pc}
 8008680:	4283      	cmp	r3, r0
 8008682:	d3f3      	bcc.n	800866c <__mcmp+0x18>
 8008684:	e7fa      	b.n	800867c <__mcmp+0x28>
 8008686:	f04f 32ff 	mov.w	r2, #4294967295
 800868a:	e7f7      	b.n	800867c <__mcmp+0x28>

0800868c <__mdiff>:
 800868c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008690:	460c      	mov	r4, r1
 8008692:	4606      	mov	r6, r0
 8008694:	4611      	mov	r1, r2
 8008696:	4620      	mov	r0, r4
 8008698:	4690      	mov	r8, r2
 800869a:	f7ff ffdb 	bl	8008654 <__mcmp>
 800869e:	1e05      	subs	r5, r0, #0
 80086a0:	d110      	bne.n	80086c4 <__mdiff+0x38>
 80086a2:	4629      	mov	r1, r5
 80086a4:	4630      	mov	r0, r6
 80086a6:	f7ff fd09 	bl	80080bc <_Balloc>
 80086aa:	b930      	cbnz	r0, 80086ba <__mdiff+0x2e>
 80086ac:	4b3a      	ldr	r3, [pc, #232]	; (8008798 <__mdiff+0x10c>)
 80086ae:	4602      	mov	r2, r0
 80086b0:	f240 2132 	movw	r1, #562	; 0x232
 80086b4:	4839      	ldr	r0, [pc, #228]	; (800879c <__mdiff+0x110>)
 80086b6:	f000 fc51 	bl	8008f5c <__assert_func>
 80086ba:	2301      	movs	r3, #1
 80086bc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80086c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086c4:	bfa4      	itt	ge
 80086c6:	4643      	movge	r3, r8
 80086c8:	46a0      	movge	r8, r4
 80086ca:	4630      	mov	r0, r6
 80086cc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80086d0:	bfa6      	itte	ge
 80086d2:	461c      	movge	r4, r3
 80086d4:	2500      	movge	r5, #0
 80086d6:	2501      	movlt	r5, #1
 80086d8:	f7ff fcf0 	bl	80080bc <_Balloc>
 80086dc:	b920      	cbnz	r0, 80086e8 <__mdiff+0x5c>
 80086de:	4b2e      	ldr	r3, [pc, #184]	; (8008798 <__mdiff+0x10c>)
 80086e0:	4602      	mov	r2, r0
 80086e2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80086e6:	e7e5      	b.n	80086b4 <__mdiff+0x28>
 80086e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80086ec:	6926      	ldr	r6, [r4, #16]
 80086ee:	60c5      	str	r5, [r0, #12]
 80086f0:	f104 0914 	add.w	r9, r4, #20
 80086f4:	f108 0514 	add.w	r5, r8, #20
 80086f8:	f100 0e14 	add.w	lr, r0, #20
 80086fc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008700:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008704:	f108 0210 	add.w	r2, r8, #16
 8008708:	46f2      	mov	sl, lr
 800870a:	2100      	movs	r1, #0
 800870c:	f859 3b04 	ldr.w	r3, [r9], #4
 8008710:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008714:	fa1f f883 	uxth.w	r8, r3
 8008718:	fa11 f18b 	uxtah	r1, r1, fp
 800871c:	0c1b      	lsrs	r3, r3, #16
 800871e:	eba1 0808 	sub.w	r8, r1, r8
 8008722:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008726:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800872a:	fa1f f888 	uxth.w	r8, r8
 800872e:	1419      	asrs	r1, r3, #16
 8008730:	454e      	cmp	r6, r9
 8008732:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008736:	f84a 3b04 	str.w	r3, [sl], #4
 800873a:	d8e7      	bhi.n	800870c <__mdiff+0x80>
 800873c:	1b33      	subs	r3, r6, r4
 800873e:	3b15      	subs	r3, #21
 8008740:	f023 0303 	bic.w	r3, r3, #3
 8008744:	3304      	adds	r3, #4
 8008746:	3415      	adds	r4, #21
 8008748:	42a6      	cmp	r6, r4
 800874a:	bf38      	it	cc
 800874c:	2304      	movcc	r3, #4
 800874e:	441d      	add	r5, r3
 8008750:	4473      	add	r3, lr
 8008752:	469e      	mov	lr, r3
 8008754:	462e      	mov	r6, r5
 8008756:	4566      	cmp	r6, ip
 8008758:	d30e      	bcc.n	8008778 <__mdiff+0xec>
 800875a:	f10c 0203 	add.w	r2, ip, #3
 800875e:	1b52      	subs	r2, r2, r5
 8008760:	f022 0203 	bic.w	r2, r2, #3
 8008764:	3d03      	subs	r5, #3
 8008766:	45ac      	cmp	ip, r5
 8008768:	bf38      	it	cc
 800876a:	2200      	movcc	r2, #0
 800876c:	441a      	add	r2, r3
 800876e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008772:	b17b      	cbz	r3, 8008794 <__mdiff+0x108>
 8008774:	6107      	str	r7, [r0, #16]
 8008776:	e7a3      	b.n	80086c0 <__mdiff+0x34>
 8008778:	f856 8b04 	ldr.w	r8, [r6], #4
 800877c:	fa11 f288 	uxtah	r2, r1, r8
 8008780:	1414      	asrs	r4, r2, #16
 8008782:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008786:	b292      	uxth	r2, r2
 8008788:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800878c:	f84e 2b04 	str.w	r2, [lr], #4
 8008790:	1421      	asrs	r1, r4, #16
 8008792:	e7e0      	b.n	8008756 <__mdiff+0xca>
 8008794:	3f01      	subs	r7, #1
 8008796:	e7ea      	b.n	800876e <__mdiff+0xe2>
 8008798:	08009d98 	.word	0x08009d98
 800879c:	08009e24 	.word	0x08009e24

080087a0 <__ulp>:
 80087a0:	b082      	sub	sp, #8
 80087a2:	ed8d 0b00 	vstr	d0, [sp]
 80087a6:	9b01      	ldr	r3, [sp, #4]
 80087a8:	4912      	ldr	r1, [pc, #72]	; (80087f4 <__ulp+0x54>)
 80087aa:	4019      	ands	r1, r3
 80087ac:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80087b0:	2900      	cmp	r1, #0
 80087b2:	dd05      	ble.n	80087c0 <__ulp+0x20>
 80087b4:	2200      	movs	r2, #0
 80087b6:	460b      	mov	r3, r1
 80087b8:	ec43 2b10 	vmov	d0, r2, r3
 80087bc:	b002      	add	sp, #8
 80087be:	4770      	bx	lr
 80087c0:	4249      	negs	r1, r1
 80087c2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80087c6:	ea4f 5021 	mov.w	r0, r1, asr #20
 80087ca:	f04f 0200 	mov.w	r2, #0
 80087ce:	f04f 0300 	mov.w	r3, #0
 80087d2:	da04      	bge.n	80087de <__ulp+0x3e>
 80087d4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80087d8:	fa41 f300 	asr.w	r3, r1, r0
 80087dc:	e7ec      	b.n	80087b8 <__ulp+0x18>
 80087de:	f1a0 0114 	sub.w	r1, r0, #20
 80087e2:	291e      	cmp	r1, #30
 80087e4:	bfda      	itte	le
 80087e6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80087ea:	fa20 f101 	lsrle.w	r1, r0, r1
 80087ee:	2101      	movgt	r1, #1
 80087f0:	460a      	mov	r2, r1
 80087f2:	e7e1      	b.n	80087b8 <__ulp+0x18>
 80087f4:	7ff00000 	.word	0x7ff00000

080087f8 <__b2d>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	6905      	ldr	r5, [r0, #16]
 80087fc:	f100 0714 	add.w	r7, r0, #20
 8008800:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008804:	1f2e      	subs	r6, r5, #4
 8008806:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800880a:	4620      	mov	r0, r4
 800880c:	f7ff fd48 	bl	80082a0 <__hi0bits>
 8008810:	f1c0 0320 	rsb	r3, r0, #32
 8008814:	280a      	cmp	r0, #10
 8008816:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008894 <__b2d+0x9c>
 800881a:	600b      	str	r3, [r1, #0]
 800881c:	dc14      	bgt.n	8008848 <__b2d+0x50>
 800881e:	f1c0 0e0b 	rsb	lr, r0, #11
 8008822:	fa24 f10e 	lsr.w	r1, r4, lr
 8008826:	42b7      	cmp	r7, r6
 8008828:	ea41 030c 	orr.w	r3, r1, ip
 800882c:	bf34      	ite	cc
 800882e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008832:	2100      	movcs	r1, #0
 8008834:	3015      	adds	r0, #21
 8008836:	fa04 f000 	lsl.w	r0, r4, r0
 800883a:	fa21 f10e 	lsr.w	r1, r1, lr
 800883e:	ea40 0201 	orr.w	r2, r0, r1
 8008842:	ec43 2b10 	vmov	d0, r2, r3
 8008846:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008848:	42b7      	cmp	r7, r6
 800884a:	bf3a      	itte	cc
 800884c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008850:	f1a5 0608 	subcc.w	r6, r5, #8
 8008854:	2100      	movcs	r1, #0
 8008856:	380b      	subs	r0, #11
 8008858:	d017      	beq.n	800888a <__b2d+0x92>
 800885a:	f1c0 0c20 	rsb	ip, r0, #32
 800885e:	fa04 f500 	lsl.w	r5, r4, r0
 8008862:	42be      	cmp	r6, r7
 8008864:	fa21 f40c 	lsr.w	r4, r1, ip
 8008868:	ea45 0504 	orr.w	r5, r5, r4
 800886c:	bf8c      	ite	hi
 800886e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008872:	2400      	movls	r4, #0
 8008874:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008878:	fa01 f000 	lsl.w	r0, r1, r0
 800887c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008880:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008884:	ea40 0204 	orr.w	r2, r0, r4
 8008888:	e7db      	b.n	8008842 <__b2d+0x4a>
 800888a:	ea44 030c 	orr.w	r3, r4, ip
 800888e:	460a      	mov	r2, r1
 8008890:	e7d7      	b.n	8008842 <__b2d+0x4a>
 8008892:	bf00      	nop
 8008894:	3ff00000 	.word	0x3ff00000

08008898 <__d2b>:
 8008898:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800889c:	4689      	mov	r9, r1
 800889e:	2101      	movs	r1, #1
 80088a0:	ec57 6b10 	vmov	r6, r7, d0
 80088a4:	4690      	mov	r8, r2
 80088a6:	f7ff fc09 	bl	80080bc <_Balloc>
 80088aa:	4604      	mov	r4, r0
 80088ac:	b930      	cbnz	r0, 80088bc <__d2b+0x24>
 80088ae:	4602      	mov	r2, r0
 80088b0:	4b25      	ldr	r3, [pc, #148]	; (8008948 <__d2b+0xb0>)
 80088b2:	4826      	ldr	r0, [pc, #152]	; (800894c <__d2b+0xb4>)
 80088b4:	f240 310a 	movw	r1, #778	; 0x30a
 80088b8:	f000 fb50 	bl	8008f5c <__assert_func>
 80088bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80088c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80088c4:	bb35      	cbnz	r5, 8008914 <__d2b+0x7c>
 80088c6:	2e00      	cmp	r6, #0
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	d028      	beq.n	800891e <__d2b+0x86>
 80088cc:	4668      	mov	r0, sp
 80088ce:	9600      	str	r6, [sp, #0]
 80088d0:	f7ff fd06 	bl	80082e0 <__lo0bits>
 80088d4:	9900      	ldr	r1, [sp, #0]
 80088d6:	b300      	cbz	r0, 800891a <__d2b+0x82>
 80088d8:	9a01      	ldr	r2, [sp, #4]
 80088da:	f1c0 0320 	rsb	r3, r0, #32
 80088de:	fa02 f303 	lsl.w	r3, r2, r3
 80088e2:	430b      	orrs	r3, r1
 80088e4:	40c2      	lsrs	r2, r0
 80088e6:	6163      	str	r3, [r4, #20]
 80088e8:	9201      	str	r2, [sp, #4]
 80088ea:	9b01      	ldr	r3, [sp, #4]
 80088ec:	61a3      	str	r3, [r4, #24]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	bf14      	ite	ne
 80088f2:	2202      	movne	r2, #2
 80088f4:	2201      	moveq	r2, #1
 80088f6:	6122      	str	r2, [r4, #16]
 80088f8:	b1d5      	cbz	r5, 8008930 <__d2b+0x98>
 80088fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088fe:	4405      	add	r5, r0
 8008900:	f8c9 5000 	str.w	r5, [r9]
 8008904:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008908:	f8c8 0000 	str.w	r0, [r8]
 800890c:	4620      	mov	r0, r4
 800890e:	b003      	add	sp, #12
 8008910:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008914:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008918:	e7d5      	b.n	80088c6 <__d2b+0x2e>
 800891a:	6161      	str	r1, [r4, #20]
 800891c:	e7e5      	b.n	80088ea <__d2b+0x52>
 800891e:	a801      	add	r0, sp, #4
 8008920:	f7ff fcde 	bl	80082e0 <__lo0bits>
 8008924:	9b01      	ldr	r3, [sp, #4]
 8008926:	6163      	str	r3, [r4, #20]
 8008928:	2201      	movs	r2, #1
 800892a:	6122      	str	r2, [r4, #16]
 800892c:	3020      	adds	r0, #32
 800892e:	e7e3      	b.n	80088f8 <__d2b+0x60>
 8008930:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008934:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008938:	f8c9 0000 	str.w	r0, [r9]
 800893c:	6918      	ldr	r0, [r3, #16]
 800893e:	f7ff fcaf 	bl	80082a0 <__hi0bits>
 8008942:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008946:	e7df      	b.n	8008908 <__d2b+0x70>
 8008948:	08009d98 	.word	0x08009d98
 800894c:	08009e24 	.word	0x08009e24

08008950 <__ratio>:
 8008950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008954:	4688      	mov	r8, r1
 8008956:	4669      	mov	r1, sp
 8008958:	4681      	mov	r9, r0
 800895a:	f7ff ff4d 	bl	80087f8 <__b2d>
 800895e:	a901      	add	r1, sp, #4
 8008960:	4640      	mov	r0, r8
 8008962:	ec55 4b10 	vmov	r4, r5, d0
 8008966:	f7ff ff47 	bl	80087f8 <__b2d>
 800896a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800896e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008972:	eba3 0c02 	sub.w	ip, r3, r2
 8008976:	e9dd 3200 	ldrd	r3, r2, [sp]
 800897a:	1a9b      	subs	r3, r3, r2
 800897c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008980:	ec51 0b10 	vmov	r0, r1, d0
 8008984:	2b00      	cmp	r3, #0
 8008986:	bfd6      	itet	le
 8008988:	460a      	movle	r2, r1
 800898a:	462a      	movgt	r2, r5
 800898c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008990:	468b      	mov	fp, r1
 8008992:	462f      	mov	r7, r5
 8008994:	bfd4      	ite	le
 8008996:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800899a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800899e:	4620      	mov	r0, r4
 80089a0:	ee10 2a10 	vmov	r2, s0
 80089a4:	465b      	mov	r3, fp
 80089a6:	4639      	mov	r1, r7
 80089a8:	f7f7 ff50 	bl	800084c <__aeabi_ddiv>
 80089ac:	ec41 0b10 	vmov	d0, r0, r1
 80089b0:	b003      	add	sp, #12
 80089b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080089b6 <__copybits>:
 80089b6:	3901      	subs	r1, #1
 80089b8:	b570      	push	{r4, r5, r6, lr}
 80089ba:	1149      	asrs	r1, r1, #5
 80089bc:	6914      	ldr	r4, [r2, #16]
 80089be:	3101      	adds	r1, #1
 80089c0:	f102 0314 	add.w	r3, r2, #20
 80089c4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80089c8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80089cc:	1f05      	subs	r5, r0, #4
 80089ce:	42a3      	cmp	r3, r4
 80089d0:	d30c      	bcc.n	80089ec <__copybits+0x36>
 80089d2:	1aa3      	subs	r3, r4, r2
 80089d4:	3b11      	subs	r3, #17
 80089d6:	f023 0303 	bic.w	r3, r3, #3
 80089da:	3211      	adds	r2, #17
 80089dc:	42a2      	cmp	r2, r4
 80089de:	bf88      	it	hi
 80089e0:	2300      	movhi	r3, #0
 80089e2:	4418      	add	r0, r3
 80089e4:	2300      	movs	r3, #0
 80089e6:	4288      	cmp	r0, r1
 80089e8:	d305      	bcc.n	80089f6 <__copybits+0x40>
 80089ea:	bd70      	pop	{r4, r5, r6, pc}
 80089ec:	f853 6b04 	ldr.w	r6, [r3], #4
 80089f0:	f845 6f04 	str.w	r6, [r5, #4]!
 80089f4:	e7eb      	b.n	80089ce <__copybits+0x18>
 80089f6:	f840 3b04 	str.w	r3, [r0], #4
 80089fa:	e7f4      	b.n	80089e6 <__copybits+0x30>

080089fc <__any_on>:
 80089fc:	f100 0214 	add.w	r2, r0, #20
 8008a00:	6900      	ldr	r0, [r0, #16]
 8008a02:	114b      	asrs	r3, r1, #5
 8008a04:	4298      	cmp	r0, r3
 8008a06:	b510      	push	{r4, lr}
 8008a08:	db11      	blt.n	8008a2e <__any_on+0x32>
 8008a0a:	dd0a      	ble.n	8008a22 <__any_on+0x26>
 8008a0c:	f011 011f 	ands.w	r1, r1, #31
 8008a10:	d007      	beq.n	8008a22 <__any_on+0x26>
 8008a12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008a16:	fa24 f001 	lsr.w	r0, r4, r1
 8008a1a:	fa00 f101 	lsl.w	r1, r0, r1
 8008a1e:	428c      	cmp	r4, r1
 8008a20:	d10b      	bne.n	8008a3a <__any_on+0x3e>
 8008a22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d803      	bhi.n	8008a32 <__any_on+0x36>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	bd10      	pop	{r4, pc}
 8008a2e:	4603      	mov	r3, r0
 8008a30:	e7f7      	b.n	8008a22 <__any_on+0x26>
 8008a32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008a36:	2900      	cmp	r1, #0
 8008a38:	d0f5      	beq.n	8008a26 <__any_on+0x2a>
 8008a3a:	2001      	movs	r0, #1
 8008a3c:	e7f6      	b.n	8008a2c <__any_on+0x30>

08008a3e <_calloc_r>:
 8008a3e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a40:	fba1 2402 	umull	r2, r4, r1, r2
 8008a44:	b94c      	cbnz	r4, 8008a5a <_calloc_r+0x1c>
 8008a46:	4611      	mov	r1, r2
 8008a48:	9201      	str	r2, [sp, #4]
 8008a4a:	f000 f87b 	bl	8008b44 <_malloc_r>
 8008a4e:	9a01      	ldr	r2, [sp, #4]
 8008a50:	4605      	mov	r5, r0
 8008a52:	b930      	cbnz	r0, 8008a62 <_calloc_r+0x24>
 8008a54:	4628      	mov	r0, r5
 8008a56:	b003      	add	sp, #12
 8008a58:	bd30      	pop	{r4, r5, pc}
 8008a5a:	220c      	movs	r2, #12
 8008a5c:	6002      	str	r2, [r0, #0]
 8008a5e:	2500      	movs	r5, #0
 8008a60:	e7f8      	b.n	8008a54 <_calloc_r+0x16>
 8008a62:	4621      	mov	r1, r4
 8008a64:	f7fc fbbe 	bl	80051e4 <memset>
 8008a68:	e7f4      	b.n	8008a54 <_calloc_r+0x16>
	...

08008a6c <_free_r>:
 8008a6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a6e:	2900      	cmp	r1, #0
 8008a70:	d044      	beq.n	8008afc <_free_r+0x90>
 8008a72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a76:	9001      	str	r0, [sp, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f1a1 0404 	sub.w	r4, r1, #4
 8008a7e:	bfb8      	it	lt
 8008a80:	18e4      	addlt	r4, r4, r3
 8008a82:	f000 fab5 	bl	8008ff0 <__malloc_lock>
 8008a86:	4a1e      	ldr	r2, [pc, #120]	; (8008b00 <_free_r+0x94>)
 8008a88:	9801      	ldr	r0, [sp, #4]
 8008a8a:	6813      	ldr	r3, [r2, #0]
 8008a8c:	b933      	cbnz	r3, 8008a9c <_free_r+0x30>
 8008a8e:	6063      	str	r3, [r4, #4]
 8008a90:	6014      	str	r4, [r2, #0]
 8008a92:	b003      	add	sp, #12
 8008a94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008a98:	f000 bab0 	b.w	8008ffc <__malloc_unlock>
 8008a9c:	42a3      	cmp	r3, r4
 8008a9e:	d908      	bls.n	8008ab2 <_free_r+0x46>
 8008aa0:	6825      	ldr	r5, [r4, #0]
 8008aa2:	1961      	adds	r1, r4, r5
 8008aa4:	428b      	cmp	r3, r1
 8008aa6:	bf01      	itttt	eq
 8008aa8:	6819      	ldreq	r1, [r3, #0]
 8008aaa:	685b      	ldreq	r3, [r3, #4]
 8008aac:	1949      	addeq	r1, r1, r5
 8008aae:	6021      	streq	r1, [r4, #0]
 8008ab0:	e7ed      	b.n	8008a8e <_free_r+0x22>
 8008ab2:	461a      	mov	r2, r3
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	b10b      	cbz	r3, 8008abc <_free_r+0x50>
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	d9fa      	bls.n	8008ab2 <_free_r+0x46>
 8008abc:	6811      	ldr	r1, [r2, #0]
 8008abe:	1855      	adds	r5, r2, r1
 8008ac0:	42a5      	cmp	r5, r4
 8008ac2:	d10b      	bne.n	8008adc <_free_r+0x70>
 8008ac4:	6824      	ldr	r4, [r4, #0]
 8008ac6:	4421      	add	r1, r4
 8008ac8:	1854      	adds	r4, r2, r1
 8008aca:	42a3      	cmp	r3, r4
 8008acc:	6011      	str	r1, [r2, #0]
 8008ace:	d1e0      	bne.n	8008a92 <_free_r+0x26>
 8008ad0:	681c      	ldr	r4, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	6053      	str	r3, [r2, #4]
 8008ad6:	4421      	add	r1, r4
 8008ad8:	6011      	str	r1, [r2, #0]
 8008ada:	e7da      	b.n	8008a92 <_free_r+0x26>
 8008adc:	d902      	bls.n	8008ae4 <_free_r+0x78>
 8008ade:	230c      	movs	r3, #12
 8008ae0:	6003      	str	r3, [r0, #0]
 8008ae2:	e7d6      	b.n	8008a92 <_free_r+0x26>
 8008ae4:	6825      	ldr	r5, [r4, #0]
 8008ae6:	1961      	adds	r1, r4, r5
 8008ae8:	428b      	cmp	r3, r1
 8008aea:	bf04      	itt	eq
 8008aec:	6819      	ldreq	r1, [r3, #0]
 8008aee:	685b      	ldreq	r3, [r3, #4]
 8008af0:	6063      	str	r3, [r4, #4]
 8008af2:	bf04      	itt	eq
 8008af4:	1949      	addeq	r1, r1, r5
 8008af6:	6021      	streq	r1, [r4, #0]
 8008af8:	6054      	str	r4, [r2, #4]
 8008afa:	e7ca      	b.n	8008a92 <_free_r+0x26>
 8008afc:	b003      	add	sp, #12
 8008afe:	bd30      	pop	{r4, r5, pc}
 8008b00:	20000714 	.word	0x20000714

08008b04 <sbrk_aligned>:
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4e0e      	ldr	r6, [pc, #56]	; (8008b40 <sbrk_aligned+0x3c>)
 8008b08:	460c      	mov	r4, r1
 8008b0a:	6831      	ldr	r1, [r6, #0]
 8008b0c:	4605      	mov	r5, r0
 8008b0e:	b911      	cbnz	r1, 8008b16 <sbrk_aligned+0x12>
 8008b10:	f000 f9f2 	bl	8008ef8 <_sbrk_r>
 8008b14:	6030      	str	r0, [r6, #0]
 8008b16:	4621      	mov	r1, r4
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f000 f9ed 	bl	8008ef8 <_sbrk_r>
 8008b1e:	1c43      	adds	r3, r0, #1
 8008b20:	d00a      	beq.n	8008b38 <sbrk_aligned+0x34>
 8008b22:	1cc4      	adds	r4, r0, #3
 8008b24:	f024 0403 	bic.w	r4, r4, #3
 8008b28:	42a0      	cmp	r0, r4
 8008b2a:	d007      	beq.n	8008b3c <sbrk_aligned+0x38>
 8008b2c:	1a21      	subs	r1, r4, r0
 8008b2e:	4628      	mov	r0, r5
 8008b30:	f000 f9e2 	bl	8008ef8 <_sbrk_r>
 8008b34:	3001      	adds	r0, #1
 8008b36:	d101      	bne.n	8008b3c <sbrk_aligned+0x38>
 8008b38:	f04f 34ff 	mov.w	r4, #4294967295
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	bd70      	pop	{r4, r5, r6, pc}
 8008b40:	20000718 	.word	0x20000718

08008b44 <_malloc_r>:
 8008b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b48:	1ccd      	adds	r5, r1, #3
 8008b4a:	f025 0503 	bic.w	r5, r5, #3
 8008b4e:	3508      	adds	r5, #8
 8008b50:	2d0c      	cmp	r5, #12
 8008b52:	bf38      	it	cc
 8008b54:	250c      	movcc	r5, #12
 8008b56:	2d00      	cmp	r5, #0
 8008b58:	4607      	mov	r7, r0
 8008b5a:	db01      	blt.n	8008b60 <_malloc_r+0x1c>
 8008b5c:	42a9      	cmp	r1, r5
 8008b5e:	d905      	bls.n	8008b6c <_malloc_r+0x28>
 8008b60:	230c      	movs	r3, #12
 8008b62:	603b      	str	r3, [r7, #0]
 8008b64:	2600      	movs	r6, #0
 8008b66:	4630      	mov	r0, r6
 8008b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6c:	4e2e      	ldr	r6, [pc, #184]	; (8008c28 <_malloc_r+0xe4>)
 8008b6e:	f000 fa3f 	bl	8008ff0 <__malloc_lock>
 8008b72:	6833      	ldr	r3, [r6, #0]
 8008b74:	461c      	mov	r4, r3
 8008b76:	bb34      	cbnz	r4, 8008bc6 <_malloc_r+0x82>
 8008b78:	4629      	mov	r1, r5
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	f7ff ffc2 	bl	8008b04 <sbrk_aligned>
 8008b80:	1c43      	adds	r3, r0, #1
 8008b82:	4604      	mov	r4, r0
 8008b84:	d14d      	bne.n	8008c22 <_malloc_r+0xde>
 8008b86:	6834      	ldr	r4, [r6, #0]
 8008b88:	4626      	mov	r6, r4
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	d140      	bne.n	8008c10 <_malloc_r+0xcc>
 8008b8e:	6823      	ldr	r3, [r4, #0]
 8008b90:	4631      	mov	r1, r6
 8008b92:	4638      	mov	r0, r7
 8008b94:	eb04 0803 	add.w	r8, r4, r3
 8008b98:	f000 f9ae 	bl	8008ef8 <_sbrk_r>
 8008b9c:	4580      	cmp	r8, r0
 8008b9e:	d13a      	bne.n	8008c16 <_malloc_r+0xd2>
 8008ba0:	6821      	ldr	r1, [r4, #0]
 8008ba2:	3503      	adds	r5, #3
 8008ba4:	1a6d      	subs	r5, r5, r1
 8008ba6:	f025 0503 	bic.w	r5, r5, #3
 8008baa:	3508      	adds	r5, #8
 8008bac:	2d0c      	cmp	r5, #12
 8008bae:	bf38      	it	cc
 8008bb0:	250c      	movcc	r5, #12
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	4638      	mov	r0, r7
 8008bb6:	f7ff ffa5 	bl	8008b04 <sbrk_aligned>
 8008bba:	3001      	adds	r0, #1
 8008bbc:	d02b      	beq.n	8008c16 <_malloc_r+0xd2>
 8008bbe:	6823      	ldr	r3, [r4, #0]
 8008bc0:	442b      	add	r3, r5
 8008bc2:	6023      	str	r3, [r4, #0]
 8008bc4:	e00e      	b.n	8008be4 <_malloc_r+0xa0>
 8008bc6:	6822      	ldr	r2, [r4, #0]
 8008bc8:	1b52      	subs	r2, r2, r5
 8008bca:	d41e      	bmi.n	8008c0a <_malloc_r+0xc6>
 8008bcc:	2a0b      	cmp	r2, #11
 8008bce:	d916      	bls.n	8008bfe <_malloc_r+0xba>
 8008bd0:	1961      	adds	r1, r4, r5
 8008bd2:	42a3      	cmp	r3, r4
 8008bd4:	6025      	str	r5, [r4, #0]
 8008bd6:	bf18      	it	ne
 8008bd8:	6059      	strne	r1, [r3, #4]
 8008bda:	6863      	ldr	r3, [r4, #4]
 8008bdc:	bf08      	it	eq
 8008bde:	6031      	streq	r1, [r6, #0]
 8008be0:	5162      	str	r2, [r4, r5]
 8008be2:	604b      	str	r3, [r1, #4]
 8008be4:	4638      	mov	r0, r7
 8008be6:	f104 060b 	add.w	r6, r4, #11
 8008bea:	f000 fa07 	bl	8008ffc <__malloc_unlock>
 8008bee:	f026 0607 	bic.w	r6, r6, #7
 8008bf2:	1d23      	adds	r3, r4, #4
 8008bf4:	1af2      	subs	r2, r6, r3
 8008bf6:	d0b6      	beq.n	8008b66 <_malloc_r+0x22>
 8008bf8:	1b9b      	subs	r3, r3, r6
 8008bfa:	50a3      	str	r3, [r4, r2]
 8008bfc:	e7b3      	b.n	8008b66 <_malloc_r+0x22>
 8008bfe:	6862      	ldr	r2, [r4, #4]
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	bf0c      	ite	eq
 8008c04:	6032      	streq	r2, [r6, #0]
 8008c06:	605a      	strne	r2, [r3, #4]
 8008c08:	e7ec      	b.n	8008be4 <_malloc_r+0xa0>
 8008c0a:	4623      	mov	r3, r4
 8008c0c:	6864      	ldr	r4, [r4, #4]
 8008c0e:	e7b2      	b.n	8008b76 <_malloc_r+0x32>
 8008c10:	4634      	mov	r4, r6
 8008c12:	6876      	ldr	r6, [r6, #4]
 8008c14:	e7b9      	b.n	8008b8a <_malloc_r+0x46>
 8008c16:	230c      	movs	r3, #12
 8008c18:	603b      	str	r3, [r7, #0]
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	f000 f9ee 	bl	8008ffc <__malloc_unlock>
 8008c20:	e7a1      	b.n	8008b66 <_malloc_r+0x22>
 8008c22:	6025      	str	r5, [r4, #0]
 8008c24:	e7de      	b.n	8008be4 <_malloc_r+0xa0>
 8008c26:	bf00      	nop
 8008c28:	20000714 	.word	0x20000714

08008c2c <__ssputs_r>:
 8008c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c30:	688e      	ldr	r6, [r1, #8]
 8008c32:	429e      	cmp	r6, r3
 8008c34:	4682      	mov	sl, r0
 8008c36:	460c      	mov	r4, r1
 8008c38:	4690      	mov	r8, r2
 8008c3a:	461f      	mov	r7, r3
 8008c3c:	d838      	bhi.n	8008cb0 <__ssputs_r+0x84>
 8008c3e:	898a      	ldrh	r2, [r1, #12]
 8008c40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008c44:	d032      	beq.n	8008cac <__ssputs_r+0x80>
 8008c46:	6825      	ldr	r5, [r4, #0]
 8008c48:	6909      	ldr	r1, [r1, #16]
 8008c4a:	eba5 0901 	sub.w	r9, r5, r1
 8008c4e:	6965      	ldr	r5, [r4, #20]
 8008c50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008c54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008c58:	3301      	adds	r3, #1
 8008c5a:	444b      	add	r3, r9
 8008c5c:	106d      	asrs	r5, r5, #1
 8008c5e:	429d      	cmp	r5, r3
 8008c60:	bf38      	it	cc
 8008c62:	461d      	movcc	r5, r3
 8008c64:	0553      	lsls	r3, r2, #21
 8008c66:	d531      	bpl.n	8008ccc <__ssputs_r+0xa0>
 8008c68:	4629      	mov	r1, r5
 8008c6a:	f7ff ff6b 	bl	8008b44 <_malloc_r>
 8008c6e:	4606      	mov	r6, r0
 8008c70:	b950      	cbnz	r0, 8008c88 <__ssputs_r+0x5c>
 8008c72:	230c      	movs	r3, #12
 8008c74:	f8ca 3000 	str.w	r3, [sl]
 8008c78:	89a3      	ldrh	r3, [r4, #12]
 8008c7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c7e:	81a3      	strh	r3, [r4, #12]
 8008c80:	f04f 30ff 	mov.w	r0, #4294967295
 8008c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c88:	6921      	ldr	r1, [r4, #16]
 8008c8a:	464a      	mov	r2, r9
 8008c8c:	f7ff fa08 	bl	80080a0 <memcpy>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008c96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c9a:	81a3      	strh	r3, [r4, #12]
 8008c9c:	6126      	str	r6, [r4, #16]
 8008c9e:	6165      	str	r5, [r4, #20]
 8008ca0:	444e      	add	r6, r9
 8008ca2:	eba5 0509 	sub.w	r5, r5, r9
 8008ca6:	6026      	str	r6, [r4, #0]
 8008ca8:	60a5      	str	r5, [r4, #8]
 8008caa:	463e      	mov	r6, r7
 8008cac:	42be      	cmp	r6, r7
 8008cae:	d900      	bls.n	8008cb2 <__ssputs_r+0x86>
 8008cb0:	463e      	mov	r6, r7
 8008cb2:	6820      	ldr	r0, [r4, #0]
 8008cb4:	4632      	mov	r2, r6
 8008cb6:	4641      	mov	r1, r8
 8008cb8:	f000 f980 	bl	8008fbc <memmove>
 8008cbc:	68a3      	ldr	r3, [r4, #8]
 8008cbe:	1b9b      	subs	r3, r3, r6
 8008cc0:	60a3      	str	r3, [r4, #8]
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	4433      	add	r3, r6
 8008cc6:	6023      	str	r3, [r4, #0]
 8008cc8:	2000      	movs	r0, #0
 8008cca:	e7db      	b.n	8008c84 <__ssputs_r+0x58>
 8008ccc:	462a      	mov	r2, r5
 8008cce:	f000 f99b 	bl	8009008 <_realloc_r>
 8008cd2:	4606      	mov	r6, r0
 8008cd4:	2800      	cmp	r0, #0
 8008cd6:	d1e1      	bne.n	8008c9c <__ssputs_r+0x70>
 8008cd8:	6921      	ldr	r1, [r4, #16]
 8008cda:	4650      	mov	r0, sl
 8008cdc:	f7ff fec6 	bl	8008a6c <_free_r>
 8008ce0:	e7c7      	b.n	8008c72 <__ssputs_r+0x46>
	...

08008ce4 <_svfiprintf_r>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4698      	mov	r8, r3
 8008cea:	898b      	ldrh	r3, [r1, #12]
 8008cec:	061b      	lsls	r3, r3, #24
 8008cee:	b09d      	sub	sp, #116	; 0x74
 8008cf0:	4607      	mov	r7, r0
 8008cf2:	460d      	mov	r5, r1
 8008cf4:	4614      	mov	r4, r2
 8008cf6:	d50e      	bpl.n	8008d16 <_svfiprintf_r+0x32>
 8008cf8:	690b      	ldr	r3, [r1, #16]
 8008cfa:	b963      	cbnz	r3, 8008d16 <_svfiprintf_r+0x32>
 8008cfc:	2140      	movs	r1, #64	; 0x40
 8008cfe:	f7ff ff21 	bl	8008b44 <_malloc_r>
 8008d02:	6028      	str	r0, [r5, #0]
 8008d04:	6128      	str	r0, [r5, #16]
 8008d06:	b920      	cbnz	r0, 8008d12 <_svfiprintf_r+0x2e>
 8008d08:	230c      	movs	r3, #12
 8008d0a:	603b      	str	r3, [r7, #0]
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8008d10:	e0d1      	b.n	8008eb6 <_svfiprintf_r+0x1d2>
 8008d12:	2340      	movs	r3, #64	; 0x40
 8008d14:	616b      	str	r3, [r5, #20]
 8008d16:	2300      	movs	r3, #0
 8008d18:	9309      	str	r3, [sp, #36]	; 0x24
 8008d1a:	2320      	movs	r3, #32
 8008d1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d20:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d24:	2330      	movs	r3, #48	; 0x30
 8008d26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008ed0 <_svfiprintf_r+0x1ec>
 8008d2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d2e:	f04f 0901 	mov.w	r9, #1
 8008d32:	4623      	mov	r3, r4
 8008d34:	469a      	mov	sl, r3
 8008d36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d3a:	b10a      	cbz	r2, 8008d40 <_svfiprintf_r+0x5c>
 8008d3c:	2a25      	cmp	r2, #37	; 0x25
 8008d3e:	d1f9      	bne.n	8008d34 <_svfiprintf_r+0x50>
 8008d40:	ebba 0b04 	subs.w	fp, sl, r4
 8008d44:	d00b      	beq.n	8008d5e <_svfiprintf_r+0x7a>
 8008d46:	465b      	mov	r3, fp
 8008d48:	4622      	mov	r2, r4
 8008d4a:	4629      	mov	r1, r5
 8008d4c:	4638      	mov	r0, r7
 8008d4e:	f7ff ff6d 	bl	8008c2c <__ssputs_r>
 8008d52:	3001      	adds	r0, #1
 8008d54:	f000 80aa 	beq.w	8008eac <_svfiprintf_r+0x1c8>
 8008d58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d5a:	445a      	add	r2, fp
 8008d5c:	9209      	str	r2, [sp, #36]	; 0x24
 8008d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	f000 80a2 	beq.w	8008eac <_svfiprintf_r+0x1c8>
 8008d68:	2300      	movs	r3, #0
 8008d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d72:	f10a 0a01 	add.w	sl, sl, #1
 8008d76:	9304      	str	r3, [sp, #16]
 8008d78:	9307      	str	r3, [sp, #28]
 8008d7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d7e:	931a      	str	r3, [sp, #104]	; 0x68
 8008d80:	4654      	mov	r4, sl
 8008d82:	2205      	movs	r2, #5
 8008d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d88:	4851      	ldr	r0, [pc, #324]	; (8008ed0 <_svfiprintf_r+0x1ec>)
 8008d8a:	f7f7 fa29 	bl	80001e0 <memchr>
 8008d8e:	9a04      	ldr	r2, [sp, #16]
 8008d90:	b9d8      	cbnz	r0, 8008dca <_svfiprintf_r+0xe6>
 8008d92:	06d0      	lsls	r0, r2, #27
 8008d94:	bf44      	itt	mi
 8008d96:	2320      	movmi	r3, #32
 8008d98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008d9c:	0711      	lsls	r1, r2, #28
 8008d9e:	bf44      	itt	mi
 8008da0:	232b      	movmi	r3, #43	; 0x2b
 8008da2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008da6:	f89a 3000 	ldrb.w	r3, [sl]
 8008daa:	2b2a      	cmp	r3, #42	; 0x2a
 8008dac:	d015      	beq.n	8008dda <_svfiprintf_r+0xf6>
 8008dae:	9a07      	ldr	r2, [sp, #28]
 8008db0:	4654      	mov	r4, sl
 8008db2:	2000      	movs	r0, #0
 8008db4:	f04f 0c0a 	mov.w	ip, #10
 8008db8:	4621      	mov	r1, r4
 8008dba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dbe:	3b30      	subs	r3, #48	; 0x30
 8008dc0:	2b09      	cmp	r3, #9
 8008dc2:	d94e      	bls.n	8008e62 <_svfiprintf_r+0x17e>
 8008dc4:	b1b0      	cbz	r0, 8008df4 <_svfiprintf_r+0x110>
 8008dc6:	9207      	str	r2, [sp, #28]
 8008dc8:	e014      	b.n	8008df4 <_svfiprintf_r+0x110>
 8008dca:	eba0 0308 	sub.w	r3, r0, r8
 8008dce:	fa09 f303 	lsl.w	r3, r9, r3
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	46a2      	mov	sl, r4
 8008dd8:	e7d2      	b.n	8008d80 <_svfiprintf_r+0x9c>
 8008dda:	9b03      	ldr	r3, [sp, #12]
 8008ddc:	1d19      	adds	r1, r3, #4
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	9103      	str	r1, [sp, #12]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	bfbb      	ittet	lt
 8008de6:	425b      	neglt	r3, r3
 8008de8:	f042 0202 	orrlt.w	r2, r2, #2
 8008dec:	9307      	strge	r3, [sp, #28]
 8008dee:	9307      	strlt	r3, [sp, #28]
 8008df0:	bfb8      	it	lt
 8008df2:	9204      	strlt	r2, [sp, #16]
 8008df4:	7823      	ldrb	r3, [r4, #0]
 8008df6:	2b2e      	cmp	r3, #46	; 0x2e
 8008df8:	d10c      	bne.n	8008e14 <_svfiprintf_r+0x130>
 8008dfa:	7863      	ldrb	r3, [r4, #1]
 8008dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dfe:	d135      	bne.n	8008e6c <_svfiprintf_r+0x188>
 8008e00:	9b03      	ldr	r3, [sp, #12]
 8008e02:	1d1a      	adds	r2, r3, #4
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	9203      	str	r2, [sp, #12]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	bfb8      	it	lt
 8008e0c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e10:	3402      	adds	r4, #2
 8008e12:	9305      	str	r3, [sp, #20]
 8008e14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008ee0 <_svfiprintf_r+0x1fc>
 8008e18:	7821      	ldrb	r1, [r4, #0]
 8008e1a:	2203      	movs	r2, #3
 8008e1c:	4650      	mov	r0, sl
 8008e1e:	f7f7 f9df 	bl	80001e0 <memchr>
 8008e22:	b140      	cbz	r0, 8008e36 <_svfiprintf_r+0x152>
 8008e24:	2340      	movs	r3, #64	; 0x40
 8008e26:	eba0 000a 	sub.w	r0, r0, sl
 8008e2a:	fa03 f000 	lsl.w	r0, r3, r0
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	4303      	orrs	r3, r0
 8008e32:	3401      	adds	r4, #1
 8008e34:	9304      	str	r3, [sp, #16]
 8008e36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e3a:	4826      	ldr	r0, [pc, #152]	; (8008ed4 <_svfiprintf_r+0x1f0>)
 8008e3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e40:	2206      	movs	r2, #6
 8008e42:	f7f7 f9cd 	bl	80001e0 <memchr>
 8008e46:	2800      	cmp	r0, #0
 8008e48:	d038      	beq.n	8008ebc <_svfiprintf_r+0x1d8>
 8008e4a:	4b23      	ldr	r3, [pc, #140]	; (8008ed8 <_svfiprintf_r+0x1f4>)
 8008e4c:	bb1b      	cbnz	r3, 8008e96 <_svfiprintf_r+0x1b2>
 8008e4e:	9b03      	ldr	r3, [sp, #12]
 8008e50:	3307      	adds	r3, #7
 8008e52:	f023 0307 	bic.w	r3, r3, #7
 8008e56:	3308      	adds	r3, #8
 8008e58:	9303      	str	r3, [sp, #12]
 8008e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e5c:	4433      	add	r3, r6
 8008e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e60:	e767      	b.n	8008d32 <_svfiprintf_r+0x4e>
 8008e62:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e66:	460c      	mov	r4, r1
 8008e68:	2001      	movs	r0, #1
 8008e6a:	e7a5      	b.n	8008db8 <_svfiprintf_r+0xd4>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	3401      	adds	r4, #1
 8008e70:	9305      	str	r3, [sp, #20]
 8008e72:	4619      	mov	r1, r3
 8008e74:	f04f 0c0a 	mov.w	ip, #10
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e7e:	3a30      	subs	r2, #48	; 0x30
 8008e80:	2a09      	cmp	r2, #9
 8008e82:	d903      	bls.n	8008e8c <_svfiprintf_r+0x1a8>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d0c5      	beq.n	8008e14 <_svfiprintf_r+0x130>
 8008e88:	9105      	str	r1, [sp, #20]
 8008e8a:	e7c3      	b.n	8008e14 <_svfiprintf_r+0x130>
 8008e8c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e90:	4604      	mov	r4, r0
 8008e92:	2301      	movs	r3, #1
 8008e94:	e7f0      	b.n	8008e78 <_svfiprintf_r+0x194>
 8008e96:	ab03      	add	r3, sp, #12
 8008e98:	9300      	str	r3, [sp, #0]
 8008e9a:	462a      	mov	r2, r5
 8008e9c:	4b0f      	ldr	r3, [pc, #60]	; (8008edc <_svfiprintf_r+0x1f8>)
 8008e9e:	a904      	add	r1, sp, #16
 8008ea0:	4638      	mov	r0, r7
 8008ea2:	f7fc fa47 	bl	8005334 <_printf_float>
 8008ea6:	1c42      	adds	r2, r0, #1
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	d1d6      	bne.n	8008e5a <_svfiprintf_r+0x176>
 8008eac:	89ab      	ldrh	r3, [r5, #12]
 8008eae:	065b      	lsls	r3, r3, #25
 8008eb0:	f53f af2c 	bmi.w	8008d0c <_svfiprintf_r+0x28>
 8008eb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008eb6:	b01d      	add	sp, #116	; 0x74
 8008eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ebc:	ab03      	add	r3, sp, #12
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	462a      	mov	r2, r5
 8008ec2:	4b06      	ldr	r3, [pc, #24]	; (8008edc <_svfiprintf_r+0x1f8>)
 8008ec4:	a904      	add	r1, sp, #16
 8008ec6:	4638      	mov	r0, r7
 8008ec8:	f7fc fcd8 	bl	800587c <_printf_i>
 8008ecc:	e7eb      	b.n	8008ea6 <_svfiprintf_r+0x1c2>
 8008ece:	bf00      	nop
 8008ed0:	08009f7c 	.word	0x08009f7c
 8008ed4:	08009f86 	.word	0x08009f86
 8008ed8:	08005335 	.word	0x08005335
 8008edc:	08008c2d 	.word	0x08008c2d
 8008ee0:	08009f82 	.word	0x08009f82
 8008ee4:	00000000 	.word	0x00000000

08008ee8 <nan>:
 8008ee8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008ef0 <nan+0x8>
 8008eec:	4770      	bx	lr
 8008eee:	bf00      	nop
 8008ef0:	00000000 	.word	0x00000000
 8008ef4:	7ff80000 	.word	0x7ff80000

08008ef8 <_sbrk_r>:
 8008ef8:	b538      	push	{r3, r4, r5, lr}
 8008efa:	4d06      	ldr	r5, [pc, #24]	; (8008f14 <_sbrk_r+0x1c>)
 8008efc:	2300      	movs	r3, #0
 8008efe:	4604      	mov	r4, r0
 8008f00:	4608      	mov	r0, r1
 8008f02:	602b      	str	r3, [r5, #0]
 8008f04:	f7f8 fbfa 	bl	80016fc <_sbrk>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d102      	bne.n	8008f12 <_sbrk_r+0x1a>
 8008f0c:	682b      	ldr	r3, [r5, #0]
 8008f0e:	b103      	cbz	r3, 8008f12 <_sbrk_r+0x1a>
 8008f10:	6023      	str	r3, [r4, #0]
 8008f12:	bd38      	pop	{r3, r4, r5, pc}
 8008f14:	2000071c 	.word	0x2000071c

08008f18 <strncmp>:
 8008f18:	b510      	push	{r4, lr}
 8008f1a:	b17a      	cbz	r2, 8008f3c <strncmp+0x24>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	3901      	subs	r1, #1
 8008f20:	1884      	adds	r4, r0, r2
 8008f22:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008f26:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008f2a:	4290      	cmp	r0, r2
 8008f2c:	d101      	bne.n	8008f32 <strncmp+0x1a>
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	d101      	bne.n	8008f36 <strncmp+0x1e>
 8008f32:	1a80      	subs	r0, r0, r2
 8008f34:	bd10      	pop	{r4, pc}
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d1f3      	bne.n	8008f22 <strncmp+0xa>
 8008f3a:	e7fa      	b.n	8008f32 <strncmp+0x1a>
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	e7f9      	b.n	8008f34 <strncmp+0x1c>

08008f40 <__ascii_wctomb>:
 8008f40:	b149      	cbz	r1, 8008f56 <__ascii_wctomb+0x16>
 8008f42:	2aff      	cmp	r2, #255	; 0xff
 8008f44:	bf85      	ittet	hi
 8008f46:	238a      	movhi	r3, #138	; 0x8a
 8008f48:	6003      	strhi	r3, [r0, #0]
 8008f4a:	700a      	strbls	r2, [r1, #0]
 8008f4c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008f50:	bf98      	it	ls
 8008f52:	2001      	movls	r0, #1
 8008f54:	4770      	bx	lr
 8008f56:	4608      	mov	r0, r1
 8008f58:	4770      	bx	lr
	...

08008f5c <__assert_func>:
 8008f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008f5e:	4614      	mov	r4, r2
 8008f60:	461a      	mov	r2, r3
 8008f62:	4b09      	ldr	r3, [pc, #36]	; (8008f88 <__assert_func+0x2c>)
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4605      	mov	r5, r0
 8008f68:	68d8      	ldr	r0, [r3, #12]
 8008f6a:	b14c      	cbz	r4, 8008f80 <__assert_func+0x24>
 8008f6c:	4b07      	ldr	r3, [pc, #28]	; (8008f8c <__assert_func+0x30>)
 8008f6e:	9100      	str	r1, [sp, #0]
 8008f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008f74:	4906      	ldr	r1, [pc, #24]	; (8008f90 <__assert_func+0x34>)
 8008f76:	462b      	mov	r3, r5
 8008f78:	f000 f80e 	bl	8008f98 <fiprintf>
 8008f7c:	f000 fa8c 	bl	8009498 <abort>
 8008f80:	4b04      	ldr	r3, [pc, #16]	; (8008f94 <__assert_func+0x38>)
 8008f82:	461c      	mov	r4, r3
 8008f84:	e7f3      	b.n	8008f6e <__assert_func+0x12>
 8008f86:	bf00      	nop
 8008f88:	20000018 	.word	0x20000018
 8008f8c:	08009f8d 	.word	0x08009f8d
 8008f90:	08009f9a 	.word	0x08009f9a
 8008f94:	08009fc8 	.word	0x08009fc8

08008f98 <fiprintf>:
 8008f98:	b40e      	push	{r1, r2, r3}
 8008f9a:	b503      	push	{r0, r1, lr}
 8008f9c:	4601      	mov	r1, r0
 8008f9e:	ab03      	add	r3, sp, #12
 8008fa0:	4805      	ldr	r0, [pc, #20]	; (8008fb8 <fiprintf+0x20>)
 8008fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008fa6:	6800      	ldr	r0, [r0, #0]
 8008fa8:	9301      	str	r3, [sp, #4]
 8008faa:	f000 f885 	bl	80090b8 <_vfiprintf_r>
 8008fae:	b002      	add	sp, #8
 8008fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008fb4:	b003      	add	sp, #12
 8008fb6:	4770      	bx	lr
 8008fb8:	20000018 	.word	0x20000018

08008fbc <memmove>:
 8008fbc:	4288      	cmp	r0, r1
 8008fbe:	b510      	push	{r4, lr}
 8008fc0:	eb01 0402 	add.w	r4, r1, r2
 8008fc4:	d902      	bls.n	8008fcc <memmove+0x10>
 8008fc6:	4284      	cmp	r4, r0
 8008fc8:	4623      	mov	r3, r4
 8008fca:	d807      	bhi.n	8008fdc <memmove+0x20>
 8008fcc:	1e43      	subs	r3, r0, #1
 8008fce:	42a1      	cmp	r1, r4
 8008fd0:	d008      	beq.n	8008fe4 <memmove+0x28>
 8008fd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008fd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008fda:	e7f8      	b.n	8008fce <memmove+0x12>
 8008fdc:	4402      	add	r2, r0
 8008fde:	4601      	mov	r1, r0
 8008fe0:	428a      	cmp	r2, r1
 8008fe2:	d100      	bne.n	8008fe6 <memmove+0x2a>
 8008fe4:	bd10      	pop	{r4, pc}
 8008fe6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008fea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008fee:	e7f7      	b.n	8008fe0 <memmove+0x24>

08008ff0 <__malloc_lock>:
 8008ff0:	4801      	ldr	r0, [pc, #4]	; (8008ff8 <__malloc_lock+0x8>)
 8008ff2:	f000 bc11 	b.w	8009818 <__retarget_lock_acquire_recursive>
 8008ff6:	bf00      	nop
 8008ff8:	20000720 	.word	0x20000720

08008ffc <__malloc_unlock>:
 8008ffc:	4801      	ldr	r0, [pc, #4]	; (8009004 <__malloc_unlock+0x8>)
 8008ffe:	f000 bc0c 	b.w	800981a <__retarget_lock_release_recursive>
 8009002:	bf00      	nop
 8009004:	20000720 	.word	0x20000720

08009008 <_realloc_r>:
 8009008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800900c:	4680      	mov	r8, r0
 800900e:	4614      	mov	r4, r2
 8009010:	460e      	mov	r6, r1
 8009012:	b921      	cbnz	r1, 800901e <_realloc_r+0x16>
 8009014:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009018:	4611      	mov	r1, r2
 800901a:	f7ff bd93 	b.w	8008b44 <_malloc_r>
 800901e:	b92a      	cbnz	r2, 800902c <_realloc_r+0x24>
 8009020:	f7ff fd24 	bl	8008a6c <_free_r>
 8009024:	4625      	mov	r5, r4
 8009026:	4628      	mov	r0, r5
 8009028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800902c:	f000 fc5c 	bl	80098e8 <_malloc_usable_size_r>
 8009030:	4284      	cmp	r4, r0
 8009032:	4607      	mov	r7, r0
 8009034:	d802      	bhi.n	800903c <_realloc_r+0x34>
 8009036:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800903a:	d812      	bhi.n	8009062 <_realloc_r+0x5a>
 800903c:	4621      	mov	r1, r4
 800903e:	4640      	mov	r0, r8
 8009040:	f7ff fd80 	bl	8008b44 <_malloc_r>
 8009044:	4605      	mov	r5, r0
 8009046:	2800      	cmp	r0, #0
 8009048:	d0ed      	beq.n	8009026 <_realloc_r+0x1e>
 800904a:	42bc      	cmp	r4, r7
 800904c:	4622      	mov	r2, r4
 800904e:	4631      	mov	r1, r6
 8009050:	bf28      	it	cs
 8009052:	463a      	movcs	r2, r7
 8009054:	f7ff f824 	bl	80080a0 <memcpy>
 8009058:	4631      	mov	r1, r6
 800905a:	4640      	mov	r0, r8
 800905c:	f7ff fd06 	bl	8008a6c <_free_r>
 8009060:	e7e1      	b.n	8009026 <_realloc_r+0x1e>
 8009062:	4635      	mov	r5, r6
 8009064:	e7df      	b.n	8009026 <_realloc_r+0x1e>

08009066 <__sfputc_r>:
 8009066:	6893      	ldr	r3, [r2, #8]
 8009068:	3b01      	subs	r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	b410      	push	{r4}
 800906e:	6093      	str	r3, [r2, #8]
 8009070:	da08      	bge.n	8009084 <__sfputc_r+0x1e>
 8009072:	6994      	ldr	r4, [r2, #24]
 8009074:	42a3      	cmp	r3, r4
 8009076:	db01      	blt.n	800907c <__sfputc_r+0x16>
 8009078:	290a      	cmp	r1, #10
 800907a:	d103      	bne.n	8009084 <__sfputc_r+0x1e>
 800907c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009080:	f000 b94a 	b.w	8009318 <__swbuf_r>
 8009084:	6813      	ldr	r3, [r2, #0]
 8009086:	1c58      	adds	r0, r3, #1
 8009088:	6010      	str	r0, [r2, #0]
 800908a:	7019      	strb	r1, [r3, #0]
 800908c:	4608      	mov	r0, r1
 800908e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009092:	4770      	bx	lr

08009094 <__sfputs_r>:
 8009094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009096:	4606      	mov	r6, r0
 8009098:	460f      	mov	r7, r1
 800909a:	4614      	mov	r4, r2
 800909c:	18d5      	adds	r5, r2, r3
 800909e:	42ac      	cmp	r4, r5
 80090a0:	d101      	bne.n	80090a6 <__sfputs_r+0x12>
 80090a2:	2000      	movs	r0, #0
 80090a4:	e007      	b.n	80090b6 <__sfputs_r+0x22>
 80090a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80090aa:	463a      	mov	r2, r7
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7ff ffda 	bl	8009066 <__sfputc_r>
 80090b2:	1c43      	adds	r3, r0, #1
 80090b4:	d1f3      	bne.n	800909e <__sfputs_r+0xa>
 80090b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080090b8 <_vfiprintf_r>:
 80090b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090bc:	460d      	mov	r5, r1
 80090be:	b09d      	sub	sp, #116	; 0x74
 80090c0:	4614      	mov	r4, r2
 80090c2:	4698      	mov	r8, r3
 80090c4:	4606      	mov	r6, r0
 80090c6:	b118      	cbz	r0, 80090d0 <_vfiprintf_r+0x18>
 80090c8:	6983      	ldr	r3, [r0, #24]
 80090ca:	b90b      	cbnz	r3, 80090d0 <_vfiprintf_r+0x18>
 80090cc:	f000 fb06 	bl	80096dc <__sinit>
 80090d0:	4b89      	ldr	r3, [pc, #548]	; (80092f8 <_vfiprintf_r+0x240>)
 80090d2:	429d      	cmp	r5, r3
 80090d4:	d11b      	bne.n	800910e <_vfiprintf_r+0x56>
 80090d6:	6875      	ldr	r5, [r6, #4]
 80090d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090da:	07d9      	lsls	r1, r3, #31
 80090dc:	d405      	bmi.n	80090ea <_vfiprintf_r+0x32>
 80090de:	89ab      	ldrh	r3, [r5, #12]
 80090e0:	059a      	lsls	r2, r3, #22
 80090e2:	d402      	bmi.n	80090ea <_vfiprintf_r+0x32>
 80090e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090e6:	f000 fb97 	bl	8009818 <__retarget_lock_acquire_recursive>
 80090ea:	89ab      	ldrh	r3, [r5, #12]
 80090ec:	071b      	lsls	r3, r3, #28
 80090ee:	d501      	bpl.n	80090f4 <_vfiprintf_r+0x3c>
 80090f0:	692b      	ldr	r3, [r5, #16]
 80090f2:	b9eb      	cbnz	r3, 8009130 <_vfiprintf_r+0x78>
 80090f4:	4629      	mov	r1, r5
 80090f6:	4630      	mov	r0, r6
 80090f8:	f000 f960 	bl	80093bc <__swsetup_r>
 80090fc:	b1c0      	cbz	r0, 8009130 <_vfiprintf_r+0x78>
 80090fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009100:	07dc      	lsls	r4, r3, #31
 8009102:	d50e      	bpl.n	8009122 <_vfiprintf_r+0x6a>
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	b01d      	add	sp, #116	; 0x74
 800910a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800910e:	4b7b      	ldr	r3, [pc, #492]	; (80092fc <_vfiprintf_r+0x244>)
 8009110:	429d      	cmp	r5, r3
 8009112:	d101      	bne.n	8009118 <_vfiprintf_r+0x60>
 8009114:	68b5      	ldr	r5, [r6, #8]
 8009116:	e7df      	b.n	80090d8 <_vfiprintf_r+0x20>
 8009118:	4b79      	ldr	r3, [pc, #484]	; (8009300 <_vfiprintf_r+0x248>)
 800911a:	429d      	cmp	r5, r3
 800911c:	bf08      	it	eq
 800911e:	68f5      	ldreq	r5, [r6, #12]
 8009120:	e7da      	b.n	80090d8 <_vfiprintf_r+0x20>
 8009122:	89ab      	ldrh	r3, [r5, #12]
 8009124:	0598      	lsls	r0, r3, #22
 8009126:	d4ed      	bmi.n	8009104 <_vfiprintf_r+0x4c>
 8009128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800912a:	f000 fb76 	bl	800981a <__retarget_lock_release_recursive>
 800912e:	e7e9      	b.n	8009104 <_vfiprintf_r+0x4c>
 8009130:	2300      	movs	r3, #0
 8009132:	9309      	str	r3, [sp, #36]	; 0x24
 8009134:	2320      	movs	r3, #32
 8009136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800913a:	f8cd 800c 	str.w	r8, [sp, #12]
 800913e:	2330      	movs	r3, #48	; 0x30
 8009140:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009304 <_vfiprintf_r+0x24c>
 8009144:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009148:	f04f 0901 	mov.w	r9, #1
 800914c:	4623      	mov	r3, r4
 800914e:	469a      	mov	sl, r3
 8009150:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009154:	b10a      	cbz	r2, 800915a <_vfiprintf_r+0xa2>
 8009156:	2a25      	cmp	r2, #37	; 0x25
 8009158:	d1f9      	bne.n	800914e <_vfiprintf_r+0x96>
 800915a:	ebba 0b04 	subs.w	fp, sl, r4
 800915e:	d00b      	beq.n	8009178 <_vfiprintf_r+0xc0>
 8009160:	465b      	mov	r3, fp
 8009162:	4622      	mov	r2, r4
 8009164:	4629      	mov	r1, r5
 8009166:	4630      	mov	r0, r6
 8009168:	f7ff ff94 	bl	8009094 <__sfputs_r>
 800916c:	3001      	adds	r0, #1
 800916e:	f000 80aa 	beq.w	80092c6 <_vfiprintf_r+0x20e>
 8009172:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009174:	445a      	add	r2, fp
 8009176:	9209      	str	r2, [sp, #36]	; 0x24
 8009178:	f89a 3000 	ldrb.w	r3, [sl]
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 80a2 	beq.w	80092c6 <_vfiprintf_r+0x20e>
 8009182:	2300      	movs	r3, #0
 8009184:	f04f 32ff 	mov.w	r2, #4294967295
 8009188:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800918c:	f10a 0a01 	add.w	sl, sl, #1
 8009190:	9304      	str	r3, [sp, #16]
 8009192:	9307      	str	r3, [sp, #28]
 8009194:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009198:	931a      	str	r3, [sp, #104]	; 0x68
 800919a:	4654      	mov	r4, sl
 800919c:	2205      	movs	r2, #5
 800919e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091a2:	4858      	ldr	r0, [pc, #352]	; (8009304 <_vfiprintf_r+0x24c>)
 80091a4:	f7f7 f81c 	bl	80001e0 <memchr>
 80091a8:	9a04      	ldr	r2, [sp, #16]
 80091aa:	b9d8      	cbnz	r0, 80091e4 <_vfiprintf_r+0x12c>
 80091ac:	06d1      	lsls	r1, r2, #27
 80091ae:	bf44      	itt	mi
 80091b0:	2320      	movmi	r3, #32
 80091b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b6:	0713      	lsls	r3, r2, #28
 80091b8:	bf44      	itt	mi
 80091ba:	232b      	movmi	r3, #43	; 0x2b
 80091bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091c0:	f89a 3000 	ldrb.w	r3, [sl]
 80091c4:	2b2a      	cmp	r3, #42	; 0x2a
 80091c6:	d015      	beq.n	80091f4 <_vfiprintf_r+0x13c>
 80091c8:	9a07      	ldr	r2, [sp, #28]
 80091ca:	4654      	mov	r4, sl
 80091cc:	2000      	movs	r0, #0
 80091ce:	f04f 0c0a 	mov.w	ip, #10
 80091d2:	4621      	mov	r1, r4
 80091d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091d8:	3b30      	subs	r3, #48	; 0x30
 80091da:	2b09      	cmp	r3, #9
 80091dc:	d94e      	bls.n	800927c <_vfiprintf_r+0x1c4>
 80091de:	b1b0      	cbz	r0, 800920e <_vfiprintf_r+0x156>
 80091e0:	9207      	str	r2, [sp, #28]
 80091e2:	e014      	b.n	800920e <_vfiprintf_r+0x156>
 80091e4:	eba0 0308 	sub.w	r3, r0, r8
 80091e8:	fa09 f303 	lsl.w	r3, r9, r3
 80091ec:	4313      	orrs	r3, r2
 80091ee:	9304      	str	r3, [sp, #16]
 80091f0:	46a2      	mov	sl, r4
 80091f2:	e7d2      	b.n	800919a <_vfiprintf_r+0xe2>
 80091f4:	9b03      	ldr	r3, [sp, #12]
 80091f6:	1d19      	adds	r1, r3, #4
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	9103      	str	r1, [sp, #12]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	bfbb      	ittet	lt
 8009200:	425b      	neglt	r3, r3
 8009202:	f042 0202 	orrlt.w	r2, r2, #2
 8009206:	9307      	strge	r3, [sp, #28]
 8009208:	9307      	strlt	r3, [sp, #28]
 800920a:	bfb8      	it	lt
 800920c:	9204      	strlt	r2, [sp, #16]
 800920e:	7823      	ldrb	r3, [r4, #0]
 8009210:	2b2e      	cmp	r3, #46	; 0x2e
 8009212:	d10c      	bne.n	800922e <_vfiprintf_r+0x176>
 8009214:	7863      	ldrb	r3, [r4, #1]
 8009216:	2b2a      	cmp	r3, #42	; 0x2a
 8009218:	d135      	bne.n	8009286 <_vfiprintf_r+0x1ce>
 800921a:	9b03      	ldr	r3, [sp, #12]
 800921c:	1d1a      	adds	r2, r3, #4
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	9203      	str	r2, [sp, #12]
 8009222:	2b00      	cmp	r3, #0
 8009224:	bfb8      	it	lt
 8009226:	f04f 33ff 	movlt.w	r3, #4294967295
 800922a:	3402      	adds	r4, #2
 800922c:	9305      	str	r3, [sp, #20]
 800922e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009314 <_vfiprintf_r+0x25c>
 8009232:	7821      	ldrb	r1, [r4, #0]
 8009234:	2203      	movs	r2, #3
 8009236:	4650      	mov	r0, sl
 8009238:	f7f6 ffd2 	bl	80001e0 <memchr>
 800923c:	b140      	cbz	r0, 8009250 <_vfiprintf_r+0x198>
 800923e:	2340      	movs	r3, #64	; 0x40
 8009240:	eba0 000a 	sub.w	r0, r0, sl
 8009244:	fa03 f000 	lsl.w	r0, r3, r0
 8009248:	9b04      	ldr	r3, [sp, #16]
 800924a:	4303      	orrs	r3, r0
 800924c:	3401      	adds	r4, #1
 800924e:	9304      	str	r3, [sp, #16]
 8009250:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009254:	482c      	ldr	r0, [pc, #176]	; (8009308 <_vfiprintf_r+0x250>)
 8009256:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800925a:	2206      	movs	r2, #6
 800925c:	f7f6 ffc0 	bl	80001e0 <memchr>
 8009260:	2800      	cmp	r0, #0
 8009262:	d03f      	beq.n	80092e4 <_vfiprintf_r+0x22c>
 8009264:	4b29      	ldr	r3, [pc, #164]	; (800930c <_vfiprintf_r+0x254>)
 8009266:	bb1b      	cbnz	r3, 80092b0 <_vfiprintf_r+0x1f8>
 8009268:	9b03      	ldr	r3, [sp, #12]
 800926a:	3307      	adds	r3, #7
 800926c:	f023 0307 	bic.w	r3, r3, #7
 8009270:	3308      	adds	r3, #8
 8009272:	9303      	str	r3, [sp, #12]
 8009274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009276:	443b      	add	r3, r7
 8009278:	9309      	str	r3, [sp, #36]	; 0x24
 800927a:	e767      	b.n	800914c <_vfiprintf_r+0x94>
 800927c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009280:	460c      	mov	r4, r1
 8009282:	2001      	movs	r0, #1
 8009284:	e7a5      	b.n	80091d2 <_vfiprintf_r+0x11a>
 8009286:	2300      	movs	r3, #0
 8009288:	3401      	adds	r4, #1
 800928a:	9305      	str	r3, [sp, #20]
 800928c:	4619      	mov	r1, r3
 800928e:	f04f 0c0a 	mov.w	ip, #10
 8009292:	4620      	mov	r0, r4
 8009294:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009298:	3a30      	subs	r2, #48	; 0x30
 800929a:	2a09      	cmp	r2, #9
 800929c:	d903      	bls.n	80092a6 <_vfiprintf_r+0x1ee>
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d0c5      	beq.n	800922e <_vfiprintf_r+0x176>
 80092a2:	9105      	str	r1, [sp, #20]
 80092a4:	e7c3      	b.n	800922e <_vfiprintf_r+0x176>
 80092a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80092aa:	4604      	mov	r4, r0
 80092ac:	2301      	movs	r3, #1
 80092ae:	e7f0      	b.n	8009292 <_vfiprintf_r+0x1da>
 80092b0:	ab03      	add	r3, sp, #12
 80092b2:	9300      	str	r3, [sp, #0]
 80092b4:	462a      	mov	r2, r5
 80092b6:	4b16      	ldr	r3, [pc, #88]	; (8009310 <_vfiprintf_r+0x258>)
 80092b8:	a904      	add	r1, sp, #16
 80092ba:	4630      	mov	r0, r6
 80092bc:	f7fc f83a 	bl	8005334 <_printf_float>
 80092c0:	4607      	mov	r7, r0
 80092c2:	1c78      	adds	r0, r7, #1
 80092c4:	d1d6      	bne.n	8009274 <_vfiprintf_r+0x1bc>
 80092c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092c8:	07d9      	lsls	r1, r3, #31
 80092ca:	d405      	bmi.n	80092d8 <_vfiprintf_r+0x220>
 80092cc:	89ab      	ldrh	r3, [r5, #12]
 80092ce:	059a      	lsls	r2, r3, #22
 80092d0:	d402      	bmi.n	80092d8 <_vfiprintf_r+0x220>
 80092d2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092d4:	f000 faa1 	bl	800981a <__retarget_lock_release_recursive>
 80092d8:	89ab      	ldrh	r3, [r5, #12]
 80092da:	065b      	lsls	r3, r3, #25
 80092dc:	f53f af12 	bmi.w	8009104 <_vfiprintf_r+0x4c>
 80092e0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092e2:	e711      	b.n	8009108 <_vfiprintf_r+0x50>
 80092e4:	ab03      	add	r3, sp, #12
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	462a      	mov	r2, r5
 80092ea:	4b09      	ldr	r3, [pc, #36]	; (8009310 <_vfiprintf_r+0x258>)
 80092ec:	a904      	add	r1, sp, #16
 80092ee:	4630      	mov	r0, r6
 80092f0:	f7fc fac4 	bl	800587c <_printf_i>
 80092f4:	e7e4      	b.n	80092c0 <_vfiprintf_r+0x208>
 80092f6:	bf00      	nop
 80092f8:	08009fec 	.word	0x08009fec
 80092fc:	0800a00c 	.word	0x0800a00c
 8009300:	08009fcc 	.word	0x08009fcc
 8009304:	08009f7c 	.word	0x08009f7c
 8009308:	08009f86 	.word	0x08009f86
 800930c:	08005335 	.word	0x08005335
 8009310:	08009095 	.word	0x08009095
 8009314:	08009f82 	.word	0x08009f82

08009318 <__swbuf_r>:
 8009318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800931a:	460e      	mov	r6, r1
 800931c:	4614      	mov	r4, r2
 800931e:	4605      	mov	r5, r0
 8009320:	b118      	cbz	r0, 800932a <__swbuf_r+0x12>
 8009322:	6983      	ldr	r3, [r0, #24]
 8009324:	b90b      	cbnz	r3, 800932a <__swbuf_r+0x12>
 8009326:	f000 f9d9 	bl	80096dc <__sinit>
 800932a:	4b21      	ldr	r3, [pc, #132]	; (80093b0 <__swbuf_r+0x98>)
 800932c:	429c      	cmp	r4, r3
 800932e:	d12b      	bne.n	8009388 <__swbuf_r+0x70>
 8009330:	686c      	ldr	r4, [r5, #4]
 8009332:	69a3      	ldr	r3, [r4, #24]
 8009334:	60a3      	str	r3, [r4, #8]
 8009336:	89a3      	ldrh	r3, [r4, #12]
 8009338:	071a      	lsls	r2, r3, #28
 800933a:	d52f      	bpl.n	800939c <__swbuf_r+0x84>
 800933c:	6923      	ldr	r3, [r4, #16]
 800933e:	b36b      	cbz	r3, 800939c <__swbuf_r+0x84>
 8009340:	6923      	ldr	r3, [r4, #16]
 8009342:	6820      	ldr	r0, [r4, #0]
 8009344:	1ac0      	subs	r0, r0, r3
 8009346:	6963      	ldr	r3, [r4, #20]
 8009348:	b2f6      	uxtb	r6, r6
 800934a:	4283      	cmp	r3, r0
 800934c:	4637      	mov	r7, r6
 800934e:	dc04      	bgt.n	800935a <__swbuf_r+0x42>
 8009350:	4621      	mov	r1, r4
 8009352:	4628      	mov	r0, r5
 8009354:	f000 f92e 	bl	80095b4 <_fflush_r>
 8009358:	bb30      	cbnz	r0, 80093a8 <__swbuf_r+0x90>
 800935a:	68a3      	ldr	r3, [r4, #8]
 800935c:	3b01      	subs	r3, #1
 800935e:	60a3      	str	r3, [r4, #8]
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	1c5a      	adds	r2, r3, #1
 8009364:	6022      	str	r2, [r4, #0]
 8009366:	701e      	strb	r6, [r3, #0]
 8009368:	6963      	ldr	r3, [r4, #20]
 800936a:	3001      	adds	r0, #1
 800936c:	4283      	cmp	r3, r0
 800936e:	d004      	beq.n	800937a <__swbuf_r+0x62>
 8009370:	89a3      	ldrh	r3, [r4, #12]
 8009372:	07db      	lsls	r3, r3, #31
 8009374:	d506      	bpl.n	8009384 <__swbuf_r+0x6c>
 8009376:	2e0a      	cmp	r6, #10
 8009378:	d104      	bne.n	8009384 <__swbuf_r+0x6c>
 800937a:	4621      	mov	r1, r4
 800937c:	4628      	mov	r0, r5
 800937e:	f000 f919 	bl	80095b4 <_fflush_r>
 8009382:	b988      	cbnz	r0, 80093a8 <__swbuf_r+0x90>
 8009384:	4638      	mov	r0, r7
 8009386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009388:	4b0a      	ldr	r3, [pc, #40]	; (80093b4 <__swbuf_r+0x9c>)
 800938a:	429c      	cmp	r4, r3
 800938c:	d101      	bne.n	8009392 <__swbuf_r+0x7a>
 800938e:	68ac      	ldr	r4, [r5, #8]
 8009390:	e7cf      	b.n	8009332 <__swbuf_r+0x1a>
 8009392:	4b09      	ldr	r3, [pc, #36]	; (80093b8 <__swbuf_r+0xa0>)
 8009394:	429c      	cmp	r4, r3
 8009396:	bf08      	it	eq
 8009398:	68ec      	ldreq	r4, [r5, #12]
 800939a:	e7ca      	b.n	8009332 <__swbuf_r+0x1a>
 800939c:	4621      	mov	r1, r4
 800939e:	4628      	mov	r0, r5
 80093a0:	f000 f80c 	bl	80093bc <__swsetup_r>
 80093a4:	2800      	cmp	r0, #0
 80093a6:	d0cb      	beq.n	8009340 <__swbuf_r+0x28>
 80093a8:	f04f 37ff 	mov.w	r7, #4294967295
 80093ac:	e7ea      	b.n	8009384 <__swbuf_r+0x6c>
 80093ae:	bf00      	nop
 80093b0:	08009fec 	.word	0x08009fec
 80093b4:	0800a00c 	.word	0x0800a00c
 80093b8:	08009fcc 	.word	0x08009fcc

080093bc <__swsetup_r>:
 80093bc:	4b32      	ldr	r3, [pc, #200]	; (8009488 <__swsetup_r+0xcc>)
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	681d      	ldr	r5, [r3, #0]
 80093c2:	4606      	mov	r6, r0
 80093c4:	460c      	mov	r4, r1
 80093c6:	b125      	cbz	r5, 80093d2 <__swsetup_r+0x16>
 80093c8:	69ab      	ldr	r3, [r5, #24]
 80093ca:	b913      	cbnz	r3, 80093d2 <__swsetup_r+0x16>
 80093cc:	4628      	mov	r0, r5
 80093ce:	f000 f985 	bl	80096dc <__sinit>
 80093d2:	4b2e      	ldr	r3, [pc, #184]	; (800948c <__swsetup_r+0xd0>)
 80093d4:	429c      	cmp	r4, r3
 80093d6:	d10f      	bne.n	80093f8 <__swsetup_r+0x3c>
 80093d8:	686c      	ldr	r4, [r5, #4]
 80093da:	89a3      	ldrh	r3, [r4, #12]
 80093dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093e0:	0719      	lsls	r1, r3, #28
 80093e2:	d42c      	bmi.n	800943e <__swsetup_r+0x82>
 80093e4:	06dd      	lsls	r5, r3, #27
 80093e6:	d411      	bmi.n	800940c <__swsetup_r+0x50>
 80093e8:	2309      	movs	r3, #9
 80093ea:	6033      	str	r3, [r6, #0]
 80093ec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093f0:	81a3      	strh	r3, [r4, #12]
 80093f2:	f04f 30ff 	mov.w	r0, #4294967295
 80093f6:	e03e      	b.n	8009476 <__swsetup_r+0xba>
 80093f8:	4b25      	ldr	r3, [pc, #148]	; (8009490 <__swsetup_r+0xd4>)
 80093fa:	429c      	cmp	r4, r3
 80093fc:	d101      	bne.n	8009402 <__swsetup_r+0x46>
 80093fe:	68ac      	ldr	r4, [r5, #8]
 8009400:	e7eb      	b.n	80093da <__swsetup_r+0x1e>
 8009402:	4b24      	ldr	r3, [pc, #144]	; (8009494 <__swsetup_r+0xd8>)
 8009404:	429c      	cmp	r4, r3
 8009406:	bf08      	it	eq
 8009408:	68ec      	ldreq	r4, [r5, #12]
 800940a:	e7e6      	b.n	80093da <__swsetup_r+0x1e>
 800940c:	0758      	lsls	r0, r3, #29
 800940e:	d512      	bpl.n	8009436 <__swsetup_r+0x7a>
 8009410:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009412:	b141      	cbz	r1, 8009426 <__swsetup_r+0x6a>
 8009414:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009418:	4299      	cmp	r1, r3
 800941a:	d002      	beq.n	8009422 <__swsetup_r+0x66>
 800941c:	4630      	mov	r0, r6
 800941e:	f7ff fb25 	bl	8008a6c <_free_r>
 8009422:	2300      	movs	r3, #0
 8009424:	6363      	str	r3, [r4, #52]	; 0x34
 8009426:	89a3      	ldrh	r3, [r4, #12]
 8009428:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800942c:	81a3      	strh	r3, [r4, #12]
 800942e:	2300      	movs	r3, #0
 8009430:	6063      	str	r3, [r4, #4]
 8009432:	6923      	ldr	r3, [r4, #16]
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	89a3      	ldrh	r3, [r4, #12]
 8009438:	f043 0308 	orr.w	r3, r3, #8
 800943c:	81a3      	strh	r3, [r4, #12]
 800943e:	6923      	ldr	r3, [r4, #16]
 8009440:	b94b      	cbnz	r3, 8009456 <__swsetup_r+0x9a>
 8009442:	89a3      	ldrh	r3, [r4, #12]
 8009444:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009448:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800944c:	d003      	beq.n	8009456 <__swsetup_r+0x9a>
 800944e:	4621      	mov	r1, r4
 8009450:	4630      	mov	r0, r6
 8009452:	f000 fa09 	bl	8009868 <__smakebuf_r>
 8009456:	89a0      	ldrh	r0, [r4, #12]
 8009458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800945c:	f010 0301 	ands.w	r3, r0, #1
 8009460:	d00a      	beq.n	8009478 <__swsetup_r+0xbc>
 8009462:	2300      	movs	r3, #0
 8009464:	60a3      	str	r3, [r4, #8]
 8009466:	6963      	ldr	r3, [r4, #20]
 8009468:	425b      	negs	r3, r3
 800946a:	61a3      	str	r3, [r4, #24]
 800946c:	6923      	ldr	r3, [r4, #16]
 800946e:	b943      	cbnz	r3, 8009482 <__swsetup_r+0xc6>
 8009470:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009474:	d1ba      	bne.n	80093ec <__swsetup_r+0x30>
 8009476:	bd70      	pop	{r4, r5, r6, pc}
 8009478:	0781      	lsls	r1, r0, #30
 800947a:	bf58      	it	pl
 800947c:	6963      	ldrpl	r3, [r4, #20]
 800947e:	60a3      	str	r3, [r4, #8]
 8009480:	e7f4      	b.n	800946c <__swsetup_r+0xb0>
 8009482:	2000      	movs	r0, #0
 8009484:	e7f7      	b.n	8009476 <__swsetup_r+0xba>
 8009486:	bf00      	nop
 8009488:	20000018 	.word	0x20000018
 800948c:	08009fec 	.word	0x08009fec
 8009490:	0800a00c 	.word	0x0800a00c
 8009494:	08009fcc 	.word	0x08009fcc

08009498 <abort>:
 8009498:	b508      	push	{r3, lr}
 800949a:	2006      	movs	r0, #6
 800949c:	f000 fa54 	bl	8009948 <raise>
 80094a0:	2001      	movs	r0, #1
 80094a2:	f7f8 f8b3 	bl	800160c <_exit>
	...

080094a8 <__sflush_r>:
 80094a8:	898a      	ldrh	r2, [r1, #12]
 80094aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094ae:	4605      	mov	r5, r0
 80094b0:	0710      	lsls	r0, r2, #28
 80094b2:	460c      	mov	r4, r1
 80094b4:	d458      	bmi.n	8009568 <__sflush_r+0xc0>
 80094b6:	684b      	ldr	r3, [r1, #4]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	dc05      	bgt.n	80094c8 <__sflush_r+0x20>
 80094bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80094be:	2b00      	cmp	r3, #0
 80094c0:	dc02      	bgt.n	80094c8 <__sflush_r+0x20>
 80094c2:	2000      	movs	r0, #0
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80094c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094ca:	2e00      	cmp	r6, #0
 80094cc:	d0f9      	beq.n	80094c2 <__sflush_r+0x1a>
 80094ce:	2300      	movs	r3, #0
 80094d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80094d4:	682f      	ldr	r7, [r5, #0]
 80094d6:	602b      	str	r3, [r5, #0]
 80094d8:	d032      	beq.n	8009540 <__sflush_r+0x98>
 80094da:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80094dc:	89a3      	ldrh	r3, [r4, #12]
 80094de:	075a      	lsls	r2, r3, #29
 80094e0:	d505      	bpl.n	80094ee <__sflush_r+0x46>
 80094e2:	6863      	ldr	r3, [r4, #4]
 80094e4:	1ac0      	subs	r0, r0, r3
 80094e6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80094e8:	b10b      	cbz	r3, 80094ee <__sflush_r+0x46>
 80094ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80094ec:	1ac0      	subs	r0, r0, r3
 80094ee:	2300      	movs	r3, #0
 80094f0:	4602      	mov	r2, r0
 80094f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80094f4:	6a21      	ldr	r1, [r4, #32]
 80094f6:	4628      	mov	r0, r5
 80094f8:	47b0      	blx	r6
 80094fa:	1c43      	adds	r3, r0, #1
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	d106      	bne.n	800950e <__sflush_r+0x66>
 8009500:	6829      	ldr	r1, [r5, #0]
 8009502:	291d      	cmp	r1, #29
 8009504:	d82c      	bhi.n	8009560 <__sflush_r+0xb8>
 8009506:	4a2a      	ldr	r2, [pc, #168]	; (80095b0 <__sflush_r+0x108>)
 8009508:	40ca      	lsrs	r2, r1
 800950a:	07d6      	lsls	r6, r2, #31
 800950c:	d528      	bpl.n	8009560 <__sflush_r+0xb8>
 800950e:	2200      	movs	r2, #0
 8009510:	6062      	str	r2, [r4, #4]
 8009512:	04d9      	lsls	r1, r3, #19
 8009514:	6922      	ldr	r2, [r4, #16]
 8009516:	6022      	str	r2, [r4, #0]
 8009518:	d504      	bpl.n	8009524 <__sflush_r+0x7c>
 800951a:	1c42      	adds	r2, r0, #1
 800951c:	d101      	bne.n	8009522 <__sflush_r+0x7a>
 800951e:	682b      	ldr	r3, [r5, #0]
 8009520:	b903      	cbnz	r3, 8009524 <__sflush_r+0x7c>
 8009522:	6560      	str	r0, [r4, #84]	; 0x54
 8009524:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009526:	602f      	str	r7, [r5, #0]
 8009528:	2900      	cmp	r1, #0
 800952a:	d0ca      	beq.n	80094c2 <__sflush_r+0x1a>
 800952c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009530:	4299      	cmp	r1, r3
 8009532:	d002      	beq.n	800953a <__sflush_r+0x92>
 8009534:	4628      	mov	r0, r5
 8009536:	f7ff fa99 	bl	8008a6c <_free_r>
 800953a:	2000      	movs	r0, #0
 800953c:	6360      	str	r0, [r4, #52]	; 0x34
 800953e:	e7c1      	b.n	80094c4 <__sflush_r+0x1c>
 8009540:	6a21      	ldr	r1, [r4, #32]
 8009542:	2301      	movs	r3, #1
 8009544:	4628      	mov	r0, r5
 8009546:	47b0      	blx	r6
 8009548:	1c41      	adds	r1, r0, #1
 800954a:	d1c7      	bne.n	80094dc <__sflush_r+0x34>
 800954c:	682b      	ldr	r3, [r5, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d0c4      	beq.n	80094dc <__sflush_r+0x34>
 8009552:	2b1d      	cmp	r3, #29
 8009554:	d001      	beq.n	800955a <__sflush_r+0xb2>
 8009556:	2b16      	cmp	r3, #22
 8009558:	d101      	bne.n	800955e <__sflush_r+0xb6>
 800955a:	602f      	str	r7, [r5, #0]
 800955c:	e7b1      	b.n	80094c2 <__sflush_r+0x1a>
 800955e:	89a3      	ldrh	r3, [r4, #12]
 8009560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009564:	81a3      	strh	r3, [r4, #12]
 8009566:	e7ad      	b.n	80094c4 <__sflush_r+0x1c>
 8009568:	690f      	ldr	r7, [r1, #16]
 800956a:	2f00      	cmp	r7, #0
 800956c:	d0a9      	beq.n	80094c2 <__sflush_r+0x1a>
 800956e:	0793      	lsls	r3, r2, #30
 8009570:	680e      	ldr	r6, [r1, #0]
 8009572:	bf08      	it	eq
 8009574:	694b      	ldreq	r3, [r1, #20]
 8009576:	600f      	str	r7, [r1, #0]
 8009578:	bf18      	it	ne
 800957a:	2300      	movne	r3, #0
 800957c:	eba6 0807 	sub.w	r8, r6, r7
 8009580:	608b      	str	r3, [r1, #8]
 8009582:	f1b8 0f00 	cmp.w	r8, #0
 8009586:	dd9c      	ble.n	80094c2 <__sflush_r+0x1a>
 8009588:	6a21      	ldr	r1, [r4, #32]
 800958a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800958c:	4643      	mov	r3, r8
 800958e:	463a      	mov	r2, r7
 8009590:	4628      	mov	r0, r5
 8009592:	47b0      	blx	r6
 8009594:	2800      	cmp	r0, #0
 8009596:	dc06      	bgt.n	80095a6 <__sflush_r+0xfe>
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800959e:	81a3      	strh	r3, [r4, #12]
 80095a0:	f04f 30ff 	mov.w	r0, #4294967295
 80095a4:	e78e      	b.n	80094c4 <__sflush_r+0x1c>
 80095a6:	4407      	add	r7, r0
 80095a8:	eba8 0800 	sub.w	r8, r8, r0
 80095ac:	e7e9      	b.n	8009582 <__sflush_r+0xda>
 80095ae:	bf00      	nop
 80095b0:	20400001 	.word	0x20400001

080095b4 <_fflush_r>:
 80095b4:	b538      	push	{r3, r4, r5, lr}
 80095b6:	690b      	ldr	r3, [r1, #16]
 80095b8:	4605      	mov	r5, r0
 80095ba:	460c      	mov	r4, r1
 80095bc:	b913      	cbnz	r3, 80095c4 <_fflush_r+0x10>
 80095be:	2500      	movs	r5, #0
 80095c0:	4628      	mov	r0, r5
 80095c2:	bd38      	pop	{r3, r4, r5, pc}
 80095c4:	b118      	cbz	r0, 80095ce <_fflush_r+0x1a>
 80095c6:	6983      	ldr	r3, [r0, #24]
 80095c8:	b90b      	cbnz	r3, 80095ce <_fflush_r+0x1a>
 80095ca:	f000 f887 	bl	80096dc <__sinit>
 80095ce:	4b14      	ldr	r3, [pc, #80]	; (8009620 <_fflush_r+0x6c>)
 80095d0:	429c      	cmp	r4, r3
 80095d2:	d11b      	bne.n	800960c <_fflush_r+0x58>
 80095d4:	686c      	ldr	r4, [r5, #4]
 80095d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d0ef      	beq.n	80095be <_fflush_r+0xa>
 80095de:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80095e0:	07d0      	lsls	r0, r2, #31
 80095e2:	d404      	bmi.n	80095ee <_fflush_r+0x3a>
 80095e4:	0599      	lsls	r1, r3, #22
 80095e6:	d402      	bmi.n	80095ee <_fflush_r+0x3a>
 80095e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80095ea:	f000 f915 	bl	8009818 <__retarget_lock_acquire_recursive>
 80095ee:	4628      	mov	r0, r5
 80095f0:	4621      	mov	r1, r4
 80095f2:	f7ff ff59 	bl	80094a8 <__sflush_r>
 80095f6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80095f8:	07da      	lsls	r2, r3, #31
 80095fa:	4605      	mov	r5, r0
 80095fc:	d4e0      	bmi.n	80095c0 <_fflush_r+0xc>
 80095fe:	89a3      	ldrh	r3, [r4, #12]
 8009600:	059b      	lsls	r3, r3, #22
 8009602:	d4dd      	bmi.n	80095c0 <_fflush_r+0xc>
 8009604:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009606:	f000 f908 	bl	800981a <__retarget_lock_release_recursive>
 800960a:	e7d9      	b.n	80095c0 <_fflush_r+0xc>
 800960c:	4b05      	ldr	r3, [pc, #20]	; (8009624 <_fflush_r+0x70>)
 800960e:	429c      	cmp	r4, r3
 8009610:	d101      	bne.n	8009616 <_fflush_r+0x62>
 8009612:	68ac      	ldr	r4, [r5, #8]
 8009614:	e7df      	b.n	80095d6 <_fflush_r+0x22>
 8009616:	4b04      	ldr	r3, [pc, #16]	; (8009628 <_fflush_r+0x74>)
 8009618:	429c      	cmp	r4, r3
 800961a:	bf08      	it	eq
 800961c:	68ec      	ldreq	r4, [r5, #12]
 800961e:	e7da      	b.n	80095d6 <_fflush_r+0x22>
 8009620:	08009fec 	.word	0x08009fec
 8009624:	0800a00c 	.word	0x0800a00c
 8009628:	08009fcc 	.word	0x08009fcc

0800962c <std>:
 800962c:	2300      	movs	r3, #0
 800962e:	b510      	push	{r4, lr}
 8009630:	4604      	mov	r4, r0
 8009632:	e9c0 3300 	strd	r3, r3, [r0]
 8009636:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800963a:	6083      	str	r3, [r0, #8]
 800963c:	8181      	strh	r1, [r0, #12]
 800963e:	6643      	str	r3, [r0, #100]	; 0x64
 8009640:	81c2      	strh	r2, [r0, #14]
 8009642:	6183      	str	r3, [r0, #24]
 8009644:	4619      	mov	r1, r3
 8009646:	2208      	movs	r2, #8
 8009648:	305c      	adds	r0, #92	; 0x5c
 800964a:	f7fb fdcb 	bl	80051e4 <memset>
 800964e:	4b05      	ldr	r3, [pc, #20]	; (8009664 <std+0x38>)
 8009650:	6263      	str	r3, [r4, #36]	; 0x24
 8009652:	4b05      	ldr	r3, [pc, #20]	; (8009668 <std+0x3c>)
 8009654:	62a3      	str	r3, [r4, #40]	; 0x28
 8009656:	4b05      	ldr	r3, [pc, #20]	; (800966c <std+0x40>)
 8009658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800965a:	4b05      	ldr	r3, [pc, #20]	; (8009670 <std+0x44>)
 800965c:	6224      	str	r4, [r4, #32]
 800965e:	6323      	str	r3, [r4, #48]	; 0x30
 8009660:	bd10      	pop	{r4, pc}
 8009662:	bf00      	nop
 8009664:	08009981 	.word	0x08009981
 8009668:	080099a3 	.word	0x080099a3
 800966c:	080099db 	.word	0x080099db
 8009670:	080099ff 	.word	0x080099ff

08009674 <_cleanup_r>:
 8009674:	4901      	ldr	r1, [pc, #4]	; (800967c <_cleanup_r+0x8>)
 8009676:	f000 b8af 	b.w	80097d8 <_fwalk_reent>
 800967a:	bf00      	nop
 800967c:	080095b5 	.word	0x080095b5

08009680 <__sfmoreglue>:
 8009680:	b570      	push	{r4, r5, r6, lr}
 8009682:	2268      	movs	r2, #104	; 0x68
 8009684:	1e4d      	subs	r5, r1, #1
 8009686:	4355      	muls	r5, r2
 8009688:	460e      	mov	r6, r1
 800968a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800968e:	f7ff fa59 	bl	8008b44 <_malloc_r>
 8009692:	4604      	mov	r4, r0
 8009694:	b140      	cbz	r0, 80096a8 <__sfmoreglue+0x28>
 8009696:	2100      	movs	r1, #0
 8009698:	e9c0 1600 	strd	r1, r6, [r0]
 800969c:	300c      	adds	r0, #12
 800969e:	60a0      	str	r0, [r4, #8]
 80096a0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80096a4:	f7fb fd9e 	bl	80051e4 <memset>
 80096a8:	4620      	mov	r0, r4
 80096aa:	bd70      	pop	{r4, r5, r6, pc}

080096ac <__sfp_lock_acquire>:
 80096ac:	4801      	ldr	r0, [pc, #4]	; (80096b4 <__sfp_lock_acquire+0x8>)
 80096ae:	f000 b8b3 	b.w	8009818 <__retarget_lock_acquire_recursive>
 80096b2:	bf00      	nop
 80096b4:	20000721 	.word	0x20000721

080096b8 <__sfp_lock_release>:
 80096b8:	4801      	ldr	r0, [pc, #4]	; (80096c0 <__sfp_lock_release+0x8>)
 80096ba:	f000 b8ae 	b.w	800981a <__retarget_lock_release_recursive>
 80096be:	bf00      	nop
 80096c0:	20000721 	.word	0x20000721

080096c4 <__sinit_lock_acquire>:
 80096c4:	4801      	ldr	r0, [pc, #4]	; (80096cc <__sinit_lock_acquire+0x8>)
 80096c6:	f000 b8a7 	b.w	8009818 <__retarget_lock_acquire_recursive>
 80096ca:	bf00      	nop
 80096cc:	20000722 	.word	0x20000722

080096d0 <__sinit_lock_release>:
 80096d0:	4801      	ldr	r0, [pc, #4]	; (80096d8 <__sinit_lock_release+0x8>)
 80096d2:	f000 b8a2 	b.w	800981a <__retarget_lock_release_recursive>
 80096d6:	bf00      	nop
 80096d8:	20000722 	.word	0x20000722

080096dc <__sinit>:
 80096dc:	b510      	push	{r4, lr}
 80096de:	4604      	mov	r4, r0
 80096e0:	f7ff fff0 	bl	80096c4 <__sinit_lock_acquire>
 80096e4:	69a3      	ldr	r3, [r4, #24]
 80096e6:	b11b      	cbz	r3, 80096f0 <__sinit+0x14>
 80096e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096ec:	f7ff bff0 	b.w	80096d0 <__sinit_lock_release>
 80096f0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096f4:	6523      	str	r3, [r4, #80]	; 0x50
 80096f6:	4b13      	ldr	r3, [pc, #76]	; (8009744 <__sinit+0x68>)
 80096f8:	4a13      	ldr	r2, [pc, #76]	; (8009748 <__sinit+0x6c>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	62a2      	str	r2, [r4, #40]	; 0x28
 80096fe:	42a3      	cmp	r3, r4
 8009700:	bf04      	itt	eq
 8009702:	2301      	moveq	r3, #1
 8009704:	61a3      	streq	r3, [r4, #24]
 8009706:	4620      	mov	r0, r4
 8009708:	f000 f820 	bl	800974c <__sfp>
 800970c:	6060      	str	r0, [r4, #4]
 800970e:	4620      	mov	r0, r4
 8009710:	f000 f81c 	bl	800974c <__sfp>
 8009714:	60a0      	str	r0, [r4, #8]
 8009716:	4620      	mov	r0, r4
 8009718:	f000 f818 	bl	800974c <__sfp>
 800971c:	2200      	movs	r2, #0
 800971e:	60e0      	str	r0, [r4, #12]
 8009720:	2104      	movs	r1, #4
 8009722:	6860      	ldr	r0, [r4, #4]
 8009724:	f7ff ff82 	bl	800962c <std>
 8009728:	68a0      	ldr	r0, [r4, #8]
 800972a:	2201      	movs	r2, #1
 800972c:	2109      	movs	r1, #9
 800972e:	f7ff ff7d 	bl	800962c <std>
 8009732:	68e0      	ldr	r0, [r4, #12]
 8009734:	2202      	movs	r2, #2
 8009736:	2112      	movs	r1, #18
 8009738:	f7ff ff78 	bl	800962c <std>
 800973c:	2301      	movs	r3, #1
 800973e:	61a3      	str	r3, [r4, #24]
 8009740:	e7d2      	b.n	80096e8 <__sinit+0xc>
 8009742:	bf00      	nop
 8009744:	08009b84 	.word	0x08009b84
 8009748:	08009675 	.word	0x08009675

0800974c <__sfp>:
 800974c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800974e:	4607      	mov	r7, r0
 8009750:	f7ff ffac 	bl	80096ac <__sfp_lock_acquire>
 8009754:	4b1e      	ldr	r3, [pc, #120]	; (80097d0 <__sfp+0x84>)
 8009756:	681e      	ldr	r6, [r3, #0]
 8009758:	69b3      	ldr	r3, [r6, #24]
 800975a:	b913      	cbnz	r3, 8009762 <__sfp+0x16>
 800975c:	4630      	mov	r0, r6
 800975e:	f7ff ffbd 	bl	80096dc <__sinit>
 8009762:	3648      	adds	r6, #72	; 0x48
 8009764:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009768:	3b01      	subs	r3, #1
 800976a:	d503      	bpl.n	8009774 <__sfp+0x28>
 800976c:	6833      	ldr	r3, [r6, #0]
 800976e:	b30b      	cbz	r3, 80097b4 <__sfp+0x68>
 8009770:	6836      	ldr	r6, [r6, #0]
 8009772:	e7f7      	b.n	8009764 <__sfp+0x18>
 8009774:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009778:	b9d5      	cbnz	r5, 80097b0 <__sfp+0x64>
 800977a:	4b16      	ldr	r3, [pc, #88]	; (80097d4 <__sfp+0x88>)
 800977c:	60e3      	str	r3, [r4, #12]
 800977e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009782:	6665      	str	r5, [r4, #100]	; 0x64
 8009784:	f000 f847 	bl	8009816 <__retarget_lock_init_recursive>
 8009788:	f7ff ff96 	bl	80096b8 <__sfp_lock_release>
 800978c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009790:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009794:	6025      	str	r5, [r4, #0]
 8009796:	61a5      	str	r5, [r4, #24]
 8009798:	2208      	movs	r2, #8
 800979a:	4629      	mov	r1, r5
 800979c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80097a0:	f7fb fd20 	bl	80051e4 <memset>
 80097a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80097a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80097ac:	4620      	mov	r0, r4
 80097ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097b0:	3468      	adds	r4, #104	; 0x68
 80097b2:	e7d9      	b.n	8009768 <__sfp+0x1c>
 80097b4:	2104      	movs	r1, #4
 80097b6:	4638      	mov	r0, r7
 80097b8:	f7ff ff62 	bl	8009680 <__sfmoreglue>
 80097bc:	4604      	mov	r4, r0
 80097be:	6030      	str	r0, [r6, #0]
 80097c0:	2800      	cmp	r0, #0
 80097c2:	d1d5      	bne.n	8009770 <__sfp+0x24>
 80097c4:	f7ff ff78 	bl	80096b8 <__sfp_lock_release>
 80097c8:	230c      	movs	r3, #12
 80097ca:	603b      	str	r3, [r7, #0]
 80097cc:	e7ee      	b.n	80097ac <__sfp+0x60>
 80097ce:	bf00      	nop
 80097d0:	08009b84 	.word	0x08009b84
 80097d4:	ffff0001 	.word	0xffff0001

080097d8 <_fwalk_reent>:
 80097d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097dc:	4606      	mov	r6, r0
 80097de:	4688      	mov	r8, r1
 80097e0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097e4:	2700      	movs	r7, #0
 80097e6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097ea:	f1b9 0901 	subs.w	r9, r9, #1
 80097ee:	d505      	bpl.n	80097fc <_fwalk_reent+0x24>
 80097f0:	6824      	ldr	r4, [r4, #0]
 80097f2:	2c00      	cmp	r4, #0
 80097f4:	d1f7      	bne.n	80097e6 <_fwalk_reent+0xe>
 80097f6:	4638      	mov	r0, r7
 80097f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097fc:	89ab      	ldrh	r3, [r5, #12]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d907      	bls.n	8009812 <_fwalk_reent+0x3a>
 8009802:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009806:	3301      	adds	r3, #1
 8009808:	d003      	beq.n	8009812 <_fwalk_reent+0x3a>
 800980a:	4629      	mov	r1, r5
 800980c:	4630      	mov	r0, r6
 800980e:	47c0      	blx	r8
 8009810:	4307      	orrs	r7, r0
 8009812:	3568      	adds	r5, #104	; 0x68
 8009814:	e7e9      	b.n	80097ea <_fwalk_reent+0x12>

08009816 <__retarget_lock_init_recursive>:
 8009816:	4770      	bx	lr

08009818 <__retarget_lock_acquire_recursive>:
 8009818:	4770      	bx	lr

0800981a <__retarget_lock_release_recursive>:
 800981a:	4770      	bx	lr

0800981c <__swhatbuf_r>:
 800981c:	b570      	push	{r4, r5, r6, lr}
 800981e:	460e      	mov	r6, r1
 8009820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009824:	2900      	cmp	r1, #0
 8009826:	b096      	sub	sp, #88	; 0x58
 8009828:	4614      	mov	r4, r2
 800982a:	461d      	mov	r5, r3
 800982c:	da08      	bge.n	8009840 <__swhatbuf_r+0x24>
 800982e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009832:	2200      	movs	r2, #0
 8009834:	602a      	str	r2, [r5, #0]
 8009836:	061a      	lsls	r2, r3, #24
 8009838:	d410      	bmi.n	800985c <__swhatbuf_r+0x40>
 800983a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800983e:	e00e      	b.n	800985e <__swhatbuf_r+0x42>
 8009840:	466a      	mov	r2, sp
 8009842:	f000 f903 	bl	8009a4c <_fstat_r>
 8009846:	2800      	cmp	r0, #0
 8009848:	dbf1      	blt.n	800982e <__swhatbuf_r+0x12>
 800984a:	9a01      	ldr	r2, [sp, #4]
 800984c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009850:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009854:	425a      	negs	r2, r3
 8009856:	415a      	adcs	r2, r3
 8009858:	602a      	str	r2, [r5, #0]
 800985a:	e7ee      	b.n	800983a <__swhatbuf_r+0x1e>
 800985c:	2340      	movs	r3, #64	; 0x40
 800985e:	2000      	movs	r0, #0
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	b016      	add	sp, #88	; 0x58
 8009864:	bd70      	pop	{r4, r5, r6, pc}
	...

08009868 <__smakebuf_r>:
 8009868:	898b      	ldrh	r3, [r1, #12]
 800986a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800986c:	079d      	lsls	r5, r3, #30
 800986e:	4606      	mov	r6, r0
 8009870:	460c      	mov	r4, r1
 8009872:	d507      	bpl.n	8009884 <__smakebuf_r+0x1c>
 8009874:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009878:	6023      	str	r3, [r4, #0]
 800987a:	6123      	str	r3, [r4, #16]
 800987c:	2301      	movs	r3, #1
 800987e:	6163      	str	r3, [r4, #20]
 8009880:	b002      	add	sp, #8
 8009882:	bd70      	pop	{r4, r5, r6, pc}
 8009884:	ab01      	add	r3, sp, #4
 8009886:	466a      	mov	r2, sp
 8009888:	f7ff ffc8 	bl	800981c <__swhatbuf_r>
 800988c:	9900      	ldr	r1, [sp, #0]
 800988e:	4605      	mov	r5, r0
 8009890:	4630      	mov	r0, r6
 8009892:	f7ff f957 	bl	8008b44 <_malloc_r>
 8009896:	b948      	cbnz	r0, 80098ac <__smakebuf_r+0x44>
 8009898:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800989c:	059a      	lsls	r2, r3, #22
 800989e:	d4ef      	bmi.n	8009880 <__smakebuf_r+0x18>
 80098a0:	f023 0303 	bic.w	r3, r3, #3
 80098a4:	f043 0302 	orr.w	r3, r3, #2
 80098a8:	81a3      	strh	r3, [r4, #12]
 80098aa:	e7e3      	b.n	8009874 <__smakebuf_r+0xc>
 80098ac:	4b0d      	ldr	r3, [pc, #52]	; (80098e4 <__smakebuf_r+0x7c>)
 80098ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80098b0:	89a3      	ldrh	r3, [r4, #12]
 80098b2:	6020      	str	r0, [r4, #0]
 80098b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80098b8:	81a3      	strh	r3, [r4, #12]
 80098ba:	9b00      	ldr	r3, [sp, #0]
 80098bc:	6163      	str	r3, [r4, #20]
 80098be:	9b01      	ldr	r3, [sp, #4]
 80098c0:	6120      	str	r0, [r4, #16]
 80098c2:	b15b      	cbz	r3, 80098dc <__smakebuf_r+0x74>
 80098c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098c8:	4630      	mov	r0, r6
 80098ca:	f000 f8d1 	bl	8009a70 <_isatty_r>
 80098ce:	b128      	cbz	r0, 80098dc <__smakebuf_r+0x74>
 80098d0:	89a3      	ldrh	r3, [r4, #12]
 80098d2:	f023 0303 	bic.w	r3, r3, #3
 80098d6:	f043 0301 	orr.w	r3, r3, #1
 80098da:	81a3      	strh	r3, [r4, #12]
 80098dc:	89a0      	ldrh	r0, [r4, #12]
 80098de:	4305      	orrs	r5, r0
 80098e0:	81a5      	strh	r5, [r4, #12]
 80098e2:	e7cd      	b.n	8009880 <__smakebuf_r+0x18>
 80098e4:	08009675 	.word	0x08009675

080098e8 <_malloc_usable_size_r>:
 80098e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ec:	1f18      	subs	r0, r3, #4
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	bfbc      	itt	lt
 80098f2:	580b      	ldrlt	r3, [r1, r0]
 80098f4:	18c0      	addlt	r0, r0, r3
 80098f6:	4770      	bx	lr

080098f8 <_raise_r>:
 80098f8:	291f      	cmp	r1, #31
 80098fa:	b538      	push	{r3, r4, r5, lr}
 80098fc:	4604      	mov	r4, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	d904      	bls.n	800990c <_raise_r+0x14>
 8009902:	2316      	movs	r3, #22
 8009904:	6003      	str	r3, [r0, #0]
 8009906:	f04f 30ff 	mov.w	r0, #4294967295
 800990a:	bd38      	pop	{r3, r4, r5, pc}
 800990c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800990e:	b112      	cbz	r2, 8009916 <_raise_r+0x1e>
 8009910:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009914:	b94b      	cbnz	r3, 800992a <_raise_r+0x32>
 8009916:	4620      	mov	r0, r4
 8009918:	f000 f830 	bl	800997c <_getpid_r>
 800991c:	462a      	mov	r2, r5
 800991e:	4601      	mov	r1, r0
 8009920:	4620      	mov	r0, r4
 8009922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009926:	f000 b817 	b.w	8009958 <_kill_r>
 800992a:	2b01      	cmp	r3, #1
 800992c:	d00a      	beq.n	8009944 <_raise_r+0x4c>
 800992e:	1c59      	adds	r1, r3, #1
 8009930:	d103      	bne.n	800993a <_raise_r+0x42>
 8009932:	2316      	movs	r3, #22
 8009934:	6003      	str	r3, [r0, #0]
 8009936:	2001      	movs	r0, #1
 8009938:	e7e7      	b.n	800990a <_raise_r+0x12>
 800993a:	2400      	movs	r4, #0
 800993c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009940:	4628      	mov	r0, r5
 8009942:	4798      	blx	r3
 8009944:	2000      	movs	r0, #0
 8009946:	e7e0      	b.n	800990a <_raise_r+0x12>

08009948 <raise>:
 8009948:	4b02      	ldr	r3, [pc, #8]	; (8009954 <raise+0xc>)
 800994a:	4601      	mov	r1, r0
 800994c:	6818      	ldr	r0, [r3, #0]
 800994e:	f7ff bfd3 	b.w	80098f8 <_raise_r>
 8009952:	bf00      	nop
 8009954:	20000018 	.word	0x20000018

08009958 <_kill_r>:
 8009958:	b538      	push	{r3, r4, r5, lr}
 800995a:	4d07      	ldr	r5, [pc, #28]	; (8009978 <_kill_r+0x20>)
 800995c:	2300      	movs	r3, #0
 800995e:	4604      	mov	r4, r0
 8009960:	4608      	mov	r0, r1
 8009962:	4611      	mov	r1, r2
 8009964:	602b      	str	r3, [r5, #0]
 8009966:	f7f7 fe41 	bl	80015ec <_kill>
 800996a:	1c43      	adds	r3, r0, #1
 800996c:	d102      	bne.n	8009974 <_kill_r+0x1c>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	b103      	cbz	r3, 8009974 <_kill_r+0x1c>
 8009972:	6023      	str	r3, [r4, #0]
 8009974:	bd38      	pop	{r3, r4, r5, pc}
 8009976:	bf00      	nop
 8009978:	2000071c 	.word	0x2000071c

0800997c <_getpid_r>:
 800997c:	f7f7 be2e 	b.w	80015dc <_getpid>

08009980 <__sread>:
 8009980:	b510      	push	{r4, lr}
 8009982:	460c      	mov	r4, r1
 8009984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009988:	f000 f894 	bl	8009ab4 <_read_r>
 800998c:	2800      	cmp	r0, #0
 800998e:	bfab      	itete	ge
 8009990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009992:	89a3      	ldrhlt	r3, [r4, #12]
 8009994:	181b      	addge	r3, r3, r0
 8009996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800999a:	bfac      	ite	ge
 800999c:	6563      	strge	r3, [r4, #84]	; 0x54
 800999e:	81a3      	strhlt	r3, [r4, #12]
 80099a0:	bd10      	pop	{r4, pc}

080099a2 <__swrite>:
 80099a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80099a6:	461f      	mov	r7, r3
 80099a8:	898b      	ldrh	r3, [r1, #12]
 80099aa:	05db      	lsls	r3, r3, #23
 80099ac:	4605      	mov	r5, r0
 80099ae:	460c      	mov	r4, r1
 80099b0:	4616      	mov	r6, r2
 80099b2:	d505      	bpl.n	80099c0 <__swrite+0x1e>
 80099b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099b8:	2302      	movs	r3, #2
 80099ba:	2200      	movs	r2, #0
 80099bc:	f000 f868 	bl	8009a90 <_lseek_r>
 80099c0:	89a3      	ldrh	r3, [r4, #12]
 80099c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099ca:	81a3      	strh	r3, [r4, #12]
 80099cc:	4632      	mov	r2, r6
 80099ce:	463b      	mov	r3, r7
 80099d0:	4628      	mov	r0, r5
 80099d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80099d6:	f000 b817 	b.w	8009a08 <_write_r>

080099da <__sseek>:
 80099da:	b510      	push	{r4, lr}
 80099dc:	460c      	mov	r4, r1
 80099de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80099e2:	f000 f855 	bl	8009a90 <_lseek_r>
 80099e6:	1c43      	adds	r3, r0, #1
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	bf15      	itete	ne
 80099ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80099ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80099f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80099f6:	81a3      	strheq	r3, [r4, #12]
 80099f8:	bf18      	it	ne
 80099fa:	81a3      	strhne	r3, [r4, #12]
 80099fc:	bd10      	pop	{r4, pc}

080099fe <__sclose>:
 80099fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a02:	f000 b813 	b.w	8009a2c <_close_r>
	...

08009a08 <_write_r>:
 8009a08:	b538      	push	{r3, r4, r5, lr}
 8009a0a:	4d07      	ldr	r5, [pc, #28]	; (8009a28 <_write_r+0x20>)
 8009a0c:	4604      	mov	r4, r0
 8009a0e:	4608      	mov	r0, r1
 8009a10:	4611      	mov	r1, r2
 8009a12:	2200      	movs	r2, #0
 8009a14:	602a      	str	r2, [r5, #0]
 8009a16:	461a      	mov	r2, r3
 8009a18:	f7f7 fe1f 	bl	800165a <_write>
 8009a1c:	1c43      	adds	r3, r0, #1
 8009a1e:	d102      	bne.n	8009a26 <_write_r+0x1e>
 8009a20:	682b      	ldr	r3, [r5, #0]
 8009a22:	b103      	cbz	r3, 8009a26 <_write_r+0x1e>
 8009a24:	6023      	str	r3, [r4, #0]
 8009a26:	bd38      	pop	{r3, r4, r5, pc}
 8009a28:	2000071c 	.word	0x2000071c

08009a2c <_close_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	4d06      	ldr	r5, [pc, #24]	; (8009a48 <_close_r+0x1c>)
 8009a30:	2300      	movs	r3, #0
 8009a32:	4604      	mov	r4, r0
 8009a34:	4608      	mov	r0, r1
 8009a36:	602b      	str	r3, [r5, #0]
 8009a38:	f7f7 fe2b 	bl	8001692 <_close>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	d102      	bne.n	8009a46 <_close_r+0x1a>
 8009a40:	682b      	ldr	r3, [r5, #0]
 8009a42:	b103      	cbz	r3, 8009a46 <_close_r+0x1a>
 8009a44:	6023      	str	r3, [r4, #0]
 8009a46:	bd38      	pop	{r3, r4, r5, pc}
 8009a48:	2000071c 	.word	0x2000071c

08009a4c <_fstat_r>:
 8009a4c:	b538      	push	{r3, r4, r5, lr}
 8009a4e:	4d07      	ldr	r5, [pc, #28]	; (8009a6c <_fstat_r+0x20>)
 8009a50:	2300      	movs	r3, #0
 8009a52:	4604      	mov	r4, r0
 8009a54:	4608      	mov	r0, r1
 8009a56:	4611      	mov	r1, r2
 8009a58:	602b      	str	r3, [r5, #0]
 8009a5a:	f7f7 fe26 	bl	80016aa <_fstat>
 8009a5e:	1c43      	adds	r3, r0, #1
 8009a60:	d102      	bne.n	8009a68 <_fstat_r+0x1c>
 8009a62:	682b      	ldr	r3, [r5, #0]
 8009a64:	b103      	cbz	r3, 8009a68 <_fstat_r+0x1c>
 8009a66:	6023      	str	r3, [r4, #0]
 8009a68:	bd38      	pop	{r3, r4, r5, pc}
 8009a6a:	bf00      	nop
 8009a6c:	2000071c 	.word	0x2000071c

08009a70 <_isatty_r>:
 8009a70:	b538      	push	{r3, r4, r5, lr}
 8009a72:	4d06      	ldr	r5, [pc, #24]	; (8009a8c <_isatty_r+0x1c>)
 8009a74:	2300      	movs	r3, #0
 8009a76:	4604      	mov	r4, r0
 8009a78:	4608      	mov	r0, r1
 8009a7a:	602b      	str	r3, [r5, #0]
 8009a7c:	f7f7 fe25 	bl	80016ca <_isatty>
 8009a80:	1c43      	adds	r3, r0, #1
 8009a82:	d102      	bne.n	8009a8a <_isatty_r+0x1a>
 8009a84:	682b      	ldr	r3, [r5, #0]
 8009a86:	b103      	cbz	r3, 8009a8a <_isatty_r+0x1a>
 8009a88:	6023      	str	r3, [r4, #0]
 8009a8a:	bd38      	pop	{r3, r4, r5, pc}
 8009a8c:	2000071c 	.word	0x2000071c

08009a90 <_lseek_r>:
 8009a90:	b538      	push	{r3, r4, r5, lr}
 8009a92:	4d07      	ldr	r5, [pc, #28]	; (8009ab0 <_lseek_r+0x20>)
 8009a94:	4604      	mov	r4, r0
 8009a96:	4608      	mov	r0, r1
 8009a98:	4611      	mov	r1, r2
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	602a      	str	r2, [r5, #0]
 8009a9e:	461a      	mov	r2, r3
 8009aa0:	f7f7 fe1e 	bl	80016e0 <_lseek>
 8009aa4:	1c43      	adds	r3, r0, #1
 8009aa6:	d102      	bne.n	8009aae <_lseek_r+0x1e>
 8009aa8:	682b      	ldr	r3, [r5, #0]
 8009aaa:	b103      	cbz	r3, 8009aae <_lseek_r+0x1e>
 8009aac:	6023      	str	r3, [r4, #0]
 8009aae:	bd38      	pop	{r3, r4, r5, pc}
 8009ab0:	2000071c 	.word	0x2000071c

08009ab4 <_read_r>:
 8009ab4:	b538      	push	{r3, r4, r5, lr}
 8009ab6:	4d07      	ldr	r5, [pc, #28]	; (8009ad4 <_read_r+0x20>)
 8009ab8:	4604      	mov	r4, r0
 8009aba:	4608      	mov	r0, r1
 8009abc:	4611      	mov	r1, r2
 8009abe:	2200      	movs	r2, #0
 8009ac0:	602a      	str	r2, [r5, #0]
 8009ac2:	461a      	mov	r2, r3
 8009ac4:	f7f7 fdac 	bl	8001620 <_read>
 8009ac8:	1c43      	adds	r3, r0, #1
 8009aca:	d102      	bne.n	8009ad2 <_read_r+0x1e>
 8009acc:	682b      	ldr	r3, [r5, #0]
 8009ace:	b103      	cbz	r3, 8009ad2 <_read_r+0x1e>
 8009ad0:	6023      	str	r3, [r4, #0]
 8009ad2:	bd38      	pop	{r3, r4, r5, pc}
 8009ad4:	2000071c 	.word	0x2000071c

08009ad8 <_init>:
 8009ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ada:	bf00      	nop
 8009adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ade:	bc08      	pop	{r3}
 8009ae0:	469e      	mov	lr, r3
 8009ae2:	4770      	bx	lr

08009ae4 <_fini>:
 8009ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ae6:	bf00      	nop
 8009ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aea:	bc08      	pop	{r3}
 8009aec:	469e      	mov	lr, r3
 8009aee:	4770      	bx	lr
